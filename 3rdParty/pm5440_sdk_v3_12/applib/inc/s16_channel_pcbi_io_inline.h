/******************************************************************************
 *   COPYRIGHT (C) 2013 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the s16_channel_pcbi block
 *****************************************************************************/
#ifndef _S16_CHANNEL_PCBI_IO_INLINE_H
#define _S16_CHANNEL_PCBI_IO_INLINE_H

#include "s16_loc.h"
#include "s16_channel_pcbi_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define S16_CHANNEL_PCBI_IO_VERSION 2

/*
 * ==================================================================================
 *  tsb level structure and access functions for s16_channel_pcbi
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) LOG( __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) LOG( "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) LOG_DATA( __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    s16_handle_t * h_ptr;
    UINT32 A;
    pmc_sys_handle_t * sys_handle;
    PMC_VAR_CONST UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} s16_channel_pcbi_buffer_t;
static INLINE void s16_channel_pcbi_buffer_init( s16_channel_pcbi_buffer_t *b_ptr,
                                                 s16_handle_t *h_ptr,
                                                 UINT32 A ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_buffer_init( s16_channel_pcbi_buffer_t *b_ptr,
                                                 s16_handle_t *h_ptr,
                                                 UINT32 A )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->A                        = A;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = (((pmc_handle_t *)h_ptr)->base_address + ((0)*0x1000) );
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s A=%d", "s16_channel_pcbi_buffer_init", A);
    
}

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void s16_channel_pcbi_buffer_flush( s16_channel_pcbi_buffer_t *b_ptr ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_buffer_flush( s16_channel_pcbi_buffer_t *b_ptr )
{
    IOLOG( "s16_channel_pcbi_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 s16_channel_pcbi_reg_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                s16_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 mem_type,
                                                UINT32 reg ) ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                s16_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 mem_type,
                                                UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                (b_ptr->base_address + (b_ptr->A)*0x1000),
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                (((pmc_handle_t *)h_ptr)->base_address + (A)*0x1000) + reg);
    return value;
}
static INLINE void s16_channel_pcbi_reg_write( s16_channel_pcbi_buffer_t *b_ptr,
                                               s16_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 mem_type,
                                               UINT32 reg,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_write( s16_channel_pcbi_buffer_t *b_ptr,
                                               s16_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 mem_type,
                                               UINT32 reg,
                                               UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         (b_ptr->base_address + (b_ptr->A)*0x1000),
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x1000) + reg,
                         value);
}

static INLINE void s16_channel_pcbi_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                               s16_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 mem_type,
                                               UINT32 reg,
                                               UINT32 mask,
                                               UINT32 unused_mask,
                                               UINT32 ofs,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                               s16_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 mem_type,
                                               UINT32 reg,
                                               UINT32 mask,
                                               UINT32 unused_mask,
                                               UINT32 ofs,
                                               UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x1000),
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             (((pmc_handle_t *)h_ptr)->base_address + (A)*0x1000) + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x1000) + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void s16_channel_pcbi_action_on_write_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 mem_type,
                                                               UINT32 reg,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_action_on_write_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 mem_type,
                                                               UINT32 reg,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         (b_ptr->base_address + (b_ptr->A)*0x1000),
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x1000) + reg,
                         value<<ofs);
}

static INLINE void s16_channel_pcbi_burst_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                s16_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 mem_type,
                                                UINT32 reg,
                                                UINT32 len,
                                                UINT32 *value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_burst_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                s16_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 mem_type,
                                                UINT32 reg,
                                                UINT32 len,
                                                UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x1000),
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          (((pmc_handle_t *)h_ptr)->base_address + (A)*0x1000) + reg,
                          len,
                          value);
}

static INLINE void s16_channel_pcbi_burst_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                 s16_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 mem_type,
                                                 UINT32 reg,
                                                 UINT32 len,
                                                 UINT32 *value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_burst_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                 s16_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 mem_type,
                                                 UINT32 reg,
                                                 UINT32 len,
                                                 UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x1000),
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x1000) + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 mem_type,
                                                          UINT32 reg,
                                                          UINT32 mask,
                                                          UINT32 value,
                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                          UINT32 max_count,
                                                          UINT32 *num_failed_polls,
                                                          UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 mem_type,
                                                          UINT32 reg,
                                                          UINT32 mask,
                                                          UINT32 value,
                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                          UINT32 max_count,
                                                          UINT32 *num_failed_polls,
                                                          UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x1000),
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x1000) + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for s16_channel_pcbi
 * ==================================================================================
 */

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A,
                                                                                      UINT32 mask,
                                                                                      UINT32 ofs,
                                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A,
                                                                                      UINT32 mask,
                                                                                      UINT32 ofs,
                                                                                      UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 mask,
                                                                                     UINT32 ofs,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 mask,
                                                                                     UINT32 ofs,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 mask,
                                                                                     UINT32 ofs,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 mask,
                                                                                     UINT32 ofs,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                           s16_handle_t *h_ptr,
                                                                                           UINT32 A,
                                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                           s16_handle_t *h_ptr,
                                                                                           UINT32 A,
                                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                               s16_handle_t *h_ptr,
                                                                                               UINT32 A,
                                                                                               UINT32 mask,
                                                                                               UINT32 ofs,
                                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                               s16_handle_t *h_ptr,
                                                                                               UINT32 A,
                                                                                               UINT32 mask,
                                                                                               UINT32 ofs,
                                                                                               UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                           s16_handle_t *h_ptr,
                                                                                           UINT32 A,
                                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                           s16_handle_t *h_ptr,
                                                                                           UINT32 A,
                                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                               s16_handle_t *h_ptr,
                                                                                               UINT32 A,
                                                                                               UINT32 mask,
                                                                                               UINT32 ofs,
                                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                               s16_handle_t *h_ptr,
                                                                                               UINT32 A,
                                                                                               UINT32 mask,
                                                                                               UINT32 ofs,
                                                                                               UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 mask,
                                                                                    UINT32 ofs,
                                                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A,
                                                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                s16_handle_t *h_ptr,
                                                                                                UINT32 A,
                                                                                                UINT32 mask,
                                                                                                UINT32 ofs,
                                                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                             s16_handle_t *h_ptr,
                                                                                             UINT32 A,
                                                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 ofs,
                                                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A,
                                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A,
                                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                  s16_handle_t *h_ptr,
                                                                                                  UINT32 A,
                                                                                                  UINT32 mask,
                                                                                                  UINT32 ofs,
                                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                  s16_handle_t *h_ptr,
                                                                                                  UINT32 A,
                                                                                                  UINT32 mask,
                                                                                                  UINT32 ofs,
                                                                                                  UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                               s16_handle_t *h_ptr,
                                                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                               s16_handle_t *h_ptr,
                                                                                               UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A,
                                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A,
                                                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                       s16_handle_t *h_ptr,
                                                                                       UINT32 A,
                                                                                       UINT32 mask,
                                                                                       UINT32 ofs,
                                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                       s16_handle_t *h_ptr,
                                                                                       UINT32 A,
                                                                                       UINT32 mask,
                                                                                       UINT32 ofs,
                                                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 mask,
                                                                                UINT32 ofs,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 mask,
                                                                                UINT32 ofs,
                                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A,
                                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A,
                                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                          s16_handle_t *h_ptr,
                                                                                          UINT32 A,
                                                                                          UINT32 mask,
                                                                                          UINT32 ofs,
                                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                          s16_handle_t *h_ptr,
                                                                                          UINT32 A,
                                                                                          UINT32 mask,
                                                                                          UINT32 ofs,
                                                                                          UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                       s16_handle_t *h_ptr,
                                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                       s16_handle_t *h_ptr,
                                                                                       UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_CONFIG,
                                PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_CONFIG,
                                           PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_STATUS,
                                PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_action_on_write_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                      s16_handle_t *h_ptr,
                                                                                                      UINT32 A,
                                                                                                      UINT32 mask,
                                                                                                      UINT32 ofs,
                                                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_action_on_write_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                      s16_handle_t *h_ptr,
                                                                                                      UINT32 A,
                                                                                                      UINT32 mask,
                                                                                                      UINT32 ofs,
                                                                                                      UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_action_on_write_field_set", A, mask, ofs, value );
    s16_channel_pcbi_action_on_write_field_set( b_ptr,
                                                h_ptr,
                                                A,
                                                MEM_TYPE_STATUS,
                                                PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT,
                                                mask,
                                                ofs,
                                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_read", reg_value, A);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 value,
                                                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                                                 UINT32 max_count,
                                                                                                 UINT32 *num_failed_polls,
                                                                                                 UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                                 s16_handle_t *h_ptr,
                                                                                                 UINT32 A,
                                                                                                 UINT32 mask,
                                                                                                 UINT32 value,
                                                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                                                 UINT32 max_count,
                                                                                                 UINT32 *num_failed_polls,
                                                                                                 UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return s16_channel_pcbi_poll( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_STATUS,
                                  PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT,
                                  mask,
                                  value,
                                  cmp,
                                  max_count,
                                  num_failed_polls,
                                  delay_between_polls_in_microseconds);

}


static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_write( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_write", value );
    s16_channel_pcbi_reg_write( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_STATUS,
                                PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN,
                                value);
}

static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A,
                                                                                   UINT32 mask,
                                                                                   UINT32 ofs,
                                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_field_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A,
                                                                                   UINT32 mask,
                                                                                   UINT32 ofs,
                                                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_field_set", A, mask, ofs, value );
    s16_channel_pcbi_field_set( b_ptr,
                                h_ptr,
                                A,
                                MEM_TYPE_STATUS,
                                PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN,
                                mask,
                                PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_UNUSED_MASK,
                                ofs,
                                value);

}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_read", reg_value, A);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                           s16_handle_t *h_ptr,
                                                                                           UINT32 A,
                                                                                           UINT32 mask,
                                                                                           UINT32 value,
                                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                                           UINT32 max_count,
                                                                                           UINT32 *num_failed_polls,
                                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                           s16_handle_t *h_ptr,
                                                                                           UINT32 A,
                                                                                           UINT32 mask,
                                                                                           UINT32 value,
                                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                                           UINT32 max_count,
                                                                                           UINT32 *num_failed_polls,
                                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return s16_channel_pcbi_poll( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_STATUS,
                                  PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT,
                                  mask,
                                  value,
                                  cmp,
                                  max_count,
                                  num_failed_polls,
                                  delay_between_polls_in_microseconds);

}


static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_MDSP_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_MDSP_CFG_1_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_MDSP_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_MDSP_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                            s16_handle_t *h_ptr,
                                                                                            UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                      s16_handle_t *h_ptr,
                                                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                              s16_handle_t *h_ptr,
                                                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_2_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_3_read( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = s16_channel_pcbi_reg_read( b_ptr,
                                           h_ptr,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_3);

    IOLOG( "%s -> 0x%08x; A=%d", "s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_3_read", reg_value, A);
    return reg_value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */
static INLINE void s16_channel_pcbi_field_RD_PTR_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RD_PTR_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RD_PTR_SYNC_VAL_set", A, 15);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RD_PTR_SYNC_VAL_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RD_PTR_SYNC_VAL_set", A, value );

    /* (0x00000004 bits 2:0) field RD_PTR_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_BIT_RD_PTR_SYNC_VAL_MSK,
                                                                       PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_BIT_RD_PTR_SYNC_VAL_OFF,
                                                                       value);
}

static INLINE UINT32 s16_channel_pcbi_field_RD_PTR_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RD_PTR_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RD_PTR_SYNC_VAL_get", A, 15);
    /* (0x00000004 bits 2:0) field RD_PTR_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_read( b_ptr,
                                                                              h_ptr,
                                                                              A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_BIT_RD_PTR_SYNC_VAL_MSK) >> PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_BIT_RD_PTR_SYNC_VAL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RD_PTR_SYNC_VAL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000004 bits 2:0) field RD_PTR_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000004 bits 2:0) field RD_PTR_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           subfield_mask << (PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_BIT_RD_PTR_SYNC_VAL_OFF + subfield_offset),
                                                                           PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_BIT_RD_PTR_SYNC_VAL_OFF + subfield_offset,
                                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000004 bits 2:0) field RD_PTR_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_read( b_ptr,
                                                                              h_ptr,
                                                                              A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_BIT_RD_PTR_SYNC_VAL_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_BIT_RD_PTR_SYNC_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_BIT_RD_PTR_SYNC_VAL_MSK, PCBI_REG_CHANNEL_PCBI_RATE_ADAPT_FIFO_CFG_1_BIT_RD_PTR_SYNC_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_RD_PTR_SYNC_VAL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_LIN_STEP_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_LIN_STEP_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_LIN_STEP_DATA_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_LIN_STEP_DATA_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_LIN_STEP_DATA_set", A, value );

    /* (0x00000008 bits 31:28) field LIN_STEP_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_LIN_STEP_DATA_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_LIN_STEP_DATA_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_LIN_STEP_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_LIN_STEP_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_LIN_STEP_DATA_get", A, 15);
    /* (0x00000008 bits 31:28) field LIN_STEP_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_LIN_STEP_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_LIN_STEP_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_LIN_STEP_DATA_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_LIN_STEP_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_LIN_STEP_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_LIN_STEP_DATA_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_LIN_STEP_DATA_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_LIN_STEP_DATA_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_LIN_STEP_DATA_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000008 bits 31:28) field LIN_STEP_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000008 bits 31:28) field LIN_STEP_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_LIN_STEP_DATA_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_LIN_STEP_DATA_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_LIN_STEP_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_LIN_STEP_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_LIN_STEP_DATA_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_LIN_STEP_DATA_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_LIN_STEP_DATA_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000008 bits 31:28) field LIN_STEP_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_LIN_STEP_DATA_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_LIN_STEP_DATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_LIN_STEP_DATA_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_LIN_STEP_DATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_LIN_STEP_DATA_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ACC_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ACC_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ACC_DELAY_DATA_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ACC_DELAY_DATA_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ACC_DELAY_DATA_set", A, value );

    /* (0x00000008 bits 27:24) field ACC_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_ACC_DELAY_DATA_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_ACC_DELAY_DATA_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_ACC_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ACC_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ACC_DELAY_DATA_get", A, 15);
    /* (0x00000008 bits 27:24) field ACC_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_ACC_DELAY_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_ACC_DELAY_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ACC_DELAY_DATA_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_ACC_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_ACC_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ACC_DELAY_DATA_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ACC_DELAY_DATA_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ACC_DELAY_DATA_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ACC_DELAY_DATA_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000008 bits 27:24) field ACC_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000008 bits 27:24) field ACC_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_ACC_DELAY_DATA_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_ACC_DELAY_DATA_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_ACC_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_ACC_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ACC_DELAY_DATA_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ACC_DELAY_DATA_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ACC_DELAY_DATA_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000008 bits 27:24) field ACC_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_ACC_DELAY_DATA_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_ACC_DELAY_DATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_ACC_DELAY_DATA_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_ACC_DELAY_DATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ACC_DELAY_DATA_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_DAC_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_DAC_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_DAC_DELAY_DATA_set", A, 15);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_DAC_DELAY_DATA_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_DAC_DELAY_DATA_set", A, value );

    /* (0x00000008 bits 23:16) field DAC_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_DAC_DELAY_DATA_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_DAC_DELAY_DATA_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_DAC_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_DAC_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_DAC_DELAY_DATA_get", A, 15);
    /* (0x00000008 bits 23:16) field DAC_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_DAC_DELAY_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_DAC_DELAY_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_DAC_DELAY_DATA_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_DAC_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_DAC_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_DAC_DELAY_DATA_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_DAC_DELAY_DATA_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_DAC_DELAY_DATA_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_DAC_DELAY_DATA_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000008 bits 23:16) field DAC_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000008 bits 23:16) field DAC_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_DAC_DELAY_DATA_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_DAC_DELAY_DATA_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_DAC_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_DAC_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_DAC_DELAY_DATA_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_DAC_DELAY_DATA_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_DAC_DELAY_DATA_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000008 bits 23:16) field DAC_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_DAC_DELAY_DATA_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_DAC_DELAY_DATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_DAC_DELAY_DATA_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_DAC_DELAY_DATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_DAC_DELAY_DATA_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CAL_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CAL_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CAL_DELAY_DATA_set", A, 15);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_CAL_DELAY_DATA_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CAL_DELAY_DATA_set", A, value );

    /* (0x00000008 bits 15:8) field CAL_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_CAL_DELAY_DATA_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_CAL_DELAY_DATA_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_CAL_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CAL_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CAL_DELAY_DATA_get", A, 15);
    /* (0x00000008 bits 15:8) field CAL_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_CAL_DELAY_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_CAL_DELAY_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CAL_DELAY_DATA_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CAL_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CAL_DELAY_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CAL_DELAY_DATA_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CAL_DELAY_DATA_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CAL_DELAY_DATA_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CAL_DELAY_DATA_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000008 bits 15:8) field CAL_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000008 bits 15:8) field CAL_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_CAL_DELAY_DATA_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_CAL_DELAY_DATA_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CAL_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CAL_DELAY_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CAL_DELAY_DATA_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CAL_DELAY_DATA_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CAL_DELAY_DATA_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000008 bits 15:8) field CAL_DELAY_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_CAL_DELAY_DATA_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_CAL_DELAY_DATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_CAL_DELAY_DATA_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_CAL_DELAY_DATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CAL_DELAY_DATA_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_N_ACCUM_CYCLES_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_N_ACCUM_CYCLES_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_N_ACCUM_CYCLES_DATA_set", A, 15);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_N_ACCUM_CYCLES_DATA_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_N_ACCUM_CYCLES_DATA_set", A, value );

    /* (0x00000008 bits 7:0) field N_ACCUM_CYCLES_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_N_ACCUM_CYCLES_DATA_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_N_ACCUM_CYCLES_DATA_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_N_ACCUM_CYCLES_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_N_ACCUM_CYCLES_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_N_ACCUM_CYCLES_DATA_get", A, 15);
    /* (0x00000008 bits 7:0) field N_ACCUM_CYCLES_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_N_ACCUM_CYCLES_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_N_ACCUM_CYCLES_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_N_ACCUM_CYCLES_DATA_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000008 bits 7:0) field N_ACCUM_CYCLES_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000008 bits 7:0) field N_ACCUM_CYCLES_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_N_ACCUM_CYCLES_DATA_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_N_ACCUM_CYCLES_DATA_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000008 bits 7:0) field N_ACCUM_CYCLES_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_N_ACCUM_CYCLES_DATA_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_N_ACCUM_CYCLES_DATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_N_ACCUM_CYCLES_DATA_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_1_BIT_N_ACCUM_CYCLES_DATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_DATA_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_26_18_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_26_18_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_26_18_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_26_18_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_26_18_set", A, value );

    /* (0x0000000c bits 26:18) field THR_MAP_DATA_DEFAULT_26_18 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_26_18_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_26_18_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_26_18_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_26_18_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_26_18_get", A, 15);
    /* (0x0000000c bits 26:18) field THR_MAP_DATA_DEFAULT_26_18 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_26_18_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_26_18_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_26_18_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000000c bits 26:18) field THR_MAP_DATA_DEFAULT_26_18 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000000c bits 26:18) field THR_MAP_DATA_DEFAULT_26_18 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_26_18_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_26_18_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000000c bits 26:18) field THR_MAP_DATA_DEFAULT_26_18 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_26_18_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_26_18_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_26_18_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_26_18_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_26_18_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_17_9_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_17_9_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_17_9_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_17_9_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_17_9_set", A, value );

    /* (0x0000000c bits 17:9) field THR_MAP_DATA_DEFAULT_17_9 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_17_9_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_17_9_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_17_9_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_17_9_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_17_9_get", A, 15);
    /* (0x0000000c bits 17:9) field THR_MAP_DATA_DEFAULT_17_9 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_17_9_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_17_9_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_17_9_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 start_bit,
                                                                               UINT32 stop_bit,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 start_bit,
                                                                               UINT32 stop_bit,
                                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000000c bits 17:9) field THR_MAP_DATA_DEFAULT_17_9 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000000c bits 17:9) field THR_MAP_DATA_DEFAULT_17_9 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_17_9_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_17_9_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 start_bit,
                                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 start_bit,
                                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000000c bits 17:9) field THR_MAP_DATA_DEFAULT_17_9 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_17_9_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_17_9_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_17_9_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_17_9_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_17_9_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_8_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_8_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_8_0_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_8_0_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_8_0_set", A, value );

    /* (0x0000000c bits 8:0) field THR_MAP_DATA_DEFAULT_8_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_8_0_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_8_0_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_8_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_8_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_8_0_get", A, 15);
    /* (0x0000000c bits 8:0) field THR_MAP_DATA_DEFAULT_8_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_8_0_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_8_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_8_0_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit,
                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit,
                                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000000c bits 8:0) field THR_MAP_DATA_DEFAULT_8_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000000c bits 8:0) field THR_MAP_DATA_DEFAULT_8_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_8_0_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_8_0_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000000c bits 8:0) field THR_MAP_DATA_DEFAULT_8_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_8_0_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_8_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_8_0_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_2_BIT_THR_MAP_DATA_DEFAULT_8_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_8_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_53_45_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_53_45_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_53_45_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_53_45_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_53_45_set", A, value );

    /* (0x00000010 bits 26:18) field THR_MAP_DATA_DEFAULT_53_45 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_53_45_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_53_45_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_53_45_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_53_45_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_53_45_get", A, 15);
    /* (0x00000010 bits 26:18) field THR_MAP_DATA_DEFAULT_53_45 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_53_45_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_53_45_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_53_45_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000010 bits 26:18) field THR_MAP_DATA_DEFAULT_53_45 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000010 bits 26:18) field THR_MAP_DATA_DEFAULT_53_45 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_53_45_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_53_45_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000010 bits 26:18) field THR_MAP_DATA_DEFAULT_53_45 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_53_45_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_53_45_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_53_45_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_53_45_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_53_45_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_44_36_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_44_36_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_44_36_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_44_36_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_44_36_set", A, value );

    /* (0x00000010 bits 17:9) field THR_MAP_DATA_DEFAULT_44_36 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_44_36_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_44_36_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_44_36_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_44_36_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_44_36_get", A, 15);
    /* (0x00000010 bits 17:9) field THR_MAP_DATA_DEFAULT_44_36 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_44_36_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_44_36_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_44_36_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000010 bits 17:9) field THR_MAP_DATA_DEFAULT_44_36 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000010 bits 17:9) field THR_MAP_DATA_DEFAULT_44_36 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_44_36_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_44_36_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000010 bits 17:9) field THR_MAP_DATA_DEFAULT_44_36 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_44_36_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_44_36_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_44_36_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_44_36_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_44_36_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_35_27_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_35_27_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_35_27_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_35_27_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_35_27_set", A, value );

    /* (0x00000010 bits 8:0) field THR_MAP_DATA_DEFAULT_35_27 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_35_27_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_35_27_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_35_27_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_35_27_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_35_27_get", A, 15);
    /* (0x00000010 bits 8:0) field THR_MAP_DATA_DEFAULT_35_27 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_35_27_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_35_27_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_35_27_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000010 bits 8:0) field THR_MAP_DATA_DEFAULT_35_27 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000010 bits 8:0) field THR_MAP_DATA_DEFAULT_35_27 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_35_27_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_35_27_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000010 bits 8:0) field THR_MAP_DATA_DEFAULT_35_27 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_35_27_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_35_27_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_35_27_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_3_BIT_THR_MAP_DATA_DEFAULT_35_27_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_35_27_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_80_72_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_80_72_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_80_72_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_80_72_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_80_72_set", A, value );

    /* (0x00000014 bits 26:18) field THR_MAP_DATA_DEFAULT_80_72 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_80_72_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_80_72_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_80_72_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_80_72_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_80_72_get", A, 15);
    /* (0x00000014 bits 26:18) field THR_MAP_DATA_DEFAULT_80_72 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_80_72_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_80_72_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_80_72_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000014 bits 26:18) field THR_MAP_DATA_DEFAULT_80_72 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000014 bits 26:18) field THR_MAP_DATA_DEFAULT_80_72 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_80_72_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_80_72_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000014 bits 26:18) field THR_MAP_DATA_DEFAULT_80_72 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_80_72_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_80_72_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_80_72_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_80_72_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_80_72_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_71_63_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_71_63_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_71_63_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_71_63_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_71_63_set", A, value );

    /* (0x00000014 bits 17:9) field THR_MAP_DATA_DEFAULT_71_63 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_71_63_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_71_63_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_71_63_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_71_63_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_71_63_get", A, 15);
    /* (0x00000014 bits 17:9) field THR_MAP_DATA_DEFAULT_71_63 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_71_63_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_71_63_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_71_63_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000014 bits 17:9) field THR_MAP_DATA_DEFAULT_71_63 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000014 bits 17:9) field THR_MAP_DATA_DEFAULT_71_63 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_71_63_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_71_63_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000014 bits 17:9) field THR_MAP_DATA_DEFAULT_71_63 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_71_63_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_71_63_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_71_63_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_71_63_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_71_63_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_62_54_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_62_54_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_62_54_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_62_54_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_62_54_set", A, value );

    /* (0x00000014 bits 8:0) field THR_MAP_DATA_DEFAULT_62_54 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_62_54_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_62_54_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_62_54_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_62_54_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_62_54_get", A, 15);
    /* (0x00000014 bits 8:0) field THR_MAP_DATA_DEFAULT_62_54 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_62_54_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_62_54_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_62_54_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000014 bits 8:0) field THR_MAP_DATA_DEFAULT_62_54 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000014 bits 8:0) field THR_MAP_DATA_DEFAULT_62_54 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_62_54_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_62_54_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000014 bits 8:0) field THR_MAP_DATA_DEFAULT_62_54 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_62_54_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_62_54_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_62_54_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_4_BIT_THR_MAP_DATA_DEFAULT_62_54_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_62_54_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_89_81_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_89_81_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_89_81_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_89_81_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_89_81_set", A, value );

    /* (0x00000018 bits 8:0) field THR_MAP_DATA_DEFAULT_89_81 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_BIT_THR_MAP_DATA_DEFAULT_89_81_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_BIT_THR_MAP_DATA_DEFAULT_89_81_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_89_81_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_89_81_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_89_81_get", A, 15);
    /* (0x00000018 bits 8:0) field THR_MAP_DATA_DEFAULT_89_81 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_BIT_THR_MAP_DATA_DEFAULT_89_81_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_BIT_THR_MAP_DATA_DEFAULT_89_81_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_DATA_DEFAULT_89_81_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000018 bits 8:0) field THR_MAP_DATA_DEFAULT_89_81 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000018 bits 8:0) field THR_MAP_DATA_DEFAULT_89_81 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_BIT_THR_MAP_DATA_DEFAULT_89_81_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_BIT_THR_MAP_DATA_DEFAULT_89_81_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000018 bits 8:0) field THR_MAP_DATA_DEFAULT_89_81 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_BIT_THR_MAP_DATA_DEFAULT_89_81_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_BIT_THR_MAP_DATA_DEFAULT_89_81_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_BIT_THR_MAP_DATA_DEFAULT_89_81_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_5_BIT_THR_MAP_DATA_DEFAULT_89_81_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_DATA_DEFAULT_89_81_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_OC_DATA_INV_POL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_OC_DATA_INV_POL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_OC_DATA_INV_POL_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_OC_DATA_INV_POL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_OC_DATA_INV_POL_set", A, value );

    /* (0x0000001c bits 20) field ADC_OC_DATA_INV_POL of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_OC_DATA_INV_POL_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_OC_DATA_INV_POL_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_OC_DATA_INV_POL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_OC_DATA_INV_POL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_OC_DATA_INV_POL_get", A, 15);
    /* (0x0000001c bits 20) field ADC_OC_DATA_INV_POL of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_OC_DATA_INV_POL_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_OC_DATA_INV_POL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_OC_DATA_INV_POL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_MAX_THRESHOLD_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_MAX_THRESHOLD_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MAX_THRESHOLD_DATA_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_MAX_THRESHOLD_DATA_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_MAX_THRESHOLD_DATA_set", A, value );

    /* (0x0000001c bits 19:11) field MAX_THRESHOLD_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MAX_THRESHOLD_DATA_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MAX_THRESHOLD_DATA_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_MAX_THRESHOLD_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_MAX_THRESHOLD_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MAX_THRESHOLD_DATA_get", A, 15);
    /* (0x0000001c bits 19:11) field MAX_THRESHOLD_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MAX_THRESHOLD_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MAX_THRESHOLD_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_MAX_THRESHOLD_DATA_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000001c bits 19:11) field MAX_THRESHOLD_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000001c bits 19:11) field MAX_THRESHOLD_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MAX_THRESHOLD_DATA_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MAX_THRESHOLD_DATA_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000001c bits 19:11) field MAX_THRESHOLD_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MAX_THRESHOLD_DATA_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MAX_THRESHOLD_DATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MAX_THRESHOLD_DATA_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MAX_THRESHOLD_DATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_MAX_THRESHOLD_DATA_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_MIN_THRESHOLD_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_MIN_THRESHOLD_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MIN_THRESHOLD_DATA_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_MIN_THRESHOLD_DATA_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_MIN_THRESHOLD_DATA_set", A, value );

    /* (0x0000001c bits 10:2) field MIN_THRESHOLD_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MIN_THRESHOLD_DATA_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MIN_THRESHOLD_DATA_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_MIN_THRESHOLD_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_MIN_THRESHOLD_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MIN_THRESHOLD_DATA_get", A, 15);
    /* (0x0000001c bits 10:2) field MIN_THRESHOLD_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MIN_THRESHOLD_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MIN_THRESHOLD_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_MIN_THRESHOLD_DATA_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000001c bits 10:2) field MIN_THRESHOLD_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000001c bits 10:2) field MIN_THRESHOLD_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_field_set( b_ptr,
                                                                       h_ptr,
                                                                       A,
                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MIN_THRESHOLD_DATA_OFF + subfield_offset),
                                                                       PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MIN_THRESHOLD_DATA_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000001c bits 10:2) field MIN_THRESHOLD_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MIN_THRESHOLD_DATA_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MIN_THRESHOLD_DATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MIN_THRESHOLD_DATA_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_MIN_THRESHOLD_DATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_MIN_THRESHOLD_DATA_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_BIST_START_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_BIST_START_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BIST_START_DATA_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_BIST_START_DATA_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BIST_START_DATA_set", A, value );

    /* (0x0000001c bits 1) field ADC_BIST_START_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_BIST_START_DATA_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_BIST_START_DATA_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_START_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_START_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BIST_START_DATA_get", A, 15);
    /* (0x0000001c bits 1) field ADC_BIST_START_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_BIST_START_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_BIST_START_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BIST_START_DATA_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_EN_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_EN_DATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_EN_DATA_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_EN_DATA_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_EN_DATA_set", A, value );

    /* (0x0000001c bits 0) field OFFSET_EN_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_OFFSET_EN_DATA_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_OFFSET_EN_DATA_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_EN_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_EN_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_EN_DATA_get", A, 15);
    /* (0x0000001c bits 0) field OFFSET_EN_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_OFFSET_EN_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_OFFSET_EN_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_EN_DATA_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_LIN_STEP_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_LIN_STEP_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_LIN_STEP_TIMING_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_LIN_STEP_TIMING_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_LIN_STEP_TIMING_set", A, value );

    /* (0x00000020 bits 31:28) field LIN_STEP_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_LIN_STEP_TIMING_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_LIN_STEP_TIMING_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_LIN_STEP_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_LIN_STEP_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_LIN_STEP_TIMING_get", A, 15);
    /* (0x00000020 bits 31:28) field LIN_STEP_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_LIN_STEP_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_LIN_STEP_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_LIN_STEP_TIMING_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_LIN_STEP_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_LIN_STEP_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_LIN_STEP_TIMING_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_LIN_STEP_TIMING_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_LIN_STEP_TIMING_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_LIN_STEP_TIMING_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000020 bits 31:28) field LIN_STEP_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000020 bits 31:28) field LIN_STEP_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_LIN_STEP_TIMING_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_LIN_STEP_TIMING_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_LIN_STEP_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_LIN_STEP_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_LIN_STEP_TIMING_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_LIN_STEP_TIMING_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_LIN_STEP_TIMING_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000020 bits 31:28) field LIN_STEP_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_LIN_STEP_TIMING_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_LIN_STEP_TIMING_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_LIN_STEP_TIMING_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_LIN_STEP_TIMING_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_LIN_STEP_TIMING_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ACC_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ACC_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ACC_DELAY_TIMING_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ACC_DELAY_TIMING_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ACC_DELAY_TIMING_set", A, value );

    /* (0x00000020 bits 27:24) field ACC_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_ACC_DELAY_TIMING_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_ACC_DELAY_TIMING_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_ACC_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ACC_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ACC_DELAY_TIMING_get", A, 15);
    /* (0x00000020 bits 27:24) field ACC_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_ACC_DELAY_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_ACC_DELAY_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ACC_DELAY_TIMING_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_ACC_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_ACC_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ACC_DELAY_TIMING_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ACC_DELAY_TIMING_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ACC_DELAY_TIMING_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ACC_DELAY_TIMING_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000020 bits 27:24) field ACC_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000020 bits 27:24) field ACC_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_ACC_DELAY_TIMING_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_ACC_DELAY_TIMING_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_ACC_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_ACC_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ACC_DELAY_TIMING_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ACC_DELAY_TIMING_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ACC_DELAY_TIMING_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000020 bits 27:24) field ACC_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_ACC_DELAY_TIMING_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_ACC_DELAY_TIMING_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_ACC_DELAY_TIMING_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_ACC_DELAY_TIMING_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ACC_DELAY_TIMING_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_DAC_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_DAC_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_DAC_DELAY_TIMING_set", A, 15);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_DAC_DELAY_TIMING_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_DAC_DELAY_TIMING_set", A, value );

    /* (0x00000020 bits 23:16) field DAC_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_DAC_DELAY_TIMING_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_DAC_DELAY_TIMING_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_DAC_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_DAC_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_DAC_DELAY_TIMING_get", A, 15);
    /* (0x00000020 bits 23:16) field DAC_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_DAC_DELAY_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_DAC_DELAY_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_DAC_DELAY_TIMING_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_DAC_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_DAC_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_DAC_DELAY_TIMING_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_DAC_DELAY_TIMING_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_DAC_DELAY_TIMING_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_DAC_DELAY_TIMING_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000020 bits 23:16) field DAC_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000020 bits 23:16) field DAC_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_DAC_DELAY_TIMING_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_DAC_DELAY_TIMING_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_DAC_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_DAC_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_DAC_DELAY_TIMING_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_DAC_DELAY_TIMING_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_DAC_DELAY_TIMING_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000020 bits 23:16) field DAC_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_DAC_DELAY_TIMING_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_DAC_DELAY_TIMING_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_DAC_DELAY_TIMING_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_DAC_DELAY_TIMING_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_DAC_DELAY_TIMING_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CAL_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CAL_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CAL_DELAY_TIMING_set", A, 15);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_CAL_DELAY_TIMING_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CAL_DELAY_TIMING_set", A, value );

    /* (0x00000020 bits 15:8) field CAL_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_CAL_DELAY_TIMING_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_CAL_DELAY_TIMING_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_CAL_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CAL_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CAL_DELAY_TIMING_get", A, 15);
    /* (0x00000020 bits 15:8) field CAL_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_CAL_DELAY_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_CAL_DELAY_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CAL_DELAY_TIMING_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CAL_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CAL_DELAY_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CAL_DELAY_TIMING_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CAL_DELAY_TIMING_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CAL_DELAY_TIMING_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CAL_DELAY_TIMING_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000020 bits 15:8) field CAL_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000020 bits 15:8) field CAL_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_CAL_DELAY_TIMING_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_CAL_DELAY_TIMING_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CAL_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CAL_DELAY_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CAL_DELAY_TIMING_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CAL_DELAY_TIMING_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CAL_DELAY_TIMING_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000020 bits 15:8) field CAL_DELAY_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_CAL_DELAY_TIMING_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_CAL_DELAY_TIMING_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_CAL_DELAY_TIMING_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_CAL_DELAY_TIMING_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CAL_DELAY_TIMING_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_N_ACCUM_CYCLES_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_N_ACCUM_CYCLES_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_N_ACCUM_CYCLES_TIMING_set", A, 15);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_N_ACCUM_CYCLES_TIMING_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_N_ACCUM_CYCLES_TIMING_set", A, value );

    /* (0x00000020 bits 7:0) field N_ACCUM_CYCLES_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_N_ACCUM_CYCLES_TIMING_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_N_ACCUM_CYCLES_TIMING_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_N_ACCUM_CYCLES_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_N_ACCUM_CYCLES_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_N_ACCUM_CYCLES_TIMING_get", A, 15);
    /* (0x00000020 bits 7:0) field N_ACCUM_CYCLES_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_N_ACCUM_CYCLES_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_N_ACCUM_CYCLES_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_N_ACCUM_CYCLES_TIMING_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000020 bits 7:0) field N_ACCUM_CYCLES_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000020 bits 7:0) field N_ACCUM_CYCLES_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_N_ACCUM_CYCLES_TIMING_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_N_ACCUM_CYCLES_TIMING_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000020 bits 7:0) field N_ACCUM_CYCLES_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_N_ACCUM_CYCLES_TIMING_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_N_ACCUM_CYCLES_TIMING_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_N_ACCUM_CYCLES_TIMING_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_1_BIT_N_ACCUM_CYCLES_TIMING_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_N_ACCUM_CYCLES_TIMING_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_26_18_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_26_18_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_26_18_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_26_18_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_26_18_set", A, value );

    /* (0x00000024 bits 26:18) field THR_MAP_TIMING_DEFAULT_26_18 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_26_18_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_26_18_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_26_18_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_26_18_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_26_18_get", A, 15);
    /* (0x00000024 bits 26:18) field THR_MAP_TIMING_DEFAULT_26_18 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_26_18_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_26_18_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_26_18_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit,
                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit,
                                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000024 bits 26:18) field THR_MAP_TIMING_DEFAULT_26_18 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000024 bits 26:18) field THR_MAP_TIMING_DEFAULT_26_18 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_26_18_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_26_18_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 start_bit,
                                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 start_bit,
                                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000024 bits 26:18) field THR_MAP_TIMING_DEFAULT_26_18 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_26_18_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_26_18_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_26_18_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_26_18_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_26_18_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_17_9_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_17_9_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_17_9_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_17_9_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_17_9_set", A, value );

    /* (0x00000024 bits 17:9) field THR_MAP_TIMING_DEFAULT_17_9 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_17_9_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_17_9_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_17_9_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_17_9_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_17_9_get", A, 15);
    /* (0x00000024 bits 17:9) field THR_MAP_TIMING_DEFAULT_17_9 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_17_9_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_17_9_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_17_9_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 start_bit,
                                                                                 UINT32 stop_bit,
                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 start_bit,
                                                                                 UINT32 stop_bit,
                                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000024 bits 17:9) field THR_MAP_TIMING_DEFAULT_17_9 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000024 bits 17:9) field THR_MAP_TIMING_DEFAULT_17_9 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_17_9_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_17_9_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A,
                                                                                   UINT32 start_bit,
                                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A,
                                                                                   UINT32 start_bit,
                                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000024 bits 17:9) field THR_MAP_TIMING_DEFAULT_17_9 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_17_9_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_17_9_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_17_9_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_17_9_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_17_9_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_8_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_8_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_8_0_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_8_0_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_8_0_set", A, value );

    /* (0x00000024 bits 8:0) field THR_MAP_TIMING_DEFAULT_8_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_8_0_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_8_0_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_8_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_8_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_8_0_get", A, 15);
    /* (0x00000024 bits 8:0) field THR_MAP_TIMING_DEFAULT_8_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_8_0_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_8_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_8_0_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit,
                                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000024 bits 8:0) field THR_MAP_TIMING_DEFAULT_8_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000024 bits 8:0) field THR_MAP_TIMING_DEFAULT_8_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_8_0_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_8_0_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000024 bits 8:0) field THR_MAP_TIMING_DEFAULT_8_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_8_0_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_8_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_8_0_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_2_BIT_THR_MAP_TIMING_DEFAULT_8_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_8_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_35_27_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_35_27_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_35_27_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_35_27_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_35_27_set", A, value );

    /* (0x00000028 bits 8:0) field THR_MAP_TIMING_DEFAULT_35_27 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_BIT_THR_MAP_TIMING_DEFAULT_35_27_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_BIT_THR_MAP_TIMING_DEFAULT_35_27_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_35_27_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_35_27_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_35_27_get", A, 15);
    /* (0x00000028 bits 8:0) field THR_MAP_TIMING_DEFAULT_35_27 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_BIT_THR_MAP_TIMING_DEFAULT_35_27_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_BIT_THR_MAP_TIMING_DEFAULT_35_27_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_THR_MAP_TIMING_DEFAULT_35_27_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit,
                                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                  s16_handle_t *h_ptr,
                                                                                  UINT32 A,
                                                                                  UINT32 start_bit,
                                                                                  UINT32 stop_bit,
                                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000028 bits 8:0) field THR_MAP_TIMING_DEFAULT_35_27 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000028 bits 8:0) field THR_MAP_TIMING_DEFAULT_35_27 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_BIT_THR_MAP_TIMING_DEFAULT_35_27_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_BIT_THR_MAP_TIMING_DEFAULT_35_27_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 start_bit,
                                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                    s16_handle_t *h_ptr,
                                                                                    UINT32 A,
                                                                                    UINT32 start_bit,
                                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000028 bits 8:0) field THR_MAP_TIMING_DEFAULT_35_27 of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_BIT_THR_MAP_TIMING_DEFAULT_35_27_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_BIT_THR_MAP_TIMING_DEFAULT_35_27_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_BIT_THR_MAP_TIMING_DEFAULT_35_27_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_3_BIT_THR_MAP_TIMING_DEFAULT_35_27_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_THR_MAP_TIMING_DEFAULT_35_27_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_OC_TIMING_INV_POL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_OC_TIMING_INV_POL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_OC_TIMING_INV_POL_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_OC_TIMING_INV_POL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_OC_TIMING_INV_POL_set", A, value );

    /* (0x0000002c bits 20) field ADC_OC_TIMING_INV_POL of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_OC_TIMING_INV_POL_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_OC_TIMING_INV_POL_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_OC_TIMING_INV_POL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_OC_TIMING_INV_POL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_OC_TIMING_INV_POL_get", A, 15);
    /* (0x0000002c bits 20) field ADC_OC_TIMING_INV_POL of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_OC_TIMING_INV_POL_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_OC_TIMING_INV_POL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_OC_TIMING_INV_POL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_MAX_THRESHOLD_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_MAX_THRESHOLD_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MAX_THRESHOLD_TIMING_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_MAX_THRESHOLD_TIMING_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_MAX_THRESHOLD_TIMING_set", A, value );

    /* (0x0000002c bits 19:11) field MAX_THRESHOLD_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MAX_THRESHOLD_TIMING_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MAX_THRESHOLD_TIMING_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_MAX_THRESHOLD_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_MAX_THRESHOLD_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MAX_THRESHOLD_TIMING_get", A, 15);
    /* (0x0000002c bits 19:11) field MAX_THRESHOLD_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MAX_THRESHOLD_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MAX_THRESHOLD_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_MAX_THRESHOLD_TIMING_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000002c bits 19:11) field MAX_THRESHOLD_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000002c bits 19:11) field MAX_THRESHOLD_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MAX_THRESHOLD_TIMING_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MAX_THRESHOLD_TIMING_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000002c bits 19:11) field MAX_THRESHOLD_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MAX_THRESHOLD_TIMING_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MAX_THRESHOLD_TIMING_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MAX_THRESHOLD_TIMING_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MAX_THRESHOLD_TIMING_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_MAX_THRESHOLD_TIMING_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_MIN_THRESHOLD_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_MIN_THRESHOLD_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MIN_THRESHOLD_TIMING_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_MIN_THRESHOLD_TIMING_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_MIN_THRESHOLD_TIMING_set", A, value );

    /* (0x0000002c bits 10:2) field MIN_THRESHOLD_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MIN_THRESHOLD_TIMING_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MIN_THRESHOLD_TIMING_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_MIN_THRESHOLD_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_MIN_THRESHOLD_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MIN_THRESHOLD_TIMING_get", A, 15);
    /* (0x0000002c bits 10:2) field MIN_THRESHOLD_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MIN_THRESHOLD_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MIN_THRESHOLD_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_MIN_THRESHOLD_TIMING_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000002c bits 10:2) field MIN_THRESHOLD_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000002c bits 10:2) field MIN_THRESHOLD_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MIN_THRESHOLD_TIMING_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MIN_THRESHOLD_TIMING_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000002c bits 10:2) field MIN_THRESHOLD_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MIN_THRESHOLD_TIMING_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MIN_THRESHOLD_TIMING_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MIN_THRESHOLD_TIMING_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_MIN_THRESHOLD_TIMING_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_MIN_THRESHOLD_TIMING_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_BIST_START_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_BIST_START_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BIST_START_TIMING_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_BIST_START_TIMING_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BIST_START_TIMING_set", A, value );

    /* (0x0000002c bits 1) field ADC_BIST_START_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_BIST_START_TIMING_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_BIST_START_TIMING_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_START_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_START_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BIST_START_TIMING_get", A, 15);
    /* (0x0000002c bits 1) field ADC_BIST_START_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_BIST_START_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_BIST_START_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BIST_START_TIMING_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_EN_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_EN_TIMING_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_EN_TIMING_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_EN_TIMING_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_EN_TIMING_set", A, value );

    /* (0x0000002c bits 0) field OFFSET_EN_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_OFFSET_EN_TIMING_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_OFFSET_EN_TIMING_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_EN_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_EN_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_EN_TIMING_get", A, 15);
    /* (0x0000002c bits 0) field OFFSET_EN_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_OFFSET_EN_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_OFFSET_EN_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_EN_TIMING_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_DATA_RAM_SEL_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_DATA_RAM_SEL_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_DATA_RAM_SEL_OVR_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_DATA_RAM_SEL_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_DATA_RAM_SEL_OVR_set", A, value );

    /* (0x00000030 bits 26) field DATA_RAM_SEL_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_DATA_RAM_SEL_OVR_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_DATA_RAM_SEL_OVR_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_DATA_RAM_SEL_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_DATA_RAM_SEL_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_DATA_RAM_SEL_OVR_get", A, 15);
    /* (0x00000030 bits 26) field DATA_RAM_SEL_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_DATA_RAM_SEL_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_DATA_RAM_SEL_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_DATA_RAM_SEL_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_DATA_RAM_SEL_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_DATA_RAM_SEL_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_DATA_RAM_SEL_OVR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_DATA_RAM_SEL_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_DATA_RAM_SEL_OVR_EN_set", A, value );

    /* (0x00000030 bits 25) field DATA_RAM_SEL_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_DATA_RAM_SEL_OVR_EN_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_DATA_RAM_SEL_OVR_EN_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_DATA_RAM_SEL_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_DATA_RAM_SEL_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_DATA_RAM_SEL_OVR_EN_get", A, 15);
    /* (0x00000030 bits 25) field DATA_RAM_SEL_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_DATA_RAM_SEL_OVR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_DATA_RAM_SEL_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_DATA_RAM_SEL_OVR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_UPDATE_CLK_BYP_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_UPDATE_CLK_BYP_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_UPDATE_CLK_BYP_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_UPDATE_CLK_BYP_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_UPDATE_CLK_BYP_set", A, value );

    /* (0x00000030 bits 24) field UPDATE_CLK_BYP of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_UPDATE_CLK_BYP_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_UPDATE_CLK_BYP_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_UPDATE_CLK_BYP_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_UPDATE_CLK_BYP_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_UPDATE_CLK_BYP_get", A, 15);
    /* (0x00000030 bits 24) field UPDATE_CLK_BYP of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_UPDATE_CLK_BYP_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_UPDATE_CLK_BYP_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_UPDATE_CLK_BYP_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_OC_BRIDGE_SYNC_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_OC_BRIDGE_SYNC_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_OC_BRIDGE_SYNC_RESET_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_OC_BRIDGE_SYNC_RESET_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_OC_BRIDGE_SYNC_RESET_set", A, value );

    /* (0x00000030 bits 23) field ADC_OC_BRIDGE_SYNC_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_OC_BRIDGE_SYNC_RESET_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_OC_BRIDGE_SYNC_RESET_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_OC_BRIDGE_SYNC_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_OC_BRIDGE_SYNC_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_OC_BRIDGE_SYNC_RESET_get", A, 15);
    /* (0x00000030 bits 23) field ADC_OC_BRIDGE_SYNC_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_OC_BRIDGE_SYNC_RESET_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_OC_BRIDGE_SYNC_RESET_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_OC_BRIDGE_SYNC_RESET_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_RD_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_RD_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_RD_OVR_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_RD_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_RD_OVR_set", A, value );

    /* (0x00000030 bits 22) field ADC_RD_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_RD_OVR_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_RD_OVR_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_RD_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_RD_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_RD_OVR_get", A, 15);
    /* (0x00000030 bits 22) field ADC_RD_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_RD_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_RD_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_RD_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_WR_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_WR_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_WR_OVR_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_WR_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_WR_OVR_set", A, value );

    /* (0x00000030 bits 21) field ADC_WR_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_WR_OVR_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_WR_OVR_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_WR_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_WR_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_WR_OVR_get", A, 15);
    /* (0x00000030 bits 21) field ADC_WR_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_WR_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_WR_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_WR_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_D_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_D_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_D_OVR_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_D_OVR_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_D_OVR_set", A, value );

    /* (0x00000030 bits 20:12) field ADC_D_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_D_OVR_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_D_OVR_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_D_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_D_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_D_OVR_get", A, 15);
    /* (0x00000030 bits 20:12) field ADC_D_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_D_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_D_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_D_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_ADC_D_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_ADC_D_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ADC_D_OVR_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ADC_D_OVR_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ADC_D_OVR_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ADC_D_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000030 bits 20:12) field ADC_D_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000030 bits 20:12) field ADC_D_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_D_OVR_OFF + subfield_offset),
                                                                          PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_D_OVR_OFF + subfield_offset,
                                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_ADC_D_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_ADC_D_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ADC_D_OVR_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ADC_D_OVR_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ADC_D_OVR_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000030 bits 20:12) field ADC_D_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_D_OVR_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_D_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_D_OVR_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_D_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ADC_D_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_A_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_A_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_A_OVR_set", A, 15);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_A_OVR_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_A_OVR_set", A, value );

    /* (0x00000030 bits 11:4) field ADC_A_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_A_OVR_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_A_OVR_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_A_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_A_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_A_OVR_get", A, 15);
    /* (0x00000030 bits 11:4) field ADC_A_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_A_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_A_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_A_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_ADC_A_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_ADC_A_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ADC_A_OVR_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ADC_A_OVR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ADC_A_OVR_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ADC_A_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000030 bits 11:4) field ADC_A_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000030 bits 11:4) field ADC_A_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_A_OVR_OFF + subfield_offset),
                                                                          PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_A_OVR_OFF + subfield_offset,
                                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_ADC_A_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_ADC_A_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ADC_A_OVR_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ADC_A_OVR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ADC_A_OVR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000030 bits 11:4) field ADC_A_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_A_OVR_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_A_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_A_OVR_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_ADC_A_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ADC_A_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_MABC_ADC_OC_INT_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_MABC_ADC_OC_INT_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MABC_ADC_OC_INT_OVR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_MABC_ADC_OC_INT_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_MABC_ADC_OC_INT_OVR_EN_set", A, value );

    /* (0x00000030 bits 2) field MABC_ADC_OC_INT_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_MABC_ADC_OC_INT_OVR_EN_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_MABC_ADC_OC_INT_OVR_EN_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_MABC_ADC_OC_INT_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_MABC_ADC_OC_INT_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MABC_ADC_OC_INT_OVR_EN_get", A, 15);
    /* (0x00000030 bits 2) field MABC_ADC_OC_INT_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_MABC_ADC_OC_INT_OVR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_MABC_ADC_OC_INT_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_MABC_ADC_OC_INT_OVR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CALIB_PROG_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CALIB_PROG_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CALIB_PROG_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_CALIB_PROG_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CALIB_PROG_EN_set", A, value );

    /* (0x00000030 bits 1) field CALIB_PROG_EN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_CALIB_PROG_EN_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_CALIB_PROG_EN_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_CALIB_PROG_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CALIB_PROG_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CALIB_PROG_EN_get", A, 15);
    /* (0x00000030 bits 1) field CALIB_PROG_EN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_CALIB_PROG_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_1_BIT_CALIB_PROG_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CALIB_PROG_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_RAM_ERR_INJECT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_RAM_ERR_INJECT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_RAM_ERR_INJECT_set", A, 15);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_RAM_ERR_INJECT_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_RAM_ERR_INJECT_set", A, value );

    /* (0x00000034 bits 29:28) field OFFSET_RAM_RAM_ERR_INJECT of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RAM_ERR_INJECT_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RAM_ERR_INJECT_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_RAM_ERR_INJECT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_RAM_ERR_INJECT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_RAM_ERR_INJECT_get", A, 15);
    /* (0x00000034 bits 29:28) field OFFSET_RAM_RAM_ERR_INJECT of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RAM_ERR_INJECT_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RAM_ERR_INJECT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_RAM_ERR_INJECT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 start_bit,
                                                                               UINT32 stop_bit,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 start_bit,
                                                                               UINT32 stop_bit,
                                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000034 bits 29:28) field OFFSET_RAM_RAM_ERR_INJECT of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000034 bits 29:28) field OFFSET_RAM_RAM_ERR_INJECT of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RAM_ERR_INJECT_OFF + subfield_offset),
                                                                          PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RAM_ERR_INJECT_OFF + subfield_offset,
                                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 start_bit,
                                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 start_bit,
                                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000034 bits 29:28) field OFFSET_RAM_RAM_ERR_INJECT of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RAM_ERR_INJECT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RAM_ERR_INJECT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RAM_ERR_INJECT_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RAM_ERR_INJECT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OFFSET_RAM_RAM_ERR_INJECT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_SD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_SD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_SD_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_SD_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_SD_set", A, value );

    /* (0x00000034 bits 25) field OFFSET_RAM_SD of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_SD_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_SD_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_SD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_SD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_SD_get", A, 15);
    /* (0x00000034 bits 25) field OFFSET_RAM_SD of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_SD_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_SD_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_SD_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_DS_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_DS_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_DS_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_DS_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_DS_set", A, value );

    /* (0x00000034 bits 24) field OFFSET_RAM_DS of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DS_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DS_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_DS_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_DS_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_DS_get", A, 15);
    /* (0x00000034 bits 24) field OFFSET_RAM_DS of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DS_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_DS_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_LS_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_LS_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_LS_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_LS_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_LS_set", A, value );

    /* (0x00000034 bits 23) field OFFSET_RAM_LS of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_LS_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_LS_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_LS_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_LS_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_LS_get", A, 15);
    /* (0x00000034 bits 23) field OFFSET_RAM_LS of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_LS_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_LS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_LS_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_DIN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_DIN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_DIN_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_DIN_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_DIN_set", A, value );

    /* (0x00000034 bits 22:14) field OFFSET_RAM_DIN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DIN_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DIN_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_DIN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_DIN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_DIN_get", A, 15);
    /* (0x00000034 bits 22:14) field OFFSET_RAM_DIN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DIN_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DIN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_DIN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OFFSET_RAM_DIN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OFFSET_RAM_DIN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OFFSET_RAM_DIN_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OFFSET_RAM_DIN_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OFFSET_RAM_DIN_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OFFSET_RAM_DIN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000034 bits 22:14) field OFFSET_RAM_DIN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000034 bits 22:14) field OFFSET_RAM_DIN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DIN_OFF + subfield_offset),
                                                                          PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DIN_OFF + subfield_offset,
                                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OFFSET_RAM_DIN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OFFSET_RAM_DIN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OFFSET_RAM_DIN_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OFFSET_RAM_DIN_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OFFSET_RAM_DIN_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000034 bits 22:14) field OFFSET_RAM_DIN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DIN_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DIN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DIN_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_DIN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OFFSET_RAM_DIN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_ADDR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_ADDR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_ADDR_set", A, 15);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_ADDR_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_ADDR_set", A, value );

    /* (0x00000034 bits 12:4) field OFFSET_RAM_ADDR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_ADDR_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_ADDR_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_ADDR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_ADDR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_ADDR_get", A, 15);
    /* (0x00000034 bits 12:4) field OFFSET_RAM_ADDR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_ADDR_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_ADDR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_ADDR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000034 bits 12:4) field OFFSET_RAM_ADDR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000034 bits 12:4) field OFFSET_RAM_ADDR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          subfield_mask << (PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_ADDR_OFF + subfield_offset),
                                                                          PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_ADDR_OFF + subfield_offset,
                                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000034 bits 12:4) field OFFSET_RAM_ADDR of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_ADDR_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_ADDR_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OFFSET_RAM_ADDR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_RWB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_RWB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_RWB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_RWB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_RWB_set", A, value );

    /* (0x00000034 bits 3) field OFFSET_RAM_RWB of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RWB_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RWB_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_RWB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_RWB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_RWB_get", A, 15);
    /* (0x00000034 bits 3) field OFFSET_RAM_RWB of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RWB_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_RWB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_RWB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_CEB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_CEB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_CEB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_CEB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_CEB_set", A, value );

    /* (0x00000034 bits 2) field OFFSET_RAM_CEB of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_CEB_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_CEB_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_CEB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_CEB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_CEB_get", A, 15);
    /* (0x00000034 bits 2) field OFFSET_RAM_CEB of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_CEB_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_CEB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_CEB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_CLK_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_CLK_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_CLK_SEL_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_CLK_SEL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_CLK_SEL_set", A, value );

    /* (0x00000034 bits 1) field OFFSET_RAM_CLK_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_CLK_SEL_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_CLK_SEL_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_CLK_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_CLK_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_CLK_SEL_get", A, 15);
    /* (0x00000034 bits 1) field OFFSET_RAM_CLK_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_CLK_SEL_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_CLK_SEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_CLK_SEL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_PCLK_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OFFSET_RAM_PCLK_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_PCLK_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_PCLK_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_PCLK_EN_set", A, value );

    /* (0x00000034 bits 0) field OFFSET_RAM_PCLK_EN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_field_set( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_PCLK_EN_MSK,
                                                                      PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_PCLK_EN_OFF,
                                                                      value);
}

static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_PCLK_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_PCLK_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_PCLK_EN_get", A, 15);
    /* (0x00000034 bits 0) field OFFSET_RAM_PCLK_EN of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_PCLK_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_2_BIT_OFFSET_RAM_PCLK_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_PCLK_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RAM_CAPTURE_SD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RAM_CAPTURE_SD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAM_CAPTURE_SD_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RAM_CAPTURE_SD_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RAM_CAPTURE_SD_set", A, value );

    /* (0x0000003c bits 30) field RAM_CAPTURE_SD of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_SD_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_SD_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_RAM_CAPTURE_SD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RAM_CAPTURE_SD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAM_CAPTURE_SD_get", A, 15);
    /* (0x0000003c bits 30) field RAM_CAPTURE_SD of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_SD_MSK) >> PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_SD_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RAM_CAPTURE_SD_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RAM_CAPTURE_DS_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RAM_CAPTURE_DS_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAM_CAPTURE_DS_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RAM_CAPTURE_DS_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RAM_CAPTURE_DS_set", A, value );

    /* (0x0000003c bits 29) field RAM_CAPTURE_DS of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_DS_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_DS_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_RAM_CAPTURE_DS_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RAM_CAPTURE_DS_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAM_CAPTURE_DS_get", A, 15);
    /* (0x0000003c bits 29) field RAM_CAPTURE_DS of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_DS_MSK) >> PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_DS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RAM_CAPTURE_DS_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RAM_CAPTURE_LS_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RAM_CAPTURE_LS_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAM_CAPTURE_LS_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RAM_CAPTURE_LS_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RAM_CAPTURE_LS_set", A, value );

    /* (0x0000003c bits 28) field RAM_CAPTURE_LS of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_LS_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_LS_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_RAM_CAPTURE_LS_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RAM_CAPTURE_LS_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAM_CAPTURE_LS_get", A, 15);
    /* (0x0000003c bits 28) field RAM_CAPTURE_LS of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_LS_MSK) >> PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAM_CAPTURE_LS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RAM_CAPTURE_LS_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RAMCAPT_RST_RD_ADDR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RAMCAPT_RST_RD_ADDR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_RST_RD_ADDR_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RAMCAPT_RST_RD_ADDR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_RST_RD_ADDR_set", A, value );

    /* (0x0000003c bits 4) field RAMCAPT_RST_RD_ADDR of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_RST_RD_ADDR_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_RST_RD_ADDR_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_RST_RD_ADDR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_RST_RD_ADDR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_RST_RD_ADDR_get", A, 15);
    /* (0x0000003c bits 4) field RAMCAPT_RST_RD_ADDR of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_RST_RD_ADDR_MSK) >> PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_RST_RD_ADDR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_RST_RD_ADDR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RAMCAPT_CAPT_START_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RAMCAPT_CAPT_START_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_CAPT_START_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RAMCAPT_CAPT_START_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_CAPT_START_set", A, value );

    /* (0x0000003c bits 3) field RAMCAPT_CAPT_START of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_CAPT_START_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_CAPT_START_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_CAPT_START_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_CAPT_START_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_CAPT_START_get", A, 15);
    /* (0x0000003c bits 3) field RAMCAPT_CAPT_START of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_CAPT_START_MSK) >> PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_CAPT_START_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_CAPT_START_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RAMCAPT_STOP_EVENT_SELECT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RAMCAPT_STOP_EVENT_SELECT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_STOP_EVENT_SELECT_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RAMCAPT_STOP_EVENT_SELECT_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_STOP_EVENT_SELECT_set", A, value );

    /* (0x0000003c bits 2) field RAMCAPT_STOP_EVENT_SELECT of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_STOP_EVENT_SELECT_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_STOP_EVENT_SELECT_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_STOP_EVENT_SELECT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_STOP_EVENT_SELECT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_STOP_EVENT_SELECT_get", A, 15);
    /* (0x0000003c bits 2) field RAMCAPT_STOP_EVENT_SELECT of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_STOP_EVENT_SELECT_MSK) >> PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_STOP_EVENT_SELECT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_STOP_EVENT_SELECT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RAMCAPT_CAPT_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RAMCAPT_CAPT_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_CAPT_MODE_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RAMCAPT_CAPT_MODE_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_CAPT_MODE_set", A, value );

    /* (0x0000003c bits 1) field RAMCAPT_CAPT_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_CAPT_MODE_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_CAPT_MODE_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_CAPT_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_CAPT_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_CAPT_MODE_get", A, 15);
    /* (0x0000003c bits 1) field RAMCAPT_CAPT_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_CAPT_MODE_MSK) >> PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_CAPT_MODE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_CAPT_MODE_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RAMCAPT_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RAMCAPT_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_ENB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RAMCAPT_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_ENB_set", A, value );

    /* (0x0000003c bits 0) field RAMCAPT_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_ENB_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_ENB_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_ENB_get", A, 15);
    /* (0x0000003c bits 0) field RAMCAPT_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_ENB_MSK) >> PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_ENB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VHIST_PERBIN_VALUE_RD_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VHIST_PERBIN_VALUE_RD_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_PERBIN_VALUE_RD_ENB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VHIST_PERBIN_VALUE_RD_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_PERBIN_VALUE_RD_ENB_set", A, value );

    /* (0x00000044 bits 3) field VHIST_PERBIN_VALUE_RD_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_PERBIN_VALUE_RD_ENB_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_PERBIN_VALUE_RD_ENB_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VHIST_PERBIN_VALUE_RD_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_PERBIN_VALUE_RD_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_PERBIN_VALUE_RD_ENB_get", A, 15);
    /* (0x00000044 bits 3) field VHIST_PERBIN_VALUE_RD_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_PERBIN_VALUE_RD_ENB_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_PERBIN_VALUE_RD_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_PERBIN_VALUE_RD_ENB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VHIST_CAPT_START_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VHIST_CAPT_START_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_CAPT_START_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VHIST_CAPT_START_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_CAPT_START_set", A, value );

    /* (0x00000044 bits 2) field VHIST_CAPT_START of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_CAPT_START_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_CAPT_START_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VHIST_CAPT_START_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_CAPT_START_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_CAPT_START_get", A, 15);
    /* (0x00000044 bits 2) field VHIST_CAPT_START of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_CAPT_START_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_CAPT_START_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_CAPT_START_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VHIST_TITAN_TARGET_AMP_WR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VHIST_TITAN_TARGET_AMP_WR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_TITAN_TARGET_AMP_WR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VHIST_TITAN_TARGET_AMP_WR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_TITAN_TARGET_AMP_WR_EN_set", A, value );

    /* (0x00000044 bits 1) field VHIST_TITAN_TARGET_AMP_WR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_TITAN_TARGET_AMP_WR_EN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_TITAN_TARGET_AMP_WR_EN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VHIST_TITAN_TARGET_AMP_WR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_TITAN_TARGET_AMP_WR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_TITAN_TARGET_AMP_WR_EN_get", A, 15);
    /* (0x00000044 bits 1) field VHIST_TITAN_TARGET_AMP_WR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_TITAN_TARGET_AMP_WR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_TITAN_TARGET_AMP_WR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_TITAN_TARGET_AMP_WR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VHIST_CAPT_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VHIST_CAPT_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_CAPT_ENB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VHIST_CAPT_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_CAPT_ENB_set", A, value );

    /* (0x00000044 bits 0) field VHIST_CAPT_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_CAPT_ENB_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_CAPT_ENB_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VHIST_CAPT_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_CAPT_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_CAPT_ENB_get", A, 15);
    /* (0x00000044 bits 0) field VHIST_CAPT_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_CAPT_ENB_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_1_BIT_VHIST_CAPT_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_CAPT_ENB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_31_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_31_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_31_0_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_31_0_set", A, value );

    /* (0x00000048 bits 31:0) field VHIST_CNT_TIM_LIMIT_31_0 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_BIT_VHIST_CNT_TIM_LIMIT_31_0_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_31_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_31_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_31_0_get", A, 15);
    /* (0x00000048 bits 31:0) field VHIST_CNT_TIM_LIMIT_31_0 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_BIT_VHIST_CNT_TIM_LIMIT_31_0_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_31_0_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit,
                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit,
                                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000048 bits 31:0) field VHIST_CNT_TIM_LIMIT_31_0 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000048 bits 31:0) field VHIST_CNT_TIM_LIMIT_31_0 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000048 bits 31:0) field VHIST_CNT_TIM_LIMIT_31_0 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_BIT_VHIST_CNT_TIM_LIMIT_31_0_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_BIT_VHIST_CNT_TIM_LIMIT_31_0_MSK, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_31_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_39_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_39_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_39_32_set", A, 15);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_39_32_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_39_32_set", A, value );

    /* (0x0000004c bits 7:0) field VHIST_CNT_TIM_LIMIT_39_32 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_BIT_VHIST_CNT_TIM_LIMIT_39_32_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_39_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_39_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_39_32_get", A, 15);
    /* (0x0000004c bits 7:0) field VHIST_CNT_TIM_LIMIT_39_32 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_BIT_VHIST_CNT_TIM_LIMIT_39_32_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_CNT_TIM_LIMIT_39_32_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 start_bit,
                                                                               UINT32 stop_bit,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 start_bit,
                                                                               UINT32 stop_bit,
                                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000004c bits 7:0) field VHIST_CNT_TIM_LIMIT_39_32 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000004c bits 7:0) field VHIST_CNT_TIM_LIMIT_39_32 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 start_bit,
                                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 start_bit,
                                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000004c bits 7:0) field VHIST_CNT_TIM_LIMIT_39_32 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_BIT_VHIST_CNT_TIM_LIMIT_39_32_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_BIT_VHIST_CNT_TIM_LIMIT_39_32_MSK, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_3_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_VHIST_CNT_TIM_LIMIT_39_32_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_SSI_THRESHOLD_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SSI_THRESHOLD_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_THRESHOLD_OVR_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SSI_THRESHOLD_OVR_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SSI_THRESHOLD_OVR_set", A, value );

    /* (0x0000005c bits 25:21) bits 0:4 use field SSI_THRESHOLD_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_MSK,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_OFF,
                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_SSI_THRESHOLD_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_THRESHOLD_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_THRESHOLD_OVR_get", A, 15);
    /* (0x0000005c bits 25:21) bits 0:4 use field SSI_THRESHOLD_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_THRESHOLD_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000005c bits 25:21) bits 0:4 use field SSI_THRESHOLD_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000005c bits 25:21) bits 0:4 use field SSI_THRESHOLD_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set( b_ptr,
                                                               h_ptr,
                                                               A,
                                                               subfield_mask << (PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_OFF + subfield_offset),
                                                               PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000005c bits 25:21) bits 0:4 use field SSI_THRESHOLD_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_MSK, PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_SSI_THRESHOLD_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_SSI_THRESHOLD_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SSI_THRESHOLD_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_THRESHOLD_OVR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SSI_THRESHOLD_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SSI_THRESHOLD_OVR_EN_set", A, value );

    /* (0x0000005c bits 20) field SSI_THRESHOLD_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_EN_MSK,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_EN_OFF,
                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_SSI_THRESHOLD_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_THRESHOLD_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_THRESHOLD_OVR_EN_get", A, 15);
    /* (0x0000005c bits 20) field SSI_THRESHOLD_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_THRESHOLD_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_THRESHOLD_OVR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_SSI_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SSI_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_OVR_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SSI_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SSI_OVR_set", A, value );

    /* (0x0000005c bits 19) field SSI_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_OVR_MSK,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_OVR_OFF,
                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_SSI_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_OVR_get", A, 15);
    /* (0x0000005c bits 19) field SSI_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_SSI_ADJ_THR_RELEASES_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SSI_ADJ_THR_RELEASES_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_ADJ_THR_RELEASES_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SSI_ADJ_THR_RELEASES_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SSI_ADJ_THR_RELEASES_set", A, value );

    /* (0x0000005c bits 18) field SSI_ADJ_THR_RELEASES of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ADJ_THR_RELEASES_MSK,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ADJ_THR_RELEASES_OFF,
                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_SSI_ADJ_THR_RELEASES_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_ADJ_THR_RELEASES_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_ADJ_THR_RELEASES_get", A, 15);
    /* (0x0000005c bits 18) field SSI_ADJ_THR_RELEASES of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ADJ_THR_RELEASES_MSK) >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ADJ_THR_RELEASES_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_ADJ_THR_RELEASES_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_SSI_LIMIT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SSI_LIMIT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_LIMIT_set", A, 15);
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SSI_LIMIT_set", value, 16383);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SSI_LIMIT_set", A, value );

    /* (0x0000005c bits 17:4) bits 0:13 use field SSI_LIMIT of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_LIMIT_MSK,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_LIMIT_OFF,
                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_SSI_LIMIT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_LIMIT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_LIMIT_get", A, 15);
    /* (0x0000005c bits 17:4) bits 0:13 use field SSI_LIMIT of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_LIMIT_MSK) >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_LIMIT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_LIMIT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_SSI_LIMIT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_SSI_LIMIT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_SSI_LIMIT_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_SSI_LIMIT_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_SSI_LIMIT_set", stop_bit, 13 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_SSI_LIMIT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000005c bits 17:4) bits 0:13 use field SSI_LIMIT of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000005c bits 17:4) bits 0:13 use field SSI_LIMIT of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set( b_ptr,
                                                               h_ptr,
                                                               A,
                                                               subfield_mask << (PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_LIMIT_OFF + subfield_offset),
                                                               PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_LIMIT_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_SSI_LIMIT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_SSI_LIMIT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_SSI_LIMIT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_SSI_LIMIT_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_SSI_LIMIT_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000005c bits 17:4) bits 0:13 use field SSI_LIMIT of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_LIMIT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_LIMIT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_LIMIT_MSK, PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_LIMIT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_SSI_LIMIT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_SSI_ACC_CNT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SSI_ACC_CNT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_ACC_CNT_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SSI_ACC_CNT_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SSI_ACC_CNT_set", A, value );

    /* (0x0000005c bits 3:0) bits 0:3 use field SSI_ACC_CNT of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ACC_CNT_MSK,
                                                           PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ACC_CNT_OFF,
                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_SSI_ACC_CNT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_ACC_CNT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_ACC_CNT_get", A, 15);
    /* (0x0000005c bits 3:0) bits 0:3 use field SSI_ACC_CNT of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ACC_CNT_MSK) >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ACC_CNT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_ACC_CNT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_SSI_ACC_CNT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_SSI_ACC_CNT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_SSI_ACC_CNT_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_SSI_ACC_CNT_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_SSI_ACC_CNT_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_SSI_ACC_CNT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000005c bits 3:0) bits 0:3 use field SSI_ACC_CNT of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000005c bits 3:0) bits 0:3 use field SSI_ACC_CNT of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_field_set( b_ptr,
                                                               h_ptr,
                                                               A,
                                                               subfield_mask << (PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ACC_CNT_OFF + subfield_offset),
                                                               PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ACC_CNT_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_SSI_ACC_CNT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_SSI_ACC_CNT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_SSI_ACC_CNT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_SSI_ACC_CNT_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_SSI_ACC_CNT_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000005c bits 3:0) bits 0:3 use field SSI_ACC_CNT of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ACC_CNT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ACC_CNT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ACC_CNT_MSK, PCBI_REG_CHANNEL_PCBI_SSI_CFG_1_BIT_SSI_ACC_CNT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_SSI_ACC_CNT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RXLOS_EXT_LOOPBACK_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RXLOS_EXT_LOOPBACK_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RXLOS_EXT_LOOPBACK_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RXLOS_EXT_LOOPBACK_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RXLOS_EXT_LOOPBACK_EN_set", A, value );

    /* (0x00000064 bits 3) field RXLOS_EXT_LOOPBACK_EN of register PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_RXLOS_EXT_LOOPBACK_EN_MSK,
                                                           PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_RXLOS_EXT_LOOPBACK_EN_OFF,
                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_RXLOS_EXT_LOOPBACK_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RXLOS_EXT_LOOPBACK_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RXLOS_EXT_LOOPBACK_EN_get", A, 15);
    /* (0x00000064 bits 3) field RXLOS_EXT_LOOPBACK_EN of register PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_RXLOS_EXT_LOOPBACK_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_RXLOS_EXT_LOOPBACK_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RXLOS_EXT_LOOPBACK_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RXLOS_INT_LOOPBACK_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RXLOS_INT_LOOPBACK_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RXLOS_INT_LOOPBACK_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RXLOS_INT_LOOPBACK_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RXLOS_INT_LOOPBACK_EN_set", A, value );

    /* (0x00000064 bits 2) field RXLOS_INT_LOOPBACK_EN of register PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_RXLOS_INT_LOOPBACK_EN_MSK,
                                                           PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_RXLOS_INT_LOOPBACK_EN_OFF,
                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_RXLOS_INT_LOOPBACK_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RXLOS_INT_LOOPBACK_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RXLOS_INT_LOOPBACK_EN_get", A, 15);
    /* (0x00000064 bits 2) field RXLOS_INT_LOOPBACK_EN of register PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_RXLOS_INT_LOOPBACK_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_RXLOS_INT_LOOPBACK_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RXLOS_INT_LOOPBACK_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TX_SQUELCH_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TX_SQUELCH_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_SQUELCH_OVR_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TX_SQUELCH_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TX_SQUELCH_OVR_set", A, value );

    /* (0x00000064 bits 1) field TX_SQUELCH_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_TX_SQUELCH_OVR_MSK,
                                                           PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_TX_SQUELCH_OVR_OFF,
                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_TX_SQUELCH_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TX_SQUELCH_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_SQUELCH_OVR_get", A, 15);
    /* (0x00000064 bits 1) field TX_SQUELCH_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_TX_SQUELCH_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_TX_SQUELCH_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TX_SQUELCH_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TX_SQUELCH_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TX_SQUELCH_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_SQUELCH_OVR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TX_SQUELCH_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TX_SQUELCH_OVR_EN_set", A, value );

    /* (0x00000064 bits 0) field TX_SQUELCH_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_TX_SQUELCH_OVR_EN_MSK,
                                                           PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_TX_SQUELCH_OVR_EN_OFF,
                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_TX_SQUELCH_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TX_SQUELCH_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_SQUELCH_OVR_EN_get", A, 15);
    /* (0x00000064 bits 0) field TX_SQUELCH_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_LOS_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LOS_CFG_1_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_TX_SQUELCH_OVR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_LOS_CFG_1_BIT_TX_SQUELCH_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TX_SQUELCH_OVR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_OVERRIDE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_OVERRIDE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_OVERRIDE_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_set", A, value );

    /* (0x00000068 bits 31:27) bits 0:4 use field OC_OVERRIDE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( b_ptr,
                                                                                h_ptr,
                                                                                A,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_MSK,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_OFF,
                                                                                value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_OVERRIDE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_OVERRIDE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_OVERRIDE_get", A, 15);
    /* (0x00000068 bits 31:27) bits 0:4 use field OC_OVERRIDE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OC_OVERRIDE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OC_OVERRIDE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_OVERRIDE_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_OVERRIDE_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_OVERRIDE_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_OVERRIDE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000068 bits 31:27) bits 0:4 use field OC_OVERRIDE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000068 bits 31:27) bits 0:4 use field OC_OVERRIDE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( b_ptr,
                                                                                    h_ptr,
                                                                                    A,
                                                                                    subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_OFF + subfield_offset),
                                                                                    PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_OFF + subfield_offset,
                                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OC_OVERRIDE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OC_OVERRIDE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_OVERRIDE_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_OVERRIDE_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_OVERRIDE_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000068 bits 31:27) bits 0:4 use field OC_OVERRIDE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_OVERRIDE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_OVERRIDE_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_OVERRIDE_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_OVERRIDE_ENB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_ENB_set", A, value );

    /* (0x00000068 bits 26) field OC_OVERRIDE_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( b_ptr,
                                                                                h_ptr,
                                                                                A,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_ENB_MSK,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_ENB_OFF,
                                                                                value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_OVERRIDE_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_OVERRIDE_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_OVERRIDE_ENB_get", A, 15);
    /* (0x00000068 bits 26) field OC_OVERRIDE_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_ENB_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_OVERRIDE_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_ENB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_SENSE_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_SENSE_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_SENSE_ENB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_SENSE_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_SENSE_ENB_set", A, value );

    /* (0x00000068 bits 25) field OC_SENSE_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( b_ptr,
                                                                                h_ptr,
                                                                                A,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_SENSE_ENB_MSK,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_SENSE_ENB_OFF,
                                                                                value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_SENSE_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_SENSE_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_SENSE_ENB_get", A, 15);
    /* (0x00000068 bits 25) field OC_SENSE_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_SENSE_ENB_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_SENSE_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_SENSE_ENB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_THRESHOLD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_THRESHOLD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_THRESHOLD_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_THRESHOLD_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_THRESHOLD_set", A, value );

    /* (0x00000068 bits 9:6) bits 0:3 use field OC_THRESHOLD of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( b_ptr,
                                                                                h_ptr,
                                                                                A,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_THRESHOLD_MSK,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_THRESHOLD_OFF,
                                                                                value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_THRESHOLD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_THRESHOLD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_THRESHOLD_get", A, 15);
    /* (0x00000068 bits 9:6) bits 0:3 use field OC_THRESHOLD of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_THRESHOLD_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_THRESHOLD_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_THRESHOLD_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OC_THRESHOLD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OC_THRESHOLD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_THRESHOLD_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_THRESHOLD_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_THRESHOLD_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_THRESHOLD_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000068 bits 9:6) bits 0:3 use field OC_THRESHOLD of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000068 bits 9:6) bits 0:3 use field OC_THRESHOLD of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( b_ptr,
                                                                                    h_ptr,
                                                                                    A,
                                                                                    subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_THRESHOLD_OFF + subfield_offset),
                                                                                    PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_THRESHOLD_OFF + subfield_offset,
                                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OC_THRESHOLD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OC_THRESHOLD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_THRESHOLD_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_THRESHOLD_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_THRESHOLD_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000068 bits 9:6) bits 0:3 use field OC_THRESHOLD of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_THRESHOLD_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_THRESHOLD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_THRESHOLD_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_THRESHOLD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_THRESHOLD_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OCC_DONE_GEN_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OCC_DONE_GEN_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCC_DONE_GEN_SEL_set", A, 15);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OCC_DONE_GEN_SEL_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OCC_DONE_GEN_SEL_set", A, value );

    /* (0x00000068 bits 5:4) bits 0:1 use field OCC_DONE_GEN_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( b_ptr,
                                                                                h_ptr,
                                                                                A,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_DONE_GEN_SEL_MSK,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_DONE_GEN_SEL_OFF,
                                                                                value);
}

static INLINE UINT32 s16_channel_pcbi_field_OCC_DONE_GEN_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OCC_DONE_GEN_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCC_DONE_GEN_SEL_get", A, 15);
    /* (0x00000068 bits 5:4) bits 0:1 use field OCC_DONE_GEN_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_DONE_GEN_SEL_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_DONE_GEN_SEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OCC_DONE_GEN_SEL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000068 bits 5:4) bits 0:1 use field OCC_DONE_GEN_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000068 bits 5:4) bits 0:1 use field OCC_DONE_GEN_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( b_ptr,
                                                                                    h_ptr,
                                                                                    A,
                                                                                    subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_DONE_GEN_SEL_OFF + subfield_offset),
                                                                                    PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_DONE_GEN_SEL_OFF + subfield_offset,
                                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000068 bits 5:4) bits 0:1 use field OCC_DONE_GEN_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_DONE_GEN_SEL_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_DONE_GEN_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_DONE_GEN_SEL_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_DONE_GEN_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_INVERT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_INVERT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_INVERT_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_INVERT_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_INVERT_set", A, value );

    /* (0x00000068 bits 2) field OC_INVERT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( b_ptr,
                                                                                h_ptr,
                                                                                A,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_INVERT_MSK,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_INVERT_OFF,
                                                                                value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_INVERT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_INVERT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_INVERT_get", A, 15);
    /* (0x00000068 bits 2) field OC_INVERT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_INVERT_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OC_INVERT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_INVERT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OCC_CONT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OCC_CONT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCC_CONT_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OCC_CONT_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OCC_CONT_set", A, value );

    /* (0x00000068 bits 1) field OCC_CONT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_field_set( b_ptr,
                                                                                h_ptr,
                                                                                A,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_CONT_MSK,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_CONT_OFF,
                                                                                value);
}

static INLINE UINT32 s16_channel_pcbi_field_OCC_CONT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OCC_CONT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCC_CONT_get", A, 15);
    /* (0x00000068 bits 1) field OCC_CONT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_CONT_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_1_BIT_OCC_CONT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OCC_CONT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_INTERVAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_INTERVAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_INTERVAL_set", A, 15);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_INTERVAL_set", value, 65535);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_INTERVAL_set", A, value );

    /* (0x0000006c bits 30:15) bits 0:15 use field OC_INTERVAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_field_set( b_ptr,
                                                                                h_ptr,
                                                                                A,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_INTERVAL_MSK,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_INTERVAL_OFF,
                                                                                value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_INTERVAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_INTERVAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_INTERVAL_get", A, 15);
    /* (0x0000006c bits 30:15) bits 0:15 use field OC_INTERVAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_INTERVAL_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_INTERVAL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_INTERVAL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OC_INTERVAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OC_INTERVAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_INTERVAL_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_INTERVAL_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_INTERVAL_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_INTERVAL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000006c bits 30:15) bits 0:15 use field OC_INTERVAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000006c bits 30:15) bits 0:15 use field OC_INTERVAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_field_set( b_ptr,
                                                                                    h_ptr,
                                                                                    A,
                                                                                    subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_INTERVAL_OFF + subfield_offset),
                                                                                    PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_INTERVAL_OFF + subfield_offset,
                                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OC_INTERVAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OC_INTERVAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_INTERVAL_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_INTERVAL_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_INTERVAL_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000006c bits 30:15) bits 0:15 use field OC_INTERVAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_INTERVAL_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_INTERVAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_INTERVAL_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_INTERVAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_INTERVAL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_TOLERANCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_TOLERANCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_TOLERANCE_set", A, 15);
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_TOLERANCE_set", value, 32767);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_TOLERANCE_set", A, value );

    /* (0x0000006c bits 14:0) bits 0:14 use field OC_TOLERANCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_field_set( b_ptr,
                                                                                h_ptr,
                                                                                A,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_TOLERANCE_MSK,
                                                                                PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_TOLERANCE_OFF,
                                                                                value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_TOLERANCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_TOLERANCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_TOLERANCE_get", A, 15);
    /* (0x0000006c bits 14:0) bits 0:14 use field OC_TOLERANCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_TOLERANCE_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_TOLERANCE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_TOLERANCE_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OC_TOLERANCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OC_TOLERANCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_TOLERANCE_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_TOLERANCE_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_TOLERANCE_set", stop_bit, 14 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_TOLERANCE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000006c bits 14:0) bits 0:14 use field OC_TOLERANCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000006c bits 14:0) bits 0:14 use field OC_TOLERANCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_field_set( b_ptr,
                                                                                    h_ptr,
                                                                                    A,
                                                                                    subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_TOLERANCE_OFF + subfield_offset),
                                                                                    PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_TOLERANCE_OFF + subfield_offset,
                                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OC_TOLERANCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OC_TOLERANCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_TOLERANCE_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_TOLERANCE_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_TOLERANCE_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000006c bits 14:0) bits 0:14 use field OC_TOLERANCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_TOLERANCE_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_TOLERANCE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_TOLERANCE_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_2_BIT_OC_TOLERANCE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_TOLERANCE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_OVERRIDE_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_OVERRIDE_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_OVERRIDE_DIV3_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_DIV3_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_DIV3_set", A, value );

    /* (0x00000070 bits 31:27) bits 0:4 use field OC_OVERRIDE_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_DIV3_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_DIV3_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_OVERRIDE_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_OVERRIDE_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_OVERRIDE_DIV3_get", A, 15);
    /* (0x00000070 bits 31:27) bits 0:4 use field OC_OVERRIDE_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_DIV3_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_DIV3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_DIV3_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000070 bits 31:27) bits 0:4 use field OC_OVERRIDE_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000070 bits 31:27) bits 0:4 use field OC_OVERRIDE_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_DIV3_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_DIV3_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000070 bits 31:27) bits 0:4 use field OC_OVERRIDE_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_DIV3_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_DIV3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_DIV3_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_DIV3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_OVERRIDE_DIV3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_OVERRIDE_ENB_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_OVERRIDE_ENB_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_OVERRIDE_ENB_DIV3_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_ENB_DIV3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_ENB_DIV3_set", A, value );

    /* (0x00000070 bits 26) field OC_OVERRIDE_ENB_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_ENB_DIV3_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_ENB_DIV3_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_OVERRIDE_ENB_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_OVERRIDE_ENB_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_OVERRIDE_ENB_DIV3_get", A, 15);
    /* (0x00000070 bits 26) field OC_OVERRIDE_ENB_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_ENB_DIV3_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_OVERRIDE_ENB_DIV3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_OVERRIDE_ENB_DIV3_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_THRESHOLD_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_THRESHOLD_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_THRESHOLD_DIV3_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_THRESHOLD_DIV3_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_THRESHOLD_DIV3_set", A, value );

    /* (0x00000070 bits 9:6) bits 0:3 use field OC_THRESHOLD_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_THRESHOLD_DIV3_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_THRESHOLD_DIV3_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_THRESHOLD_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_THRESHOLD_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_THRESHOLD_DIV3_get", A, 15);
    /* (0x00000070 bits 9:6) bits 0:3 use field OC_THRESHOLD_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_THRESHOLD_DIV3_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_THRESHOLD_DIV3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_THRESHOLD_DIV3_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000070 bits 9:6) bits 0:3 use field OC_THRESHOLD_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000070 bits 9:6) bits 0:3 use field OC_THRESHOLD_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_THRESHOLD_DIV3_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_THRESHOLD_DIV3_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000070 bits 9:6) bits 0:3 use field OC_THRESHOLD_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_THRESHOLD_DIV3_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_THRESHOLD_DIV3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_THRESHOLD_DIV3_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_THRESHOLD_DIV3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_THRESHOLD_DIV3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OCC_DONE_GEN_SEL_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OCC_DONE_GEN_SEL_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCC_DONE_GEN_SEL_DIV3_set", A, 15);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OCC_DONE_GEN_SEL_DIV3_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OCC_DONE_GEN_SEL_DIV3_set", A, value );

    /* (0x00000070 bits 5:4) bits 0:1 use field OCC_DONE_GEN_SEL_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_DONE_GEN_SEL_DIV3_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_DONE_GEN_SEL_DIV3_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_OCC_DONE_GEN_SEL_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OCC_DONE_GEN_SEL_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCC_DONE_GEN_SEL_DIV3_get", A, 15);
    /* (0x00000070 bits 5:4) bits 0:1 use field OCC_DONE_GEN_SEL_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_DONE_GEN_SEL_DIV3_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_DONE_GEN_SEL_DIV3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OCC_DONE_GEN_SEL_DIV3_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000070 bits 5:4) bits 0:1 use field OCC_DONE_GEN_SEL_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000070 bits 5:4) bits 0:1 use field OCC_DONE_GEN_SEL_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_DONE_GEN_SEL_DIV3_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_DONE_GEN_SEL_DIV3_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000070 bits 5:4) bits 0:1 use field OCC_DONE_GEN_SEL_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_DONE_GEN_SEL_DIV3_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_DONE_GEN_SEL_DIV3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_DONE_GEN_SEL_DIV3_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_DONE_GEN_SEL_DIV3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OCC_DONE_GEN_SEL_DIV3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_INVERT_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_INVERT_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_INVERT_DIV3_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_INVERT_DIV3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_INVERT_DIV3_set", A, value );

    /* (0x00000070 bits 2) field OC_INVERT_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_INVERT_DIV3_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_INVERT_DIV3_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_INVERT_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_INVERT_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_INVERT_DIV3_get", A, 15);
    /* (0x00000070 bits 2) field OC_INVERT_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_INVERT_DIV3_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OC_INVERT_DIV3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_INVERT_DIV3_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OCC_CONT_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OCC_CONT_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCC_CONT_DIV3_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OCC_CONT_DIV3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OCC_CONT_DIV3_set", A, value );

    /* (0x00000070 bits 1) field OCC_CONT_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_CONT_DIV3_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_CONT_DIV3_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_OCC_CONT_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OCC_CONT_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCC_CONT_DIV3_get", A, 15);
    /* (0x00000070 bits 1) field OCC_CONT_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_CONT_DIV3_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_3_BIT_OCC_CONT_DIV3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OCC_CONT_DIV3_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_INTERVAL_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_INTERVAL_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_INTERVAL_DIV3_set", A, 15);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_INTERVAL_DIV3_set", value, 65535);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_INTERVAL_DIV3_set", A, value );

    /* (0x00000074 bits 30:15) bits 0:15 use field OC_INTERVAL_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_INTERVAL_DIV3_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_INTERVAL_DIV3_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_INTERVAL_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_INTERVAL_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_INTERVAL_DIV3_get", A, 15);
    /* (0x00000074 bits 30:15) bits 0:15 use field OC_INTERVAL_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_INTERVAL_DIV3_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_INTERVAL_DIV3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_INTERVAL_DIV3_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000074 bits 30:15) bits 0:15 use field OC_INTERVAL_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000074 bits 30:15) bits 0:15 use field OC_INTERVAL_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_INTERVAL_DIV3_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_INTERVAL_DIV3_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000074 bits 30:15) bits 0:15 use field OC_INTERVAL_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_INTERVAL_DIV3_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_INTERVAL_DIV3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_INTERVAL_DIV3_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_INTERVAL_DIV3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_INTERVAL_DIV3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OC_TOLERANCE_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OC_TOLERANCE_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_TOLERANCE_DIV3_set", A, 15);
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OC_TOLERANCE_DIV3_set", value, 32767);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OC_TOLERANCE_DIV3_set", A, value );

    /* (0x00000074 bits 14:0) bits 0:14 use field OC_TOLERANCE_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_TOLERANCE_DIV3_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_TOLERANCE_DIV3_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_OC_TOLERANCE_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_TOLERANCE_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_TOLERANCE_DIV3_get", A, 15);
    /* (0x00000074 bits 14:0) bits 0:14 use field OC_TOLERANCE_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_TOLERANCE_DIV3_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_TOLERANCE_DIV3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_TOLERANCE_DIV3_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_set", stop_bit, 14 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000074 bits 14:0) bits 0:14 use field OC_TOLERANCE_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000074 bits 14:0) bits 0:14 use field OC_TOLERANCE_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_TOLERANCE_DIV3_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_TOLERANCE_DIV3_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000074 bits 14:0) bits 0:14 use field OC_TOLERANCE_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_TOLERANCE_DIV3_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_TOLERANCE_DIV3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_TOLERANCE_DIV3_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_4_BIT_OC_TOLERANCE_DIV3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OC_TOLERANCE_DIV3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P1B_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P1B_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1B_PT_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P1B_PT_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P1B_PT_set", A, value );

    /* (0x00000080 bits 30:26) bits 0:4 use field P1B_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_PT_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_PT_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P1B_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P1B_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1B_PT_get", A, 15);
    /* (0x00000080 bits 30:26) bits 0:4 use field P1B_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_PT_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_PT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P1B_PT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P1B_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P1B_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1B_PT_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1B_PT_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1B_PT_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1B_PT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000080 bits 30:26) bits 0:4 use field P1B_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 30:26) bits 0:4 use field P1B_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_PT_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_PT_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P1B_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P1B_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1B_PT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1B_PT_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1B_PT_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 30:26) bits 0:4 use field P1B_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_PT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_PT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_PT_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_PT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1B_PT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P1B_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P1B_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1B_D2_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P1B_D2_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P1B_D2_set", A, value );

    /* (0x00000080 bits 25:21) bits 0:4 use field P1B_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D2_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D2_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P1B_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P1B_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1B_D2_get", A, 15);
    /* (0x00000080 bits 25:21) bits 0:4 use field P1B_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D2_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P1B_D2_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P1B_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P1B_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1B_D2_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1B_D2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1B_D2_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1B_D2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000080 bits 25:21) bits 0:4 use field P1B_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 25:21) bits 0:4 use field P1B_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D2_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D2_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P1B_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P1B_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1B_D2_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1B_D2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1B_D2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 25:21) bits 0:4 use field P1B_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D2_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D2_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1B_D2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P1B_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P1B_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1B_D1_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P1B_D1_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P1B_D1_set", A, value );

    /* (0x00000080 bits 20:16) bits 0:4 use field P1B_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D1_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D1_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P1B_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P1B_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1B_D1_get", A, 15);
    /* (0x00000080 bits 20:16) bits 0:4 use field P1B_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D1_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P1B_D1_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P1B_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P1B_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1B_D1_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1B_D1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1B_D1_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1B_D1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000080 bits 20:16) bits 0:4 use field P1B_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 20:16) bits 0:4 use field P1B_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D1_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D1_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P1B_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P1B_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1B_D1_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1B_D1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1B_D1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 20:16) bits 0:4 use field P1B_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D1_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D1_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1B_D1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1B_D1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P1A_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P1A_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1A_PT_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P1A_PT_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P1A_PT_set", A, value );

    /* (0x00000080 bits 15:11) bits 0:4 use field P1A_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_PT_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_PT_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P1A_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P1A_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1A_PT_get", A, 15);
    /* (0x00000080 bits 15:11) bits 0:4 use field P1A_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_PT_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_PT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P1A_PT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P1A_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P1A_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1A_PT_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1A_PT_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1A_PT_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1A_PT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000080 bits 15:11) bits 0:4 use field P1A_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 15:11) bits 0:4 use field P1A_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_PT_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_PT_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P1A_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P1A_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1A_PT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1A_PT_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1A_PT_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 15:11) bits 0:4 use field P1A_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_PT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_PT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_PT_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_PT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1A_PT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P1A_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P1A_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1A_D2_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P1A_D2_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P1A_D2_set", A, value );

    /* (0x00000080 bits 10:6) bits 0:4 use field P1A_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D2_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D2_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P1A_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P1A_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1A_D2_get", A, 15);
    /* (0x00000080 bits 10:6) bits 0:4 use field P1A_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D2_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P1A_D2_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P1A_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P1A_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1A_D2_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1A_D2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1A_D2_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1A_D2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000080 bits 10:6) bits 0:4 use field P1A_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 10:6) bits 0:4 use field P1A_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D2_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D2_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P1A_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P1A_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1A_D2_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1A_D2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1A_D2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 10:6) bits 0:4 use field P1A_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D2_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D2_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1A_D2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P1A_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P1A_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1A_D1_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P1A_D1_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P1A_D1_set", A, value );

    /* (0x00000080 bits 5:1) bits 0:4 use field P1A_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D1_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D1_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P1A_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P1A_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1A_D1_get", A, 15);
    /* (0x00000080 bits 5:1) bits 0:4 use field P1A_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D1_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P1A_D1_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P1A_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P1A_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1A_D1_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1A_D1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1A_D1_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1A_D1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000080 bits 5:1) bits 0:4 use field P1A_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 5:1) bits 0:4 use field P1A_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D1_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D1_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P1A_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P1A_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1A_D1_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1A_D1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1A_D1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 5:1) bits 0:4 use field P1A_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D1_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D1_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_P1A_D1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1A_D1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TX_CTRL_LOGIC_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TX_CTRL_LOGIC_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_CTRL_LOGIC_OVR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TX_CTRL_LOGIC_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TX_CTRL_LOGIC_OVR_EN_set", A, value );

    /* (0x00000080 bits 0) field TX_CTRL_LOGIC_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_TX_CTRL_LOGIC_OVR_EN_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_TX_CTRL_LOGIC_OVR_EN_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_TX_CTRL_LOGIC_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TX_CTRL_LOGIC_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_CTRL_LOGIC_OVR_EN_get", A, 15);
    /* (0x00000080 bits 0) field TX_CTRL_LOGIC_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_TX_CTRL_LOGIC_OVR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_1_BIT_TX_CTRL_LOGIC_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TX_CTRL_LOGIC_OVR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PISO_PRE2_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PISO_PRE2_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PISO_PRE2_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PISO_PRE2_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PISO_PRE2_EN_set", A, value );

    /* (0x00000084 bits 31) field PISO_PRE2_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_PISO_PRE2_EN_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_PISO_PRE2_EN_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_PISO_PRE2_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PISO_PRE2_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PISO_PRE2_EN_get", A, 15);
    /* (0x00000084 bits 31) field PISO_PRE2_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_PISO_PRE2_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_PISO_PRE2_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PISO_PRE2_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PISO_PRE1_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PISO_PRE1_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PISO_PRE1_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PISO_PRE1_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PISO_PRE1_EN_set", A, value );

    /* (0x00000084 bits 30) field PISO_PRE1_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_PISO_PRE1_EN_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_PISO_PRE1_EN_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_PISO_PRE1_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PISO_PRE1_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PISO_PRE1_EN_get", A, 15);
    /* (0x00000084 bits 30) field PISO_PRE1_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_PISO_PRE1_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_PISO_PRE1_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PISO_PRE1_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P2B_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P2B_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2B_PT_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P2B_PT_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P2B_PT_set", A, value );

    /* (0x00000084 bits 29:25) bits 0:4 use field P2B_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_PT_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_PT_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P2B_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P2B_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2B_PT_get", A, 15);
    /* (0x00000084 bits 29:25) bits 0:4 use field P2B_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_PT_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_PT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P2B_PT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P2B_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P2B_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2B_PT_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2B_PT_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2B_PT_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2B_PT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000084 bits 29:25) bits 0:4 use field P2B_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 29:25) bits 0:4 use field P2B_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_PT_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_PT_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P2B_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P2B_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2B_PT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2B_PT_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2B_PT_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 29:25) bits 0:4 use field P2B_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_PT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_PT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_PT_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_PT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2B_PT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P2B_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P2B_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2B_D2_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P2B_D2_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P2B_D2_set", A, value );

    /* (0x00000084 bits 24:20) bits 0:4 use field P2B_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D2_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D2_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P2B_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P2B_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2B_D2_get", A, 15);
    /* (0x00000084 bits 24:20) bits 0:4 use field P2B_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D2_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P2B_D2_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P2B_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P2B_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2B_D2_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2B_D2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2B_D2_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2B_D2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000084 bits 24:20) bits 0:4 use field P2B_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 24:20) bits 0:4 use field P2B_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D2_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D2_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P2B_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P2B_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2B_D2_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2B_D2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2B_D2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 24:20) bits 0:4 use field P2B_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D2_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D2_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2B_D2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P2B_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P2B_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2B_D1_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P2B_D1_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P2B_D1_set", A, value );

    /* (0x00000084 bits 19:15) bits 0:4 use field P2B_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D1_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D1_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P2B_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P2B_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2B_D1_get", A, 15);
    /* (0x00000084 bits 19:15) bits 0:4 use field P2B_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D1_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P2B_D1_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P2B_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P2B_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2B_D1_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2B_D1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2B_D1_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2B_D1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000084 bits 19:15) bits 0:4 use field P2B_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 19:15) bits 0:4 use field P2B_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D1_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D1_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P2B_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P2B_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2B_D1_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2B_D1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2B_D1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 19:15) bits 0:4 use field P2B_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D1_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D1_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2B_D1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2B_D1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P2A_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P2A_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2A_PT_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P2A_PT_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P2A_PT_set", A, value );

    /* (0x00000084 bits 14:10) bits 0:4 use field P2A_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_PT_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_PT_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P2A_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P2A_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2A_PT_get", A, 15);
    /* (0x00000084 bits 14:10) bits 0:4 use field P2A_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_PT_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_PT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P2A_PT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P2A_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P2A_PT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2A_PT_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2A_PT_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2A_PT_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2A_PT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000084 bits 14:10) bits 0:4 use field P2A_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 14:10) bits 0:4 use field P2A_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_PT_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_PT_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P2A_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P2A_PT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2A_PT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2A_PT_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2A_PT_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 14:10) bits 0:4 use field P2A_PT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_PT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_PT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_PT_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_PT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2A_PT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P2A_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P2A_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2A_D2_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P2A_D2_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P2A_D2_set", A, value );

    /* (0x00000084 bits 9:5) bits 0:4 use field P2A_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D2_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D2_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P2A_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P2A_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2A_D2_get", A, 15);
    /* (0x00000084 bits 9:5) bits 0:4 use field P2A_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D2_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P2A_D2_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P2A_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P2A_D2_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2A_D2_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2A_D2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2A_D2_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2A_D2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000084 bits 9:5) bits 0:4 use field P2A_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 9:5) bits 0:4 use field P2A_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D2_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D2_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P2A_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P2A_D2_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2A_D2_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2A_D2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2A_D2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 9:5) bits 0:4 use field P2A_D2 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D2_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D2_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2A_D2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P2A_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P2A_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2A_D1_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P2A_D1_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P2A_D1_set", A, value );

    /* (0x00000084 bits 4:0) bits 0:4 use field P2A_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D1_MSK,
                                                                     PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D1_OFF,
                                                                     value);
}

static INLINE UINT32 s16_channel_pcbi_field_P2A_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P2A_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2A_D1_get", A, 15);
    /* (0x00000084 bits 4:0) bits 0:4 use field P2A_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D1_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P2A_D1_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P2A_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P2A_D1_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2A_D1_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2A_D1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2A_D1_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2A_D1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000084 bits 4:0) bits 0:4 use field P2A_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 4:0) bits 0:4 use field P2A_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_field_set( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D1_OFF + subfield_offset),
                                                                         PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D1_OFF + subfield_offset,
                                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P2A_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P2A_D1_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2A_D1_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2A_D1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2A_D1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 4:0) bits 0:4 use field P2A_D1 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D1_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D1_MSK, PCBI_REG_CHANNEL_PCBI_TX_CTRL_LOGIC_CFG_2_BIT_P2A_D1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2A_D1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_INV_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_INV_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_INV_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_CHK_INV_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_INV_set", A, value );

    /* (0x00000088 bits 13) field CHK_INV of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_INV_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_INV_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_INV_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_INV_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_INV_get", A, 15);
    /* (0x00000088 bits 13) field CHK_INV of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_INV_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_INV_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_INV_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_MODE_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_CHK_MODE_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_MODE_set", A, value );

    /* (0x00000088 bits 12:9) bits 0:3 use field CHK_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_MODE_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_MODE_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_MODE_get", A, 15);
    /* (0x00000088 bits 12:9) bits 0:3 use field CHK_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_MODE_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_MODE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_MODE_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CHK_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CHK_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_MODE_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_MODE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_MODE_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_MODE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000088 bits 12:9) bits 0:3 use field CHK_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000088 bits 12:9) bits 0:3 use field CHK_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( b_ptr,
                                                                                     h_ptr,
                                                                                     A,
                                                                                     subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_MODE_OFF + subfield_offset),
                                                                                     PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_MODE_OFF + subfield_offset,
                                                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CHK_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_MODE_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_MODE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_MODE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000088 bits 12:9) bits 0:3 use field CHK_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_MODE_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_MODE_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_MODE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_CHK_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_EN_set", A, value );

    /* (0x00000088 bits 7) field CHK_EN of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_EN_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_EN_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_EN_get", A, 15);
    /* (0x00000088 bits 7) field CHK_EN of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_INV_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_INV_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_INV_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_GEN_INV_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_INV_set", A, value );

    /* (0x00000088 bits 5) field GEN_INV of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_INV_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_INV_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_INV_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_INV_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_INV_get", A, 15);
    /* (0x00000088 bits 5) field GEN_INV of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_INV_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_INV_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_INV_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_MODE_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_GEN_MODE_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_MODE_set", A, value );

    /* (0x00000088 bits 4:1) bits 0:3 use field GEN_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_MODE_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_MODE_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_MODE_get", A, 15);
    /* (0x00000088 bits 4:1) bits 0:3 use field GEN_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_MODE_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_MODE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_MODE_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_GEN_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_GEN_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_MODE_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_MODE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_MODE_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_MODE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000088 bits 4:1) bits 0:3 use field GEN_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000088 bits 4:1) bits 0:3 use field GEN_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( b_ptr,
                                                                                     h_ptr,
                                                                                     A,
                                                                                     subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_MODE_OFF + subfield_offset),
                                                                                     PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_MODE_OFF + subfield_offset,
                                                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_GEN_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_GEN_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_MODE_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_MODE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_MODE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000088 bits 4:1) bits 0:3 use field GEN_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_MODE_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_MODE_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_MODE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_GEN_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_EN_set", A, value );

    /* (0x00000088 bits 0) field GEN_EN of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_EN_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_EN_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_EN_get", A, 15);
    /* (0x00000088 bits 0) field GEN_EN of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_31_TO_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_31_TO_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_31_TO_0_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_31_TO_0_set", A, value );

    /* (0x0000008c bits 31:0) bits 0:31 use field GEN_USR_PAT_31_TO_0 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_BIT_GEN_USR_PAT_31_TO_0_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_BIT_GEN_USR_PAT_31_TO_0_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_31_TO_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_31_TO_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_31_TO_0_get", A, 15);
    /* (0x0000008c bits 31:0) bits 0:31 use field GEN_USR_PAT_31_TO_0 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_BIT_GEN_USR_PAT_31_TO_0_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_BIT_GEN_USR_PAT_31_TO_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_31_TO_0_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000008c bits 31:0) bits 0:31 use field GEN_USR_PAT_31_TO_0 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000008c bits 31:0) bits 0:31 use field GEN_USR_PAT_31_TO_0 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_field_set( b_ptr,
                                                                                     h_ptr,
                                                                                     A,
                                                                                     subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_BIT_GEN_USR_PAT_31_TO_0_OFF + subfield_offset),
                                                                                     PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_BIT_GEN_USR_PAT_31_TO_0_OFF + subfield_offset,
                                                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000008c bits 31:0) bits 0:31 use field GEN_USR_PAT_31_TO_0 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_BIT_GEN_USR_PAT_31_TO_0_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_BIT_GEN_USR_PAT_31_TO_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_BIT_GEN_USR_PAT_31_TO_0_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_2_BIT_GEN_USR_PAT_31_TO_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_31_TO_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_63_TO_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_63_TO_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_63_TO_32_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_63_TO_32_set", A, value );

    /* (0x00000090 bits 31:0) bits 0:31 use field GEN_USR_PAT_63_TO_32 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_BIT_GEN_USR_PAT_63_TO_32_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_BIT_GEN_USR_PAT_63_TO_32_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_63_TO_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_63_TO_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_63_TO_32_get", A, 15);
    /* (0x00000090 bits 31:0) bits 0:31 use field GEN_USR_PAT_63_TO_32 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_BIT_GEN_USR_PAT_63_TO_32_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_BIT_GEN_USR_PAT_63_TO_32_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_63_TO_32_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000090 bits 31:0) bits 0:31 use field GEN_USR_PAT_63_TO_32 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000090 bits 31:0) bits 0:31 use field GEN_USR_PAT_63_TO_32 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_field_set( b_ptr,
                                                                                     h_ptr,
                                                                                     A,
                                                                                     subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_BIT_GEN_USR_PAT_63_TO_32_OFF + subfield_offset),
                                                                                     PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_BIT_GEN_USR_PAT_63_TO_32_OFF + subfield_offset,
                                                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000090 bits 31:0) bits 0:31 use field GEN_USR_PAT_63_TO_32 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_BIT_GEN_USR_PAT_63_TO_32_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_BIT_GEN_USR_PAT_63_TO_32_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_BIT_GEN_USR_PAT_63_TO_32_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_3_BIT_GEN_USR_PAT_63_TO_32_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_63_TO_32_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_95_TO_64_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_95_TO_64_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_95_TO_64_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_95_TO_64_set", A, value );

    /* (0x00000094 bits 31:0) bits 0:31 use field GEN_USR_PAT_95_TO_64 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_BIT_GEN_USR_PAT_95_TO_64_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_BIT_GEN_USR_PAT_95_TO_64_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_95_TO_64_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_95_TO_64_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_95_TO_64_get", A, 15);
    /* (0x00000094 bits 31:0) bits 0:31 use field GEN_USR_PAT_95_TO_64 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_BIT_GEN_USR_PAT_95_TO_64_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_BIT_GEN_USR_PAT_95_TO_64_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_95_TO_64_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000094 bits 31:0) bits 0:31 use field GEN_USR_PAT_95_TO_64 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000094 bits 31:0) bits 0:31 use field GEN_USR_PAT_95_TO_64 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_field_set( b_ptr,
                                                                                     h_ptr,
                                                                                     A,
                                                                                     subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_BIT_GEN_USR_PAT_95_TO_64_OFF + subfield_offset),
                                                                                     PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_BIT_GEN_USR_PAT_95_TO_64_OFF + subfield_offset,
                                                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000094 bits 31:0) bits 0:31 use field GEN_USR_PAT_95_TO_64 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_BIT_GEN_USR_PAT_95_TO_64_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_BIT_GEN_USR_PAT_95_TO_64_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_BIT_GEN_USR_PAT_95_TO_64_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_4_BIT_GEN_USR_PAT_95_TO_64_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_95_TO_64_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_127_TO_96_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_127_TO_96_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_127_TO_96_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_127_TO_96_set", A, value );

    /* (0x00000098 bits 31:0) bits 0:31 use field GEN_USR_PAT_127_TO_96 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_BIT_GEN_USR_PAT_127_TO_96_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_BIT_GEN_USR_PAT_127_TO_96_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_127_TO_96_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_127_TO_96_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_127_TO_96_get", A, 15);
    /* (0x00000098 bits 31:0) bits 0:31 use field GEN_USR_PAT_127_TO_96 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_BIT_GEN_USR_PAT_127_TO_96_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_BIT_GEN_USR_PAT_127_TO_96_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_127_TO_96_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000098 bits 31:0) bits 0:31 use field GEN_USR_PAT_127_TO_96 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000098 bits 31:0) bits 0:31 use field GEN_USR_PAT_127_TO_96 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_field_set( b_ptr,
                                                                                     h_ptr,
                                                                                     A,
                                                                                     subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_BIT_GEN_USR_PAT_127_TO_96_OFF + subfield_offset),
                                                                                     PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_BIT_GEN_USR_PAT_127_TO_96_OFF + subfield_offset,
                                                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000098 bits 31:0) bits 0:31 use field GEN_USR_PAT_127_TO_96 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_BIT_GEN_USR_PAT_127_TO_96_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_BIT_GEN_USR_PAT_127_TO_96_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_BIT_GEN_USR_PAT_127_TO_96_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_5_BIT_GEN_USR_PAT_127_TO_96_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_127_TO_96_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_159_TO_128_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_159_TO_128_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_159_TO_128_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_159_TO_128_set", A, value );

    /* (0x0000009c bits 31:0) bits 0:31 use field GEN_USR_PAT_159_TO_128 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_BIT_GEN_USR_PAT_159_TO_128_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_BIT_GEN_USR_PAT_159_TO_128_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_159_TO_128_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_159_TO_128_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_159_TO_128_get", A, 15);
    /* (0x0000009c bits 31:0) bits 0:31 use field GEN_USR_PAT_159_TO_128 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_BIT_GEN_USR_PAT_159_TO_128_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_BIT_GEN_USR_PAT_159_TO_128_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_159_TO_128_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000009c bits 31:0) bits 0:31 use field GEN_USR_PAT_159_TO_128 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000009c bits 31:0) bits 0:31 use field GEN_USR_PAT_159_TO_128 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_field_set( b_ptr,
                                                                                     h_ptr,
                                                                                     A,
                                                                                     subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_BIT_GEN_USR_PAT_159_TO_128_OFF + subfield_offset),
                                                                                     PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_BIT_GEN_USR_PAT_159_TO_128_OFF + subfield_offset,
                                                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000009c bits 31:0) bits 0:31 use field GEN_USR_PAT_159_TO_128 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_BIT_GEN_USR_PAT_159_TO_128_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_BIT_GEN_USR_PAT_159_TO_128_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_BIT_GEN_USR_PAT_159_TO_128_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_6_BIT_GEN_USR_PAT_159_TO_128_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_159_TO_128_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_191_TO_160_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_191_TO_160_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_191_TO_160_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_191_TO_160_set", A, value );

    /* (0x000000a0 bits 31:0) bits 0:31 use field GEN_USR_PAT_191_TO_160 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_BIT_GEN_USR_PAT_191_TO_160_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_BIT_GEN_USR_PAT_191_TO_160_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_191_TO_160_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_191_TO_160_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_191_TO_160_get", A, 15);
    /* (0x000000a0 bits 31:0) bits 0:31 use field GEN_USR_PAT_191_TO_160 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_BIT_GEN_USR_PAT_191_TO_160_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_BIT_GEN_USR_PAT_191_TO_160_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_191_TO_160_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000a0 bits 31:0) bits 0:31 use field GEN_USR_PAT_191_TO_160 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000a0 bits 31:0) bits 0:31 use field GEN_USR_PAT_191_TO_160 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_field_set( b_ptr,
                                                                                     h_ptr,
                                                                                     A,
                                                                                     subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_BIT_GEN_USR_PAT_191_TO_160_OFF + subfield_offset),
                                                                                     PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_BIT_GEN_USR_PAT_191_TO_160_OFF + subfield_offset,
                                                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000a0 bits 31:0) bits 0:31 use field GEN_USR_PAT_191_TO_160 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_BIT_GEN_USR_PAT_191_TO_160_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_BIT_GEN_USR_PAT_191_TO_160_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_BIT_GEN_USR_PAT_191_TO_160_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_7_BIT_GEN_USR_PAT_191_TO_160_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_191_TO_160_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_223_TO_192_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_223_TO_192_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_223_TO_192_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_223_TO_192_set", A, value );

    /* (0x000000a4 bits 31:0) bits 0:31 use field GEN_USR_PAT_223_TO_192 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_BIT_GEN_USR_PAT_223_TO_192_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_BIT_GEN_USR_PAT_223_TO_192_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_223_TO_192_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_223_TO_192_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_223_TO_192_get", A, 15);
    /* (0x000000a4 bits 31:0) bits 0:31 use field GEN_USR_PAT_223_TO_192 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_BIT_GEN_USR_PAT_223_TO_192_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_BIT_GEN_USR_PAT_223_TO_192_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_223_TO_192_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000a4 bits 31:0) bits 0:31 use field GEN_USR_PAT_223_TO_192 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000a4 bits 31:0) bits 0:31 use field GEN_USR_PAT_223_TO_192 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_field_set( b_ptr,
                                                                                     h_ptr,
                                                                                     A,
                                                                                     subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_BIT_GEN_USR_PAT_223_TO_192_OFF + subfield_offset),
                                                                                     PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_BIT_GEN_USR_PAT_223_TO_192_OFF + subfield_offset,
                                                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000a4 bits 31:0) bits 0:31 use field GEN_USR_PAT_223_TO_192 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_BIT_GEN_USR_PAT_223_TO_192_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_BIT_GEN_USR_PAT_223_TO_192_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_BIT_GEN_USR_PAT_223_TO_192_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_8_BIT_GEN_USR_PAT_223_TO_192_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_223_TO_192_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_255_TO_224_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_255_TO_224_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_255_TO_224_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_255_TO_224_set", A, value );

    /* (0x000000a8 bits 31:0) bits 0:31 use field GEN_USR_PAT_255_TO_224 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_BIT_GEN_USR_PAT_255_TO_224_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_BIT_GEN_USR_PAT_255_TO_224_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_255_TO_224_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_255_TO_224_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_255_TO_224_get", A, 15);
    /* (0x000000a8 bits 31:0) bits 0:31 use field GEN_USR_PAT_255_TO_224 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_BIT_GEN_USR_PAT_255_TO_224_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_BIT_GEN_USR_PAT_255_TO_224_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_255_TO_224_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000a8 bits 31:0) bits 0:31 use field GEN_USR_PAT_255_TO_224 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000a8 bits 31:0) bits 0:31 use field GEN_USR_PAT_255_TO_224 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_field_set( b_ptr,
                                                                                     h_ptr,
                                                                                     A,
                                                                                     subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_BIT_GEN_USR_PAT_255_TO_224_OFF + subfield_offset),
                                                                                     PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_BIT_GEN_USR_PAT_255_TO_224_OFF + subfield_offset,
                                                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000a8 bits 31:0) bits 0:31 use field GEN_USR_PAT_255_TO_224 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_BIT_GEN_USR_PAT_255_TO_224_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_BIT_GEN_USR_PAT_255_TO_224_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_BIT_GEN_USR_PAT_255_TO_224_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_9_BIT_GEN_USR_PAT_255_TO_224_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_255_TO_224_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_287_TO_256_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_287_TO_256_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_287_TO_256_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_287_TO_256_set", A, value );

    /* (0x000000ac bits 31:0) bits 0:31 use field GEN_USR_PAT_287_TO_256 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_BIT_GEN_USR_PAT_287_TO_256_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_BIT_GEN_USR_PAT_287_TO_256_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_287_TO_256_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_287_TO_256_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_287_TO_256_get", A, 15);
    /* (0x000000ac bits 31:0) bits 0:31 use field GEN_USR_PAT_287_TO_256 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_BIT_GEN_USR_PAT_287_TO_256_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_BIT_GEN_USR_PAT_287_TO_256_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_287_TO_256_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000ac bits 31:0) bits 0:31 use field GEN_USR_PAT_287_TO_256 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000ac bits 31:0) bits 0:31 use field GEN_USR_PAT_287_TO_256 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_BIT_GEN_USR_PAT_287_TO_256_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_BIT_GEN_USR_PAT_287_TO_256_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000ac bits 31:0) bits 0:31 use field GEN_USR_PAT_287_TO_256 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_BIT_GEN_USR_PAT_287_TO_256_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_BIT_GEN_USR_PAT_287_TO_256_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_BIT_GEN_USR_PAT_287_TO_256_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_10_BIT_GEN_USR_PAT_287_TO_256_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_287_TO_256_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_319_TO_288_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_USR_PAT_319_TO_288_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_319_TO_288_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_319_TO_288_set", A, value );

    /* (0x000000b0 bits 31:0) bits 0:31 use field GEN_USR_PAT_319_TO_288 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_BIT_GEN_USR_PAT_319_TO_288_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_BIT_GEN_USR_PAT_319_TO_288_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_319_TO_288_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_USR_PAT_319_TO_288_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_USR_PAT_319_TO_288_get", A, 15);
    /* (0x000000b0 bits 31:0) bits 0:31 use field GEN_USR_PAT_319_TO_288 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_BIT_GEN_USR_PAT_319_TO_288_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_BIT_GEN_USR_PAT_319_TO_288_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_USR_PAT_319_TO_288_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000b0 bits 31:0) bits 0:31 use field GEN_USR_PAT_319_TO_288 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000b0 bits 31:0) bits 0:31 use field GEN_USR_PAT_319_TO_288 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_BIT_GEN_USR_PAT_319_TO_288_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_BIT_GEN_USR_PAT_319_TO_288_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000b0 bits 31:0) bits 0:31 use field GEN_USR_PAT_319_TO_288 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_BIT_GEN_USR_PAT_319_TO_288_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_BIT_GEN_USR_PAT_319_TO_288_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_BIT_GEN_USR_PAT_319_TO_288_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_11_BIT_GEN_USR_PAT_319_TO_288_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_GEN_USR_PAT_319_TO_288_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_31_TO_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_31_TO_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_31_TO_0_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_31_TO_0_set", A, value );

    /* (0x000000b4 bits 31:0) bits 0:31 use field CHK_USR_PAT_31_TO_0 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_BIT_CHK_USR_PAT_31_TO_0_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_BIT_CHK_USR_PAT_31_TO_0_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_31_TO_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_31_TO_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_31_TO_0_get", A, 15);
    /* (0x000000b4 bits 31:0) bits 0:31 use field CHK_USR_PAT_31_TO_0 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_BIT_CHK_USR_PAT_31_TO_0_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_BIT_CHK_USR_PAT_31_TO_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_31_TO_0_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000b4 bits 31:0) bits 0:31 use field CHK_USR_PAT_31_TO_0 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000b4 bits 31:0) bits 0:31 use field CHK_USR_PAT_31_TO_0 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_BIT_CHK_USR_PAT_31_TO_0_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_BIT_CHK_USR_PAT_31_TO_0_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000b4 bits 31:0) bits 0:31 use field CHK_USR_PAT_31_TO_0 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_BIT_CHK_USR_PAT_31_TO_0_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_BIT_CHK_USR_PAT_31_TO_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_BIT_CHK_USR_PAT_31_TO_0_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_12_BIT_CHK_USR_PAT_31_TO_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_31_TO_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_63_TO_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_63_TO_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_63_TO_32_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_63_TO_32_set", A, value );

    /* (0x000000b8 bits 31:0) bits 0:31 use field CHK_USR_PAT_63_TO_32 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_BIT_CHK_USR_PAT_63_TO_32_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_BIT_CHK_USR_PAT_63_TO_32_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_63_TO_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_63_TO_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_63_TO_32_get", A, 15);
    /* (0x000000b8 bits 31:0) bits 0:31 use field CHK_USR_PAT_63_TO_32 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_BIT_CHK_USR_PAT_63_TO_32_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_BIT_CHK_USR_PAT_63_TO_32_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_63_TO_32_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000b8 bits 31:0) bits 0:31 use field CHK_USR_PAT_63_TO_32 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000b8 bits 31:0) bits 0:31 use field CHK_USR_PAT_63_TO_32 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_BIT_CHK_USR_PAT_63_TO_32_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_BIT_CHK_USR_PAT_63_TO_32_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000b8 bits 31:0) bits 0:31 use field CHK_USR_PAT_63_TO_32 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_BIT_CHK_USR_PAT_63_TO_32_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_BIT_CHK_USR_PAT_63_TO_32_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_BIT_CHK_USR_PAT_63_TO_32_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_13_BIT_CHK_USR_PAT_63_TO_32_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_63_TO_32_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_95_TO_64_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_95_TO_64_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_95_TO_64_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_95_TO_64_set", A, value );

    /* (0x000000bc bits 31:0) bits 0:31 use field CHK_USR_PAT_95_TO_64 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_BIT_CHK_USR_PAT_95_TO_64_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_BIT_CHK_USR_PAT_95_TO_64_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_95_TO_64_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_95_TO_64_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_95_TO_64_get", A, 15);
    /* (0x000000bc bits 31:0) bits 0:31 use field CHK_USR_PAT_95_TO_64 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_BIT_CHK_USR_PAT_95_TO_64_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_BIT_CHK_USR_PAT_95_TO_64_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_95_TO_64_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000bc bits 31:0) bits 0:31 use field CHK_USR_PAT_95_TO_64 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000bc bits 31:0) bits 0:31 use field CHK_USR_PAT_95_TO_64 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_BIT_CHK_USR_PAT_95_TO_64_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_BIT_CHK_USR_PAT_95_TO_64_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000bc bits 31:0) bits 0:31 use field CHK_USR_PAT_95_TO_64 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_BIT_CHK_USR_PAT_95_TO_64_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_BIT_CHK_USR_PAT_95_TO_64_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_BIT_CHK_USR_PAT_95_TO_64_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_14_BIT_CHK_USR_PAT_95_TO_64_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_95_TO_64_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_127_TO_96_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_127_TO_96_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_127_TO_96_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_127_TO_96_set", A, value );

    /* (0x000000c0 bits 31:0) bits 0:31 use field CHK_USR_PAT_127_TO_96 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_BIT_CHK_USR_PAT_127_TO_96_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_BIT_CHK_USR_PAT_127_TO_96_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_127_TO_96_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_127_TO_96_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_127_TO_96_get", A, 15);
    /* (0x000000c0 bits 31:0) bits 0:31 use field CHK_USR_PAT_127_TO_96 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_BIT_CHK_USR_PAT_127_TO_96_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_BIT_CHK_USR_PAT_127_TO_96_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_127_TO_96_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000c0 bits 31:0) bits 0:31 use field CHK_USR_PAT_127_TO_96 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000c0 bits 31:0) bits 0:31 use field CHK_USR_PAT_127_TO_96 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_BIT_CHK_USR_PAT_127_TO_96_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_BIT_CHK_USR_PAT_127_TO_96_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000c0 bits 31:0) bits 0:31 use field CHK_USR_PAT_127_TO_96 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_BIT_CHK_USR_PAT_127_TO_96_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_BIT_CHK_USR_PAT_127_TO_96_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_BIT_CHK_USR_PAT_127_TO_96_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_15_BIT_CHK_USR_PAT_127_TO_96_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_127_TO_96_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_159_TO_128_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_159_TO_128_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_159_TO_128_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_159_TO_128_set", A, value );

    /* (0x000000c4 bits 31:0) bits 0:31 use field CHK_USR_PAT_159_TO_128 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_BIT_CHK_USR_PAT_159_TO_128_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_BIT_CHK_USR_PAT_159_TO_128_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_159_TO_128_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_159_TO_128_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_159_TO_128_get", A, 15);
    /* (0x000000c4 bits 31:0) bits 0:31 use field CHK_USR_PAT_159_TO_128 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_BIT_CHK_USR_PAT_159_TO_128_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_BIT_CHK_USR_PAT_159_TO_128_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_159_TO_128_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000c4 bits 31:0) bits 0:31 use field CHK_USR_PAT_159_TO_128 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000c4 bits 31:0) bits 0:31 use field CHK_USR_PAT_159_TO_128 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_BIT_CHK_USR_PAT_159_TO_128_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_BIT_CHK_USR_PAT_159_TO_128_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000c4 bits 31:0) bits 0:31 use field CHK_USR_PAT_159_TO_128 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_BIT_CHK_USR_PAT_159_TO_128_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_BIT_CHK_USR_PAT_159_TO_128_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_BIT_CHK_USR_PAT_159_TO_128_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_16_BIT_CHK_USR_PAT_159_TO_128_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_159_TO_128_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_191_TO_160_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_191_TO_160_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_191_TO_160_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_191_TO_160_set", A, value );

    /* (0x000000c8 bits 31:0) bits 0:31 use field CHK_USR_PAT_191_TO_160 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_BIT_CHK_USR_PAT_191_TO_160_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_BIT_CHK_USR_PAT_191_TO_160_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_191_TO_160_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_191_TO_160_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_191_TO_160_get", A, 15);
    /* (0x000000c8 bits 31:0) bits 0:31 use field CHK_USR_PAT_191_TO_160 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_BIT_CHK_USR_PAT_191_TO_160_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_BIT_CHK_USR_PAT_191_TO_160_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_191_TO_160_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000c8 bits 31:0) bits 0:31 use field CHK_USR_PAT_191_TO_160 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000c8 bits 31:0) bits 0:31 use field CHK_USR_PAT_191_TO_160 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_BIT_CHK_USR_PAT_191_TO_160_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_BIT_CHK_USR_PAT_191_TO_160_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000c8 bits 31:0) bits 0:31 use field CHK_USR_PAT_191_TO_160 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_BIT_CHK_USR_PAT_191_TO_160_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_BIT_CHK_USR_PAT_191_TO_160_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_BIT_CHK_USR_PAT_191_TO_160_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_17_BIT_CHK_USR_PAT_191_TO_160_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_191_TO_160_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_223_TO_192_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_223_TO_192_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_223_TO_192_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_223_TO_192_set", A, value );

    /* (0x000000cc bits 31:0) bits 0:31 use field CHK_USR_PAT_223_TO_192 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_BIT_CHK_USR_PAT_223_TO_192_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_BIT_CHK_USR_PAT_223_TO_192_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_223_TO_192_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_223_TO_192_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_223_TO_192_get", A, 15);
    /* (0x000000cc bits 31:0) bits 0:31 use field CHK_USR_PAT_223_TO_192 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_BIT_CHK_USR_PAT_223_TO_192_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_BIT_CHK_USR_PAT_223_TO_192_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_223_TO_192_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000cc bits 31:0) bits 0:31 use field CHK_USR_PAT_223_TO_192 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000cc bits 31:0) bits 0:31 use field CHK_USR_PAT_223_TO_192 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_BIT_CHK_USR_PAT_223_TO_192_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_BIT_CHK_USR_PAT_223_TO_192_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000cc bits 31:0) bits 0:31 use field CHK_USR_PAT_223_TO_192 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_BIT_CHK_USR_PAT_223_TO_192_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_BIT_CHK_USR_PAT_223_TO_192_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_BIT_CHK_USR_PAT_223_TO_192_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_18_BIT_CHK_USR_PAT_223_TO_192_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_223_TO_192_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_255_TO_224_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_255_TO_224_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_255_TO_224_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_255_TO_224_set", A, value );

    /* (0x000000d0 bits 31:0) bits 0:31 use field CHK_USR_PAT_255_TO_224 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_BIT_CHK_USR_PAT_255_TO_224_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_BIT_CHK_USR_PAT_255_TO_224_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_255_TO_224_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_255_TO_224_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_255_TO_224_get", A, 15);
    /* (0x000000d0 bits 31:0) bits 0:31 use field CHK_USR_PAT_255_TO_224 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_BIT_CHK_USR_PAT_255_TO_224_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_BIT_CHK_USR_PAT_255_TO_224_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_255_TO_224_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000d0 bits 31:0) bits 0:31 use field CHK_USR_PAT_255_TO_224 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000d0 bits 31:0) bits 0:31 use field CHK_USR_PAT_255_TO_224 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_BIT_CHK_USR_PAT_255_TO_224_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_BIT_CHK_USR_PAT_255_TO_224_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000d0 bits 31:0) bits 0:31 use field CHK_USR_PAT_255_TO_224 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_BIT_CHK_USR_PAT_255_TO_224_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_BIT_CHK_USR_PAT_255_TO_224_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_BIT_CHK_USR_PAT_255_TO_224_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_19_BIT_CHK_USR_PAT_255_TO_224_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_255_TO_224_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_287_TO_256_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_287_TO_256_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_287_TO_256_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_287_TO_256_set", A, value );

    /* (0x000000d4 bits 31:0) bits 0:31 use field CHK_USR_PAT_287_TO_256 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_BIT_CHK_USR_PAT_287_TO_256_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_BIT_CHK_USR_PAT_287_TO_256_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_287_TO_256_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_287_TO_256_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_287_TO_256_get", A, 15);
    /* (0x000000d4 bits 31:0) bits 0:31 use field CHK_USR_PAT_287_TO_256 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_BIT_CHK_USR_PAT_287_TO_256_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_BIT_CHK_USR_PAT_287_TO_256_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_287_TO_256_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000d4 bits 31:0) bits 0:31 use field CHK_USR_PAT_287_TO_256 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000d4 bits 31:0) bits 0:31 use field CHK_USR_PAT_287_TO_256 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_BIT_CHK_USR_PAT_287_TO_256_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_BIT_CHK_USR_PAT_287_TO_256_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000d4 bits 31:0) bits 0:31 use field CHK_USR_PAT_287_TO_256 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_BIT_CHK_USR_PAT_287_TO_256_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_BIT_CHK_USR_PAT_287_TO_256_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_BIT_CHK_USR_PAT_287_TO_256_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_20_BIT_CHK_USR_PAT_287_TO_256_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_287_TO_256_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_319_TO_288_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_USR_PAT_319_TO_288_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_319_TO_288_set", A, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_319_TO_288_set", A, value );

    /* (0x000000d8 bits 31:0) bits 0:31 use field CHK_USR_PAT_319_TO_288 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_field_set( b_ptr,
                                                                                  h_ptr,
                                                                                  A,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_BIT_CHK_USR_PAT_319_TO_288_MSK,
                                                                                  PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_BIT_CHK_USR_PAT_319_TO_288_OFF,
                                                                                  value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_319_TO_288_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_USR_PAT_319_TO_288_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_USR_PAT_319_TO_288_get", A, 15);
    /* (0x000000d8 bits 31:0) bits 0:31 use field CHK_USR_PAT_319_TO_288 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_BIT_CHK_USR_PAT_319_TO_288_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_BIT_CHK_USR_PAT_319_TO_288_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_USR_PAT_319_TO_288_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                            s16_handle_t *h_ptr,
                                                                            UINT32 A,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000d8 bits 31:0) bits 0:31 use field CHK_USR_PAT_319_TO_288 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000d8 bits 31:0) bits 0:31 use field CHK_USR_PAT_319_TO_288 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_field_set( b_ptr,
                                                                                      h_ptr,
                                                                                      A,
                                                                                      subfield_mask << (PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_BIT_CHK_USR_PAT_319_TO_288_OFF + subfield_offset),
                                                                                      PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_BIT_CHK_USR_PAT_319_TO_288_OFF + subfield_offset,
                                                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000d8 bits 31:0) bits 0:31 use field CHK_USR_PAT_319_TO_288 of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_BIT_CHK_USR_PAT_319_TO_288_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_BIT_CHK_USR_PAT_319_TO_288_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_BIT_CHK_USR_PAT_319_TO_288_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_21_BIT_CHK_USR_PAT_319_TO_288_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_USR_PAT_319_TO_288_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RX_TX_DESKEW_AF_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RX_TX_DESKEW_AF_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_TX_DESKEW_AF_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_AF_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_AF_set", A, value );

    /* (0x000000e0 bits 20:16) bits 0:4 use field RX_TX_DESKEW_AF of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AF_MSK,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AF_OFF,
                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_RX_TX_DESKEW_AF_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RX_TX_DESKEW_AF_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_TX_DESKEW_AF_get", A, 15);
    /* (0x000000e0 bits 20:16) bits 0:4 use field RX_TX_DESKEW_AF of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AF_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AF_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_AF_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e0 bits 20:16) bits 0:4 use field RX_TX_DESKEW_AF of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e0 bits 20:16) bits 0:4 use field RX_TX_DESKEW_AF of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                              h_ptr,
                                                              A,
                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AF_OFF + subfield_offset),
                                                              PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AF_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e0 bits 20:16) bits 0:4 use field RX_TX_DESKEW_AF of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AF_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AF_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AF_MSK, PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AF_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AF_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RX_TX_DESKEW_AE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RX_TX_DESKEW_AE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_TX_DESKEW_AE_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_AE_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_AE_set", A, value );

    /* (0x000000e0 bits 15:11) bits 0:4 use field RX_TX_DESKEW_AE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AE_MSK,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AE_OFF,
                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_RX_TX_DESKEW_AE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RX_TX_DESKEW_AE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_TX_DESKEW_AE_get", A, 15);
    /* (0x000000e0 bits 15:11) bits 0:4 use field RX_TX_DESKEW_AE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AE_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_AE_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e0 bits 15:11) bits 0:4 use field RX_TX_DESKEW_AE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e0 bits 15:11) bits 0:4 use field RX_TX_DESKEW_AE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                              h_ptr,
                                                              A,
                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AE_OFF + subfield_offset),
                                                              PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AE_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e0 bits 15:11) bits 0:4 use field RX_TX_DESKEW_AE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AE_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AE_MSK, PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_AE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_RX_TX_DESKEW_AE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_VAL_set", A, 15);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_VAL_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_VAL_set", A, value );

    /* (0x000000e0 bits 10:8) bits 0:2 use field TX_RX_DESKEW_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_VAL_MSK,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_VAL_OFF,
                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_VAL_get", A, 15);
    /* (0x000000e0 bits 10:8) bits 0:2 use field TX_RX_DESKEW_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_VAL_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_VAL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_VAL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e0 bits 10:8) bits 0:2 use field TX_RX_DESKEW_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e0 bits 10:8) bits 0:2 use field TX_RX_DESKEW_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                              h_ptr,
                                                              A,
                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_VAL_OFF + subfield_offset),
                                                              PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_VAL_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e0 bits 10:8) bits 0:2 use field TX_RX_DESKEW_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_VAL_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_VAL_MSK, PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TX_RX_DESKEW_SYNC_VAL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_set", A, value );

    /* (0x000000e0 bits 7) field TX_RX_DESKEW_SYNC of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_MSK,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_OFF,
                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_get", A, 15);
    /* (0x000000e0 bits 7) field TX_RX_DESKEW_SYNC of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_RX_DESKEW_SYNC_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TX_RX_DESKEW_SYNC_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_VAL_set", A, 15);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_VAL_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_VAL_set", A, value );

    /* (0x000000e0 bits 6:4) bits 0:2 use field RX_TX_DESKEW_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_VAL_MSK,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_VAL_OFF,
                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_VAL_get", A, 15);
    /* (0x000000e0 bits 6:4) bits 0:2 use field RX_TX_DESKEW_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_VAL_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_VAL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_VAL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e0 bits 6:4) bits 0:2 use field RX_TX_DESKEW_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e0 bits 6:4) bits 0:2 use field RX_TX_DESKEW_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                              h_ptr,
                                                              A,
                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_VAL_OFF + subfield_offset),
                                                              PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_VAL_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e0 bits 6:4) bits 0:2 use field RX_TX_DESKEW_SYNC_VAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_VAL_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_VAL_MSK, PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_RX_TX_DESKEW_SYNC_VAL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_set", A, value );

    /* (0x000000e0 bits 3) field RX_TX_DESKEW_SYNC of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_MSK,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_OFF,
                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_get", A, 15);
    /* (0x000000e0 bits 3) field RX_TX_DESKEW_SYNC of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_RX_TX_DESKEW_SYNC_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RX_TX_DESKEW_SYNC_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_LOOPBACK_TX_RX_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_LOOPBACK_TX_RX_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_LOOPBACK_TX_RX_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_LOOPBACK_TX_RX_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_LOOPBACK_TX_RX_EN_set", A, value );

    /* (0x000000e0 bits 2) field LOOPBACK_TX_RX_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_LOOPBACK_TX_RX_EN_MSK,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_LOOPBACK_TX_RX_EN_OFF,
                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_LOOPBACK_TX_RX_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_LOOPBACK_TX_RX_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_LOOPBACK_TX_RX_EN_get", A, 15);
    /* (0x000000e0 bits 2) field LOOPBACK_TX_RX_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_LOOPBACK_TX_RX_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_LOOPBACK_TX_RX_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_LOOPBACK_TX_RX_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TX_SOURCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TX_SOURCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_SOURCE_set", A, 15);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TX_SOURCE_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TX_SOURCE_set", A, value );

    /* (0x000000e0 bits 1:0) bits 0:1 use field TX_SOURCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_SOURCE_MSK,
                                                          PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_SOURCE_OFF,
                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_TX_SOURCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TX_SOURCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_SOURCE_get", A, 15);
    /* (0x000000e0 bits 1:0) bits 0:1 use field TX_SOURCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_SOURCE_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_SOURCE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TX_SOURCE_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_TX_SOURCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_TX_SOURCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TX_SOURCE_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TX_SOURCE_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TX_SOURCE_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TX_SOURCE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e0 bits 1:0) bits 0:1 use field TX_SOURCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e0 bits 1:0) bits 0:1 use field TX_SOURCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_field_set( b_ptr,
                                                              h_ptr,
                                                              A,
                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_SOURCE_OFF + subfield_offset),
                                                              PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_SOURCE_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_TX_SOURCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_TX_SOURCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TX_SOURCE_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TX_SOURCE_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TX_SOURCE_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e0 bits 1:0) bits 0:1 use field TX_SOURCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_CFG_1_read( b_ptr,
                                                                 h_ptr,
                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_SOURCE_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_SOURCE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_SOURCE_MSK, PCBI_REG_CHANNEL_PCBI_TX_CFG_1_BIT_TX_SOURCE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TX_SOURCE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TPD_CTRL_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TPD_CTRL_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TPD_CTRL_OVR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TPD_CTRL_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TPD_CTRL_OVR_EN_set", A, value );

    /* (0x000000e4 bits 13) field TPD_CTRL_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                                   h_ptr,
                                                                                   A,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_TPD_CTRL_OVR_EN_MSK,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_TPD_CTRL_OVR_EN_OFF,
                                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_TPD_CTRL_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TPD_CTRL_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TPD_CTRL_OVR_EN_get", A, 15);
    /* (0x000000e4 bits 13) field TPD_CTRL_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read( b_ptr,
                                                                                          h_ptr,
                                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_TPD_CTRL_OVR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_TPD_CTRL_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TPD_CTRL_OVR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TPD_CTRL_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TPD_CTRL_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TPD_CTRL_OVR_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TPD_CTRL_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TPD_CTRL_OVR_set", A, value );

    /* (0x000000e4 bits 12) field TPD_CTRL_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                                   h_ptr,
                                                                                   A,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_TPD_CTRL_OVR_MSK,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_TPD_CTRL_OVR_OFF,
                                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_TPD_CTRL_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TPD_CTRL_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TPD_CTRL_OVR_get", A, 15);
    /* (0x000000e4 bits 12) field TPD_CTRL_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read( b_ptr,
                                                                                          h_ptr,
                                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_TPD_CTRL_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_TPD_CTRL_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TPD_CTRL_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_CTRL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_CTRL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_CTRL_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_CTRL_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_CTRL_set", A, value );

    /* (0x000000e4 bits 11:8) bits 0:3 use field PGA_CTRL of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                                   h_ptr,
                                                                                   A,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_CTRL_MSK,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_CTRL_OFF,
                                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_CTRL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_CTRL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_CTRL_get", A, 15);
    /* (0x000000e4 bits 11:8) bits 0:3 use field PGA_CTRL of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read( b_ptr,
                                                                                          h_ptr,
                                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_CTRL_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_CTRL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_CTRL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_PGA_CTRL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_PGA_CTRL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_CTRL_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_CTRL_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_CTRL_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_CTRL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e4 bits 11:8) bits 0:3 use field PGA_CTRL of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e4 bits 11:8) bits 0:3 use field PGA_CTRL of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                                       h_ptr,
                                                                                       A,
                                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_CTRL_OFF + subfield_offset),
                                                                                       PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_CTRL_OFF + subfield_offset,
                                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_PGA_CTRL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PGA_CTRL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_CTRL_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_CTRL_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_CTRL_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e4 bits 11:8) bits 0:3 use field PGA_CTRL of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read( b_ptr,
                                                                                          h_ptr,
                                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_CTRL_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_CTRL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_CTRL_MSK, PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_CTRL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_CTRL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_NS_SENSE_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_NS_SENSE_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_NS_SENSE_ENB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_NS_SENSE_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_NS_SENSE_ENB_set", A, value );

    /* (0x000000e4 bits 6) field PGA_NS_SENSE_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                                   h_ptr,
                                                                                   A,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_SENSE_ENB_MSK,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_SENSE_ENB_OFF,
                                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_NS_SENSE_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_NS_SENSE_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_NS_SENSE_ENB_get", A, 15);
    /* (0x000000e4 bits 6) field PGA_NS_SENSE_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read( b_ptr,
                                                                                          h_ptr,
                                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_SENSE_ENB_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_SENSE_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_NS_SENSE_ENB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_NS_REF_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_NS_REF_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_NS_REF_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_NS_REF_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_NS_REF_set", A, value );

    /* (0x000000e4 bits 5:1) bits 0:4 use field PGA_NS_REF of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                                   h_ptr,
                                                                                   A,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_REF_MSK,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_REF_OFF,
                                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_NS_REF_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_NS_REF_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_NS_REF_get", A, 15);
    /* (0x000000e4 bits 5:1) bits 0:4 use field PGA_NS_REF of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read( b_ptr,
                                                                                          h_ptr,
                                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_REF_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_REF_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_NS_REF_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_PGA_NS_REF_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_PGA_NS_REF_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_NS_REF_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_NS_REF_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_NS_REF_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_NS_REF_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e4 bits 5:1) bits 0:4 use field PGA_NS_REF of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e4 bits 5:1) bits 0:4 use field PGA_NS_REF of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                                       h_ptr,
                                                                                       A,
                                                                                       subfield_mask << (PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_REF_OFF + subfield_offset),
                                                                                       PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_REF_OFF + subfield_offset,
                                                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_PGA_NS_REF_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PGA_NS_REF_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_NS_REF_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_NS_REF_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_NS_REF_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e4 bits 5:1) bits 0:4 use field PGA_NS_REF of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read( b_ptr,
                                                                                          h_ptr,
                                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_REF_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_REF_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_REF_MSK, PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_REF_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_NS_REF_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_NS_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_NS_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_NS_SEL_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_NS_SEL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_NS_SEL_set", A, value );

    /* (0x000000e4 bits 0) field PGA_NS_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                                   h_ptr,
                                                                                   A,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_SEL_MSK,
                                                                                   PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_SEL_OFF,
                                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_NS_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_NS_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_NS_SEL_get", A, 15);
    /* (0x000000e4 bits 0) field PGA_NS_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read( b_ptr,
                                                                                          h_ptr,
                                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_SEL_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_SEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_NS_SEL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_LUT_PCBI_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_LUT_PCBI_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_LUT_PCBI_OVR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_LUT_PCBI_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_LUT_PCBI_OVR_EN_set", A, value );

    /* (0x000000e8 bits 21) field PGA_LUT_PCBI_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                        h_ptr,
                                                                        A,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_LUT_PCBI_OVR_EN_MSK,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_LUT_PCBI_OVR_EN_OFF,
                                                                        value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_LUT_PCBI_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_LUT_PCBI_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_LUT_PCBI_OVR_EN_get", A, 15);
    /* (0x000000e8 bits 21) field PGA_LUT_PCBI_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_LUT_PCBI_OVR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_LUT_PCBI_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_LUT_PCBI_OVR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_CD_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_CD_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_CD_S1_OVR_set", A, 15);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_CD_S1_OVR_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_CD_S1_OVR_set", A, value );

    /* (0x000000e8 bits 20:18) bits 0:2 use field PGA_CD_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                        h_ptr,
                                                                        A,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S1_OVR_MSK,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S1_OVR_OFF,
                                                                        value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_CD_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_CD_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_CD_S1_OVR_get", A, 15);
    /* (0x000000e8 bits 20:18) bits 0:2 use field PGA_CD_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S1_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S1_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_CD_S1_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_PGA_CD_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_PGA_CD_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_CD_S1_OVR_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_CD_S1_OVR_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_CD_S1_OVR_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_CD_S1_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e8 bits 20:18) bits 0:2 use field PGA_CD_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e8 bits 20:18) bits 0:2 use field PGA_CD_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                            h_ptr,
                                                                            A,
                                                                            subfield_mask << (PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S1_OVR_OFF + subfield_offset),
                                                                            PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S1_OVR_OFF + subfield_offset,
                                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_PGA_CD_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PGA_CD_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_CD_S1_OVR_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_CD_S1_OVR_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_CD_S1_OVR_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e8 bits 20:18) bits 0:2 use field PGA_CD_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S1_OVR_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S1_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S1_OVR_MSK, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S1_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_CD_S1_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_CD_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_CD_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_CD_S2_OVR_set", A, 15);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_CD_S2_OVR_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_CD_S2_OVR_set", A, value );

    /* (0x000000e8 bits 17:15) bits 0:2 use field PGA_CD_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                        h_ptr,
                                                                        A,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S2_OVR_MSK,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S2_OVR_OFF,
                                                                        value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_CD_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_CD_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_CD_S2_OVR_get", A, 15);
    /* (0x000000e8 bits 17:15) bits 0:2 use field PGA_CD_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S2_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S2_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_CD_S2_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_PGA_CD_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_PGA_CD_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_CD_S2_OVR_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_CD_S2_OVR_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_CD_S2_OVR_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_CD_S2_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e8 bits 17:15) bits 0:2 use field PGA_CD_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e8 bits 17:15) bits 0:2 use field PGA_CD_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                            h_ptr,
                                                                            A,
                                                                            subfield_mask << (PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S2_OVR_OFF + subfield_offset),
                                                                            PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S2_OVR_OFF + subfield_offset,
                                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_PGA_CD_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PGA_CD_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_CD_S2_OVR_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_CD_S2_OVR_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_CD_S2_OVR_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e8 bits 17:15) bits 0:2 use field PGA_CD_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S2_OVR_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S2_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S2_OVR_MSK, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CD_S2_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_CD_S2_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_RG_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_RG_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_RG_S1_OVR_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_RG_S1_OVR_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_RG_S1_OVR_set", A, value );

    /* (0x000000e8 bits 14:10) bits 0:4 use field PGA_RG_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                        h_ptr,
                                                                        A,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S1_OVR_MSK,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S1_OVR_OFF,
                                                                        value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_RG_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_RG_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_RG_S1_OVR_get", A, 15);
    /* (0x000000e8 bits 14:10) bits 0:4 use field PGA_RG_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S1_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S1_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_RG_S1_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_PGA_RG_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_PGA_RG_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_RG_S1_OVR_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_RG_S1_OVR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_RG_S1_OVR_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_RG_S1_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e8 bits 14:10) bits 0:4 use field PGA_RG_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e8 bits 14:10) bits 0:4 use field PGA_RG_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                            h_ptr,
                                                                            A,
                                                                            subfield_mask << (PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S1_OVR_OFF + subfield_offset),
                                                                            PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S1_OVR_OFF + subfield_offset,
                                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_PGA_RG_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PGA_RG_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_RG_S1_OVR_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_RG_S1_OVR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_RG_S1_OVR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e8 bits 14:10) bits 0:4 use field PGA_RG_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S1_OVR_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S1_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S1_OVR_MSK, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S1_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_RG_S1_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_RG_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_RG_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_RG_S2_OVR_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_RG_S2_OVR_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_RG_S2_OVR_set", A, value );

    /* (0x000000e8 bits 9:6) bits 0:3 use field PGA_RG_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                        h_ptr,
                                                                        A,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S2_OVR_MSK,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S2_OVR_OFF,
                                                                        value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_RG_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_RG_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_RG_S2_OVR_get", A, 15);
    /* (0x000000e8 bits 9:6) bits 0:3 use field PGA_RG_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S2_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S2_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_RG_S2_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_PGA_RG_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_PGA_RG_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_RG_S2_OVR_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_RG_S2_OVR_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_RG_S2_OVR_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_RG_S2_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e8 bits 9:6) bits 0:3 use field PGA_RG_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e8 bits 9:6) bits 0:3 use field PGA_RG_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                            h_ptr,
                                                                            A,
                                                                            subfield_mask << (PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S2_OVR_OFF + subfield_offset),
                                                                            PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S2_OVR_OFF + subfield_offset,
                                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_PGA_RG_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PGA_RG_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_RG_S2_OVR_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_RG_S2_OVR_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_RG_S2_OVR_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e8 bits 9:6) bits 0:3 use field PGA_RG_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S2_OVR_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S2_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S2_OVR_MSK, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_RG_S2_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_RG_S2_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_CG_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_CG_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_CG_S1_OVR_set", A, 15);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_CG_S1_OVR_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_CG_S1_OVR_set", A, value );

    /* (0x000000e8 bits 5:3) bits 0:2 use field PGA_CG_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                        h_ptr,
                                                                        A,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S1_OVR_MSK,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S1_OVR_OFF,
                                                                        value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_CG_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_CG_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_CG_S1_OVR_get", A, 15);
    /* (0x000000e8 bits 5:3) bits 0:2 use field PGA_CG_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S1_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S1_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_CG_S1_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_PGA_CG_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_PGA_CG_S1_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_CG_S1_OVR_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_CG_S1_OVR_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_CG_S1_OVR_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_CG_S1_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e8 bits 5:3) bits 0:2 use field PGA_CG_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e8 bits 5:3) bits 0:2 use field PGA_CG_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                            h_ptr,
                                                                            A,
                                                                            subfield_mask << (PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S1_OVR_OFF + subfield_offset),
                                                                            PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S1_OVR_OFF + subfield_offset,
                                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_PGA_CG_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PGA_CG_S1_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_CG_S1_OVR_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_CG_S1_OVR_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_CG_S1_OVR_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e8 bits 5:3) bits 0:2 use field PGA_CG_S1_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S1_OVR_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S1_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S1_OVR_MSK, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S1_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_CG_S1_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_CG_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_CG_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_CG_S2_OVR_set", A, 15);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_CG_S2_OVR_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_CG_S2_OVR_set", A, value );

    /* (0x000000e8 bits 2:0) bits 0:2 use field PGA_CG_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                        h_ptr,
                                                                        A,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S2_OVR_MSK,
                                                                        PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S2_OVR_OFF,
                                                                        value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_CG_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_CG_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_CG_S2_OVR_get", A, 15);
    /* (0x000000e8 bits 2:0) bits 0:2 use field PGA_CG_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S2_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S2_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_CG_S2_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_PGA_CG_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_PGA_CG_S2_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_CG_S2_OVR_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_CG_S2_OVR_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_CG_S2_OVR_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_CG_S2_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000e8 bits 2:0) bits 0:2 use field PGA_CG_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e8 bits 2:0) bits 0:2 use field PGA_CG_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_field_set( b_ptr,
                                                                            h_ptr,
                                                                            A,
                                                                            subfield_mask << (PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S2_OVR_OFF + subfield_offset),
                                                                            PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S2_OVR_OFF + subfield_offset,
                                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_PGA_CG_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PGA_CG_S2_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGA_CG_S2_OVR_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGA_CG_S2_OVR_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGA_CG_S2_OVR_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e8 bits 2:0) bits 0:2 use field PGA_CG_S2_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_read( b_ptr,
                                                                               h_ptr,
                                                                               A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S2_OVR_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S2_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S2_OVR_MSK, PCBI_REG_CHANNEL_PCBI_PGA_LUT_OVERRIDE_CFG_1_BIT_PGA_CG_S2_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGA_CG_S2_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_CM_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_CM_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_CM_SEL_set", A, 15);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_CM_SEL_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_CM_SEL_set", A, value );

    /* (0x000000ec bits 18:17) bits 0:1 use field ADC_CM_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_CM_SEL_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_CM_SEL_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_CM_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_CM_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_CM_SEL_get", A, 15);
    /* (0x000000ec bits 18:17) bits 0:1 use field ADC_CM_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_CM_SEL_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_CM_SEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_CM_SEL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_ADC_CM_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_ADC_CM_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ADC_CM_SEL_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ADC_CM_SEL_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ADC_CM_SEL_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ADC_CM_SEL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000ec bits 18:17) bits 0:1 use field ADC_CM_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000ec bits 18:17) bits 0:1 use field ADC_CM_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                                h_ptr,
                                                                A,
                                                                subfield_mask << (PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_CM_SEL_OFF + subfield_offset),
                                                                PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_CM_SEL_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_ADC_CM_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_ADC_CM_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ADC_CM_SEL_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ADC_CM_SEL_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ADC_CM_SEL_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000ec bits 18:17) bits 0:1 use field ADC_CM_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_CM_SEL_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_CM_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_CM_SEL_MSK, PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_CM_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ADC_CM_SEL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_BYPASS_DIV8_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_BYPASS_DIV8_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BYPASS_DIV8_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_BYPASS_DIV8_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BYPASS_DIV8_set", A, value );

    /* (0x000000ec bits 16) field ADC_BYPASS_DIV8 of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_BYPASS_DIV8_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_BYPASS_DIV8_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_BYPASS_DIV8_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_BYPASS_DIV8_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BYPASS_DIV8_get", A, 15);
    /* (0x000000ec bits 16) field ADC_BYPASS_DIV8 of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_BYPASS_DIV8_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_BYPASS_DIV8_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BYPASS_DIV8_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_BYPASS_DIV4_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_BYPASS_DIV4_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BYPASS_DIV4_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_BYPASS_DIV4_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BYPASS_DIV4_set", A, value );

    /* (0x000000ec bits 15) field ADC_BYPASS_DIV4 of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_BYPASS_DIV4_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_BYPASS_DIV4_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_BYPASS_DIV4_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_BYPASS_DIV4_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BYPASS_DIV4_get", A, 15);
    /* (0x000000ec bits 15) field ADC_BYPASS_DIV4 of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_BYPASS_DIV4_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_BYPASS_DIV4_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BYPASS_DIV4_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_T_PISO_MAIN_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_T_PISO_MAIN_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_PISO_MAIN_EN_set", A, 15);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_T_PISO_MAIN_EN_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_T_PISO_MAIN_EN_set", A, value );

    /* (0x000000ec bits 14:13) bits 0:1 use field T_PISO_MAIN_EN of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_MAIN_EN_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_MAIN_EN_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_T_PISO_MAIN_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_T_PISO_MAIN_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_PISO_MAIN_EN_get", A, 15);
    /* (0x000000ec bits 14:13) bits 0:1 use field T_PISO_MAIN_EN of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_MAIN_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_MAIN_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_T_PISO_MAIN_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_T_PISO_MAIN_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_T_PISO_MAIN_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_T_PISO_MAIN_EN_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_T_PISO_MAIN_EN_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_T_PISO_MAIN_EN_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_T_PISO_MAIN_EN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000ec bits 14:13) bits 0:1 use field T_PISO_MAIN_EN of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000ec bits 14:13) bits 0:1 use field T_PISO_MAIN_EN of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                                h_ptr,
                                                                A,
                                                                subfield_mask << (PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_MAIN_EN_OFF + subfield_offset),
                                                                PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_MAIN_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_T_PISO_MAIN_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_T_PISO_MAIN_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_T_PISO_MAIN_EN_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_T_PISO_MAIN_EN_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_T_PISO_MAIN_EN_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000ec bits 14:13) bits 0:1 use field T_PISO_MAIN_EN of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_MAIN_EN_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_MAIN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_MAIN_EN_MSK, PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_MAIN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_T_PISO_MAIN_EN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RX_CMCOR_CTRL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RX_CMCOR_CTRL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_CMCOR_CTRL_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RX_CMCOR_CTRL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RX_CMCOR_CTRL_set", A, value );

    /* (0x000000ec bits 12) field RX_CMCOR_CTRL of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_RX_CMCOR_CTRL_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_RX_CMCOR_CTRL_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_RX_CMCOR_CTRL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RX_CMCOR_CTRL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_CMCOR_CTRL_get", A, 15);
    /* (0x000000ec bits 12) field RX_CMCOR_CTRL of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_RX_CMCOR_CTRL_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_RX_CMCOR_CTRL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RX_CMCOR_CTRL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_T_TEST_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_T_TEST_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_TEST_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_T_TEST_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_T_TEST_EN_set", A, value );

    /* (0x000000ec bits 11) field T_TEST_EN of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_TEST_EN_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_TEST_EN_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_T_TEST_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_T_TEST_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_TEST_EN_get", A, 15);
    /* (0x000000ec bits 11) field T_TEST_EN of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_TEST_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_TEST_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_T_TEST_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_T_PISO_DLB_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_T_PISO_DLB_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_PISO_DLB_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_T_PISO_DLB_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_T_PISO_DLB_EN_set", A, value );

    /* (0x000000ec bits 10) field T_PISO_DLB_EN of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_DLB_EN_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_DLB_EN_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_T_PISO_DLB_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_T_PISO_DLB_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_PISO_DLB_EN_get", A, 15);
    /* (0x000000ec bits 10) field T_PISO_DLB_EN of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_DLB_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_T_PISO_DLB_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_T_PISO_DLB_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_DLB_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_DLB_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_DLB_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_DLB_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_DLB_EN_set", A, value );

    /* (0x000000ec bits 9) field ADC_DLB_EN of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_DLB_EN_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_DLB_EN_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_DLB_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_DLB_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_DLB_EN_get", A, 15);
    /* (0x000000ec bits 9) field ADC_DLB_EN of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_DLB_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_ADC_DLB_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_DLB_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_MLB_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_MLB_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_MLB_ENB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_MLB_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_MLB_ENB_set", A, value );

    /* (0x000000ec bits 8) field PGA_MLB_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_PGA_MLB_ENB_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_PGA_MLB_ENB_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_MLB_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_MLB_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_MLB_ENB_get", A, 15);
    /* (0x000000ec bits 8) field PGA_MLB_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_PGA_MLB_ENB_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_PGA_MLB_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_MLB_ENB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TRS_TEST_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TRS_TEST_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TRS_TEST_MODE_set", A, 15);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TRS_TEST_MODE_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TRS_TEST_MODE_set", A, value );

    /* (0x000000ec bits 7:2) bits 0:5 use field TRS_TEST_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_TEST_MODE_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_TEST_MODE_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_TRS_TEST_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TRS_TEST_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TRS_TEST_MODE_get", A, 15);
    /* (0x000000ec bits 7:2) bits 0:5 use field TRS_TEST_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_TEST_MODE_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_TEST_MODE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TRS_TEST_MODE_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_TRS_TEST_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_TRS_TEST_MODE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TRS_TEST_MODE_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TRS_TEST_MODE_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TRS_TEST_MODE_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TRS_TEST_MODE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000ec bits 7:2) bits 0:5 use field TRS_TEST_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000ec bits 7:2) bits 0:5 use field TRS_TEST_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                                h_ptr,
                                                                A,
                                                                subfield_mask << (PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_TEST_MODE_OFF + subfield_offset),
                                                                PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_TEST_MODE_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_TRS_TEST_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_TRS_TEST_MODE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TRS_TEST_MODE_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TRS_TEST_MODE_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TRS_TEST_MODE_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000ec bits 7:2) bits 0:5 use field TRS_TEST_MODE of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_TEST_MODE_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_TEST_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_TEST_MODE_MSK, PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_TEST_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TRS_TEST_MODE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TRS_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TRS_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TRS_ENB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TRS_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TRS_ENB_set", A, value );

    /* (0x000000ec bits 1) field TRS_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_ENB_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_ENB_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_TRS_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TRS_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TRS_ENB_get", A, 15);
    /* (0x000000ec bits 1) field TRS_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_ENB_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_TRS_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TRS_ENB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RX_CM_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RX_CM_ENB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_CM_ENB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RX_CM_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RX_CM_ENB_set", A, value );

    /* (0x000000ec bits 0) field RX_CM_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            A,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_RX_CM_ENB_MSK,
                                                            PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_RX_CM_ENB_OFF,
                                                            value);
}

static INLINE UINT32 s16_channel_pcbi_field_RX_CM_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RX_CM_ENB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_CM_ENB_get", A, 15);
    /* (0x000000ec bits 0) field RX_CM_ENB of register PMC_PCBI_REG_CHANNEL_PCBI_MABC_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MABC_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_RX_CM_ENB_MSK) >> PCBI_REG_CHANNEL_PCBI_MABC_CFG_1_BIT_RX_CM_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RX_CM_ENB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_SIPO_BIST_START_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SIPO_BIST_START_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SIPO_BIST_START_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_START_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_START_set", A, value );

    /* (0x000000f0 bits 2) field SIPO_BIST_START of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_field_set( b_ptr,
                                                                 h_ptr,
                                                                 A,
                                                                 PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_START_MSK,
                                                                 PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_START_OFF,
                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_START_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_START_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SIPO_BIST_START_get", A, 15);
    /* (0x000000f0 bits 2) field SIPO_BIST_START of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_START_MSK) >> PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_START_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_START_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_BIST_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_BIST_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BIST_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_BIST_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BIST_set", A, value );

    /* (0x000000f0 bits 1) field ADC_BIST of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_field_set( b_ptr,
                                                                 h_ptr,
                                                                 A,
                                                                 PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_ADC_BIST_MSK,
                                                                 PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_ADC_BIST_OFF,
                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BIST_get", A, 15);
    /* (0x000000f0 bits 1) field ADC_BIST of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_ADC_BIST_MSK) >> PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_ADC_BIST_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BIST_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_SIPO_BIST_DATA_TIME_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SIPO_BIST_DATA_TIME_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SIPO_BIST_DATA_TIME_SEL_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_DATA_TIME_SEL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_DATA_TIME_SEL_set", A, value );

    /* (0x000000f0 bits 0) field SIPO_BIST_DATA_TIME_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_field_set( b_ptr,
                                                                 h_ptr,
                                                                 A,
                                                                 PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_DATA_TIME_SEL_MSK,
                                                                 PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_DATA_TIME_SEL_OFF,
                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_DATA_TIME_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_DATA_TIME_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SIPO_BIST_DATA_TIME_SEL_get", A, 15);
    /* (0x000000f0 bits 0) field SIPO_BIST_DATA_TIME_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_DATA_TIME_SEL_MSK) >> PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_DATA_TIME_SEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_DATA_TIME_SEL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VGP_UPPERLIMIT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VGP_UPPERLIMIT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_UPPERLIMIT_set", A, 15);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VGP_UPPERLIMIT_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VGP_UPPERLIMIT_set", A, value );

    /* (0x000000fc bits 21:14) bits 0:7 use field VGP_UPPERLIMIT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_UPPERLIMIT_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_UPPERLIMIT_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VGP_UPPERLIMIT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VGP_UPPERLIMIT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_UPPERLIMIT_get", A, 15);
    /* (0x000000fc bits 21:14) bits 0:7 use field VGP_UPPERLIMIT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_UPPERLIMIT_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_UPPERLIMIT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VGP_UPPERLIMIT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_VGP_UPPERLIMIT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_VGP_UPPERLIMIT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_VGP_UPPERLIMIT_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_VGP_UPPERLIMIT_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_VGP_UPPERLIMIT_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_VGP_UPPERLIMIT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000fc bits 21:14) bits 0:7 use field VGP_UPPERLIMIT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000fc bits 21:14) bits 0:7 use field VGP_UPPERLIMIT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_UPPERLIMIT_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_UPPERLIMIT_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_VGP_UPPERLIMIT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_VGP_UPPERLIMIT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_VGP_UPPERLIMIT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_VGP_UPPERLIMIT_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_VGP_UPPERLIMIT_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000fc bits 21:14) bits 0:7 use field VGP_UPPERLIMIT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_UPPERLIMIT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_UPPERLIMIT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_UPPERLIMIT_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_UPPERLIMIT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_VGP_UPPERLIMIT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TX_EMI_CALIB_OCC_DONE_GEN_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TX_EMI_CALIB_OCC_DONE_GEN_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_EMI_CALIB_OCC_DONE_GEN_SEL_set", A, 15);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TX_EMI_CALIB_OCC_DONE_GEN_SEL_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TX_EMI_CALIB_OCC_DONE_GEN_SEL_set", A, value );

    /* (0x000000fc bits 13:12) bits 0:1 use field TX_EMI_CALIB_OCC_DONE_GEN_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_TX_EMI_CALIB_OCC_DONE_GEN_SEL_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_TX_EMI_CALIB_OCC_DONE_GEN_SEL_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_TX_EMI_CALIB_OCC_DONE_GEN_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TX_EMI_CALIB_OCC_DONE_GEN_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_EMI_CALIB_OCC_DONE_GEN_SEL_get", A, 15);
    /* (0x000000fc bits 13:12) bits 0:1 use field TX_EMI_CALIB_OCC_DONE_GEN_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_TX_EMI_CALIB_OCC_DONE_GEN_SEL_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_TX_EMI_CALIB_OCC_DONE_GEN_SEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TX_EMI_CALIB_OCC_DONE_GEN_SEL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A,
                                                                                   UINT32 start_bit,
                                                                                   UINT32 stop_bit,
                                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                   s16_handle_t *h_ptr,
                                                                                   UINT32 A,
                                                                                   UINT32 start_bit,
                                                                                   UINT32 stop_bit,
                                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000fc bits 13:12) bits 0:1 use field TX_EMI_CALIB_OCC_DONE_GEN_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000fc bits 13:12) bits 0:1 use field TX_EMI_CALIB_OCC_DONE_GEN_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_TX_EMI_CALIB_OCC_DONE_GEN_SEL_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_TX_EMI_CALIB_OCC_DONE_GEN_SEL_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 start_bit,
                                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                     s16_handle_t *h_ptr,
                                                                                     UINT32 A,
                                                                                     UINT32 start_bit,
                                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000fc bits 13:12) bits 0:1 use field TX_EMI_CALIB_OCC_DONE_GEN_SEL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_TX_EMI_CALIB_OCC_DONE_GEN_SEL_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_TX_EMI_CALIB_OCC_DONE_GEN_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_TX_EMI_CALIB_OCC_DONE_GEN_SEL_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_TX_EMI_CALIB_OCC_DONE_GEN_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OCC_DONE_GEN_SEL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VGP_CLR_OCDAC_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VGP_CLR_OCDAC_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_CLR_OCDAC_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VGP_CLR_OCDAC_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VGP_CLR_OCDAC_set", A, value );

    /* (0x000000fc bits 11) field VGP_CLR_OCDAC of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_CLR_OCDAC_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_CLR_OCDAC_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VGP_CLR_OCDAC_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VGP_CLR_OCDAC_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_CLR_OCDAC_get", A, 15);
    /* (0x000000fc bits 11) field VGP_CLR_OCDAC of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_CLR_OCDAC_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_CLR_OCDAC_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VGP_CLR_OCDAC_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VGP_OCC_CONT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VGP_OCC_CONT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCC_CONT_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VGP_OCC_CONT_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCC_CONT_set", A, value );

    /* (0x000000fc bits 10) field VGP_OCC_CONT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_CONT_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_CONT_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_CONT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_CONT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCC_CONT_get", A, 15);
    /* (0x000000fc bits 10) field VGP_OCC_CONT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_CONT_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_CONT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCC_CONT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_EN_set", A, value );

    /* (0x000000fc bits 9) field VGP_OCC_ENABLE_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_ENABLE_OVR_EN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_ENABLE_OVR_EN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_EN_get", A, 15);
    /* (0x000000fc bits 9) field VGP_OCC_ENABLE_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_ENABLE_OVR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_ENABLE_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_set", A, value );

    /* (0x000000fc bits 8) field VGP_OCC_ENABLE_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_ENABLE_OVR_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_ENABLE_OVR_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_get", A, 15);
    /* (0x000000fc bits 8) field VGP_OCC_ENABLE_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_ENABLE_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_ENABLE_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCC_ENABLE_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VGP_OCC_START_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VGP_OCC_START_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCC_START_OVR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VGP_OCC_START_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCC_START_OVR_EN_set", A, value );

    /* (0x000000fc bits 7) field VGP_OCC_START_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_START_OVR_EN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_START_OVR_EN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_START_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_START_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCC_START_OVR_EN_get", A, 15);
    /* (0x000000fc bits 7) field VGP_OCC_START_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_START_OVR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_START_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCC_START_OVR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VGP_OCC_START_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VGP_OCC_START_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCC_START_OVR_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VGP_OCC_START_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCC_START_OVR_set", A, value );

    /* (0x000000fc bits 6) field VGP_OCC_START_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_START_OVR_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_START_OVR_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_START_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_START_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCC_START_OVR_get", A, 15);
    /* (0x000000fc bits 6) field VGP_OCC_START_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_START_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_START_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCC_START_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RECALCUL_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RECALCUL_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RECALCUL_OVR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RECALCUL_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RECALCUL_OVR_EN_set", A, value );

    /* (0x000000fc bits 5) field RECALCUL_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_RECALCUL_OVR_EN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_RECALCUL_OVR_EN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_RECALCUL_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RECALCUL_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RECALCUL_OVR_EN_get", A, 15);
    /* (0x000000fc bits 5) field RECALCUL_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_RECALCUL_OVR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_RECALCUL_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RECALCUL_OVR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RECALCUL_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RECALCUL_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RECALCUL_OVR_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RECALCUL_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RECALCUL_OVR_set", A, value );

    /* (0x000000fc bits 4) field RECALCUL_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_RECALCUL_OVR_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_RECALCUL_OVR_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_RECALCUL_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RECALCUL_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RECALCUL_OVR_get", A, 15);
    /* (0x000000fc bits 4) field RECALCUL_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_RECALCUL_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_RECALCUL_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RECALCUL_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_START_ROPRON_CAL_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_START_ROPRON_CAL_OVR_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_START_ROPRON_CAL_OVR_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_START_ROPRON_CAL_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_START_ROPRON_CAL_OVR_EN_set", A, value );

    /* (0x000000fc bits 3) field START_ROPRON_CAL_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_START_ROPRON_CAL_OVR_EN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_START_ROPRON_CAL_OVR_EN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_START_ROPRON_CAL_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_START_ROPRON_CAL_OVR_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_START_ROPRON_CAL_OVR_EN_get", A, 15);
    /* (0x000000fc bits 3) field START_ROPRON_CAL_OVR_EN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_START_ROPRON_CAL_OVR_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_START_ROPRON_CAL_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_START_ROPRON_CAL_OVR_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_START_ROPRON_CAL_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_START_ROPRON_CAL_OVR_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_START_ROPRON_CAL_OVR_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_START_ROPRON_CAL_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_START_ROPRON_CAL_OVR_set", A, value );

    /* (0x000000fc bits 2) field START_ROPRON_CAL_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_START_ROPRON_CAL_OVR_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_START_ROPRON_CAL_OVR_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_START_ROPRON_CAL_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_START_ROPRON_CAL_OVR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_START_ROPRON_CAL_OVR_get", A, 15);
    /* (0x000000fc bits 2) field START_ROPRON_CAL_OVR of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_START_ROPRON_CAL_OVR_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_START_ROPRON_CAL_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_START_ROPRON_CAL_OVR_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_VGP_OCD_CM_INVERT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_VGP_OCD_CM_INVERT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCD_CM_INVERT_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_VGP_OCD_CM_INVERT_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCD_CM_INVERT_set", A, value );

    /* (0x000000fc bits 1) field VGP_OCD_CM_INVERT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCD_CM_INVERT_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCD_CM_INVERT_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_VGP_OCD_CM_INVERT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VGP_OCD_CM_INVERT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCD_CM_INVERT_get", A, 15);
    /* (0x000000fc bits 1) field VGP_OCD_CM_INVERT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCD_CM_INVERT_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCD_CM_INVERT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCD_CM_INVERT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ROP_OCD_CM_INVERT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ROP_OCD_CM_INVERT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ROP_OCD_CM_INVERT_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ROP_OCD_CM_INVERT_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ROP_OCD_CM_INVERT_set", A, value );

    /* (0x000000fc bits 0) field ROP_OCD_CM_INVERT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_ROP_OCD_CM_INVERT_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_ROP_OCD_CM_INVERT_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_ROP_OCD_CM_INVERT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ROP_OCD_CM_INVERT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ROP_OCD_CM_INVERT_get", A, 15);
    /* (0x000000fc bits 0) field ROP_OCD_CM_INVERT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_ROP_OCD_CM_INVERT_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_ROP_OCD_CM_INVERT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ROP_OCD_CM_INVERT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TX_EMI_CALIB_OC_TOLERANCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TX_EMI_CALIB_OC_TOLERANCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_EMI_CALIB_OC_TOLERANCE_set", A, 15);
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TX_EMI_CALIB_OC_TOLERANCE_set", value, 32767);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TX_EMI_CALIB_OC_TOLERANCE_set", A, value );

    /* (0x00000100 bits 30:16) bits 0:14 use field TX_EMI_CALIB_OC_TOLERANCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_TOLERANCE_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_TOLERANCE_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_TX_EMI_CALIB_OC_TOLERANCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TX_EMI_CALIB_OC_TOLERANCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_EMI_CALIB_OC_TOLERANCE_get", A, 15);
    /* (0x00000100 bits 30:16) bits 0:14 use field TX_EMI_CALIB_OC_TOLERANCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_TOLERANCE_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_TOLERANCE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TX_EMI_CALIB_OC_TOLERANCE_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 start_bit,
                                                                               UINT32 stop_bit,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 start_bit,
                                                                               UINT32 stop_bit,
                                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_set", stop_bit, 14 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000100 bits 30:16) bits 0:14 use field TX_EMI_CALIB_OC_TOLERANCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000100 bits 30:16) bits 0:14 use field TX_EMI_CALIB_OC_TOLERANCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_TOLERANCE_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_TOLERANCE_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 start_bit,
                                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 start_bit,
                                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000100 bits 30:16) bits 0:14 use field TX_EMI_CALIB_OC_TOLERANCE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_TOLERANCE_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_TOLERANCE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_TOLERANCE_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_TOLERANCE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_TOLERANCE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TX_EMI_CALIB_OC_INTERVAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TX_EMI_CALIB_OC_INTERVAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_EMI_CALIB_OC_INTERVAL_set", A, 15);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TX_EMI_CALIB_OC_INTERVAL_set", value, 65535);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TX_EMI_CALIB_OC_INTERVAL_set", A, value );

    /* (0x00000100 bits 15:0) bits 0:15 use field TX_EMI_CALIB_OC_INTERVAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_INTERVAL_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_INTERVAL_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_TX_EMI_CALIB_OC_INTERVAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TX_EMI_CALIB_OC_INTERVAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_EMI_CALIB_OC_INTERVAL_get", A, 15);
    /* (0x00000100 bits 15:0) bits 0:15 use field TX_EMI_CALIB_OC_INTERVAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_INTERVAL_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_INTERVAL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TX_EMI_CALIB_OC_INTERVAL_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit,
                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                              s16_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit,
                                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000100 bits 15:0) bits 0:15 use field TX_EMI_CALIB_OC_INTERVAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000100 bits 15:0) bits 0:15 use field TX_EMI_CALIB_OC_INTERVAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_INTERVAL_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_INTERVAL_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000100 bits 15:0) bits 0:15 use field TX_EMI_CALIB_OC_INTERVAL of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_INTERVAL_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_INTERVAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_INTERVAL_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_2_BIT_TX_EMI_CALIB_OC_INTERVAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_TX_EMI_CALIB_OC_INTERVAL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PWRDATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PWRDATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PWRDATA_set", A, 15);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PWRDATA_set", value, 1048575);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PWRDATA_set", A, value );

    /* (0x00000104 bits 19:0) bits 0:19 use field PWRDATA of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_BIT_PWRDATA_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_BIT_PWRDATA_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_PWRDATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PWRDATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PWRDATA_get", A, 15);
    /* (0x00000104 bits 19:0) bits 0:19 use field PWRDATA of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_BIT_PWRDATA_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_BIT_PWRDATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PWRDATA_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_PWRDATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_PWRDATA_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PWRDATA_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PWRDATA_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PWRDATA_set", stop_bit, 19 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PWRDATA_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000104 bits 19:0) bits 0:19 use field PWRDATA of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000104 bits 19:0) bits 0:19 use field PWRDATA of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_BIT_PWRDATA_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_BIT_PWRDATA_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_PWRDATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PWRDATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PWRDATA_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PWRDATA_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PWRDATA_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000104 bits 19:0) bits 0:19 use field PWRDATA of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_BIT_PWRDATA_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_BIT_PWRDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_BIT_PWRDATA_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_3_BIT_PWRDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PWRDATA_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PRDLOCK_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PRDLOCK_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PRDLOCK_set", A, 15);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PRDLOCK_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PRDLOCK_set", A, value );

    /* (0x00000108 bits 9:6) bits 0:3 use field PRDLOCK of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PRDLOCK_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PRDLOCK_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_PRDLOCK_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PRDLOCK_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PRDLOCK_get", A, 15);
    /* (0x00000108 bits 9:6) bits 0:3 use field PRDLOCK of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PRDLOCK_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PRDLOCK_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PRDLOCK_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_PRDLOCK_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_PRDLOCK_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PRDLOCK_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PRDLOCK_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PRDLOCK_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PRDLOCK_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000108 bits 9:6) bits 0:3 use field PRDLOCK of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000108 bits 9:6) bits 0:3 use field PRDLOCK of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PRDLOCK_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PRDLOCK_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_PRDLOCK_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PRDLOCK_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PRDLOCK_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PRDLOCK_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PRDLOCK_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000108 bits 9:6) bits 0:3 use field PRDLOCK of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PRDLOCK_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PRDLOCK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PRDLOCK_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PRDLOCK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PRDLOCK_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGENERIC_RD_ADD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGENERIC_RD_ADD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGENERIC_RD_ADD_set", A, 15);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGENERIC_RD_ADD_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGENERIC_RD_ADD_set", A, value );

    /* (0x00000108 bits 5:0) bits 0:5 use field PGENERIC_RD_ADD of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_RD_ADD_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_RD_ADD_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGENERIC_RD_ADD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGENERIC_RD_ADD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGENERIC_RD_ADD_get", A, 15);
    /* (0x00000108 bits 5:0) bits 0:5 use field PGENERIC_RD_ADD of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_RD_ADD_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_RD_ADD_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGENERIC_RD_ADD_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_PGENERIC_RD_ADD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_PGENERIC_RD_ADD_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGENERIC_RD_ADD_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGENERIC_RD_ADD_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGENERIC_RD_ADD_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGENERIC_RD_ADD_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000108 bits 5:0) bits 0:5 use field PGENERIC_RD_ADD of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000108 bits 5:0) bits 0:5 use field PGENERIC_RD_ADD of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_RD_ADD_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_RD_ADD_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_PGENERIC_RD_ADD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PGENERIC_RD_ADD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGENERIC_RD_ADD_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGENERIC_RD_ADD_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGENERIC_RD_ADD_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000108 bits 5:0) bits 0:5 use field PGENERIC_RD_ADD of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_RD_ADD_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_RD_ADD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_RD_ADD_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_RD_ADD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGENERIC_RD_ADD_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P1AD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P1AD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1AD1D_IN_set", A, 15);
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P1AD1D_IN_set", value, 1023);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P1AD1D_IN_set", A, value );

    /* (0x0000010c bits 29:20) bits 0:9 use field P1AD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD1D_IN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD1D_IN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_P1AD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P1AD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1AD1D_IN_get", A, 15);
    /* (0x0000010c bits 29:20) bits 0:9 use field P1AD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD1D_IN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD1D_IN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P1AD1D_IN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P1AD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P1AD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1AD1D_IN_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1AD1D_IN_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1AD1D_IN_set", stop_bit, 9 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1AD1D_IN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000010c bits 29:20) bits 0:9 use field P1AD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000010c bits 29:20) bits 0:9 use field P1AD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD1D_IN_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD1D_IN_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P1AD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P1AD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1AD1D_IN_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1AD1D_IN_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1AD1D_IN_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000010c bits 29:20) bits 0:9 use field P1AD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD1D_IN_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD1D_IN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD1D_IN_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD1D_IN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1AD1D_IN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P1BD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P1BD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1BD2D_IN_set", A, 15);
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P1BD2D_IN_set", value, 1023);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P1BD2D_IN_set", A, value );

    /* (0x0000010c bits 19:10) bits 0:9 use field P1BD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1BD2D_IN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1BD2D_IN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_P1BD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P1BD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1BD2D_IN_get", A, 15);
    /* (0x0000010c bits 19:10) bits 0:9 use field P1BD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1BD2D_IN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1BD2D_IN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P1BD2D_IN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P1BD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P1BD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1BD2D_IN_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1BD2D_IN_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1BD2D_IN_set", stop_bit, 9 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1BD2D_IN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000010c bits 19:10) bits 0:9 use field P1BD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000010c bits 19:10) bits 0:9 use field P1BD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1BD2D_IN_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1BD2D_IN_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P1BD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P1BD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1BD2D_IN_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1BD2D_IN_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1BD2D_IN_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000010c bits 19:10) bits 0:9 use field P1BD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1BD2D_IN_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1BD2D_IN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1BD2D_IN_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1BD2D_IN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1BD2D_IN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P1AD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P1AD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1AD2D_IN_set", A, 15);
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P1AD2D_IN_set", value, 1023);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P1AD2D_IN_set", A, value );

    /* (0x0000010c bits 9:0) bits 0:9 use field P1AD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD2D_IN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD2D_IN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_P1AD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P1AD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1AD2D_IN_get", A, 15);
    /* (0x0000010c bits 9:0) bits 0:9 use field P1AD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD2D_IN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD2D_IN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P1AD2D_IN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P1AD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P1AD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1AD2D_IN_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1AD2D_IN_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1AD2D_IN_set", stop_bit, 9 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1AD2D_IN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000010c bits 9:0) bits 0:9 use field P1AD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000010c bits 9:0) bits 0:9 use field P1AD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD2D_IN_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD2D_IN_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P1AD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P1AD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1AD2D_IN_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1AD2D_IN_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1AD2D_IN_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000010c bits 9:0) bits 0:9 use field P1AD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD2D_IN_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD2D_IN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD2D_IN_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_5_BIT_P1AD2D_IN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1AD2D_IN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P2BD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P2BD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2BD2D_IN_set", A, 15);
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P2BD2D_IN_set", value, 1023);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P2BD2D_IN_set", A, value );

    /* (0x00000110 bits 29:20) bits 0:9 use field P2BD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2BD2D_IN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2BD2D_IN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_P2BD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P2BD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2BD2D_IN_get", A, 15);
    /* (0x00000110 bits 29:20) bits 0:9 use field P2BD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2BD2D_IN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2BD2D_IN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P2BD2D_IN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P2BD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P2BD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2BD2D_IN_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2BD2D_IN_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2BD2D_IN_set", stop_bit, 9 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2BD2D_IN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000110 bits 29:20) bits 0:9 use field P2BD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000110 bits 29:20) bits 0:9 use field P2BD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2BD2D_IN_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2BD2D_IN_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P2BD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P2BD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2BD2D_IN_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2BD2D_IN_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2BD2D_IN_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000110 bits 29:20) bits 0:9 use field P2BD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2BD2D_IN_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2BD2D_IN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2BD2D_IN_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2BD2D_IN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2BD2D_IN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P2AD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P2AD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2AD2D_IN_set", A, 15);
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P2AD2D_IN_set", value, 1023);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P2AD2D_IN_set", A, value );

    /* (0x00000110 bits 19:10) bits 0:9 use field P2AD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2AD2D_IN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2AD2D_IN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_P2AD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P2AD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2AD2D_IN_get", A, 15);
    /* (0x00000110 bits 19:10) bits 0:9 use field P2AD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2AD2D_IN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2AD2D_IN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P2AD2D_IN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P2AD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P2AD2D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2AD2D_IN_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2AD2D_IN_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2AD2D_IN_set", stop_bit, 9 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2AD2D_IN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000110 bits 19:10) bits 0:9 use field P2AD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000110 bits 19:10) bits 0:9 use field P2AD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2AD2D_IN_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2AD2D_IN_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P2AD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P2AD2D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2AD2D_IN_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2AD2D_IN_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2AD2D_IN_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000110 bits 19:10) bits 0:9 use field P2AD2D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2AD2D_IN_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2AD2D_IN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2AD2D_IN_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P2AD2D_IN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2AD2D_IN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P1BD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P1BD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1BD1D_IN_set", A, 15);
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P1BD1D_IN_set", value, 1023);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P1BD1D_IN_set", A, value );

    /* (0x00000110 bits 9:0) bits 0:9 use field P1BD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P1BD1D_IN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P1BD1D_IN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_P1BD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P1BD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P1BD1D_IN_get", A, 15);
    /* (0x00000110 bits 9:0) bits 0:9 use field P1BD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P1BD1D_IN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P1BD1D_IN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P1BD1D_IN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P1BD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P1BD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1BD1D_IN_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1BD1D_IN_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1BD1D_IN_set", stop_bit, 9 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1BD1D_IN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000110 bits 9:0) bits 0:9 use field P1BD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000110 bits 9:0) bits 0:9 use field P1BD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P1BD1D_IN_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P1BD1D_IN_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P1BD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P1BD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P1BD1D_IN_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P1BD1D_IN_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P1BD1D_IN_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000110 bits 9:0) bits 0:9 use field P1BD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P1BD1D_IN_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P1BD1D_IN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P1BD1D_IN_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_6_BIT_P1BD1D_IN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P1BD1D_IN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P2BD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P2BD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2BD1D_IN_set", A, 15);
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P2BD1D_IN_set", value, 1023);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P2BD1D_IN_set", A, value );

    /* (0x00000114 bits 19:10) bits 0:9 use field P2BD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2BD1D_IN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2BD1D_IN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_P2BD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P2BD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2BD1D_IN_get", A, 15);
    /* (0x00000114 bits 19:10) bits 0:9 use field P2BD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2BD1D_IN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2BD1D_IN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P2BD1D_IN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P2BD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P2BD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2BD1D_IN_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2BD1D_IN_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2BD1D_IN_set", stop_bit, 9 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2BD1D_IN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000114 bits 19:10) bits 0:9 use field P2BD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000114 bits 19:10) bits 0:9 use field P2BD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2BD1D_IN_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2BD1D_IN_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P2BD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P2BD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2BD1D_IN_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2BD1D_IN_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2BD1D_IN_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000114 bits 19:10) bits 0:9 use field P2BD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2BD1D_IN_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2BD1D_IN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2BD1D_IN_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2BD1D_IN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2BD1D_IN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_P2AD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_P2AD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2AD1D_IN_set", A, 15);
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_P2AD1D_IN_set", value, 1023);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_P2AD1D_IN_set", A, value );

    /* (0x00000114 bits 9:0) bits 0:9 use field P2AD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_field_set( b_ptr,
                                                                          h_ptr,
                                                                          A,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2AD1D_IN_MSK,
                                                                          PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2AD1D_IN_OFF,
                                                                          value);
}

static INLINE UINT32 s16_channel_pcbi_field_P2AD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_P2AD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_P2AD1D_IN_get", A, 15);
    /* (0x00000114 bits 9:0) bits 0:9 use field P2AD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2AD1D_IN_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2AD1D_IN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_P2AD1D_IN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_P2AD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_P2AD1D_IN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2AD1D_IN_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2AD1D_IN_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2AD1D_IN_set", stop_bit, 9 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2AD1D_IN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000114 bits 9:0) bits 0:9 use field P2AD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000114 bits 9:0) bits 0:9 use field P2AD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_field_set( b_ptr,
                                                                              h_ptr,
                                                                              A,
                                                                              subfield_mask << (PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2AD1D_IN_OFF + subfield_offset),
                                                                              PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2AD1D_IN_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_P2AD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_P2AD1D_IN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_P2AD1D_IN_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_P2AD1D_IN_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_P2AD1D_IN_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000114 bits 9:0) bits 0:9 use field P2AD1D_IN of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2AD1D_IN_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2AD1D_IN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2AD1D_IN_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_7_BIT_P2AD1D_IN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_P2AD1D_IN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TRS_CTRL_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TRS_CTRL_0_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TRS_CTRL_0_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TRS_CTRL_0_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TRS_CTRL_0_set", A, value );

    /* (0x00000118 bits 16) field TRS_CTRL_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRS_CTRL_0_MSK,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRS_CTRL_0_OFF,
                                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_TRS_CTRL_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TRS_CTRL_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TRS_CTRL_0_get", A, 15);
    /* (0x00000118 bits 16) field TRS_CTRL_0 of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRS_CTRL_0_MSK) >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRS_CTRL_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TRS_CTRL_0_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TRCS_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TRCS_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TRCS_ATMSB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TRCS_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TRCS_ATMSB_set", A, value );

    /* (0x00000118 bits 13) field TRCS_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRCS_ATMSB_MSK,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRCS_ATMSB_OFF,
                                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_TRCS_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TRCS_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TRCS_ATMSB_get", A, 15);
    /* (0x00000118 bits 13) field TRCS_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRCS_ATMSB_MSK) >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRCS_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TRCS_ATMSB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ATIN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                    s16_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ATIN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                    s16_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ATIN_set", A, 15);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ATIN_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ATIN_set", A, value );

    /* (0x00000118 bits 12:8) bits 0:4 use field ATIN of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ATIN_MSK,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ATIN_OFF,
                                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_ATIN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ATIN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                      s16_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ATIN_get", A, 15);
    /* (0x00000118 bits 12:8) bits 0:4 use field ATIN of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ATIN_MSK) >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ATIN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ATIN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_ATIN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_ATIN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ATIN_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ATIN_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ATIN_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ATIN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000118 bits 12:8) bits 0:4 use field ATIN of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000118 bits 12:8) bits 0:4 use field ATIN of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                               h_ptr,
                                                                               A,
                                                                               subfield_mask << (PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ATIN_OFF + subfield_offset),
                                                                               PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ATIN_OFF + subfield_offset,
                                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_ATIN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_ATIN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_ATIN_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_ATIN_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_ATIN_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000118 bits 12:8) bits 0:4 use field ATIN of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ATIN_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ATIN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ATIN_MSK, PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ATIN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_ATIN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PI_I_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PI_I_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PI_I_ATMSB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PI_I_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PI_I_ATMSB_set", A, value );

    /* (0x00000118 bits 7) field PI_I_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_I_ATMSB_MSK,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_I_ATMSB_OFF,
                                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_PI_I_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PI_I_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PI_I_ATMSB_get", A, 15);
    /* (0x00000118 bits 7) field PI_I_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_I_ATMSB_MSK) >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_I_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PI_I_ATMSB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PI_Q_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PI_Q_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PI_Q_ATMSB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PI_Q_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PI_Q_ATMSB_set", A, value );

    /* (0x00000118 bits 6) field PI_Q_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_Q_ATMSB_MSK,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_Q_ATMSB_OFF,
                                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_PI_Q_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PI_Q_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PI_Q_ATMSB_get", A, 15);
    /* (0x00000118 bits 6) field PI_Q_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_Q_ATMSB_MSK) >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_Q_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PI_Q_ATMSB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RX_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RX_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_ATMSB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RX_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RX_ATMSB_set", A, value );

    /* (0x00000118 bits 5) field RX_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_RX_ATMSB_MSK,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_RX_ATMSB_OFF,
                                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_RX_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RX_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_ATMSB_get", A, 15);
    /* (0x00000118 bits 5) field RX_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_RX_ATMSB_MSK) >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_RX_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RX_ATMSB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TRS_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TRS_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TRS_ATMSB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TRS_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TRS_ATMSB_set", A, value );

    /* (0x00000118 bits 4) field TRS_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRS_ATMSB_MSK,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRS_ATMSB_OFF,
                                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_TRS_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TRS_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TRS_ATMSB_get", A, 15);
    /* (0x00000118 bits 4) field TRS_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRS_ATMSB_MSK) >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_TRS_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TRS_ATMSB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_T_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_T_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_ATMSB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_T_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_T_ATMSB_set", A, value );

    /* (0x00000118 bits 3) field T_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_T_ATMSB_MSK,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_T_ATMSB_OFF,
                                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_T_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_T_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_ATMSB_get", A, 15);
    /* (0x00000118 bits 3) field T_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_T_ATMSB_MSK) >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_T_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_T_ATMSB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PI_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PI_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PI_ATMSB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PI_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PI_ATMSB_set", A, value );

    /* (0x00000118 bits 2) field PI_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_ATMSB_MSK,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_ATMSB_OFF,
                                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_PI_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PI_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PI_ATMSB_get", A, 15);
    /* (0x00000118 bits 2) field PI_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_ATMSB_MSK) >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PI_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PI_ATMSB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PGA_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PGA_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_ATMSB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PGA_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PGA_ATMSB_set", A, value );

    /* (0x00000118 bits 1) field PGA_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PGA_ATMSB_MSK,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PGA_ATMSB_OFF,
                                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_PGA_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_ATMSB_get", A, 15);
    /* (0x00000118 bits 1) field PGA_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PGA_ATMSB_MSK) >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_PGA_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_ATMSB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_ATMSB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_ATMSB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_ATMSB_set", A, value );

    /* (0x00000118 bits 0) field ADC_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_field_set( b_ptr,
                                                                           h_ptr,
                                                                           A,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ADC_ATMSB_MSK,
                                                                           PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ADC_ATMSB_OFF,
                                                                           value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_ATMSB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_ATMSB_get", A, 15);
    /* (0x00000118 bits 0) field ADC_ATMSB of register PMC_PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_read( b_ptr,
                                                                                  h_ptr,
                                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ADC_ATMSB_MSK) >> PCBI_REG_CHANNEL_PCBI_ANALOG_TESTBUS_MODE_CFG_1_BIT_ADC_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_ATMSB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_DIAGNOSTICS_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_DIAGNOSTICS_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_DIAGNOSTICS_SW_RESET_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_DIAGNOSTICS_SW_RESET_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_DIAGNOSTICS_SW_RESET_set", A, value );

    /* (0x0000011c bits 17) field DIAGNOSTICS_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_DIAGNOSTICS_SW_RESET_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_DIAGNOSTICS_SW_RESET_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_DIAGNOSTICS_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_DIAGNOSTICS_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_DIAGNOSTICS_SW_RESET_get", A, 15);
    /* (0x0000011c bits 17) field DIAGNOSTICS_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_DIAGNOSTICS_SW_RESET_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_DIAGNOSTICS_SW_RESET_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_DIAGNOSTICS_SW_RESET_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_SSI_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SSI_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_SW_RESET_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SSI_SW_RESET_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SSI_SW_RESET_set", A, value );

    /* (0x0000011c bits 16) field SSI_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_SSI_SW_RESET_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_SSI_SW_RESET_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_SSI_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_SW_RESET_get", A, 15);
    /* (0x0000011c bits 16) field SSI_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_SSI_SW_RESET_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_SSI_SW_RESET_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_SW_RESET_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_OCC_TX_RX_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_OCC_TX_RX_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCC_TX_RX_SW_RESET_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_OCC_TX_RX_SW_RESET_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_OCC_TX_RX_SW_RESET_set", A, value );

    /* (0x0000011c bits 15) field OCC_TX_RX_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_OCC_TX_RX_SW_RESET_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_OCC_TX_RX_SW_RESET_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_OCC_TX_RX_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OCC_TX_RX_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCC_TX_RX_SW_RESET_get", A, 15);
    /* (0x0000011c bits 15) field OCC_TX_RX_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_OCC_TX_RX_SW_RESET_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_OCC_TX_RX_SW_RESET_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OCC_TX_RX_SW_RESET_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PATT_CHK_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PATT_CHK_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PATT_CHK_SW_RESET_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PATT_CHK_SW_RESET_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PATT_CHK_SW_RESET_set", A, value );

    /* (0x0000011c bits 14) field PATT_CHK_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PATT_CHK_SW_RESET_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PATT_CHK_SW_RESET_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_PATT_CHK_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PATT_CHK_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PATT_CHK_SW_RESET_get", A, 15);
    /* (0x0000011c bits 14) field PATT_CHK_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PATT_CHK_SW_RESET_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PATT_CHK_SW_RESET_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PATT_CHK_SW_RESET_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PATT_GEN_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PATT_GEN_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PATT_GEN_SW_RESET_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PATT_GEN_SW_RESET_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PATT_GEN_SW_RESET_set", A, value );

    /* (0x0000011c bits 13) field PATT_GEN_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PATT_GEN_SW_RESET_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PATT_GEN_SW_RESET_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_PATT_GEN_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PATT_GEN_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PATT_GEN_SW_RESET_get", A, 15);
    /* (0x0000011c bits 13) field PATT_GEN_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PATT_GEN_SW_RESET_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PATT_GEN_SW_RESET_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PATT_GEN_SW_RESET_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TX_EMI_CAL_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TX_EMI_CAL_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_EMI_CAL_SW_RESET_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TX_EMI_CAL_SW_RESET_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TX_EMI_CAL_SW_RESET_set", A, value );

    /* (0x0000011c bits 12) field TX_EMI_CAL_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_TX_EMI_CAL_SW_RESET_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_TX_EMI_CAL_SW_RESET_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_TX_EMI_CAL_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TX_EMI_CAL_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_EMI_CAL_SW_RESET_get", A, 15);
    /* (0x0000011c bits 12) field TX_EMI_CAL_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_TX_EMI_CAL_SW_RESET_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_TX_EMI_CAL_SW_RESET_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TX_EMI_CAL_SW_RESET_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_SIPO_BIST_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SIPO_BIST_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SIPO_BIST_SW_RESET_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_SW_RESET_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_SW_RESET_set", A, value );

    /* (0x0000011c bits 11) field SIPO_BIST_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_SIPO_BIST_SW_RESET_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_SIPO_BIST_SW_RESET_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SIPO_BIST_SW_RESET_get", A, 15);
    /* (0x0000011c bits 11) field SIPO_BIST_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_SIPO_BIST_SW_RESET_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_SIPO_BIST_SW_RESET_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_SW_RESET_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_OC_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_OC_SW_RESET_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                               s16_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_OC_SW_RESET_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_OC_SW_RESET_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_OC_SW_RESET_set", A, value );

    /* (0x0000011c bits 10) field ADC_OC_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_OC_SW_RESET_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_OC_SW_RESET_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_OC_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_OC_SW_RESET_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_OC_SW_RESET_get", A, 15);
    /* (0x0000011c bits 10) field ADC_OC_SW_RESET of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_OC_SW_RESET_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_OC_SW_RESET_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_OC_SW_RESET_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_TX_LANE_INVERT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_TX_LANE_INVERT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_LANE_INVERT_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_TX_LANE_INVERT_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_TX_LANE_INVERT_set", A, value );

    /* (0x0000011c bits 9) field TX_LANE_INVERT of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_TX_LANE_INVERT_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_TX_LANE_INVERT_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_TX_LANE_INVERT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_TX_LANE_INVERT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_TX_LANE_INVERT_get", A, 15);
    /* (0x0000011c bits 9) field TX_LANE_INVERT of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_TX_LANE_INVERT_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_TX_LANE_INVERT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_TX_LANE_INVERT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_RX_LANE_INVERT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RX_LANE_INVERT_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_LANE_INVERT_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RX_LANE_INVERT_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RX_LANE_INVERT_set", A, value );

    /* (0x0000011c bits 8) field RX_LANE_INVERT of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_RX_LANE_INVERT_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_RX_LANE_INVERT_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_RX_LANE_INVERT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RX_LANE_INVERT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RX_LANE_INVERT_get", A, 15);
    /* (0x0000011c bits 8) field RX_LANE_INVERT of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_RX_LANE_INVERT_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_RX_LANE_INVERT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RX_LANE_INVERT_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_MTSB_BUS_WIDTH_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_MTSB_BUS_WIDTH_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MTSB_BUS_WIDTH_set", A, 15);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_MTSB_BUS_WIDTH_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_MTSB_BUS_WIDTH_set", A, value );

    /* (0x0000011c bits 7:6) bits 0:1 use field MTSB_BUS_WIDTH of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_MTSB_BUS_WIDTH_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_MTSB_BUS_WIDTH_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_MTSB_BUS_WIDTH_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_MTSB_BUS_WIDTH_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                s16_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_MTSB_BUS_WIDTH_get", A, 15);
    /* (0x0000011c bits 7:6) bits 0:1 use field MTSB_BUS_WIDTH of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_MTSB_BUS_WIDTH_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_MTSB_BUS_WIDTH_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_MTSB_BUS_WIDTH_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_set", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000011c bits 7:6) bits 0:1 use field MTSB_BUS_WIDTH of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000011c bits 7:6) bits 0:1 use field MTSB_BUS_WIDTH of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
        s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                                 h_ptr,
                                                                 A,
                                                                 subfield_mask << (PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_MTSB_BUS_WIDTH_OFF + subfield_offset),
                                                                 PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_MTSB_BUS_WIDTH_OFF + subfield_offset,
                                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000011c bits 7:6) bits 0:1 use field MTSB_BUS_WIDTH of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_MTSB_BUS_WIDTH_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_MTSB_BUS_WIDTH_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_MTSB_BUS_WIDTH_MSK, PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_MTSB_BUS_WIDTH_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_MTSB_BUS_WIDTH_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PI_RSTB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PI_RSTB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PI_RSTB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PI_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PI_RSTB_set", A, value );

    /* (0x0000011c bits 5) field PI_RSTB of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PI_RSTB_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PI_RSTB_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_PI_RSTB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PI_RSTB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                         s16_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PI_RSTB_get", A, 15);
    /* (0x0000011c bits 5) field PI_RSTB of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PI_RSTB_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_PI_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PI_RSTB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_T_PISO_RSTB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_T_PISO_RSTB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_PISO_RSTB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_T_PISO_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_T_PISO_RSTB_set", A, value );

    /* (0x0000011c bits 3) field T_PISO_RSTB of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_T_PISO_RSTB_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_T_PISO_RSTB_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_T_PISO_RSTB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_T_PISO_RSTB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_PISO_RSTB_get", A, 15);
    /* (0x0000011c bits 3) field T_PISO_RSTB of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_T_PISO_RSTB_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_T_PISO_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_T_PISO_RSTB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_T_EMI_RSTB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_T_EMI_RSTB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_EMI_RSTB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_T_EMI_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_T_EMI_RSTB_set", A, value );

    /* (0x0000011c bits 2) field T_EMI_RSTB of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_T_EMI_RSTB_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_T_EMI_RSTB_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_T_EMI_RSTB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_T_EMI_RSTB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_T_EMI_RSTB_get", A, 15);
    /* (0x0000011c bits 2) field T_EMI_RSTB of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_T_EMI_RSTB_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_T_EMI_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_T_EMI_RSTB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_RSTB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_RSTB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_RSTB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_RSTB_set", A, value );

    /* (0x0000011c bits 1) field ADC_RSTB of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_RSTB_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_RSTB_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_RSTB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_RSTB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_RSTB_get", A, 15);
    /* (0x0000011c bits 1) field ADC_RSTB of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_RSTB_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_RSTB_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_ADC_DAC_RSTB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_ADC_DAC_RSTB_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                            s16_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_DAC_RSTB_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_ADC_DAC_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_ADC_DAC_RSTB_set", A, value );

    /* (0x0000011c bits 0) field ADC_DAC_RSTB of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_field_set( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_DAC_RSTB_MSK,
                                                             PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_DAC_RSTB_OFF,
                                                             value);
}

static INLINE UINT32 s16_channel_pcbi_field_ADC_DAC_RSTB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_DAC_RSTB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_DAC_RSTB_get", A, 15);
    /* (0x0000011c bits 0) field ADC_DAC_RSTB of register PMC_PCBI_REG_CHANNEL_PCBI_RESET_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RESET_CFG_1_read( b_ptr,
                                                                    h_ptr,
                                                                    A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_DAC_RSTB_MSK) >> PCBI_REG_CHANNEL_PCBI_RESET_CFG_1_BIT_ADC_DAC_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_DAC_RSTB_get", A, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_edge
 * ==================================================================================
 */
static INLINE void s16_channel_pcbi_field_RAMCAPT_DATA_RD_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_RAMCAPT_DATA_RD_EN_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_DATA_RD_EN_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_RAMCAPT_DATA_RD_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_DATA_RD_EN_set", A, value );

    /* (0x0000003c bits 5) field RAMCAPT_DATA_RD_EN of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_DATA_RD_EN_MSK,
                                                                   PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_DATA_RD_EN_OFF,
                                                                   value);
}

static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_DATA_RD_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_DATA_RD_EN_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_DATA_RD_EN_get", A, 15);
    /* (0x0000003c bits 5) field RAMCAPT_DATA_RD_EN of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_DATA_RD_EN_MSK) >> PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_1_BIT_RAMCAPT_DATA_RD_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_DATA_RD_EN_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_CHK_READ_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_CHK_READ_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_READ_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_CHK_READ_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_CHK_READ_set", A, value );

    /* (0x00000088 bits 8) field CHK_READ of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_READ_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_READ_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_CHK_READ_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_READ_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                          s16_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_READ_get", A, 15);
    /* (0x00000088 bits 8) field CHK_READ of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_READ_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_CHK_READ_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_READ_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_GEN_ERR_INJ_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_GEN_ERR_INJ_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                           s16_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_ERR_INJ_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_GEN_ERR_INJ_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_GEN_ERR_INJ_set", A, value );

    /* (0x00000088 bits 6) field GEN_ERR_INJ of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_field_set( b_ptr,
                                                                                 h_ptr,
                                                                                 A,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_ERR_INJ_MSK,
                                                                                 PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_ERR_INJ_OFF,
                                                                                 value);
}

static INLINE UINT32 s16_channel_pcbi_field_GEN_ERR_INJ_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_GEN_ERR_INJ_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_GEN_ERR_INJ_get", A, 15);
    /* (0x00000088 bits 6) field GEN_ERR_INJ of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_read( b_ptr,
                                                                                        h_ptr,
                                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_ERR_INJ_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_1_BIT_GEN_ERR_INJ_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_GEN_ERR_INJ_get", A, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_active_rising
 * ==================================================================================
 */
static INLINE void s16_channel_pcbi_field_LOS_I_set_to_clear( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_LOS_I_set_to_clear( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_LOS_I_set_to_clear", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_LOS_I_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_LOS_I_set_to_clear", A, value );

    /* (0x00000124 bits 2) field LOS_I of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT */
    s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_action_on_write_field_set( b_ptr,
                                                                                       h_ptr,
                                                                                       A,
                                                                                       PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_LOS_I_MSK,
                                                                                       PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_LOS_I_OFF,
                                                                                       value);
}

static INLINE UINT32 s16_channel_pcbi_field_LOS_I_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_LOS_I_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_LOS_I_get", A, 15);
    /* (0x00000124 bits 2) field LOS_I of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_read( b_ptr,
                                                                              h_ptr,
                                                                              A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_LOS_I_MSK) >> PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_LOS_I_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_LOS_I_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_LOS_I_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_LOS_I_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "s16_channel_pcbi_field_LOS_I_poll", A, value );

    /* (0x00000124 bits 2) field LOS_I of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT */
    return s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_poll( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_LOS_I_MSK,
                                                                         (value<<PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_LOS_I_OFF),
                                                                         cmp,
                                                                         max_count,
                                                                         num_failed_polls,
                                                                         delay_between_polls_in_microseconds);
}

static INLINE void s16_channel_pcbi_field_SSI_I_set_to_clear( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SSI_I_set_to_clear( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_I_set_to_clear", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SSI_I_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SSI_I_set_to_clear", A, value );

    /* (0x00000124 bits 1) field SSI_I of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT */
    s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_action_on_write_field_set( b_ptr,
                                                                                       h_ptr,
                                                                                       A,
                                                                                       PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_SSI_I_MSK,
                                                                                       PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_SSI_I_OFF,
                                                                                       value);
}

static INLINE UINT32 s16_channel_pcbi_field_SSI_I_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_I_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_I_get", A, 15);
    /* (0x00000124 bits 1) field SSI_I of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_read( b_ptr,
                                                                              h_ptr,
                                                                              A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_SSI_I_MSK) >> PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_SSI_I_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_I_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_SSI_I_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_SSI_I_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "s16_channel_pcbi_field_SSI_I_poll", A, value );

    /* (0x00000124 bits 1) field SSI_I of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT */
    return s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_poll( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_SSI_I_MSK,
                                                                         (value<<PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_SSI_I_OFF),
                                                                         cmp,
                                                                         max_count,
                                                                         num_failed_polls,
                                                                         delay_between_polls_in_microseconds);
}

static INLINE void s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_set_to_clear( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_set_to_clear( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                 s16_handle_t *h_ptr,
                                                                                 UINT32 A,
                                                                                 UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_set_to_clear", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_set_to_clear", A, value );

    /* (0x00000124 bits 0) field PATT_GEN_MON_CHK_ERROR_I of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT */
    s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_action_on_write_field_set( b_ptr,
                                                                                       h_ptr,
                                                                                       A,
                                                                                       PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_PATT_GEN_MON_CHK_ERROR_I_MSK,
                                                                                       PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_PATT_GEN_MON_CHK_ERROR_I_OFF,
                                                                                       value);
}

static INLINE UINT32 s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_get", A, 15);
    /* (0x00000124 bits 0) field PATT_GEN_MON_CHK_ERROR_I of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_read( b_ptr,
                                                                              h_ptr,
                                                                              A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_PATT_GEN_MON_CHK_ERROR_I_MSK) >> PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_PATT_GEN_MON_CHK_ERROR_I_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 value,
                                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                                         UINT32 max_count,
                                                                                         UINT32 *num_failed_polls,
                                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 value,
                                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                                         UINT32 max_count,
                                                                                         UINT32 *num_failed_polls,
                                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_I_poll", A, value );

    /* (0x00000124 bits 0) field PATT_GEN_MON_CHK_ERROR_I of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT */
    return s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_poll( b_ptr,
                                                                         h_ptr,
                                                                         A,
                                                                         PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_PATT_GEN_MON_CHK_ERROR_I_MSK,
                                                                         (value<<PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EVENT_BIT_PATT_GEN_MON_CHK_ERROR_I_OFF),
                                                                         cmp,
                                                                         max_count,
                                                                         num_failed_polls,
                                                                         delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */
static INLINE void s16_channel_pcbi_field_LOS_E_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                     s16_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_LOS_E_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                     s16_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_LOS_E_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_LOS_E_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_LOS_E_set", A, value );

    /* (0x00000120 bits 2) field LOS_E of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN */
    s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_field_set( b_ptr,
                                                                    h_ptr,
                                                                    A,
                                                                    PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_LOS_E_MSK,
                                                                    PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_LOS_E_OFF,
                                                                    value);
}

static INLINE UINT32 s16_channel_pcbi_field_LOS_E_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_LOS_E_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_LOS_E_get", A, 15);
    /* (0x00000120 bits 2) field LOS_E of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_read( b_ptr,
                                                                           h_ptr,
                                                                           A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_LOS_E_MSK) >> PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_LOS_E_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_LOS_E_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_SSI_E_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                     s16_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_SSI_E_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                     s16_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_E_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_SSI_E_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_SSI_E_set", A, value );

    /* (0x00000120 bits 1) field SSI_E of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN */
    s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_field_set( b_ptr,
                                                                    h_ptr,
                                                                    A,
                                                                    PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_SSI_E_MSK,
                                                                    PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_SSI_E_OFF,
                                                                    value);
}

static INLINE UINT32 s16_channel_pcbi_field_SSI_E_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_E_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_E_get", A, 15);
    /* (0x00000120 bits 1) field SSI_E of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_read( b_ptr,
                                                                           h_ptr,
                                                                           A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_SSI_E_MSK) >> PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_SSI_E_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_E_get", A, value );

    return value;
}
static INLINE void s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_E_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_E_set( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value )
{
    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_E_set", A, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_E_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_E_set", A, value );

    /* (0x00000120 bits 0) field PATT_GEN_MON_CHK_ERROR_E of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN */
    s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_field_set( b_ptr,
                                                                    h_ptr,
                                                                    A,
                                                                    PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_PATT_GEN_MON_CHK_ERROR_E_MSK,
                                                                    PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_PATT_GEN_MON_CHK_ERROR_E_OFF,
                                                                    value);
}

static INLINE UINT32 s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_E_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_E_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_E_get", A, 15);
    /* (0x00000120 bits 0) field PATT_GEN_MON_CHK_ERROR_E of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_EN_read( b_ptr,
                                                                           h_ptr,
                                                                           A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_PATT_GEN_MON_CHK_ERROR_E_MSK) >> PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_EN_BIT_PATT_GEN_MON_CHK_ERROR_E_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_E_get", A, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_value
 * ==================================================================================
 */
static INLINE UINT32 s16_channel_pcbi_field_LOS_V_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_LOS_V_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_LOS_V_get", A, 15);
    /* (0x00000128 bits 2) field LOS_V of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_LOS_V_MSK) >> PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_LOS_V_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_LOS_V_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_LOS_V_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_LOS_V_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "s16_channel_pcbi_field_LOS_V_poll", A, value );

    /* (0x00000128 bits 2) field LOS_V of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT */
    return s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_poll( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_LOS_V_MSK,
                                                                   (value<<PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_LOS_V_OFF),
                                                                   cmp,
                                                                   max_count,
                                                                   num_failed_polls,
                                                                   delay_between_polls_in_microseconds);
}

static INLINE UINT32 s16_channel_pcbi_field_SSI_V_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_V_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                       s16_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_V_get", A, 15);
    /* (0x00000128 bits 1) field SSI_V of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_SSI_V_MSK) >> PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_SSI_V_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_V_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_SSI_V_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_SSI_V_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "s16_channel_pcbi_field_SSI_V_poll", A, value );

    /* (0x00000128 bits 1) field SSI_V of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT */
    return s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_poll( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_SSI_V_MSK,
                                                                   (value<<PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_SSI_V_OFF),
                                                                   cmp,
                                                                   max_count,
                                                                   num_failed_polls,
                                                                   delay_between_polls_in_microseconds);
}

static INLINE UINT32 s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_V_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_V_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_V_get", A, 15);
    /* (0x00000128 bits 0) field PATT_GEN_MON_CHK_ERROR_V of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_PATT_GEN_MON_CHK_ERROR_V_MSK) >> PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_PATT_GEN_MON_CHK_ERROR_V_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_V_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_V_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 value,
                                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                                         UINT32 max_count,
                                                                                         UINT32 *num_failed_polls,
                                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_V_poll( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                         s16_handle_t *h_ptr,
                                                                                         UINT32 A,
                                                                                         UINT32 value,
                                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                                         UINT32 max_count,
                                                                                         UINT32 *num_failed_polls,
                                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "s16_channel_pcbi_field_PATT_GEN_MON_CHK_ERROR_V_poll", A, value );

    /* (0x00000128 bits 0) field PATT_GEN_MON_CHK_ERROR_V of register PMC_PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT */
    return s16_channel_pcbi_reg_CHANNEL_PCBI_LANE_N_STAT_INT_poll( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_PATT_GEN_MON_CHK_ERROR_V_MSK,
                                                                   (value<<PCBI_REG_CHANNEL_PCBI_LANE_N_STAT_INT_BIT_PATT_GEN_MON_CHK_ERROR_V_OFF),
                                                                   cmp,
                                                                   max_count,
                                                                   num_failed_polls,
                                                                   delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status
 * ==================================================================================
 */
static INLINE UINT32 s16_channel_pcbi_field_INV_DFE_OUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_INV_DFE_OUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_INV_DFE_OUT_get", A, 15);
    /* (0x00000000 bits 0) field INV_DFE_OUT of register PMC_PCBI_REG_CHANNEL_PCBI_MDSP_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_MDSP_CFG_1_read( b_ptr,
                                                                   h_ptr,
                                                                   A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_MDSP_CFG_1_BIT_INV_DFE_OUT_MSK) >> PCBI_REG_CHANNEL_PCBI_MDSP_CFG_1_BIT_INV_DFE_OUT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_INV_DFE_OUT_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_ADC_FSM_ERR_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_FSM_ERR_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_FSM_ERR_DATA_get", A, 15);
    /* (0x0000001c bits 31) field ADC_FSM_ERR_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_FSM_ERR_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_FSM_ERR_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_FSM_ERR_DATA_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_ERR_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_ERR_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BIST_ERR_DATA_get", A, 15);
    /* (0x0000001c bits 30) field ADC_BIST_ERR_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_BIST_ERR_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_BIST_ERR_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BIST_ERR_DATA_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_DONE_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_DONE_DATA_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BIST_DONE_DATA_get", A, 15);
    /* (0x0000001c bits 29) field ADC_BIST_DONE_DATA of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_BIST_DONE_DATA_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_DATA_CFG_6_BIT_ADC_BIST_DONE_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BIST_DONE_DATA_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_ADC_FSM_ERR_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_FSM_ERR_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_FSM_ERR_TIMING_get", A, 15);
    /* (0x0000002c bits 31) field ADC_FSM_ERR_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_FSM_ERR_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_FSM_ERR_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_FSM_ERR_TIMING_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_ERR_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_ERR_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BIST_ERR_TIMING_get", A, 15);
    /* (0x0000002c bits 30) field ADC_BIST_ERR_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_BIST_ERR_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_BIST_ERR_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BIST_ERR_TIMING_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_DONE_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ADC_BIST_DONE_TIMING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                      s16_handle_t *h_ptr,
                                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ADC_BIST_DONE_TIMING_get", A, 15);
    /* (0x0000002c bits 29) field ADC_BIST_DONE_TIMING of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_read( b_ptr,
                                                                            h_ptr,
                                                                            A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_BIST_DONE_TIMING_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_TIMING_CFG_4_BIT_ADC_BIST_DONE_TIMING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ADC_BIST_DONE_TIMING_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_DOUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OFFSET_RAM_DOUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OFFSET_RAM_DOUT_get", A, 15);
    /* (0x00000038 bits 8:0) field OFFSET_RAM_DOUT of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3_BIT_OFFSET_RAM_DOUT_MSK) >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3_BIT_OFFSET_RAM_DOUT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OFFSET_RAM_DOUT_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_OFFSET_RAM_DOUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OFFSET_RAM_DOUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OFFSET_RAM_DOUT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OFFSET_RAM_DOUT_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OFFSET_RAM_DOUT_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000038 bits 8:0) field OFFSET_RAM_DOUT of register PMC_PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3_read( b_ptr,
                                                                             h_ptr,
                                                                             A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3_BIT_OFFSET_RAM_DOUT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3_BIT_OFFSET_RAM_DOUT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3_BIT_OFFSET_RAM_DOUT_MSK, PCBI_REG_CHANNEL_PCBI_ADC_OC_GENERAL_CFG_3_BIT_OFFSET_RAM_DOUT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OFFSET_RAM_DOUT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_DATA_OUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_RAMCAPT_DATA_OUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_RAMCAPT_DATA_OUT_get", A, 15);
    /* (0x00000040 bits 31:0) field RAMCAPT_DATA_OUT of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_2_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_2_BIT_RAMCAPT_DATA_OUT_MSK) >> PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_2_BIT_RAMCAPT_DATA_OUT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_RAMCAPT_DATA_OUT_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_RAMCAPT_DATA_OUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_RAMCAPT_DATA_OUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_RAMCAPT_DATA_OUT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_RAMCAPT_DATA_OUT_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_RAMCAPT_DATA_OUT_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000040 bits 31:0) field RAMCAPT_DATA_OUT of register PMC_PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_RAM_CAPTURE_CFG_2_read( b_ptr,
                                                                          h_ptr,
                                                                          A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_2_BIT_RAMCAPT_DATA_OUT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_2_BIT_RAMCAPT_DATA_OUT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_2_BIT_RAMCAPT_DATA_OUT_MSK, PCBI_REG_CHANNEL_PCBI_RAM_CAPTURE_CFG_2_BIT_RAMCAPT_DATA_OUT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_RAMCAPT_DATA_OUT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_VHIST_PERBIN_VALUE_OVFL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_PERBIN_VALUE_OVFL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_PERBIN_VALUE_OVFL_get", A, 15);
    /* (0x00000050 bits 10) field VHIST_PERBIN_VALUE_OVFL of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_PERBIN_VALUE_OVFL_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_PERBIN_VALUE_OVFL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_PERBIN_VALUE_OVFL_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_VHIST_READBACK_ADDR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_READBACK_ADDR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_READBACK_ADDR_get", A, 15);
    /* (0x00000050 bits 9:4) field VHIST_READBACK_ADDR of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_READBACK_ADDR_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_READBACK_ADDR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_READBACK_ADDR_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_READBACK_ADDR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_READBACK_ADDR_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_VHIST_READBACK_ADDR_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_VHIST_READBACK_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_VHIST_READBACK_ADDR_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000050 bits 9:4) field VHIST_READBACK_ADDR of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_READBACK_ADDR_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_READBACK_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_READBACK_ADDR_MSK, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_READBACK_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_VHIST_READBACK_ADDR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_VHIST_FSM_STATE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_FSM_STATE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_FSM_STATE_get", A, 15);
    /* (0x00000050 bits 3:1) field VHIST_FSM_STATE of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_FSM_STATE_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_FSM_STATE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_FSM_STATE_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_FSM_STATE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_FSM_STATE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_VHIST_FSM_STATE_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_VHIST_FSM_STATE_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_VHIST_FSM_STATE_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000050 bits 3:1) field VHIST_FSM_STATE of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_FSM_STATE_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_FSM_STATE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_FSM_STATE_MSK, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_FSM_STATE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_VHIST_FSM_STATE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_VHIST_CAPT_RUNNING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_CAPT_RUNNING_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_CAPT_RUNNING_get", A, 15);
    /* (0x00000050 bits 0) field VHIST_CAPT_RUNNING of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_CAPT_RUNNING_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_4_BIT_VHIST_CAPT_RUNNING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_CAPT_RUNNING_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_VHIST_PERBIN_VALUE_31_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_PERBIN_VALUE_31_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_PERBIN_VALUE_31_0_get", A, 15);
    /* (0x00000054 bits 31:0) field VHIST_PERBIN_VALUE_31_0 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5_BIT_VHIST_PERBIN_VALUE_31_0_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5_BIT_VHIST_PERBIN_VALUE_31_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_PERBIN_VALUE_31_0_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_31_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 start_bit,
                                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_31_0_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A,
                                                                               UINT32 start_bit,
                                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_31_0_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_31_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_31_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000054 bits 31:0) field VHIST_PERBIN_VALUE_31_0 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5_BIT_VHIST_PERBIN_VALUE_31_0_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5_BIT_VHIST_PERBIN_VALUE_31_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5_BIT_VHIST_PERBIN_VALUE_31_0_MSK, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_5_BIT_VHIST_PERBIN_VALUE_31_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_31_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_VHIST_PERBIN_VALUE_39_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VHIST_PERBIN_VALUE_39_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VHIST_PERBIN_VALUE_39_32_get", A, 15);
    /* (0x00000058 bits 7:0) field VHIST_PERBIN_VALUE_39_32 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6_BIT_VHIST_PERBIN_VALUE_39_32_MSK) >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6_BIT_VHIST_PERBIN_VALUE_39_32_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VHIST_PERBIN_VALUE_39_32_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_39_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_39_32_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                                s16_handle_t *h_ptr,
                                                                                UINT32 A,
                                                                                UINT32 start_bit,
                                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_39_32_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_39_32_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_39_32_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000058 bits 7:0) field VHIST_PERBIN_VALUE_39_32 of register PMC_PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6_BIT_VHIST_PERBIN_VALUE_39_32_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6_BIT_VHIST_PERBIN_VALUE_39_32_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6_BIT_VHIST_PERBIN_VALUE_39_32_MSK, PCBI_REG_CHANNEL_PCBI_VERTICAL_HISTOGRAM_CFG_6_BIT_VHIST_PERBIN_VALUE_39_32_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_VHIST_PERBIN_VALUE_39_32_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_SSI_CURR_THRESHOLD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_CURR_THRESHOLD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                    s16_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_CURR_THRESHOLD_get", A, 15);
    /* (0x00000060 bits 5:1) bits 0:4 use field SSI_CURR_THRESHOLD of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_2_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_2_BIT_SSI_CURR_THRESHOLD_MSK) >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_2_BIT_SSI_CURR_THRESHOLD_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_CURR_THRESHOLD_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_SSI_CURR_THRESHOLD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_SSI_CURR_THRESHOLD_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_SSI_CURR_THRESHOLD_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_SSI_CURR_THRESHOLD_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_SSI_CURR_THRESHOLD_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000060 bits 5:1) bits 0:4 use field SSI_CURR_THRESHOLD of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_2_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_2_BIT_SSI_CURR_THRESHOLD_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_2_BIT_SSI_CURR_THRESHOLD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_SSI_CFG_2_BIT_SSI_CURR_THRESHOLD_MSK, PCBI_REG_CHANNEL_PCBI_SSI_CFG_2_BIT_SSI_CURR_THRESHOLD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_SSI_CURR_THRESHOLD_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_SSI_ADJUST_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SSI_ADJUST_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                 s16_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SSI_ADJUST_DONE_get", A, 15);
    /* (0x00000060 bits 0) field SSI_ADJUST_DONE of register PMC_PCBI_REG_CHANNEL_PCBI_SSI_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SSI_CFG_2_read( b_ptr,
                                                                  h_ptr,
                                                                  A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SSI_CFG_2_BIT_SSI_ADJUST_DONE_MSK) >> PCBI_REG_CHANNEL_PCBI_SSI_CFG_2_BIT_SSI_ADJUST_DONE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SSI_ADJUST_DONE_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_OC_THRESHOLD_CHECK_FAILB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_THRESHOLD_CHECK_FAILB_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                          s16_handle_t *h_ptr,
                                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_THRESHOLD_CHECK_FAILB_get", A, 15);
    /* (0x00000078 bits 5) field OC_THRESHOLD_CHECK_FAILB of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_BIT_OC_THRESHOLD_CHECK_FAILB_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_BIT_OC_THRESHOLD_CHECK_FAILB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_THRESHOLD_CHECK_FAILB_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_OCDAC_UNENC_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OCDAC_UNENC_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCDAC_UNENC_get", A, 15);
    /* (0x00000078 bits 4:0) bits 0:4 use field OCDAC_UNENC of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_BIT_OCDAC_UNENC_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_BIT_OCDAC_UNENC_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OCDAC_UNENC_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_OCDAC_UNENC_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OCDAC_UNENC_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OCDAC_UNENC_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OCDAC_UNENC_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OCDAC_UNENC_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000078 bits 4:0) bits 0:4 use field OCDAC_UNENC of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_read( b_ptr,
                                                                                       h_ptr,
                                                                                       A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_BIT_OCDAC_UNENC_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_BIT_OCDAC_UNENC_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_BIT_OCDAC_UNENC_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORRECTION_CFG_5_BIT_OCDAC_UNENC_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OCDAC_UNENC_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_OC_THRESHOLD_CHECK_FAILB_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OC_THRESHOLD_CHECK_FAILB_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                               s16_handle_t *h_ptr,
                                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OC_THRESHOLD_CHECK_FAILB_DIV3_get", A, 15);
    /* (0x0000007c bits 5) field OC_THRESHOLD_CHECK_FAILB_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_BIT_OC_THRESHOLD_CHECK_FAILB_DIV3_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_BIT_OC_THRESHOLD_CHECK_FAILB_DIV3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OC_THRESHOLD_CHECK_FAILB_DIV3_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_OCDAC_UNENC_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OCDAC_UNENC_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                  s16_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCDAC_UNENC_DIV3_get", A, 15);
    /* (0x0000007c bits 4:0) bits 0:4 use field OCDAC_UNENC_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_BIT_OCDAC_UNENC_DIV3_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_BIT_OCDAC_UNENC_DIV3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OCDAC_UNENC_DIV3_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_OCDAC_UNENC_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_OCDAC_UNENC_DIV3_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                        s16_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_OCDAC_UNENC_DIV3_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_OCDAC_UNENC_DIV3_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_OCDAC_UNENC_DIV3_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000007c bits 4:0) bits 0:4 use field OCDAC_UNENC_DIV3 of register PMC_PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_BIT_OCDAC_UNENC_DIV3_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_BIT_OCDAC_UNENC_DIV3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_BIT_OCDAC_UNENC_DIV3_MSK, PCBI_REG_CHANNEL_PCBI_TX_DCD_OFFSET_CORR_CFG_6_BIT_OCDAC_UNENC_DIV3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_OCDAC_UNENC_DIV3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_CHK_ERR_CNT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_CHK_ERR_CNT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                             s16_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_CHK_ERR_CNT_get", A, 15);
    /* (0x000000dc bits 31:0) bits 0:31 use field CHK_ERR_CNT of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22_BIT_CHK_ERR_CNT_MSK) >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22_BIT_CHK_ERR_CNT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_CHK_ERR_CNT_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_ERR_CNT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_CHK_ERR_CNT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_CHK_ERR_CNT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_CHK_ERR_CNT_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_CHK_ERR_CNT_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000dc bits 31:0) bits 0:31 use field CHK_ERR_CNT of register PMC_PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22_read( b_ptr,
                                                                                         h_ptr,
                                                                                         A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22_BIT_CHK_ERR_CNT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22_BIT_CHK_ERR_CNT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22_BIT_CHK_ERR_CNT_MSK, PCBI_REG_CHANNEL_PCBI_PATTERN_GENERATOR_AND_MON_CFG_22_BIT_CHK_ERR_CNT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_CHK_ERR_CNT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_PGA_NS_SENSE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGA_NS_SENSE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGA_NS_SENSE_get", A, 15);
    /* (0x000000e4 bits 7) field PGA_NS_SENSE of register PMC_PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_read( b_ptr,
                                                                                          h_ptr,
                                                                                          A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_SENSE_MSK) >> PCBI_REG_CHANNEL_PCBI_PGA_COMMON_MODE_CALIBRATION_CFG_1_BIT_PGA_NS_SENSE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGA_NS_SENSE_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_TIMING_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_TIMING_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SIPO_BIST_TIMING_DONE_get", A, 15);
    /* (0x000000f0 bits 4) field SIPO_BIST_TIMING_DONE of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_TIMING_DONE_MSK) >> PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_TIMING_DONE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_TIMING_DONE_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_DATA_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_DATA_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SIPO_BIST_DATA_DONE_get", A, 15);
    /* (0x000000f0 bits 3) field SIPO_BIST_DATA_DONE of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_1_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_DATA_DONE_MSK) >> PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_1_BIT_SIPO_BIST_DATA_DONE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_DATA_DONE_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_DATA_FAIL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_DATA_FAIL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                     s16_handle_t *h_ptr,
                                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SIPO_BIST_DATA_FAIL_get", A, 15);
    /* (0x000000f4 bits 31:0) bits 0:31 use field SIPO_BIST_DATA_FAIL of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_2_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_2_BIT_SIPO_BIST_DATA_FAIL_MSK) >> PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_2_BIT_SIPO_BIST_DATA_FAIL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_DATA_FAIL_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_SIPO_BIST_DATA_FAIL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_SIPO_BIST_DATA_FAIL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                           s16_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_SIPO_BIST_DATA_FAIL_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_SIPO_BIST_DATA_FAIL_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_SIPO_BIST_DATA_FAIL_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000f4 bits 31:0) bits 0:31 use field SIPO_BIST_DATA_FAIL of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_2 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_2_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_2_BIT_SIPO_BIST_DATA_FAIL_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_2_BIT_SIPO_BIST_DATA_FAIL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_2_BIT_SIPO_BIST_DATA_FAIL_MSK, PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_2_BIT_SIPO_BIST_DATA_FAIL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_SIPO_BIST_DATA_FAIL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_TIMING_FAIL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_SIPO_BIST_TIMING_FAIL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                       s16_handle_t *h_ptr,
                                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_SIPO_BIST_TIMING_FAIL_get", A, 15);
    /* (0x000000f8 bits 31:0) bits 0:31 use field SIPO_BIST_TIMING_FAIL of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_3_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_3_BIT_SIPO_BIST_TIMING_FAIL_MSK) >> PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_3_BIT_SIPO_BIST_TIMING_FAIL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_SIPO_BIST_TIMING_FAIL_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_SIPO_BIST_TIMING_FAIL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_SIPO_BIST_TIMING_FAIL_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                             s16_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_SIPO_BIST_TIMING_FAIL_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_SIPO_BIST_TIMING_FAIL_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_SIPO_BIST_TIMING_FAIL_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000f8 bits 31:0) bits 0:31 use field SIPO_BIST_TIMING_FAIL of register PMC_PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_3 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_SIPO_BIST_CFG_3_read( b_ptr,
                                                                        h_ptr,
                                                                        A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_3_BIT_SIPO_BIST_TIMING_FAIL_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_3_BIT_SIPO_BIST_TIMING_FAIL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_3_BIT_SIPO_BIST_TIMING_FAIL_MSK, PCBI_REG_CHANNEL_PCBI_SIPO_BIST_CFG_3_BIT_SIPO_BIST_TIMING_FAIL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_SIPO_BIST_TIMING_FAIL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_OCD_CM_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_OCD_CM_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                        s16_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_OCD_CM_get", A, 15);
    /* (0x000000fc bits 27) field OCD_CM of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_OCD_CM_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_OCD_CM_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_OCD_CM_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_ROP_RECALCUL_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ROP_RECALCUL_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ROP_RECALCUL_DONE_get", A, 15);
    /* (0x000000fc bits 26) field ROP_RECALCUL_DONE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_ROP_RECALCUL_DONE_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_ROP_RECALCUL_DONE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ROP_RECALCUL_DONE_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_ROP_OVERFLOW_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ROP_OVERFLOW_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ROP_OVERFLOW_get", A, 15);
    /* (0x000000fc bits 25) field ROP_OVERFLOW of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_ROP_OVERFLOW_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_ROP_OVERFLOW_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ROP_OVERFLOW_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_ROP_CAL_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_ROP_CAL_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_ROP_CAL_DONE_get", A, 15);
    /* (0x000000fc bits 24) field ROP_CAL_DONE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_ROP_CAL_DONE_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_ROP_CAL_DONE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_ROP_CAL_DONE_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_VGP_OVERFLOW_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VGP_OVERFLOW_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OVERFLOW_get", A, 15);
    /* (0x000000fc bits 23) field VGP_OVERFLOW of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OVERFLOW_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OVERFLOW_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OVERFLOW_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_VGP_OCC_DONE_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                              s16_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_VGP_OCC_DONE_get", A, 15);
    /* (0x000000fc bits 22) field VGP_OCC_DONE of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_DONE_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_1_BIT_VGP_OCC_DONE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_VGP_OCC_DONE_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_PGENERIC_DATA_OUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_PGENERIC_DATA_OUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                   s16_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_PGENERIC_DATA_OUT_get", A, 15);
    /* (0x00000108 bits 19:10) bits 0:9 use field PGENERIC_DATA_OUT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_DATA_OUT_MSK) >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_DATA_OUT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "s16_channel_pcbi_field_PGENERIC_DATA_OUT_get", A, value );

    return value;
}
static INLINE UINT32 s16_channel_pcbi_field_range_PGENERIC_DATA_OUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 s16_channel_pcbi_field_range_PGENERIC_DATA_OUT_get( s16_channel_pcbi_buffer_t *b_ptr,
                                                                         s16_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 15)
        IO_RANGE_CHECK("%s A is %d but max is %d", "s16_channel_pcbi_field_range_PGENERIC_DATA_OUT_get", A, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "s16_channel_pcbi_field_range_PGENERIC_DATA_OUT_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "s16_channel_pcbi_field_range_PGENERIC_DATA_OUT_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000108 bits 19:10) bits 0:9 use field PGENERIC_DATA_OUT of register PMC_PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4 */
    reg_value = s16_channel_pcbi_reg_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_read( b_ptr,
                                                                                 h_ptr,
                                                                                 A);
    field_value = (reg_value & PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_DATA_OUT_MSK)
                  >> PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_DATA_OUT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_DATA_OUT_MSK, PCBI_REG_CHANNEL_PCBI_TX_EMI_CALIBRATION_CFG_4_BIT_PGENERIC_DATA_OUT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "s16_channel_pcbi_field_range_PGENERIC_DATA_OUT_get", A, start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _S16_CHANNEL_PCBI_IO_INLINE_H */
