/******************************************************************************
 *   COPYRIGHT (C) 2013 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the ri_rcp block
 *****************************************************************************/
#ifndef _RI_RCP_IO_INLINE_H
#define _RI_RCP_IO_INLINE_H

#include "odu_rcp_loc.h"
#include "ri_rcp_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define RI_RCP_IO_VERSION 2

/*
 * ==================================================================================
 *  tsb level structure and access functions for ri_rcp
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) LOG( __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) LOG( "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) LOG_DATA( __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    odu_rcp_handle_t * h_ptr;
    pmc_sys_handle_t * sys_handle;
    PMC_VAR_CONST UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} ri_rcp_buffer_t;
static INLINE void ri_rcp_buffer_init( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ALWAYS_INLINE;
static INLINE void ri_rcp_buffer_init( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = ((pmc_handle_t *)h_ptr)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s", "ri_rcp_buffer_init");
    
}

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void ri_rcp_buffer_flush( ri_rcp_buffer_t *b_ptr ) ALWAYS_INLINE;
static INLINE void ri_rcp_buffer_flush( ri_rcp_buffer_t *b_ptr )
{
    IOLOG( "ri_rcp_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 ri_rcp_reg_read( ri_rcp_buffer_t *b_ptr,
                                      odu_rcp_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg ) ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_read( ri_rcp_buffer_t *b_ptr,
                                      odu_rcp_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                b_ptr->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h_ptr)->base_address + reg);
    return value;
}
static INLINE void ri_rcp_reg_write( ri_rcp_buffer_t *b_ptr,
                                     odu_rcp_handle_t *h_ptr,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_write( ri_rcp_buffer_t *b_ptr,
                                     odu_rcp_handle_t *h_ptr,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         b_ptr->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value);
}

static INLINE void ri_rcp_field_set( ri_rcp_buffer_t *b_ptr,
                                     odu_rcp_handle_t *h_ptr,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 mask,
                                     UINT32 unused_mask,
                                     UINT32 ofs,
                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_set( ri_rcp_buffer_t *b_ptr,
                                     odu_rcp_handle_t *h_ptr,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 mask,
                                     UINT32 unused_mask,
                                     UINT32 ofs,
                                     UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h_ptr)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void ri_rcp_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 mem_type,
                                                     UINT32 reg,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 mem_type,
                                                     UINT32 reg,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         b_ptr->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value<<ofs);
}

static INLINE void ri_rcp_burst_read( ri_rcp_buffer_t *b_ptr,
                                      odu_rcp_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 len,
                                      UINT32 *value ) ALWAYS_INLINE;
static INLINE void ri_rcp_burst_read( ri_rcp_buffer_t *b_ptr,
                                      odu_rcp_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 len,
                                      UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h_ptr)->base_address + reg,
                          len,
                          value);
}

static INLINE void ri_rcp_burst_write( ri_rcp_buffer_t *b_ptr,
                                       odu_rcp_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 len,
                                       UINT32 *value ) ALWAYS_INLINE;
static INLINE void ri_rcp_burst_write( ri_rcp_buffer_t *b_ptr,
                                       odu_rcp_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 len,
                                       UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE ri_rcp_poll( ri_rcp_buffer_t *b_ptr,
                                                odu_rcp_handle_t *h_ptr,
                                                UINT32 mem_type,
                                                UINT32 reg,
                                                UINT32 mask,
                                                UINT32 value,
                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                UINT32 max_count,
                                                UINT32 *num_failed_polls,
                                                UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_poll( ri_rcp_buffer_t *b_ptr,
                                                odu_rcp_handle_t *h_ptr,
                                                UINT32 mem_type,
                                                UINT32 reg,
                                                UINT32 mask,
                                                UINT32 value,
                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                UINT32 max_count,
                                                UINT32 *num_failed_polls,
                                                UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for ri_rcp
 * ==================================================================================
 */

static INLINE void ri_rcp_reg_REG_SW_RESET_write( ri_rcp_buffer_t *b_ptr,
                                                  odu_rcp_handle_t *h_ptr,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_SW_RESET_write( ri_rcp_buffer_t *b_ptr,
                                                  odu_rcp_handle_t *h_ptr,
                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_SW_RESET_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_SW_RESET,
                      value);
}

static INLINE void ri_rcp_reg_REG_SW_RESET_field_set( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_SW_RESET_field_set( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_SW_RESET_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_SW_RESET,
                      mask,
                      PMC_ODU_RCP_REG_REG_SW_RESET_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_SW_RESET_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_SW_RESET_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_SW_RESET);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_SW_RESET_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_LOWPWR_write( ri_rcp_buffer_t *b_ptr,
                                                odu_rcp_handle_t *h_ptr,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_LOWPWR_write( ri_rcp_buffer_t *b_ptr,
                                                odu_rcp_handle_t *h_ptr,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_LOWPWR_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_LOWPWR,
                      value);
}

static INLINE void ri_rcp_reg_REG_LOWPWR_field_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_LOWPWR_field_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_LOWPWR_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_LOWPWR,
                      mask,
                      PMC_ODU_RCP_REG_REG_LOWPWR_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_LOWPWR_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_LOWPWR_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_LOWPWR);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_LOWPWR_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_RAM_PWR_MGMT_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_RAM_PWR_MGMT_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_RAM_PWR_MGMT_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_RAM_PWR_MGMT,
                      value);
}

static INLINE void ri_rcp_reg_REG_RAM_PWR_MGMT_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_RAM_PWR_MGMT_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_RAM_PWR_MGMT_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_RAM_PWR_MGMT,
                      mask,
                      PMC_ODU_RCP_REG_REG_RAM_PWR_MGMT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_RAM_PWR_MGMT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_RAM_PWR_MGMT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_RAM_PWR_MGMT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_RAM_PWR_MGMT_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_GOJF_write( ri_rcp_buffer_t *b_ptr,
                                              odu_rcp_handle_t *h_ptr,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_GOJF_write( ri_rcp_buffer_t *b_ptr,
                                              odu_rcp_handle_t *h_ptr,
                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_GOJF_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_GOJF,
                      value);
}

static INLINE void ri_rcp_reg_REG_GOJF_field_set( ri_rcp_buffer_t *b_ptr,
                                                  odu_rcp_handle_t *h_ptr,
                                                  UINT32 mask,
                                                  UINT32 ofs,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_GOJF_field_set( ri_rcp_buffer_t *b_ptr,
                                                  odu_rcp_handle_t *h_ptr,
                                                  UINT32 mask,
                                                  UINT32 ofs,
                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_GOJF_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_GOJF,
                      mask,
                      PMC_ODU_RCP_REG_REG_GOJF_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_GOJF_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_GOJF_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_GOJF);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_GOJF_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_ETH_TX_EN_write( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_ETH_TX_EN_write( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_ETH_TX_EN_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_ETH_TX_EN,
                      value);
}

static INLINE void ri_rcp_reg_REG_ETH_TX_EN_field_set( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_ETH_TX_EN_field_set( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_ETH_TX_EN_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_ETH_TX_EN,
                      mask,
                      PMC_ODU_RCP_REG_REG_ETH_TX_EN_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_ETH_TX_EN_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_ETH_TX_EN_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_ETH_TX_EN);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_ETH_TX_EN_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_ETH_MAC_OUI_write( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_ETH_MAC_OUI_write( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_ETH_MAC_OUI_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_ETH_MAC_OUI,
                      value);
}

static INLINE void ri_rcp_reg_REG_ETH_MAC_OUI_field_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_ETH_MAC_OUI_field_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_ETH_MAC_OUI_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_ETH_MAC_OUI,
                      mask,
                      PMC_ODU_RCP_REG_REG_ETH_MAC_OUI_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_ETH_MAC_OUI_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_ETH_MAC_OUI_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_ETH_MAC_OUI);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_ETH_MAC_OUI_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_ETH_MAC_DIGI_ID_write( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_ETH_MAC_DIGI_ID_write( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_ETH_MAC_DIGI_ID_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_ETH_MAC_DIGI_ID,
                      value);
}

static INLINE void ri_rcp_reg_REG_ETH_MAC_DIGI_ID_field_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_ETH_MAC_DIGI_ID_field_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_ETH_MAC_DIGI_ID_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_ETH_MAC_DIGI_ID,
                      mask,
                      PMC_ODU_RCP_REG_REG_ETH_MAC_DIGI_ID_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_ETH_MAC_DIGI_ID_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_ETH_MAC_DIGI_ID_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_ETH_MAC_DIGI_ID);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_ETH_MAC_DIGI_ID_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_ETH_ETYPE_write( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_ETH_ETYPE_write( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_ETH_ETYPE_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_ETH_ETYPE,
                      value);
}

static INLINE void ri_rcp_reg_REG_ETH_ETYPE_field_set( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_ETH_ETYPE_field_set( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_ETH_ETYPE_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_ETH_ETYPE,
                      mask,
                      PMC_ODU_RCP_REG_REG_ETH_ETYPE_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_ETH_ETYPE_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_ETH_ETYPE_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_ETH_ETYPE);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_ETH_ETYPE_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_DBG_SEL_write( ri_rcp_buffer_t *b_ptr,
                                                 odu_rcp_handle_t *h_ptr,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_DBG_SEL_write( ri_rcp_buffer_t *b_ptr,
                                                 odu_rcp_handle_t *h_ptr,
                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_DBG_SEL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_DBG_SEL,
                      value);
}

static INLINE void ri_rcp_reg_CFC_DBG_SEL_field_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_DBG_SEL_field_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_DBG_SEL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_DBG_SEL,
                      mask,
                      PMC_ODU_RCP_REG_CFC_DBG_SEL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_DBG_SEL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_DBG_SEL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_CFC_DBG_SEL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_DBG_SEL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_DBG_CTRL_write( ri_rcp_buffer_t *b_ptr,
                                              odu_rcp_handle_t *h_ptr,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_DBG_CTRL_write( ri_rcp_buffer_t *b_ptr,
                                              odu_rcp_handle_t *h_ptr,
                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_DBG_CTRL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_DBG_CTRL,
                      value);
}

static INLINE void ri_rcp_reg_DBG_CTRL_field_set( ri_rcp_buffer_t *b_ptr,
                                                  odu_rcp_handle_t *h_ptr,
                                                  UINT32 mask,
                                                  UINT32 ofs,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_DBG_CTRL_field_set( ri_rcp_buffer_t *b_ptr,
                                                  odu_rcp_handle_t *h_ptr,
                                                  UINT32 mask,
                                                  UINT32 ofs,
                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_DBG_CTRL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_DBG_CTRL,
                      mask,
                      PMC_ODU_RCP_REG_DBG_CTRL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_DBG_CTRL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_DBG_CTRL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_DBG_CTRL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_DBG_CTRL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_IRQ_SEL_write( ri_rcp_buffer_t *b_ptr,
                                                 odu_rcp_handle_t *h_ptr,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IRQ_SEL_write( ri_rcp_buffer_t *b_ptr,
                                                 odu_rcp_handle_t *h_ptr,
                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_IRQ_SEL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_IRQ_SEL,
                      value);
}

static INLINE void ri_rcp_reg_CFC_IRQ_SEL_field_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IRQ_SEL_field_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_IRQ_SEL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_IRQ_SEL,
                      mask,
                      PMC_ODU_RCP_REG_CFC_IRQ_SEL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_IRQ_SEL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_IRQ_SEL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_CFC_IRQ_SEL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_IRQ_SEL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_write( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_write( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0,
                      value);
}

static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0,
                      mask,
                      PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_write( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_write( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1,
                      value);
}

static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1,
                      mask,
                      PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_write( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_write( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2,
                      value);
}

static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2,
                      mask,
                      PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_IPT_ERR_SEL_write( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_SEL_write( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_IPT_ERR_SEL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_SEL,
                      value);
}

static INLINE void ri_rcp_reg_CFC_IPT_ERR_SEL_field_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_SEL_field_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_IPT_ERR_SEL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_SEL,
                      mask,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_SEL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_SEL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_SEL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_CFC_IPT_ERR_SEL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_IPT_ERR_SEL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_STATUS_SEL_write( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_STATUS_SEL_write( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_STATUS_SEL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_STATUS_SEL,
                      value);
}

static INLINE void ri_rcp_reg_CFC_STATUS_SEL_field_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_STATUS_SEL_field_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_STATUS_SEL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_CFC_STATUS_SEL,
                      mask,
                      PMC_ODU_RCP_REG_CFC_STATUS_SEL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_STATUS_SEL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_STATUS_SEL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_CFC_STATUS_SEL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_STATUS_SEL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_1_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_1_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_1_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_1_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_1_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_1_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_1_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_1_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_1_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_2_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_2_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_2_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_2_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_2_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_2_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_2_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3A_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3A_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3A_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3A_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3A_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3A_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3A_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3B_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3B_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3B_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3B_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3B_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3B_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3B_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_4_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_4_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_4_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_4_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_4_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_4_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_4_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_N_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_N_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_N_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_N_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_N_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_N_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_N_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_N_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_N_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_1_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_1_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_1_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_1_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_1_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_1_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_1_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_1_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_1_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_2_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_2_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_2_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_2_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_2_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_2_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_2_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3A_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3A_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3A_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3A_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3A_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3A_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3A_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3B_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3B_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3B_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3B_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3B_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3B_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3B_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_4_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_4_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_4_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_4_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_4_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_4_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_4_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_N_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_N_CFC_CFG_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_N_CFC_CFG_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_N_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_N_CFC_CFG_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_N_CFC_CFG_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_N_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_N_CFC_CFG_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_N_CFC_CFG_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_write( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL,
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_field_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL,
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_SCH_CAL_ENABLE_write( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_SCH_CAL_ENABLE_write( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_SCH_CAL_ENABLE_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_SCH_CAL_ENABLE,
                      value);
}

static INLINE void ri_rcp_reg_REG_SCH_CAL_ENABLE_field_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_SCH_CAL_ENABLE_field_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_SCH_CAL_ENABLE_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_SCH_CAL_ENABLE,
                      mask,
                      PMC_ODU_RCP_REG_REG_SCH_CAL_ENABLE_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_SCH_CAL_ENABLE_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_SCH_CAL_ENABLE_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_SCH_CAL_ENABLE);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_SCH_CAL_ENABLE_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_REG_SCH_CAL_SEL_write( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_SCH_CAL_SEL_write( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_REG_SCH_CAL_SEL_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_SCH_CAL_SEL,
                      value);
}

static INLINE void ri_rcp_reg_REG_SCH_CAL_SEL_field_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_REG_SCH_CAL_SEL_field_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_REG_SCH_CAL_SEL_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_REG_SCH_CAL_SEL,
                      mask,
                      PMC_ODU_RCP_REG_REG_SCH_CAL_SEL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_REG_SCH_CAL_SEL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_REG_SCH_CAL_SEL_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_REG_SCH_CAL_SEL);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_REG_SCH_CAL_SEL_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_1_ACT_CFG_array_burst_write( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_1_ACT_CFG_array_burst_write( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ri_rcp_reg_SCH_STG_1_ACT_CFG_array_burst_write", ofs, len, 12 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ri_rcp_reg_SCH_STG_1_ACT_CFG_array_burst_write", 12, ofs, len);
    ri_rcp_burst_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_ODU_RCP_REG_SCH_STG_1_ACT_CFG(ofs),
                        len,
                        value);

}

static INLINE void ri_rcp_reg_SCH_STG_1_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_1_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_1_ACT_CFG_array_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_SCH_STG_1_ACT_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_1_ACT_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE void ri_rcp_reg_SCH_STG_1_ACT_CFG_array_burst_read( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_1_ACT_CFG_array_burst_read( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ri_rcp_reg_SCH_STG_1_ACT_CFG_array_burst_read", ofs, len, 12 );
    ri_rcp_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_ODU_RCP_REG_SCH_STG_1_ACT_CFG(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ri_rcp_reg_SCH_STG_1_ACT_CFG_array_burst_read", 12, ofs, len);
}

static INLINE UINT32 ri_rcp_reg_SCH_STG_1_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_1_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_SCH_STG_1_ACT_CFG(N));

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_SCH_STG_1_ACT_CFG_array_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_1_STBY_CFG_array_burst_write( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 ofs,
                                                                    UINT32 len,
                                                                    UINT32 *value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_1_STBY_CFG_array_burst_write( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 ofs,
                                                                    UINT32 len,
                                                                    UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ri_rcp_reg_SCH_STG_1_STBY_CFG_array_burst_write", ofs, len, 12 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ri_rcp_reg_SCH_STG_1_STBY_CFG_array_burst_write", 12, ofs, len);
    ri_rcp_burst_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_ODU_RCP_REG_SCH_STG_1_STBY_CFG(ofs),
                        len,
                        value);

}

static INLINE void ri_rcp_reg_SCH_STG_1_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_1_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_1_STBY_CFG_array_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_SCH_STG_1_STBY_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_1_STBY_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE void ri_rcp_reg_SCH_STG_1_STBY_CFG_array_burst_read( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_1_STBY_CFG_array_burst_read( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ri_rcp_reg_SCH_STG_1_STBY_CFG_array_burst_read", ofs, len, 12 );
    ri_rcp_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_ODU_RCP_REG_SCH_STG_1_STBY_CFG(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ri_rcp_reg_SCH_STG_1_STBY_CFG_array_burst_read", 12, ofs, len);
}

static INLINE UINT32 ri_rcp_reg_SCH_STG_1_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_1_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_SCH_STG_1_STBY_CFG(N));

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_SCH_STG_1_STBY_CFG_array_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_N_ACT_CFG_array_burst_write( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_N_ACT_CFG_array_burst_write( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ri_rcp_reg_SCH_STG_N_ACT_CFG_array_burst_write", ofs, len, 12 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ri_rcp_reg_SCH_STG_N_ACT_CFG_array_burst_write", 12, ofs, len);
    ri_rcp_burst_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_ODU_RCP_REG_SCH_STG_N_ACT_CFG(ofs),
                        len,
                        value);

}

static INLINE void ri_rcp_reg_SCH_STG_N_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_N_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_N_ACT_CFG_array_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_SCH_STG_N_ACT_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_N_ACT_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE void ri_rcp_reg_SCH_STG_N_ACT_CFG_array_burst_read( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_N_ACT_CFG_array_burst_read( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ri_rcp_reg_SCH_STG_N_ACT_CFG_array_burst_read", ofs, len, 12 );
    ri_rcp_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_ODU_RCP_REG_SCH_STG_N_ACT_CFG(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ri_rcp_reg_SCH_STG_N_ACT_CFG_array_burst_read", 12, ofs, len);
}

static INLINE UINT32 ri_rcp_reg_SCH_STG_N_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_N_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_SCH_STG_N_ACT_CFG(N));

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_SCH_STG_N_ACT_CFG_array_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_N_STBY_CFG_array_burst_write( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 ofs,
                                                                    UINT32 len,
                                                                    UINT32 *value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_N_STBY_CFG_array_burst_write( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 ofs,
                                                                    UINT32 len,
                                                                    UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ri_rcp_reg_SCH_STG_N_STBY_CFG_array_burst_write", ofs, len, 12 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ri_rcp_reg_SCH_STG_N_STBY_CFG_array_burst_write", 12, ofs, len);
    ri_rcp_burst_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_ODU_RCP_REG_SCH_STG_N_STBY_CFG(ofs),
                        len,
                        value);

}

static INLINE void ri_rcp_reg_SCH_STG_N_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_N_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_N_STBY_CFG_array_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_SCH_STG_N_STBY_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_N_STBY_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE void ri_rcp_reg_SCH_STG_N_STBY_CFG_array_burst_read( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_N_STBY_CFG_array_burst_read( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ri_rcp_reg_SCH_STG_N_STBY_CFG_array_burst_read", ofs, len, 12 );
    ri_rcp_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_ODU_RCP_REG_SCH_STG_N_STBY_CFG(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ri_rcp_reg_SCH_STG_N_STBY_CFG_array_burst_read", 12, ofs, len);
}

static INLINE UINT32 ri_rcp_reg_SCH_STG_N_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_N_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_SCH_STG_N_STBY_CFG(N));

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_SCH_STG_N_STBY_CFG_array_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_1_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_1_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_1_APS_LEVEL_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_1_APS_LEVEL(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_1_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_1_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_1_APS_LEVEL_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_1_APS_LEVEL(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_1_APS_LEVEL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_1_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_1_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_1_APS_LEVEL(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_1_APS_LEVEL_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_N_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_N_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_N_APS_LEVEL_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_N_APS_LEVEL(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_N_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_N_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_N_APS_LEVEL_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_N_APS_LEVEL(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_N_APS_LEVEL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_N_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_N_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_N_APS_LEVEL(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_N_APS_LEVEL_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_1_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_1_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_1_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_1_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_1_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_1_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_1_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_1_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_1_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_N_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_N_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_N_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_N_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_N_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_N_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_N_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_N_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_N_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_1_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_1_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_1_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_1_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_1_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_1_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_1_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_1_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_TX_STG_1_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_N_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_N_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_N_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_N_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_N_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_N_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_N_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_N_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_TX_STG_N_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_2_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_2_APS_LEVEL_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_APS_LEVEL(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_2_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_2_APS_LEVEL_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_APS_LEVEL(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_2_APS_LEVEL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_2_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_2_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_2_APS_LEVEL(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_2_APS_LEVEL_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_APS_LEVEL(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_APS_LEVEL(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3A_APS_LEVEL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3A_APS_LEVEL(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_APS_LEVEL(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_APS_LEVEL(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3B_APS_LEVEL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3B_APS_LEVEL(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_4_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_APS_LEVEL_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_4_APS_LEVEL_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_APS_LEVEL(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_4_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_APS_LEVEL_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_4_APS_LEVEL_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_APS_LEVEL(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_4_APS_LEVEL_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_4_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_4_APS_LEVEL_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_4_APS_LEVEL(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_4_APS_LEVEL_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_2_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_2_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_2_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_2_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_2_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_2_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_2_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_2_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3A_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3A_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3A_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3A_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3A_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3A_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3A_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_3A_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_3B_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_3B_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_3B_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_3B_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_3B_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_3B_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3B_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_3B_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_RX_STG_4_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_RX_STG_4_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_RX_STG_4_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_RX_STG_4_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_RX_STG_4_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_RX_STG_4_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_4_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_RX_STG_4_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_2_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_2_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_2_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_2_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_2_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_2_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_2_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_TX_STG_2_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3A_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3A_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3A_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3A_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3A_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3A_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3A_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_TX_STG_3A_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_3B_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_3B_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_3B_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_3B_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_3B_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_3B_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3B_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_TX_STG_3B_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_TX_STG_4_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_CFC_IPT_array_write( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_TX_STG_4_CFC_IPT_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT(N),
                      value);
}

static INLINE void ri_rcp_reg_TX_STG_4_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_TX_STG_4_CFC_IPT_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_TX_STG_4_CFC_IPT_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT(N),
                      mask,
                      PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_TX_STG_4_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_4_CFC_IPT_array_read( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_TX_STG_4_CFC_IPT_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_GEN_IRQ_E_write( ri_rcp_buffer_t *b_ptr,
                                               odu_rcp_handle_t *h_ptr,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_GEN_IRQ_E_write( ri_rcp_buffer_t *b_ptr,
                                               odu_rcp_handle_t *h_ptr,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_GEN_IRQ_E_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_GEN_IRQ_E,
                      value);
}

static INLINE void ri_rcp_reg_GEN_IRQ_E_field_set( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_GEN_IRQ_E_field_set( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_GEN_IRQ_E_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_GEN_IRQ_E,
                      mask,
                      PMC_ODU_RCP_REG_GEN_IRQ_E_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_GEN_IRQ_E_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_GEN_IRQ_E_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_GEN_IRQ_E);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_GEN_IRQ_E_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_FIFO_IRQ_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_EN_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_1,
                      value);
}

static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_EN_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_1,
                      mask,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_FIFO_IRQ_EN_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_EN_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_2,
                      value);
}

static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_EN_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_2,
                      mask,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_FIFO_IRQ_EN_2_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_0_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_IPT_ERR_EN_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_0,
                      value);
}

static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_0_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_IPT_ERR_EN_0_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_0,
                      mask,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_EN_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_IPT_ERR_EN_0_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_1_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_IPT_ERR_EN_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_1,
                      value);
}

static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_1_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_IPT_ERR_EN_1_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_1,
                      mask,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_EN_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_IPT_ERR_EN_1_read", reg_value);
    return reg_value;
}

static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_2_write( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_IPT_ERR_EN_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_2,
                      value);
}

static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_EN_2_field_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_IPT_ERR_EN_2_field_set", mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_2,
                      mask,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_EN_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_IPT_ERR_EN_2_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_IRQ_SUMMARY_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_IRQ_SUMMARY_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_IRQ_SUMMARY);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_IRQ_SUMMARY_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_IRQ_SUMMARY_poll( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_IRQ_SUMMARY_poll( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "ri_rcp_reg_IRQ_SUMMARY_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return ri_rcp_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODU_RCP_REG_IRQ_SUMMARY,
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


static INLINE void ri_rcp_reg_GEN_IRQ_I_write( ri_rcp_buffer_t *b_ptr,
                                               odu_rcp_handle_t *h_ptr,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_GEN_IRQ_I_write( ri_rcp_buffer_t *b_ptr,
                                               odu_rcp_handle_t *h_ptr,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_GEN_IRQ_I_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_GEN_IRQ_I,
                      value);
}

static INLINE void ri_rcp_reg_GEN_IRQ_I_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_GEN_IRQ_I_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_GEN_IRQ_I_action_on_write_field_set", mask, ofs, value );
    ri_rcp_action_on_write_field_set( b_ptr,
                                      h_ptr,
                                      MEM_TYPE_STATUS,
                                      PMC_ODU_RCP_REG_GEN_IRQ_I,
                                      mask,
                                      ofs,
                                      value);

}

static INLINE UINT32 ri_rcp_reg_GEN_IRQ_I_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_GEN_IRQ_I_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_GEN_IRQ_I);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_GEN_IRQ_I_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_GEN_IRQ_I_poll( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_GEN_IRQ_I_poll( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "ri_rcp_reg_GEN_IRQ_I_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return ri_rcp_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODU_RCP_REG_GEN_IRQ_I,
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_0_write( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_0_write( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0,
                      value);
}

static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_0_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_0_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_0_action_on_write_field_set", mask, ofs, value );
    ri_rcp_action_on_write_field_set( b_ptr,
                                      h_ptr,
                                      MEM_TYPE_STATUS,
                                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0,
                                      mask,
                                      ofs,
                                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_FIFO_IRQ_0_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_FIFO_IRQ_0_poll( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_FIFO_IRQ_0_poll( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "ri_rcp_reg_CFC_FIFO_IRQ_0_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return ri_rcp_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0,
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_1_write( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_1_write( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1,
                      value);
}

static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_1_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_1_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_1_action_on_write_field_set", mask, ofs, value );
    ri_rcp_action_on_write_field_set( b_ptr,
                                      h_ptr,
                                      MEM_TYPE_STATUS,
                                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1,
                                      mask,
                                      ofs,
                                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_FIFO_IRQ_1_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_FIFO_IRQ_1_poll( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_FIFO_IRQ_1_poll( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "ri_rcp_reg_CFC_FIFO_IRQ_1_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return ri_rcp_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1,
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_2_write( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_2_write( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2,
                      value);
}

static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_2_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_FIFO_IRQ_2_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_FIFO_IRQ_2_action_on_write_field_set", mask, ofs, value );
    ri_rcp_action_on_write_field_set( b_ptr,
                                      h_ptr,
                                      MEM_TYPE_STATUS,
                                      PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2,
                                      mask,
                                      ofs,
                                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_FIFO_IRQ_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_FIFO_IRQ_2_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_FIFO_IRQ_2_poll( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_FIFO_IRQ_2_poll( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "ri_rcp_reg_CFC_FIFO_IRQ_2_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return ri_rcp_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2,
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


static INLINE void ri_rcp_reg_CFC_IPT_ERR_0_write( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_0_write( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_IPT_ERR_0_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_0,
                      value);
}

static INLINE void ri_rcp_reg_CFC_IPT_ERR_0_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_0_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_IPT_ERR_0_action_on_write_field_set", mask, ofs, value );
    ri_rcp_action_on_write_field_set( b_ptr,
                                      h_ptr,
                                      MEM_TYPE_STATUS,
                                      PMC_ODU_RCP_REG_CFC_IPT_ERR_0,
                                      mask,
                                      ofs,
                                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_IPT_ERR_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_IPT_ERR_0_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_IPT_ERR_0_poll( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_IPT_ERR_0_poll( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "ri_rcp_reg_CFC_IPT_ERR_0_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return ri_rcp_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODU_RCP_REG_CFC_IPT_ERR_0,
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


static INLINE void ri_rcp_reg_CFC_IPT_ERR_1_write( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_1_write( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_IPT_ERR_1_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_1,
                      value);
}

static INLINE void ri_rcp_reg_CFC_IPT_ERR_1_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_1_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_IPT_ERR_1_action_on_write_field_set", mask, ofs, value );
    ri_rcp_action_on_write_field_set( b_ptr,
                                      h_ptr,
                                      MEM_TYPE_STATUS,
                                      PMC_ODU_RCP_REG_CFC_IPT_ERR_1,
                                      mask,
                                      ofs,
                                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_IPT_ERR_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_IPT_ERR_1_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_IPT_ERR_1_poll( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_IPT_ERR_1_poll( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "ri_rcp_reg_CFC_IPT_ERR_1_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return ri_rcp_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODU_RCP_REG_CFC_IPT_ERR_1,
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


static INLINE void ri_rcp_reg_CFC_IPT_ERR_2_write( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_2_write( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_CFC_IPT_ERR_2_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_CFC_IPT_ERR_2,
                      value);
}

static INLINE void ri_rcp_reg_CFC_IPT_ERR_2_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_CFC_IPT_ERR_2_action_on_write_field_set( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_CFC_IPT_ERR_2_action_on_write_field_set", mask, ofs, value );
    ri_rcp_action_on_write_field_set( b_ptr,
                                      h_ptr,
                                      MEM_TYPE_STATUS,
                                      PMC_ODU_RCP_REG_CFC_IPT_ERR_2,
                                      mask,
                                      ofs,
                                      value);

}

static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_IPT_ERR_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_IPT_ERR_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_IPT_ERR_2_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_IPT_ERR_2_poll( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_reg_CFC_IPT_ERR_2_poll( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "ri_rcp_reg_CFC_IPT_ERR_2_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return ri_rcp_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODU_RCP_REG_CFC_IPT_ERR_2,
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


static INLINE void ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG(N),
                      value);
}

static INLINE void ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_2_ACT_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_2_ACT_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_SCH_STG_2_ACT_CFG_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG(N),
                      value);
}

static INLINE void ri_rcp_reg_SCH_STG_2_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_2_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_2_ACT_CFG_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_SCH_STG_2_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_2_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_SCH_STG_2_ACT_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_2_STBY_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_2_STBY_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_SCH_STG_2_STBY_CFG_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG(N),
                      value);
}

static INLINE void ri_rcp_reg_SCH_STG_2_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_2_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_2_STBY_CFG_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_SCH_STG_2_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_2_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_SCH_STG_2_STBY_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG(N),
                      value);
}

static INLINE void ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG(N),
                      value);
}

static INLINE void ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG(N),
                      value);
}

static INLINE void ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG(N),
                      value);
}

static INLINE void ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_4_ACT_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_4_ACT_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_SCH_STG_4_ACT_CFG_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG(N),
                      value);
}

static INLINE void ri_rcp_reg_SCH_STG_4_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_4_ACT_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_4_ACT_CFG_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_SCH_STG_4_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_4_ACT_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_SCH_STG_4_ACT_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_SCH_STG_4_STBY_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_4_STBY_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_SCH_STG_4_STBY_CFG_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG(N),
                      value);
}

static INLINE void ri_rcp_reg_SCH_STG_4_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_SCH_STG_4_STBY_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_SCH_STG_4_STBY_CFG_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_SCH_STG_4_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_SCH_STG_4_STBY_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_SCH_STG_4_STBY_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_write( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_write", value );
    ri_rcp_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG(N),
                      value);
}

static INLINE void ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_field_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_field_set", N, mask, ofs, value );
    ri_rcp_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG(N),
                      mask,
                      PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_read( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_DBG_RDATA_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_DBG_RDATA_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_DBG_RDATA);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_DBG_RDATA_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_CFC_EMPTY_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_EMPTY_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_EMPTY_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_EMPTY_0_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_CFC_EMPTY_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_EMPTY_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_EMPTY_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_EMPTY_1_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_CFC_EMPTY_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_EMPTY_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_EMPTY_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_EMPTY_2_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_CFC_FULL_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_FULL_0_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_FULL_0);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_FULL_0_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_CFC_FULL_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_FULL_1_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_FULL_1);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_FULL_1_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_CFC_FULL_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_CFC_FULL_2_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_CFC_FULL_2);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_CFC_FULL_2_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_RX_STG_1_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_1_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_1_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_RX_STG_2_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_2_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_2_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_RX_STG_3A_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3A_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3A_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_RX_STG_3B_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_3B_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_3B_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_RX_STG_4_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_4_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_4_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_RX_STG_N_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_RX_STG_N_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_RX_STG_N_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_TX_STG_1_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_1_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_1_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_TX_STG_2_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_2_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_2_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_TX_STG_3A_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3A_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3A_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_TX_STG_3B_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_3B_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_3B_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_TX_STG_4_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_4_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_4_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

static INLINE UINT32 ri_rcp_reg_TX_STG_N_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_reg_TX_STG_N_CFC_CFG_STAT_read( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = ri_rcp_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "ri_rcp_reg_TX_STG_N_CFC_CFG_STAT_read", reg_value);
    return reg_value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */
static INLINE void ri_rcp_field_REG_SOFT_SW_RESET_set( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_SOFT_SW_RESET_set( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_SOFT_SW_RESET_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_SOFT_SW_RESET_set", value );

    /* (0x00000000 bits 1) field REG_SOFT_SW_RESET of register PMC_ODU_RCP_REG_REG_SW_RESET */
    ri_rcp_reg_REG_SW_RESET_field_set( b_ptr,
                                       h_ptr,
                                       ODU_RCP_REG_REG_SW_RESET_BIT_REG_SOFT_SW_RESET_MSK,
                                       ODU_RCP_REG_REG_SW_RESET_BIT_REG_SOFT_SW_RESET_OFF,
                                       value);
}

static INLINE UINT32 ri_rcp_field_REG_SOFT_SW_RESET_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_SOFT_SW_RESET_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 1) field REG_SOFT_SW_RESET of register PMC_ODU_RCP_REG_REG_SW_RESET */
    reg_value = ri_rcp_reg_REG_SW_RESET_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_SW_RESET_BIT_REG_SOFT_SW_RESET_MSK) >> ODU_RCP_REG_REG_SW_RESET_BIT_REG_SOFT_SW_RESET_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_SOFT_SW_RESET_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_SW_RESET_set( ri_rcp_buffer_t *b_ptr,
                                                  odu_rcp_handle_t *h_ptr,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_SW_RESET_set( ri_rcp_buffer_t *b_ptr,
                                                  odu_rcp_handle_t *h_ptr,
                                                  UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_SW_RESET_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_SW_RESET_set", value );

    /* (0x00000000 bits 0) field REG_SW_RESET of register PMC_ODU_RCP_REG_REG_SW_RESET */
    ri_rcp_reg_REG_SW_RESET_field_set( b_ptr,
                                       h_ptr,
                                       ODU_RCP_REG_REG_SW_RESET_BIT_REG_SW_RESET_MSK,
                                       ODU_RCP_REG_REG_SW_RESET_BIT_REG_SW_RESET_OFF,
                                       value);
}

static INLINE UINT32 ri_rcp_field_REG_SW_RESET_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_SW_RESET_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 0) field REG_SW_RESET of register PMC_ODU_RCP_REG_REG_SW_RESET */
    reg_value = ri_rcp_reg_REG_SW_RESET_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_SW_RESET_BIT_REG_SW_RESET_MSK) >> ODU_RCP_REG_REG_SW_RESET_BIT_REG_SW_RESET_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_SW_RESET_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_LOWPWR_set( ri_rcp_buffer_t *b_ptr,
                                                odu_rcp_handle_t *h_ptr,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_LOWPWR_set( ri_rcp_buffer_t *b_ptr,
                                                odu_rcp_handle_t *h_ptr,
                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_LOWPWR_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_LOWPWR_set", value );

    /* (0x00000004 bits 0) field REG_LOWPWR of register PMC_ODU_RCP_REG_REG_LOWPWR */
    ri_rcp_reg_REG_LOWPWR_field_set( b_ptr,
                                     h_ptr,
                                     ODU_RCP_REG_REG_LOWPWR_BIT_REG_LOWPWR_MSK,
                                     ODU_RCP_REG_REG_LOWPWR_BIT_REG_LOWPWR_OFF,
                                     value);
}

static INLINE UINT32 ri_rcp_field_REG_LOWPWR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_LOWPWR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 0) field REG_LOWPWR of register PMC_ODU_RCP_REG_REG_LOWPWR */
    reg_value = ri_rcp_reg_REG_LOWPWR_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_LOWPWR_BIT_REG_LOWPWR_MSK) >> ODU_RCP_REG_REG_LOWPWR_BIT_REG_LOWPWR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_LOWPWR_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_RAM_LOWPWR_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_RAM_LOWPWR_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_RAM_LOWPWR_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_RAM_LOWPWR_set", value );

    /* (0x0000000c bits 0) field REG_RAM_LOWPWR of register PMC_ODU_RCP_REG_REG_RAM_PWR_MGMT */
    ri_rcp_reg_REG_RAM_PWR_MGMT_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_REG_RAM_PWR_MGMT_BIT_REG_RAM_LOWPWR_MSK,
                                           ODU_RCP_REG_REG_RAM_PWR_MGMT_BIT_REG_RAM_LOWPWR_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_REG_RAM_LOWPWR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_RAM_LOWPWR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 0) field REG_RAM_LOWPWR of register PMC_ODU_RCP_REG_REG_RAM_PWR_MGMT */
    reg_value = ri_rcp_reg_REG_RAM_PWR_MGMT_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_RAM_PWR_MGMT_BIT_REG_RAM_LOWPWR_MSK) >> ODU_RCP_REG_REG_RAM_PWR_MGMT_BIT_REG_RAM_LOWPWR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_RAM_LOWPWR_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_ING_FIFO_MIN_SLOT_FREE_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_ING_FIFO_MIN_SLOT_FREE_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_ING_FIFO_MIN_SLOT_FREE_set", value, 63);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_ING_FIFO_MIN_SLOT_FREE_set", value );

    /* (0x0000001c bits 21:16) field REG_ING_FIFO_MIN_SLOT_FREE of register PMC_ODU_RCP_REG_REG_GOJF */
    ri_rcp_reg_REG_GOJF_field_set( b_ptr,
                                   h_ptr,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_SLOT_FREE_MSK,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_SLOT_FREE_OFF,
                                   value);
}

static INLINE UINT32 ri_rcp_field_REG_ING_FIFO_MIN_SLOT_FREE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_ING_FIFO_MIN_SLOT_FREE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 21:16) field REG_ING_FIFO_MIN_SLOT_FREE of register PMC_ODU_RCP_REG_REG_GOJF */
    reg_value = ri_rcp_reg_REG_GOJF_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_SLOT_FREE_MSK) >> ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_SLOT_FREE_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_ING_FIFO_MIN_SLOT_FREE_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_ING_FIFO_MIN_SLOT_FREE_set( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_ING_FIFO_MIN_SLOT_FREE_set( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_ING_FIFO_MIN_SLOT_FREE_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_ING_FIFO_MIN_SLOT_FREE_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_ING_FIFO_MIN_SLOT_FREE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000001c bits 21:16) field REG_ING_FIFO_MIN_SLOT_FREE of register PMC_ODU_RCP_REG_REG_GOJF */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000001c bits 21:16) field REG_ING_FIFO_MIN_SLOT_FREE of register PMC_ODU_RCP_REG_REG_GOJF */
        ri_rcp_reg_REG_GOJF_field_set( b_ptr,
                                       h_ptr,
                                       subfield_mask << (ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_SLOT_FREE_OFF + subfield_offset),
                                       ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_SLOT_FREE_OFF + subfield_offset,
                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_ING_FIFO_MIN_SLOT_FREE_get( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_ING_FIFO_MIN_SLOT_FREE_get( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_ING_FIFO_MIN_SLOT_FREE_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_ING_FIFO_MIN_SLOT_FREE_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000001c bits 21:16) field REG_ING_FIFO_MIN_SLOT_FREE of register PMC_ODU_RCP_REG_REG_GOJF */
    reg_value = ri_rcp_reg_REG_GOJF_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_SLOT_FREE_MSK)
                  >> ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_SLOT_FREE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_SLOT_FREE_MSK, ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_SLOT_FREE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_ING_FIFO_MIN_SLOT_FREE_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_ING_FIFO_MIN_LVL_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_ING_FIFO_MIN_LVL_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_ING_FIFO_MIN_LVL_set", value, 63);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_ING_FIFO_MIN_LVL_set", value );

    /* (0x0000001c bits 13:8) field REG_ING_FIFO_MIN_LVL of register PMC_ODU_RCP_REG_REG_GOJF */
    ri_rcp_reg_REG_GOJF_field_set( b_ptr,
                                   h_ptr,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_LVL_MSK,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_LVL_OFF,
                                   value);
}

static INLINE UINT32 ri_rcp_field_REG_ING_FIFO_MIN_LVL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_ING_FIFO_MIN_LVL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 13:8) field REG_ING_FIFO_MIN_LVL of register PMC_ODU_RCP_REG_REG_GOJF */
    reg_value = ri_rcp_reg_REG_GOJF_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_LVL_MSK) >> ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_LVL_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_ING_FIFO_MIN_LVL_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_ING_FIFO_MIN_LVL_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_ING_FIFO_MIN_LVL_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_ING_FIFO_MIN_LVL_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_ING_FIFO_MIN_LVL_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_ING_FIFO_MIN_LVL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000001c bits 13:8) field REG_ING_FIFO_MIN_LVL of register PMC_ODU_RCP_REG_REG_GOJF */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000001c bits 13:8) field REG_ING_FIFO_MIN_LVL of register PMC_ODU_RCP_REG_REG_GOJF */
        ri_rcp_reg_REG_GOJF_field_set( b_ptr,
                                       h_ptr,
                                       subfield_mask << (ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_LVL_OFF + subfield_offset),
                                       ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_LVL_OFF + subfield_offset,
                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_ING_FIFO_MIN_LVL_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_ING_FIFO_MIN_LVL_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_ING_FIFO_MIN_LVL_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_ING_FIFO_MIN_LVL_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000001c bits 13:8) field REG_ING_FIFO_MIN_LVL of register PMC_ODU_RCP_REG_REG_GOJF */
    reg_value = ri_rcp_reg_REG_GOJF_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_LVL_MSK)
                  >> ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_LVL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_LVL_MSK, ODU_RCP_REG_REG_GOJF_BIT_REG_ING_FIFO_MIN_LVL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_ING_FIFO_MIN_LVL_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_DROP_PDU_WO_DFEC_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_DROP_PDU_WO_DFEC_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_DROP_PDU_WO_DFEC_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_DROP_PDU_WO_DFEC_set", value );

    /* (0x0000001c bits 4) field REG_DROP_PDU_WO_DFEC of register PMC_ODU_RCP_REG_REG_GOJF */
    ri_rcp_reg_REG_GOJF_field_set( b_ptr,
                                   h_ptr,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_DROP_PDU_WO_DFEC_MSK,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_DROP_PDU_WO_DFEC_OFF,
                                   value);
}

static INLINE UINT32 ri_rcp_field_REG_DROP_PDU_WO_DFEC_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_DROP_PDU_WO_DFEC_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 4) field REG_DROP_PDU_WO_DFEC of register PMC_ODU_RCP_REG_REG_GOJF */
    reg_value = ri_rcp_reg_REG_GOJF_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_GOJF_BIT_REG_DROP_PDU_WO_DFEC_MSK) >> ODU_RCP_REG_REG_GOJF_BIT_REG_DROP_PDU_WO_DFEC_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_DROP_PDU_WO_DFEC_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_ETH_RX_10B_SWIZZLE_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_ETH_RX_10B_SWIZZLE_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_ETH_RX_10B_SWIZZLE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_ETH_RX_10B_SWIZZLE_set", value );

    /* (0x0000001c bits 3) field REG_ETH_RX_10B_SWIZZLE of register PMC_ODU_RCP_REG_REG_GOJF */
    ri_rcp_reg_REG_GOJF_field_set( b_ptr,
                                   h_ptr,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_RX_10B_SWIZZLE_MSK,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_RX_10B_SWIZZLE_OFF,
                                   value);
}

static INLINE UINT32 ri_rcp_field_REG_ETH_RX_10B_SWIZZLE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_ETH_RX_10B_SWIZZLE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 3) field REG_ETH_RX_10B_SWIZZLE of register PMC_ODU_RCP_REG_REG_GOJF */
    reg_value = ri_rcp_reg_REG_GOJF_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_RX_10B_SWIZZLE_MSK) >> ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_RX_10B_SWIZZLE_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_ETH_RX_10B_SWIZZLE_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_ETH_TX_10B_SWIZZLE_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_ETH_TX_10B_SWIZZLE_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_ETH_TX_10B_SWIZZLE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_ETH_TX_10B_SWIZZLE_set", value );

    /* (0x0000001c bits 2) field REG_ETH_TX_10B_SWIZZLE of register PMC_ODU_RCP_REG_REG_GOJF */
    ri_rcp_reg_REG_GOJF_field_set( b_ptr,
                                   h_ptr,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_TX_10B_SWIZZLE_MSK,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_TX_10B_SWIZZLE_OFF,
                                   value);
}

static INLINE UINT32 ri_rcp_field_REG_ETH_TX_10B_SWIZZLE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_ETH_TX_10B_SWIZZLE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 2) field REG_ETH_TX_10B_SWIZZLE of register PMC_ODU_RCP_REG_REG_GOJF */
    reg_value = ri_rcp_reg_REG_GOJF_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_TX_10B_SWIZZLE_MSK) >> ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_TX_10B_SWIZZLE_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_ETH_TX_10B_SWIZZLE_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_ETH_RX_8B_SWIZZLE_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_ETH_RX_8B_SWIZZLE_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_ETH_RX_8B_SWIZZLE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_ETH_RX_8B_SWIZZLE_set", value );

    /* (0x0000001c bits 1) field REG_ETH_RX_8B_SWIZZLE of register PMC_ODU_RCP_REG_REG_GOJF */
    ri_rcp_reg_REG_GOJF_field_set( b_ptr,
                                   h_ptr,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_RX_8B_SWIZZLE_MSK,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_RX_8B_SWIZZLE_OFF,
                                   value);
}

static INLINE UINT32 ri_rcp_field_REG_ETH_RX_8B_SWIZZLE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_ETH_RX_8B_SWIZZLE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 1) field REG_ETH_RX_8B_SWIZZLE of register PMC_ODU_RCP_REG_REG_GOJF */
    reg_value = ri_rcp_reg_REG_GOJF_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_RX_8B_SWIZZLE_MSK) >> ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_RX_8B_SWIZZLE_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_ETH_RX_8B_SWIZZLE_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_ETH_TX_8B_SWIZZLE_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_ETH_TX_8B_SWIZZLE_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_ETH_TX_8B_SWIZZLE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_ETH_TX_8B_SWIZZLE_set", value );

    /* (0x0000001c bits 0) field REG_ETH_TX_8B_SWIZZLE of register PMC_ODU_RCP_REG_REG_GOJF */
    ri_rcp_reg_REG_GOJF_field_set( b_ptr,
                                   h_ptr,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_TX_8B_SWIZZLE_MSK,
                                   ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_TX_8B_SWIZZLE_OFF,
                                   value);
}

static INLINE UINT32 ri_rcp_field_REG_ETH_TX_8B_SWIZZLE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_ETH_TX_8B_SWIZZLE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 0) field REG_ETH_TX_8B_SWIZZLE of register PMC_ODU_RCP_REG_REG_GOJF */
    reg_value = ri_rcp_reg_REG_GOJF_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_TX_8B_SWIZZLE_MSK) >> ODU_RCP_REG_REG_GOJF_BIT_REG_ETH_TX_8B_SWIZZLE_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_ETH_TX_8B_SWIZZLE_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_ETH_TX_EN_set( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_ETH_TX_EN_set( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_ETH_TX_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_ETH_TX_EN_set", value );

    /* (0x00000060 bits 0) field REG_ETH_TX_EN of register PMC_ODU_RCP_REG_REG_ETH_TX_EN */
    ri_rcp_reg_REG_ETH_TX_EN_field_set( b_ptr,
                                        h_ptr,
                                        ODU_RCP_REG_REG_ETH_TX_EN_BIT_REG_ETH_TX_EN_MSK,
                                        ODU_RCP_REG_REG_ETH_TX_EN_BIT_REG_ETH_TX_EN_OFF,
                                        value);
}

static INLINE UINT32 ri_rcp_field_REG_ETH_TX_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_ETH_TX_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000060 bits 0) field REG_ETH_TX_EN of register PMC_ODU_RCP_REG_REG_ETH_TX_EN */
    reg_value = ri_rcp_reg_REG_ETH_TX_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_ETH_TX_EN_BIT_REG_ETH_TX_EN_MSK) >> ODU_RCP_REG_REG_ETH_TX_EN_BIT_REG_ETH_TX_EN_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_ETH_TX_EN_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_ETH_MAC_OUI_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_ETH_MAC_OUI_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 16777215)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_ETH_MAC_OUI_set", value, 16777215);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_ETH_MAC_OUI_set", value );

    /* (0x00000068 bits 23:0) bits 0:23 use field REG_ETH_MAC_OUI of register PMC_ODU_RCP_REG_REG_ETH_MAC_OUI */
    ri_rcp_reg_REG_ETH_MAC_OUI_field_set( b_ptr,
                                          h_ptr,
                                          ODU_RCP_REG_REG_ETH_MAC_OUI_BIT_REG_ETH_MAC_OUI_MSK,
                                          ODU_RCP_REG_REG_ETH_MAC_OUI_BIT_REG_ETH_MAC_OUI_OFF,
                                          value);
}

static INLINE UINT32 ri_rcp_field_REG_ETH_MAC_OUI_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_ETH_MAC_OUI_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000068 bits 23:0) bits 0:23 use field REG_ETH_MAC_OUI of register PMC_ODU_RCP_REG_REG_ETH_MAC_OUI */
    reg_value = ri_rcp_reg_REG_ETH_MAC_OUI_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_ETH_MAC_OUI_BIT_REG_ETH_MAC_OUI_MSK) >> ODU_RCP_REG_REG_ETH_MAC_OUI_BIT_REG_ETH_MAC_OUI_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_ETH_MAC_OUI_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_ETH_MAC_OUI_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_ETH_MAC_OUI_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_ETH_MAC_OUI_set", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_ETH_MAC_OUI_set", stop_bit, 23 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_ETH_MAC_OUI_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000068 bits 23:0) bits 0:23 use field REG_ETH_MAC_OUI of register PMC_ODU_RCP_REG_REG_ETH_MAC_OUI */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000068 bits 23:0) bits 0:23 use field REG_ETH_MAC_OUI of register PMC_ODU_RCP_REG_REG_ETH_MAC_OUI */
        ri_rcp_reg_REG_ETH_MAC_OUI_field_set( b_ptr,
                                              h_ptr,
                                              subfield_mask << (ODU_RCP_REG_REG_ETH_MAC_OUI_BIT_REG_ETH_MAC_OUI_OFF + subfield_offset),
                                              ODU_RCP_REG_REG_ETH_MAC_OUI_BIT_REG_ETH_MAC_OUI_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_ETH_MAC_OUI_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_ETH_MAC_OUI_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_ETH_MAC_OUI_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_ETH_MAC_OUI_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000068 bits 23:0) bits 0:23 use field REG_ETH_MAC_OUI of register PMC_ODU_RCP_REG_REG_ETH_MAC_OUI */
    reg_value = ri_rcp_reg_REG_ETH_MAC_OUI_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_ETH_MAC_OUI_BIT_REG_ETH_MAC_OUI_MSK)
                  >> ODU_RCP_REG_REG_ETH_MAC_OUI_BIT_REG_ETH_MAC_OUI_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_ETH_MAC_OUI_BIT_REG_ETH_MAC_OUI_MSK, ODU_RCP_REG_REG_ETH_MAC_OUI_BIT_REG_ETH_MAC_OUI_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_ETH_MAC_OUI_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_ETH_MAC_DIGI_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_ETH_MAC_DIGI_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_ETH_MAC_DIGI_ID_set", value, 255);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_ETH_MAC_DIGI_ID_set", value );

    /* (0x0000006c bits 7:0) field REG_ETH_MAC_DIGI_ID of register PMC_ODU_RCP_REG_REG_ETH_MAC_DIGI_ID */
    ri_rcp_reg_REG_ETH_MAC_DIGI_ID_field_set( b_ptr,
                                              h_ptr,
                                              ODU_RCP_REG_REG_ETH_MAC_DIGI_ID_BIT_REG_ETH_MAC_DIGI_ID_MSK,
                                              ODU_RCP_REG_REG_ETH_MAC_DIGI_ID_BIT_REG_ETH_MAC_DIGI_ID_OFF,
                                              value);
}

static INLINE UINT32 ri_rcp_field_REG_ETH_MAC_DIGI_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_ETH_MAC_DIGI_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000006c bits 7:0) field REG_ETH_MAC_DIGI_ID of register PMC_ODU_RCP_REG_REG_ETH_MAC_DIGI_ID */
    reg_value = ri_rcp_reg_REG_ETH_MAC_DIGI_ID_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_ETH_MAC_DIGI_ID_BIT_REG_ETH_MAC_DIGI_ID_MSK) >> ODU_RCP_REG_REG_ETH_MAC_DIGI_ID_BIT_REG_ETH_MAC_DIGI_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_ETH_MAC_DIGI_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_ETH_MAC_DIGI_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_ETH_MAC_DIGI_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_ETH_MAC_DIGI_ID_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_ETH_MAC_DIGI_ID_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_ETH_MAC_DIGI_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000006c bits 7:0) field REG_ETH_MAC_DIGI_ID of register PMC_ODU_RCP_REG_REG_ETH_MAC_DIGI_ID */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000006c bits 7:0) field REG_ETH_MAC_DIGI_ID of register PMC_ODU_RCP_REG_REG_ETH_MAC_DIGI_ID */
        ri_rcp_reg_REG_ETH_MAC_DIGI_ID_field_set( b_ptr,
                                                  h_ptr,
                                                  subfield_mask << (ODU_RCP_REG_REG_ETH_MAC_DIGI_ID_BIT_REG_ETH_MAC_DIGI_ID_OFF + subfield_offset),
                                                  ODU_RCP_REG_REG_ETH_MAC_DIGI_ID_BIT_REG_ETH_MAC_DIGI_ID_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_ETH_MAC_DIGI_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_ETH_MAC_DIGI_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_ETH_MAC_DIGI_ID_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_ETH_MAC_DIGI_ID_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000006c bits 7:0) field REG_ETH_MAC_DIGI_ID of register PMC_ODU_RCP_REG_REG_ETH_MAC_DIGI_ID */
    reg_value = ri_rcp_reg_REG_ETH_MAC_DIGI_ID_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_ETH_MAC_DIGI_ID_BIT_REG_ETH_MAC_DIGI_ID_MSK)
                  >> ODU_RCP_REG_REG_ETH_MAC_DIGI_ID_BIT_REG_ETH_MAC_DIGI_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_ETH_MAC_DIGI_ID_BIT_REG_ETH_MAC_DIGI_ID_MSK, ODU_RCP_REG_REG_ETH_MAC_DIGI_ID_BIT_REG_ETH_MAC_DIGI_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_ETH_MAC_DIGI_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_ETH_ETYPE_set( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_ETH_ETYPE_set( ri_rcp_buffer_t *b_ptr,
                                                   odu_rcp_handle_t *h_ptr,
                                                   UINT32 value )
{
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_ETH_ETYPE_set", value, 65535);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_ETH_ETYPE_set", value );

    /* (0x00000070 bits 15:0) bits 0:15 use field REG_ETH_ETYPE of register PMC_ODU_RCP_REG_REG_ETH_ETYPE */
    ri_rcp_reg_REG_ETH_ETYPE_field_set( b_ptr,
                                        h_ptr,
                                        ODU_RCP_REG_REG_ETH_ETYPE_BIT_REG_ETH_ETYPE_MSK,
                                        ODU_RCP_REG_REG_ETH_ETYPE_BIT_REG_ETH_ETYPE_OFF,
                                        value);
}

static INLINE UINT32 ri_rcp_field_REG_ETH_ETYPE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_ETH_ETYPE_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 15:0) bits 0:15 use field REG_ETH_ETYPE of register PMC_ODU_RCP_REG_REG_ETH_ETYPE */
    reg_value = ri_rcp_reg_REG_ETH_ETYPE_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_ETH_ETYPE_BIT_REG_ETH_ETYPE_MSK) >> ODU_RCP_REG_REG_ETH_ETYPE_BIT_REG_ETH_ETYPE_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_ETH_ETYPE_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_ETH_ETYPE_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_ETH_ETYPE_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_ETH_ETYPE_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_ETH_ETYPE_set", stop_bit, 15 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_ETH_ETYPE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000070 bits 15:0) bits 0:15 use field REG_ETH_ETYPE of register PMC_ODU_RCP_REG_REG_ETH_ETYPE */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000070 bits 15:0) bits 0:15 use field REG_ETH_ETYPE of register PMC_ODU_RCP_REG_REG_ETH_ETYPE */
        ri_rcp_reg_REG_ETH_ETYPE_field_set( b_ptr,
                                            h_ptr,
                                            subfield_mask << (ODU_RCP_REG_REG_ETH_ETYPE_BIT_REG_ETH_ETYPE_OFF + subfield_offset),
                                            ODU_RCP_REG_REG_ETH_ETYPE_BIT_REG_ETH_ETYPE_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_ETH_ETYPE_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_ETH_ETYPE_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_ETH_ETYPE_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_ETH_ETYPE_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000070 bits 15:0) bits 0:15 use field REG_ETH_ETYPE of register PMC_ODU_RCP_REG_REG_ETH_ETYPE */
    reg_value = ri_rcp_reg_REG_ETH_ETYPE_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_ETH_ETYPE_BIT_REG_ETH_ETYPE_MSK)
                  >> ODU_RCP_REG_REG_ETH_ETYPE_BIT_REG_ETH_ETYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_ETH_ETYPE_BIT_REG_ETH_ETYPE_MSK, ODU_RCP_REG_REG_ETH_ETYPE_BIT_REG_ETH_ETYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_ETH_ETYPE_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_TX_STG_1_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_TX_STG_1_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_TX_STG_1_RCP_INS_EN_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_TX_STG_1_RCP_INS_EN_set", value );

    /* (0x00000b00 bits 11:0) bits 0:11 use field REG_TX_STG_1_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0_BIT_REG_TX_STG_1_RCP_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0_BIT_REG_TX_STG_1_RCP_INS_EN_OFF,
                                                    value);
}

static INLINE UINT32 ri_rcp_field_REG_TX_STG_1_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_TX_STG_1_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000b00 bits 11:0) bits 0:11 use field REG_TX_STG_1_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0_BIT_REG_TX_STG_1_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0_BIT_REG_TX_STG_1_RCP_INS_EN_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_TX_STG_1_RCP_INS_EN_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_TX_STG_1_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_TX_STG_1_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_TX_STG_1_RCP_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_TX_STG_1_RCP_INS_EN_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_TX_STG_1_RCP_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b00 bits 11:0) bits 0:11 use field REG_TX_STG_1_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b00 bits 11:0) bits 0:11 use field REG_TX_STG_1_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0_BIT_REG_TX_STG_1_RCP_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0_BIT_REG_TX_STG_1_RCP_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_TX_STG_1_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_TX_STG_1_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_TX_STG_1_RCP_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_TX_STG_1_RCP_INS_EN_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b00 bits 11:0) bits 0:11 use field REG_TX_STG_1_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_1_RCP_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0_BIT_REG_TX_STG_1_RCP_INS_EN_MSK)
                  >> ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0_BIT_REG_TX_STG_1_RCP_INS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0_BIT_REG_TX_STG_1_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_1_RCP_INS_EN_0_BIT_REG_TX_STG_1_RCP_INS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_TX_STG_1_RCP_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_REG_TX_STG_2_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_2_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_2_RCP_INS_EN_set", value[2] , value[1] , value[0] );

    /* (0x00000b10 bits 31:0) bits 0:31 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0_BIT_REG_TX_STG_2_RCP_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0_BIT_REG_TX_STG_2_RCP_INS_EN_OFF,
                                                    value[0]);

    /* (0x00000b14 bits 31:0) bits 32:63 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1 */
    ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1_BIT_REG_TX_STG_2_RCP_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1_BIT_REG_TX_STG_2_RCP_INS_EN_OFF,
                                                    value[1]);

    /* (0x00000b18 bits 31:0) bits 64:95 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2 */
    ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2_BIT_REG_TX_STG_2_RCP_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2_BIT_REG_TX_STG_2_RCP_INS_EN_OFF,
                                                    value[2]);
}

static INLINE void ri_rcp_lfield_REG_TX_STG_2_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_2_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00000b10 bits 31:0) bits 0:31 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0_BIT_REG_TX_STG_2_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0_BIT_REG_TX_STG_2_RCP_INS_EN_OFF;
    value[0] |= field_value;

    /* (0x00000b14 bits 31:0) bits 32:63 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1 */
    reg_value = ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1_BIT_REG_TX_STG_2_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1_BIT_REG_TX_STG_2_RCP_INS_EN_OFF;
    value[1] |= field_value;

    /* (0x00000b18 bits 31:0) bits 64:95 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2 */
    reg_value = ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2_BIT_REG_TX_STG_2_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2_BIT_REG_TX_STG_2_RCP_INS_EN_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_2_RCP_INS_EN_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_REG_TX_STG_2_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_REG_TX_STG_2_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_2_RCP_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_2_RCP_INS_EN_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_2_RCP_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b10 bits 31:0) bits 0:31 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b10 bits 31:0) bits 0:31 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0_BIT_REG_TX_STG_2_RCP_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0_BIT_REG_TX_STG_2_RCP_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b14 bits 31:0) bits 32:63 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b14 bits 31:0) bits 32:63 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1 */
        ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1_BIT_REG_TX_STG_2_RCP_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1_BIT_REG_TX_STG_2_RCP_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b18 bits 31:0) bits 64:95 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b18 bits 31:0) bits 64:95 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2 */
        ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2_BIT_REG_TX_STG_2_RCP_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2_BIT_REG_TX_STG_2_RCP_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_2_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_2_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_2_RCP_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_2_RCP_INS_EN_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b10 bits 31:0) bits 0:31 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0 */
        reg_value = ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_0_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0_BIT_REG_TX_STG_2_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0_BIT_REG_TX_STG_2_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0_BIT_REG_TX_STG_2_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_0_BIT_REG_TX_STG_2_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b14 bits 31:0) bits 32:63 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1 */
        reg_value = ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_1_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1_BIT_REG_TX_STG_2_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1_BIT_REG_TX_STG_2_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1_BIT_REG_TX_STG_2_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_1_BIT_REG_TX_STG_2_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b18 bits 31:0) bits 64:95 use field REG_TX_STG_2_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2 */
        reg_value = ri_rcp_reg_REG_TX_STG_2_RCP_INS_EN_2_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2_BIT_REG_TX_STG_2_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2_BIT_REG_TX_STG_2_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2_BIT_REG_TX_STG_2_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_2_RCP_INS_EN_2_BIT_REG_TX_STG_2_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_2_RCP_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_REG_TX_STG_3A_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_3A_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_3A_RCP_INS_EN_set", value[2] , value[1] , value[0] );

    /* (0x00000b20 bits 31:0) bits 0:31 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF,
                                                     value[0]);

    /* (0x00000b24 bits 31:0) bits 32:63 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1 */
    ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF,
                                                     value[1]);

    /* (0x00000b28 bits 31:0) bits 64:95 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2 */
    ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF,
                                                     value[2]);
}

static INLINE void ri_rcp_lfield_REG_TX_STG_3A_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_3A_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00000b20 bits 31:0) bits 0:31 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF;
    value[0] |= field_value;

    /* (0x00000b24 bits 31:0) bits 32:63 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1 */
    reg_value = ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF;
    value[1] |= field_value;

    /* (0x00000b28 bits 31:0) bits 64:95 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2 */
    reg_value = ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_3A_RCP_INS_EN_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_REG_TX_STG_3A_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_REG_TX_STG_3A_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_3A_RCP_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_3A_RCP_INS_EN_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_3A_RCP_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b20 bits 31:0) bits 0:31 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b20 bits 31:0) bits 0:31 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b24 bits 31:0) bits 32:63 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b24 bits 31:0) bits 32:63 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1 */
        ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b28 bits 31:0) bits 64:95 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b28 bits 31:0) bits 64:95 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2 */
        ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_3A_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_3A_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_3A_RCP_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_3A_RCP_INS_EN_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b20 bits 31:0) bits 0:31 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0 */
        reg_value = ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_0_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_0_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b24 bits 31:0) bits 32:63 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1 */
        reg_value = ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_1_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_1_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b28 bits 31:0) bits 64:95 use field REG_TX_STG_3A_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2 */
        reg_value = ri_rcp_reg_REG_TX_STG_3A_RCP_INS_EN_2_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2_BIT_REG_TX_STG_3A_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3A_RCP_INS_EN_2_BIT_REG_TX_STG_3A_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_3A_RCP_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_REG_TX_STG_3B_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_3B_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_3B_RCP_INS_EN_set", value[2] , value[1] , value[0] );

    /* (0x00000b30 bits 31:0) bits 0:31 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF,
                                                     value[0]);

    /* (0x00000b34 bits 31:0) bits 32:63 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1 */
    ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF,
                                                     value[1]);

    /* (0x00000b38 bits 31:0) bits 64:95 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2 */
    ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF,
                                                     value[2]);
}

static INLINE void ri_rcp_lfield_REG_TX_STG_3B_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_3B_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00000b30 bits 31:0) bits 0:31 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF;
    value[0] |= field_value;

    /* (0x00000b34 bits 31:0) bits 32:63 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1 */
    reg_value = ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF;
    value[1] |= field_value;

    /* (0x00000b38 bits 31:0) bits 64:95 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2 */
    reg_value = ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_3B_RCP_INS_EN_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_REG_TX_STG_3B_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_REG_TX_STG_3B_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_3B_RCP_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_3B_RCP_INS_EN_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_3B_RCP_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b30 bits 31:0) bits 0:31 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b30 bits 31:0) bits 0:31 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b34 bits 31:0) bits 32:63 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b34 bits 31:0) bits 32:63 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1 */
        ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b38 bits 31:0) bits 64:95 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b38 bits 31:0) bits 64:95 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2 */
        ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_3B_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_3B_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_3B_RCP_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_3B_RCP_INS_EN_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b30 bits 31:0) bits 0:31 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0 */
        reg_value = ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_0_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_0_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b34 bits 31:0) bits 32:63 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1 */
        reg_value = ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_1_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_1_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b38 bits 31:0) bits 64:95 use field REG_TX_STG_3B_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2 */
        reg_value = ri_rcp_reg_REG_TX_STG_3B_RCP_INS_EN_2_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2_BIT_REG_TX_STG_3B_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3B_RCP_INS_EN_2_BIT_REG_TX_STG_3B_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_3B_RCP_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_REG_TX_STG_4_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_4_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_4_RCP_INS_EN_set", value[2] , value[1] , value[0] );

    /* (0x00000b40 bits 31:0) bits 0:31 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0_BIT_REG_TX_STG_4_RCP_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0_BIT_REG_TX_STG_4_RCP_INS_EN_OFF,
                                                    value[0]);

    /* (0x00000b44 bits 31:0) bits 32:63 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1 */
    ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1_BIT_REG_TX_STG_4_RCP_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1_BIT_REG_TX_STG_4_RCP_INS_EN_OFF,
                                                    value[1]);

    /* (0x00000b48 bits 31:0) bits 64:95 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2 */
    ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2_BIT_REG_TX_STG_4_RCP_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2_BIT_REG_TX_STG_4_RCP_INS_EN_OFF,
                                                    value[2]);
}

static INLINE void ri_rcp_lfield_REG_TX_STG_4_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_4_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00000b40 bits 31:0) bits 0:31 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0_BIT_REG_TX_STG_4_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0_BIT_REG_TX_STG_4_RCP_INS_EN_OFF;
    value[0] |= field_value;

    /* (0x00000b44 bits 31:0) bits 32:63 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1 */
    reg_value = ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1_BIT_REG_TX_STG_4_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1_BIT_REG_TX_STG_4_RCP_INS_EN_OFF;
    value[1] |= field_value;

    /* (0x00000b48 bits 31:0) bits 64:95 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2 */
    reg_value = ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2_BIT_REG_TX_STG_4_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2_BIT_REG_TX_STG_4_RCP_INS_EN_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_4_RCP_INS_EN_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_REG_TX_STG_4_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_REG_TX_STG_4_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_4_RCP_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_4_RCP_INS_EN_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_4_RCP_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b40 bits 31:0) bits 0:31 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b40 bits 31:0) bits 0:31 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0_BIT_REG_TX_STG_4_RCP_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0_BIT_REG_TX_STG_4_RCP_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b44 bits 31:0) bits 32:63 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b44 bits 31:0) bits 32:63 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1 */
        ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1_BIT_REG_TX_STG_4_RCP_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1_BIT_REG_TX_STG_4_RCP_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b48 bits 31:0) bits 64:95 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b48 bits 31:0) bits 64:95 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2 */
        ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2_BIT_REG_TX_STG_4_RCP_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2_BIT_REG_TX_STG_4_RCP_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_4_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_4_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_4_RCP_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_4_RCP_INS_EN_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b40 bits 31:0) bits 0:31 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0 */
        reg_value = ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_0_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0_BIT_REG_TX_STG_4_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0_BIT_REG_TX_STG_4_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0_BIT_REG_TX_STG_4_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_0_BIT_REG_TX_STG_4_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b44 bits 31:0) bits 32:63 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1 */
        reg_value = ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_1_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1_BIT_REG_TX_STG_4_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1_BIT_REG_TX_STG_4_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1_BIT_REG_TX_STG_4_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_1_BIT_REG_TX_STG_4_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b48 bits 31:0) bits 64:95 use field REG_TX_STG_4_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2 */
        reg_value = ri_rcp_reg_REG_TX_STG_4_RCP_INS_EN_2_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2_BIT_REG_TX_STG_4_RCP_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2_BIT_REG_TX_STG_4_RCP_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2_BIT_REG_TX_STG_4_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_4_RCP_INS_EN_2_BIT_REG_TX_STG_4_RCP_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_4_RCP_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_TX_STG_N_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_TX_STG_N_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_TX_STG_N_RCP_INS_EN_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_TX_STG_N_RCP_INS_EN_set", value );

    /* (0x00000b50 bits 11:0) bits 0:11 use field REG_TX_STG_N_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0_BIT_REG_TX_STG_N_RCP_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0_BIT_REG_TX_STG_N_RCP_INS_EN_OFF,
                                                    value);
}

static INLINE UINT32 ri_rcp_field_REG_TX_STG_N_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_TX_STG_N_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000b50 bits 11:0) bits 0:11 use field REG_TX_STG_N_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0_BIT_REG_TX_STG_N_RCP_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0_BIT_REG_TX_STG_N_RCP_INS_EN_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_TX_STG_N_RCP_INS_EN_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_TX_STG_N_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_TX_STG_N_RCP_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_TX_STG_N_RCP_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_TX_STG_N_RCP_INS_EN_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_TX_STG_N_RCP_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b50 bits 11:0) bits 0:11 use field REG_TX_STG_N_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b50 bits 11:0) bits 0:11 use field REG_TX_STG_N_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0_BIT_REG_TX_STG_N_RCP_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0_BIT_REG_TX_STG_N_RCP_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_TX_STG_N_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_TX_STG_N_RCP_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_TX_STG_N_RCP_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_TX_STG_N_RCP_INS_EN_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b50 bits 11:0) bits 0:11 use field REG_TX_STG_N_RCP_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_N_RCP_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0_BIT_REG_TX_STG_N_RCP_INS_EN_MSK)
                  >> ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0_BIT_REG_TX_STG_N_RCP_INS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0_BIT_REG_TX_STG_N_RCP_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_N_RCP_INS_EN_0_BIT_REG_TX_STG_N_RCP_INS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_TX_STG_N_RCP_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_TX_STG_1_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_TX_STG_1_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_TX_STG_1_APS_INS_EN_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_TX_STG_1_APS_INS_EN_set", value );

    /* (0x00000b80 bits 11:0) bits 0:11 use field REG_TX_STG_1_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0_BIT_REG_TX_STG_1_APS_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0_BIT_REG_TX_STG_1_APS_INS_EN_OFF,
                                                    value);
}

static INLINE UINT32 ri_rcp_field_REG_TX_STG_1_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_TX_STG_1_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000b80 bits 11:0) bits 0:11 use field REG_TX_STG_1_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0_BIT_REG_TX_STG_1_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0_BIT_REG_TX_STG_1_APS_INS_EN_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_TX_STG_1_APS_INS_EN_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_TX_STG_1_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_TX_STG_1_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_TX_STG_1_APS_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_TX_STG_1_APS_INS_EN_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_TX_STG_1_APS_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b80 bits 11:0) bits 0:11 use field REG_TX_STG_1_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b80 bits 11:0) bits 0:11 use field REG_TX_STG_1_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0_BIT_REG_TX_STG_1_APS_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0_BIT_REG_TX_STG_1_APS_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_TX_STG_1_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_TX_STG_1_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_TX_STG_1_APS_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_TX_STG_1_APS_INS_EN_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b80 bits 11:0) bits 0:11 use field REG_TX_STG_1_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_1_APS_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0_BIT_REG_TX_STG_1_APS_INS_EN_MSK)
                  >> ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0_BIT_REG_TX_STG_1_APS_INS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0_BIT_REG_TX_STG_1_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_1_APS_INS_EN_0_BIT_REG_TX_STG_1_APS_INS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_TX_STG_1_APS_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_REG_TX_STG_2_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_2_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_2_APS_INS_EN_set", value[2] , value[1] , value[0] );

    /* (0x00000b90 bits 31:0) bits 0:31 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0_BIT_REG_TX_STG_2_APS_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0_BIT_REG_TX_STG_2_APS_INS_EN_OFF,
                                                    value[0]);

    /* (0x00000b94 bits 31:0) bits 32:63 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1 */
    ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1_BIT_REG_TX_STG_2_APS_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1_BIT_REG_TX_STG_2_APS_INS_EN_OFF,
                                                    value[1]);

    /* (0x00000b98 bits 31:0) bits 64:95 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2 */
    ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2_BIT_REG_TX_STG_2_APS_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2_BIT_REG_TX_STG_2_APS_INS_EN_OFF,
                                                    value[2]);
}

static INLINE void ri_rcp_lfield_REG_TX_STG_2_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_2_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00000b90 bits 31:0) bits 0:31 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0_BIT_REG_TX_STG_2_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0_BIT_REG_TX_STG_2_APS_INS_EN_OFF;
    value[0] |= field_value;

    /* (0x00000b94 bits 31:0) bits 32:63 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1 */
    reg_value = ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1_BIT_REG_TX_STG_2_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1_BIT_REG_TX_STG_2_APS_INS_EN_OFF;
    value[1] |= field_value;

    /* (0x00000b98 bits 31:0) bits 64:95 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2 */
    reg_value = ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2_BIT_REG_TX_STG_2_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2_BIT_REG_TX_STG_2_APS_INS_EN_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_2_APS_INS_EN_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_REG_TX_STG_2_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_REG_TX_STG_2_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_2_APS_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_2_APS_INS_EN_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_2_APS_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b90 bits 31:0) bits 0:31 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b90 bits 31:0) bits 0:31 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0_BIT_REG_TX_STG_2_APS_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0_BIT_REG_TX_STG_2_APS_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b94 bits 31:0) bits 32:63 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b94 bits 31:0) bits 32:63 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1 */
        ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1_BIT_REG_TX_STG_2_APS_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1_BIT_REG_TX_STG_2_APS_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000b98 bits 31:0) bits 64:95 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000b98 bits 31:0) bits 64:95 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2 */
        ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2_BIT_REG_TX_STG_2_APS_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2_BIT_REG_TX_STG_2_APS_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_2_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_2_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_2_APS_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_2_APS_INS_EN_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b90 bits 31:0) bits 0:31 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0 */
        reg_value = ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_0_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0_BIT_REG_TX_STG_2_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0_BIT_REG_TX_STG_2_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0_BIT_REG_TX_STG_2_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_0_BIT_REG_TX_STG_2_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b94 bits 31:0) bits 32:63 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1 */
        reg_value = ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_1_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1_BIT_REG_TX_STG_2_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1_BIT_REG_TX_STG_2_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1_BIT_REG_TX_STG_2_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_1_BIT_REG_TX_STG_2_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000b98 bits 31:0) bits 64:95 use field REG_TX_STG_2_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2 */
        reg_value = ri_rcp_reg_REG_TX_STG_2_APS_INS_EN_2_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2_BIT_REG_TX_STG_2_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2_BIT_REG_TX_STG_2_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2_BIT_REG_TX_STG_2_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_2_APS_INS_EN_2_BIT_REG_TX_STG_2_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_2_APS_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_REG_TX_STG_3A_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_3A_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_3A_APS_INS_EN_set", value[2] , value[1] , value[0] );

    /* (0x00000ba0 bits 31:0) bits 0:31 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0_BIT_REG_TX_STG_3A_APS_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0_BIT_REG_TX_STG_3A_APS_INS_EN_OFF,
                                                     value[0]);

    /* (0x00000ba4 bits 31:0) bits 32:63 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1 */
    ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1_BIT_REG_TX_STG_3A_APS_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1_BIT_REG_TX_STG_3A_APS_INS_EN_OFF,
                                                     value[1]);

    /* (0x00000ba8 bits 31:0) bits 64:95 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2 */
    ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2_BIT_REG_TX_STG_3A_APS_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2_BIT_REG_TX_STG_3A_APS_INS_EN_OFF,
                                                     value[2]);
}

static INLINE void ri_rcp_lfield_REG_TX_STG_3A_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_3A_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00000ba0 bits 31:0) bits 0:31 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0_BIT_REG_TX_STG_3A_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0_BIT_REG_TX_STG_3A_APS_INS_EN_OFF;
    value[0] |= field_value;

    /* (0x00000ba4 bits 31:0) bits 32:63 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1 */
    reg_value = ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1_BIT_REG_TX_STG_3A_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1_BIT_REG_TX_STG_3A_APS_INS_EN_OFF;
    value[1] |= field_value;

    /* (0x00000ba8 bits 31:0) bits 64:95 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2 */
    reg_value = ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2_BIT_REG_TX_STG_3A_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2_BIT_REG_TX_STG_3A_APS_INS_EN_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_3A_APS_INS_EN_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_REG_TX_STG_3A_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_REG_TX_STG_3A_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_3A_APS_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_3A_APS_INS_EN_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_3A_APS_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000ba0 bits 31:0) bits 0:31 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000ba0 bits 31:0) bits 0:31 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0_BIT_REG_TX_STG_3A_APS_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0_BIT_REG_TX_STG_3A_APS_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000ba4 bits 31:0) bits 32:63 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000ba4 bits 31:0) bits 32:63 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1 */
        ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1_BIT_REG_TX_STG_3A_APS_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1_BIT_REG_TX_STG_3A_APS_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000ba8 bits 31:0) bits 64:95 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000ba8 bits 31:0) bits 64:95 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2 */
        ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2_BIT_REG_TX_STG_3A_APS_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2_BIT_REG_TX_STG_3A_APS_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_3A_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_3A_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_3A_APS_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_3A_APS_INS_EN_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000ba0 bits 31:0) bits 0:31 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0 */
        reg_value = ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_0_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0_BIT_REG_TX_STG_3A_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0_BIT_REG_TX_STG_3A_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0_BIT_REG_TX_STG_3A_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_0_BIT_REG_TX_STG_3A_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000ba4 bits 31:0) bits 32:63 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1 */
        reg_value = ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_1_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1_BIT_REG_TX_STG_3A_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1_BIT_REG_TX_STG_3A_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1_BIT_REG_TX_STG_3A_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_1_BIT_REG_TX_STG_3A_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000ba8 bits 31:0) bits 64:95 use field REG_TX_STG_3A_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2 */
        reg_value = ri_rcp_reg_REG_TX_STG_3A_APS_INS_EN_2_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2_BIT_REG_TX_STG_3A_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2_BIT_REG_TX_STG_3A_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2_BIT_REG_TX_STG_3A_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3A_APS_INS_EN_2_BIT_REG_TX_STG_3A_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_3A_APS_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_REG_TX_STG_3B_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_3B_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_3B_APS_INS_EN_set", value[2] , value[1] , value[0] );

    /* (0x00000bb0 bits 31:0) bits 0:31 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0_BIT_REG_TX_STG_3B_APS_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0_BIT_REG_TX_STG_3B_APS_INS_EN_OFF,
                                                     value[0]);

    /* (0x00000bb4 bits 31:0) bits 32:63 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1 */
    ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1_BIT_REG_TX_STG_3B_APS_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1_BIT_REG_TX_STG_3B_APS_INS_EN_OFF,
                                                     value[1]);

    /* (0x00000bb8 bits 31:0) bits 64:95 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2 */
    ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_field_set( b_ptr,
                                                     h_ptr,
                                                     ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2_BIT_REG_TX_STG_3B_APS_INS_EN_MSK,
                                                     ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2_BIT_REG_TX_STG_3B_APS_INS_EN_OFF,
                                                     value[2]);
}

static INLINE void ri_rcp_lfield_REG_TX_STG_3B_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_3B_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00000bb0 bits 31:0) bits 0:31 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0_BIT_REG_TX_STG_3B_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0_BIT_REG_TX_STG_3B_APS_INS_EN_OFF;
    value[0] |= field_value;

    /* (0x00000bb4 bits 31:0) bits 32:63 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1 */
    reg_value = ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1_BIT_REG_TX_STG_3B_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1_BIT_REG_TX_STG_3B_APS_INS_EN_OFF;
    value[1] |= field_value;

    /* (0x00000bb8 bits 31:0) bits 64:95 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2 */
    reg_value = ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2_BIT_REG_TX_STG_3B_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2_BIT_REG_TX_STG_3B_APS_INS_EN_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_3B_APS_INS_EN_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_REG_TX_STG_3B_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_REG_TX_STG_3B_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_3B_APS_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_3B_APS_INS_EN_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_3B_APS_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000bb0 bits 31:0) bits 0:31 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000bb0 bits 31:0) bits 0:31 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0_BIT_REG_TX_STG_3B_APS_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0_BIT_REG_TX_STG_3B_APS_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000bb4 bits 31:0) bits 32:63 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000bb4 bits 31:0) bits 32:63 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1 */
        ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1_BIT_REG_TX_STG_3B_APS_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1_BIT_REG_TX_STG_3B_APS_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000bb8 bits 31:0) bits 64:95 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000bb8 bits 31:0) bits 64:95 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2 */
        ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2_BIT_REG_TX_STG_3B_APS_INS_EN_OFF + subfield_offset),
                                                         ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2_BIT_REG_TX_STG_3B_APS_INS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_3B_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_3B_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                       odu_rcp_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_3B_APS_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_3B_APS_INS_EN_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000bb0 bits 31:0) bits 0:31 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0 */
        reg_value = ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_0_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0_BIT_REG_TX_STG_3B_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0_BIT_REG_TX_STG_3B_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0_BIT_REG_TX_STG_3B_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_0_BIT_REG_TX_STG_3B_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000bb4 bits 31:0) bits 32:63 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1 */
        reg_value = ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_1_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1_BIT_REG_TX_STG_3B_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1_BIT_REG_TX_STG_3B_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1_BIT_REG_TX_STG_3B_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_1_BIT_REG_TX_STG_3B_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000bb8 bits 31:0) bits 64:95 use field REG_TX_STG_3B_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2 */
        reg_value = ri_rcp_reg_REG_TX_STG_3B_APS_INS_EN_2_read( b_ptr,
                                                                h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2_BIT_REG_TX_STG_3B_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2_BIT_REG_TX_STG_3B_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2_BIT_REG_TX_STG_3B_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_3B_APS_INS_EN_2_BIT_REG_TX_STG_3B_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_3B_APS_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_REG_TX_STG_4_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_4_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_4_APS_INS_EN_set", value[2] , value[1] , value[0] );

    /* (0x00000bc0 bits 31:0) bits 0:31 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0_BIT_REG_TX_STG_4_APS_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0_BIT_REG_TX_STG_4_APS_INS_EN_OFF,
                                                    value[0]);

    /* (0x00000bc4 bits 31:0) bits 32:63 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1 */
    ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1_BIT_REG_TX_STG_4_APS_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1_BIT_REG_TX_STG_4_APS_INS_EN_OFF,
                                                    value[1]);

    /* (0x00000bc8 bits 31:0) bits 64:95 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2 */
    ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2_BIT_REG_TX_STG_4_APS_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2_BIT_REG_TX_STG_4_APS_INS_EN_OFF,
                                                    value[2]);
}

static INLINE void ri_rcp_lfield_REG_TX_STG_4_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_TX_STG_4_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00000bc0 bits 31:0) bits 0:31 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0_BIT_REG_TX_STG_4_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0_BIT_REG_TX_STG_4_APS_INS_EN_OFF;
    value[0] |= field_value;

    /* (0x00000bc4 bits 31:0) bits 32:63 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1 */
    reg_value = ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1_BIT_REG_TX_STG_4_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1_BIT_REG_TX_STG_4_APS_INS_EN_OFF;
    value[1] |= field_value;

    /* (0x00000bc8 bits 31:0) bits 64:95 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2 */
    reg_value = ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2_BIT_REG_TX_STG_4_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2_BIT_REG_TX_STG_4_APS_INS_EN_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_TX_STG_4_APS_INS_EN_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_REG_TX_STG_4_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_REG_TX_STG_4_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_4_APS_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_4_APS_INS_EN_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_4_APS_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000bc0 bits 31:0) bits 0:31 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000bc0 bits 31:0) bits 0:31 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0_BIT_REG_TX_STG_4_APS_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0_BIT_REG_TX_STG_4_APS_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000bc4 bits 31:0) bits 32:63 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000bc4 bits 31:0) bits 32:63 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1 */
        ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1_BIT_REG_TX_STG_4_APS_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1_BIT_REG_TX_STG_4_APS_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000bc8 bits 31:0) bits 64:95 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000bc8 bits 31:0) bits 64:95 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2 */
        ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2_BIT_REG_TX_STG_4_APS_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2_BIT_REG_TX_STG_4_APS_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_4_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_REG_TX_STG_4_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_TX_STG_4_APS_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_TX_STG_4_APS_INS_EN_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000bc0 bits 31:0) bits 0:31 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0 */
        reg_value = ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_0_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0_BIT_REG_TX_STG_4_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0_BIT_REG_TX_STG_4_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0_BIT_REG_TX_STG_4_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_0_BIT_REG_TX_STG_4_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000bc4 bits 31:0) bits 32:63 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1 */
        reg_value = ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_1_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1_BIT_REG_TX_STG_4_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1_BIT_REG_TX_STG_4_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1_BIT_REG_TX_STG_4_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_1_BIT_REG_TX_STG_4_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000bc8 bits 31:0) bits 64:95 use field REG_TX_STG_4_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2 */
        reg_value = ri_rcp_reg_REG_TX_STG_4_APS_INS_EN_2_read( b_ptr,
                                                               h_ptr);
        field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2_BIT_REG_TX_STG_4_APS_INS_EN_MSK)
                      >> ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2_BIT_REG_TX_STG_4_APS_INS_EN_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2_BIT_REG_TX_STG_4_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_4_APS_INS_EN_2_BIT_REG_TX_STG_4_APS_INS_EN_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_TX_STG_4_APS_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_TX_STG_N_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_TX_STG_N_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_TX_STG_N_APS_INS_EN_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_TX_STG_N_APS_INS_EN_set", value );

    /* (0x00000bd0 bits 11:0) bits 0:11 use field REG_TX_STG_N_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0 */
    ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0_BIT_REG_TX_STG_N_APS_INS_EN_MSK,
                                                    ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0_BIT_REG_TX_STG_N_APS_INS_EN_OFF,
                                                    value);
}

static INLINE UINT32 ri_rcp_field_REG_TX_STG_N_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_TX_STG_N_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000bd0 bits 11:0) bits 0:11 use field REG_TX_STG_N_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0_BIT_REG_TX_STG_N_APS_INS_EN_MSK) >> ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0_BIT_REG_TX_STG_N_APS_INS_EN_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_TX_STG_N_APS_INS_EN_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_TX_STG_N_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_TX_STG_N_APS_INS_EN_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_TX_STG_N_APS_INS_EN_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_TX_STG_N_APS_INS_EN_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_TX_STG_N_APS_INS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000bd0 bits 11:0) bits 0:11 use field REG_TX_STG_N_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000bd0 bits 11:0) bits 0:11 use field REG_TX_STG_N_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0 */
        ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_field_set( b_ptr,
                                                        h_ptr,
                                                        subfield_mask << (ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0_BIT_REG_TX_STG_N_APS_INS_EN_OFF + subfield_offset),
                                                        ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0_BIT_REG_TX_STG_N_APS_INS_EN_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_TX_STG_N_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_TX_STG_N_APS_INS_EN_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_TX_STG_N_APS_INS_EN_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_TX_STG_N_APS_INS_EN_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000bd0 bits 11:0) bits 0:11 use field REG_TX_STG_N_APS_INS_EN of register PMC_ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0 */
    reg_value = ri_rcp_reg_REG_TX_STG_N_APS_INS_EN_0_read( b_ptr,
                                                           h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0_BIT_REG_TX_STG_N_APS_INS_EN_MSK)
                  >> ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0_BIT_REG_TX_STG_N_APS_INS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0_BIT_REG_TX_STG_N_APS_INS_EN_MSK, ODU_RCP_REG_REG_TX_STG_N_APS_INS_EN_0_BIT_REG_TX_STG_N_APS_INS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_TX_STG_N_APS_INS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_CFC_DBG_SRC_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_CFC_DBG_SRC_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_CFC_DBG_SRC_SEL_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_CFC_DBG_SRC_SEL_set", value );

    /* (0x00001300 bits 4) field CFC_DBG_SRC_SEL of register PMC_ODU_RCP_REG_CFC_DBG_SEL */
    ri_rcp_reg_CFC_DBG_SEL_field_set( b_ptr,
                                      h_ptr,
                                      ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_SRC_SEL_MSK,
                                      ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_SRC_SEL_OFF,
                                      value);
}

static INLINE UINT32 ri_rcp_field_CFC_DBG_SRC_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_CFC_DBG_SRC_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001300 bits 4) field CFC_DBG_SRC_SEL of register PMC_ODU_RCP_REG_CFC_DBG_SEL */
    reg_value = ri_rcp_reg_CFC_DBG_SEL_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_SRC_SEL_MSK) >> ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_SRC_SEL_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_CFC_DBG_SRC_SEL_get", value );

    return value;
}
static INLINE void ri_rcp_field_CFC_DBG_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_CFC_DBG_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_CFC_DBG_STG_SEL_set", value, 7);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_CFC_DBG_STG_SEL_set", value );

    /* (0x00001300 bits 2:0) field CFC_DBG_STG_SEL of register PMC_ODU_RCP_REG_CFC_DBG_SEL */
    ri_rcp_reg_CFC_DBG_SEL_field_set( b_ptr,
                                      h_ptr,
                                      ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_STG_SEL_MSK,
                                      ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_STG_SEL_OFF,
                                      value);
}

static INLINE UINT32 ri_rcp_field_CFC_DBG_STG_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_CFC_DBG_STG_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001300 bits 2:0) field CFC_DBG_STG_SEL of register PMC_ODU_RCP_REG_CFC_DBG_SEL */
    reg_value = ri_rcp_reg_CFC_DBG_SEL_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_STG_SEL_MSK) >> ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_STG_SEL_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_CFC_DBG_STG_SEL_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_CFC_DBG_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_CFC_DBG_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_CFC_DBG_STG_SEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_CFC_DBG_STG_SEL_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_CFC_DBG_STG_SEL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001300 bits 2:0) field CFC_DBG_STG_SEL of register PMC_ODU_RCP_REG_CFC_DBG_SEL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001300 bits 2:0) field CFC_DBG_STG_SEL of register PMC_ODU_RCP_REG_CFC_DBG_SEL */
        ri_rcp_reg_CFC_DBG_SEL_field_set( b_ptr,
                                          h_ptr,
                                          subfield_mask << (ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_STG_SEL_OFF + subfield_offset),
                                          ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_STG_SEL_OFF + subfield_offset,
                                          value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_CFC_DBG_STG_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_CFC_DBG_STG_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_CFC_DBG_STG_SEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_CFC_DBG_STG_SEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001300 bits 2:0) field CFC_DBG_STG_SEL of register PMC_ODU_RCP_REG_CFC_DBG_SEL */
    reg_value = ri_rcp_reg_CFC_DBG_SEL_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_STG_SEL_MSK)
                  >> ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_STG_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_STG_SEL_MSK, ODU_RCP_REG_CFC_DBG_SEL_BIT_CFC_DBG_STG_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_CFC_DBG_STG_SEL_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_DBG_RADDR_set( ri_rcp_buffer_t *b_ptr,
                                               odu_rcp_handle_t *h_ptr,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_DBG_RADDR_set( ri_rcp_buffer_t *b_ptr,
                                               odu_rcp_handle_t *h_ptr,
                                               UINT32 value )
{
    if (value > 2047)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_DBG_RADDR_set", value, 2047);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_DBG_RADDR_set", value );

    /* (0x00001304 bits 10:0) field DBG_RADDR of register PMC_ODU_RCP_REG_DBG_CTRL */
    ri_rcp_reg_DBG_CTRL_field_set( b_ptr,
                                   h_ptr,
                                   ODU_RCP_REG_DBG_CTRL_BIT_DBG_RADDR_MSK,
                                   ODU_RCP_REG_DBG_CTRL_BIT_DBG_RADDR_OFF,
                                   value);
}

static INLINE UINT32 ri_rcp_field_DBG_RADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_DBG_RADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001304 bits 10:0) field DBG_RADDR of register PMC_ODU_RCP_REG_DBG_CTRL */
    reg_value = ri_rcp_reg_DBG_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_DBG_CTRL_BIT_DBG_RADDR_MSK) >> ODU_RCP_REG_DBG_CTRL_BIT_DBG_RADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_DBG_RADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_DBG_RADDR_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_DBG_RADDR_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_DBG_RADDR_set", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_DBG_RADDR_set", stop_bit, 10 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_DBG_RADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001304 bits 10:0) field DBG_RADDR of register PMC_ODU_RCP_REG_DBG_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 10) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 10;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001304 bits 10:0) field DBG_RADDR of register PMC_ODU_RCP_REG_DBG_CTRL */
        ri_rcp_reg_DBG_CTRL_field_set( b_ptr,
                                       h_ptr,
                                       subfield_mask << (ODU_RCP_REG_DBG_CTRL_BIT_DBG_RADDR_OFF + subfield_offset),
                                       ODU_RCP_REG_DBG_CTRL_BIT_DBG_RADDR_OFF + subfield_offset,
                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_DBG_RADDR_get( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_DBG_RADDR_get( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_DBG_RADDR_get", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_DBG_RADDR_get", stop_bit, 10 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 10) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 10;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001304 bits 10:0) field DBG_RADDR of register PMC_ODU_RCP_REG_DBG_CTRL */
    reg_value = ri_rcp_reg_DBG_CTRL_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_DBG_CTRL_BIT_DBG_RADDR_MSK)
                  >> ODU_RCP_REG_DBG_CTRL_BIT_DBG_RADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_DBG_CTRL_BIT_DBG_RADDR_MSK, ODU_RCP_REG_DBG_CTRL_BIT_DBG_RADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_DBG_RADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_CFC_IRQ_SRC_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_CFC_IRQ_SRC_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_CFC_IRQ_SRC_SEL_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_CFC_IRQ_SRC_SEL_set", value );

    /* (0x00001320 bits 4) field REG_CFC_IRQ_SRC_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_SEL */
    ri_rcp_reg_CFC_IRQ_SEL_field_set( b_ptr,
                                      h_ptr,
                                      ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_SRC_SEL_MSK,
                                      ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_SRC_SEL_OFF,
                                      value);
}

static INLINE UINT32 ri_rcp_field_REG_CFC_IRQ_SRC_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_CFC_IRQ_SRC_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001320 bits 4) field REG_CFC_IRQ_SRC_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_SEL */
    reg_value = ri_rcp_reg_CFC_IRQ_SEL_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_SRC_SEL_MSK) >> ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_SRC_SEL_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_CFC_IRQ_SRC_SEL_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_CFC_IRQ_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_CFC_IRQ_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_CFC_IRQ_STG_SEL_set", value, 7);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_CFC_IRQ_STG_SEL_set", value );

    /* (0x00001320 bits 2:0) field REG_CFC_IRQ_STG_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_SEL */
    ri_rcp_reg_CFC_IRQ_SEL_field_set( b_ptr,
                                      h_ptr,
                                      ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_STG_SEL_MSK,
                                      ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_STG_SEL_OFF,
                                      value);
}

static INLINE UINT32 ri_rcp_field_REG_CFC_IRQ_STG_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_CFC_IRQ_STG_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001320 bits 2:0) field REG_CFC_IRQ_STG_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_SEL */
    reg_value = ri_rcp_reg_CFC_IRQ_SEL_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_STG_SEL_MSK) >> ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_STG_SEL_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_CFC_IRQ_STG_SEL_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_CFC_IRQ_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_CFC_IRQ_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_CFC_IRQ_STG_SEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_CFC_IRQ_STG_SEL_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_CFC_IRQ_STG_SEL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001320 bits 2:0) field REG_CFC_IRQ_STG_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_SEL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001320 bits 2:0) field REG_CFC_IRQ_STG_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_SEL */
        ri_rcp_reg_CFC_IRQ_SEL_field_set( b_ptr,
                                          h_ptr,
                                          subfield_mask << (ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_STG_SEL_OFF + subfield_offset),
                                          ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_STG_SEL_OFF + subfield_offset,
                                          value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_CFC_IRQ_STG_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_CFC_IRQ_STG_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_CFC_IRQ_STG_SEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_CFC_IRQ_STG_SEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001320 bits 2:0) field REG_CFC_IRQ_STG_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_SEL */
    reg_value = ri_rcp_reg_CFC_IRQ_SEL_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_STG_SEL_MSK)
                  >> ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_STG_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_STG_SEL_MSK, ODU_RCP_REG_CFC_IRQ_SEL_BIT_REG_CFC_IRQ_STG_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_CFC_IRQ_STG_SEL_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_REG_CFC_IRQ_TYPE_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_CFC_IRQ_TYPE_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_CFC_IRQ_TYPE_SEL_set", value[2] , value[1] , value[0] );

    /* (0x00001324 bits 31:0) bits 0:31 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0 */
    ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_field_set( b_ptr,
                                             h_ptr,
                                             ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0_BIT_REG_CFC_IRQ_TYPE_SEL_MSK,
                                             ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0_BIT_REG_CFC_IRQ_TYPE_SEL_OFF,
                                             value[0]);

    /* (0x00001328 bits 31:0) bits 32:63 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1 */
    ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_field_set( b_ptr,
                                             h_ptr,
                                             ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1_BIT_REG_CFC_IRQ_TYPE_SEL_MSK,
                                             ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1_BIT_REG_CFC_IRQ_TYPE_SEL_OFF,
                                             value[1]);

    /* (0x0000132c bits 31:0) bits 64:95 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2 */
    ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_field_set( b_ptr,
                                             h_ptr,
                                             ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2_BIT_REG_CFC_IRQ_TYPE_SEL_MSK,
                                             ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2_BIT_REG_CFC_IRQ_TYPE_SEL_OFF,
                                             value[2]);
}

static INLINE void ri_rcp_lfield_REG_CFC_IRQ_TYPE_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_REG_CFC_IRQ_TYPE_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00001324 bits 31:0) bits 0:31 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0 */
    reg_value = ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0_BIT_REG_CFC_IRQ_TYPE_SEL_MSK) >> ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0_BIT_REG_CFC_IRQ_TYPE_SEL_OFF;
    value[0] |= field_value;

    /* (0x00001328 bits 31:0) bits 32:63 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1 */
    reg_value = ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1_BIT_REG_CFC_IRQ_TYPE_SEL_MSK) >> ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1_BIT_REG_CFC_IRQ_TYPE_SEL_OFF;
    value[1] |= field_value;

    /* (0x0000132c bits 31:0) bits 64:95 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2 */
    reg_value = ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2_BIT_REG_CFC_IRQ_TYPE_SEL_MSK) >> ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2_BIT_REG_CFC_IRQ_TYPE_SEL_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_REG_CFC_IRQ_TYPE_SEL_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_REG_CFC_IRQ_TYPE_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_REG_CFC_IRQ_TYPE_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_CFC_IRQ_TYPE_SEL_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_CFC_IRQ_TYPE_SEL_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_CFC_IRQ_TYPE_SEL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001324 bits 31:0) bits 0:31 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001324 bits 31:0) bits 0:31 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0 */
        ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_field_set( b_ptr,
                                                 h_ptr,
                                                 subfield_mask << (ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0_BIT_REG_CFC_IRQ_TYPE_SEL_OFF + subfield_offset),
                                                 ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0_BIT_REG_CFC_IRQ_TYPE_SEL_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001328 bits 31:0) bits 32:63 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001328 bits 31:0) bits 32:63 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1 */
        ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_field_set( b_ptr,
                                                 h_ptr,
                                                 subfield_mask << (ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1_BIT_REG_CFC_IRQ_TYPE_SEL_OFF + subfield_offset),
                                                 ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1_BIT_REG_CFC_IRQ_TYPE_SEL_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000132c bits 31:0) bits 64:95 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000132c bits 31:0) bits 64:95 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2 */
        ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_field_set( b_ptr,
                                                 h_ptr,
                                                 subfield_mask << (ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2_BIT_REG_CFC_IRQ_TYPE_SEL_OFF + subfield_offset),
                                                 ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2_BIT_REG_CFC_IRQ_TYPE_SEL_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_REG_CFC_IRQ_TYPE_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_REG_CFC_IRQ_TYPE_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_REG_CFC_IRQ_TYPE_SEL_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_REG_CFC_IRQ_TYPE_SEL_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001324 bits 31:0) bits 0:31 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0 */
        reg_value = ri_rcp_reg_CFC_IRQ_TYPE_SEL_0_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0_BIT_REG_CFC_IRQ_TYPE_SEL_MSK)
                      >> ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0_BIT_REG_CFC_IRQ_TYPE_SEL_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0_BIT_REG_CFC_IRQ_TYPE_SEL_MSK, ODU_RCP_REG_CFC_IRQ_TYPE_SEL_0_BIT_REG_CFC_IRQ_TYPE_SEL_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001328 bits 31:0) bits 32:63 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1 */
        reg_value = ri_rcp_reg_CFC_IRQ_TYPE_SEL_1_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1_BIT_REG_CFC_IRQ_TYPE_SEL_MSK)
                      >> ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1_BIT_REG_CFC_IRQ_TYPE_SEL_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1_BIT_REG_CFC_IRQ_TYPE_SEL_MSK, ODU_RCP_REG_CFC_IRQ_TYPE_SEL_1_BIT_REG_CFC_IRQ_TYPE_SEL_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000132c bits 31:0) bits 64:95 use field REG_CFC_IRQ_TYPE_SEL of register PMC_ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2 */
        reg_value = ri_rcp_reg_CFC_IRQ_TYPE_SEL_2_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2_BIT_REG_CFC_IRQ_TYPE_SEL_MSK)
                      >> ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2_BIT_REG_CFC_IRQ_TYPE_SEL_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2_BIT_REG_CFC_IRQ_TYPE_SEL_MSK, ODU_RCP_REG_CFC_IRQ_TYPE_SEL_2_BIT_REG_CFC_IRQ_TYPE_SEL_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_REG_CFC_IRQ_TYPE_SEL_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_CFC_IPT_ERR_SRC_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_CFC_IPT_ERR_SRC_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_CFC_IPT_ERR_SRC_SEL_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_CFC_IPT_ERR_SRC_SEL_set", value );

    /* (0x00001340 bits 4) field REG_CFC_IPT_ERR_SRC_SEL of register PMC_ODU_RCP_REG_CFC_IPT_ERR_SEL */
    ri_rcp_reg_CFC_IPT_ERR_SEL_field_set( b_ptr,
                                          h_ptr,
                                          ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_SRC_SEL_MSK,
                                          ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_SRC_SEL_OFF,
                                          value);
}

static INLINE UINT32 ri_rcp_field_REG_CFC_IPT_ERR_SRC_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_CFC_IPT_ERR_SRC_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001340 bits 4) field REG_CFC_IPT_ERR_SRC_SEL of register PMC_ODU_RCP_REG_CFC_IPT_ERR_SEL */
    reg_value = ri_rcp_reg_CFC_IPT_ERR_SEL_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_SRC_SEL_MSK) >> ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_SRC_SEL_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_CFC_IPT_ERR_SRC_SEL_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_CFC_IPT_ERR_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_CFC_IPT_ERR_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_CFC_IPT_ERR_STG_SEL_set", value, 7);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_CFC_IPT_ERR_STG_SEL_set", value );

    /* (0x00001340 bits 2:0) field REG_CFC_IPT_ERR_STG_SEL of register PMC_ODU_RCP_REG_CFC_IPT_ERR_SEL */
    ri_rcp_reg_CFC_IPT_ERR_SEL_field_set( b_ptr,
                                          h_ptr,
                                          ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_STG_SEL_MSK,
                                          ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_STG_SEL_OFF,
                                          value);
}

static INLINE UINT32 ri_rcp_field_REG_CFC_IPT_ERR_STG_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_CFC_IPT_ERR_STG_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001340 bits 2:0) field REG_CFC_IPT_ERR_STG_SEL of register PMC_ODU_RCP_REG_CFC_IPT_ERR_SEL */
    reg_value = ri_rcp_reg_CFC_IPT_ERR_SEL_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_STG_SEL_MSK) >> ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_STG_SEL_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_CFC_IPT_ERR_STG_SEL_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_CFC_IPT_ERR_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_CFC_IPT_ERR_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_CFC_IPT_ERR_STG_SEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_CFC_IPT_ERR_STG_SEL_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_CFC_IPT_ERR_STG_SEL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001340 bits 2:0) field REG_CFC_IPT_ERR_STG_SEL of register PMC_ODU_RCP_REG_CFC_IPT_ERR_SEL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001340 bits 2:0) field REG_CFC_IPT_ERR_STG_SEL of register PMC_ODU_RCP_REG_CFC_IPT_ERR_SEL */
        ri_rcp_reg_CFC_IPT_ERR_SEL_field_set( b_ptr,
                                              h_ptr,
                                              subfield_mask << (ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_STG_SEL_OFF + subfield_offset),
                                              ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_STG_SEL_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_CFC_IPT_ERR_STG_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_CFC_IPT_ERR_STG_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_CFC_IPT_ERR_STG_SEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_CFC_IPT_ERR_STG_SEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001340 bits 2:0) field REG_CFC_IPT_ERR_STG_SEL of register PMC_ODU_RCP_REG_CFC_IPT_ERR_SEL */
    reg_value = ri_rcp_reg_CFC_IPT_ERR_SEL_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_STG_SEL_MSK)
                  >> ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_STG_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_STG_SEL_MSK, ODU_RCP_REG_CFC_IPT_ERR_SEL_BIT_REG_CFC_IPT_ERR_STG_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_CFC_IPT_ERR_STG_SEL_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_CFC_STATUS_SRC_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_CFC_STATUS_SRC_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_CFC_STATUS_SRC_SEL_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_CFC_STATUS_SRC_SEL_set", value );

    /* (0x000013c0 bits 4) field REG_CFC_STATUS_SRC_SEL of register PMC_ODU_RCP_REG_CFC_STATUS_SEL */
    ri_rcp_reg_CFC_STATUS_SEL_field_set( b_ptr,
                                         h_ptr,
                                         ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_SRC_SEL_MSK,
                                         ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_SRC_SEL_OFF,
                                         value);
}

static INLINE UINT32 ri_rcp_field_REG_CFC_STATUS_SRC_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_CFC_STATUS_SRC_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000013c0 bits 4) field REG_CFC_STATUS_SRC_SEL of register PMC_ODU_RCP_REG_CFC_STATUS_SEL */
    reg_value = ri_rcp_reg_CFC_STATUS_SEL_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_SRC_SEL_MSK) >> ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_SRC_SEL_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_CFC_STATUS_SRC_SEL_get", value );

    return value;
}
static INLINE void ri_rcp_field_REG_CFC_STATUS_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_CFC_STATUS_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_CFC_STATUS_STG_SEL_set", value, 7);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_CFC_STATUS_STG_SEL_set", value );

    /* (0x000013c0 bits 2:0) field REG_CFC_STATUS_STG_SEL of register PMC_ODU_RCP_REG_CFC_STATUS_SEL */
    ri_rcp_reg_CFC_STATUS_SEL_field_set( b_ptr,
                                         h_ptr,
                                         ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_STG_SEL_MSK,
                                         ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_STG_SEL_OFF,
                                         value);
}

static INLINE UINT32 ri_rcp_field_REG_CFC_STATUS_STG_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_CFC_STATUS_STG_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000013c0 bits 2:0) field REG_CFC_STATUS_STG_SEL of register PMC_ODU_RCP_REG_CFC_STATUS_SEL */
    reg_value = ri_rcp_reg_CFC_STATUS_SEL_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_STG_SEL_MSK) >> ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_STG_SEL_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_CFC_STATUS_STG_SEL_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_CFC_STATUS_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_CFC_STATUS_STG_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_CFC_STATUS_STG_SEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_CFC_STATUS_STG_SEL_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_CFC_STATUS_STG_SEL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000013c0 bits 2:0) field REG_CFC_STATUS_STG_SEL of register PMC_ODU_RCP_REG_CFC_STATUS_SEL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000013c0 bits 2:0) field REG_CFC_STATUS_STG_SEL of register PMC_ODU_RCP_REG_CFC_STATUS_SEL */
        ri_rcp_reg_CFC_STATUS_SEL_field_set( b_ptr,
                                             h_ptr,
                                             subfield_mask << (ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_STG_SEL_OFF + subfield_offset),
                                             ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_STG_SEL_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_CFC_STATUS_STG_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_CFC_STATUS_STG_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_CFC_STATUS_STG_SEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_CFC_STATUS_STG_SEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000013c0 bits 2:0) field REG_CFC_STATUS_STG_SEL of register PMC_ODU_RCP_REG_CFC_STATUS_SEL */
    reg_value = ri_rcp_reg_CFC_STATUS_SEL_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_STG_SEL_MSK)
                  >> ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_STG_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_STG_SEL_MSK, ODU_RCP_REG_CFC_STATUS_SEL_BIT_REG_CFC_STATUS_STG_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_CFC_STATUS_STG_SEL_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_1_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_1_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_1_FIFO_CLRB_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_1_FIFO_CLRB_set", value );

    /* (0x00001800 bits 11:0) bits 0:11 use field RX_STG_1_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0 */
    ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0_BIT_RX_STG_1_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0_BIT_RX_STG_1_FIFO_CLRB_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_1_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_1_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001800 bits 11:0) bits 0:11 use field RX_STG_1_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0_BIT_RX_STG_1_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0_BIT_RX_STG_1_FIFO_CLRB_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_1_FIFO_CLRB_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_1_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_1_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_1_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_1_FIFO_CLRB_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_1_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001800 bits 11:0) bits 0:11 use field RX_STG_1_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001800 bits 11:0) bits 0:11 use field RX_STG_1_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0 */
        ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0_BIT_RX_STG_1_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0_BIT_RX_STG_1_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_1_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_1_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_1_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_1_FIFO_CLRB_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001800 bits 11:0) bits 0:11 use field RX_STG_1_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_RX_STG_1_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0_BIT_RX_STG_1_FIFO_CLRB_MSK)
                  >> ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0_BIT_RX_STG_1_FIFO_CLRB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0_BIT_RX_STG_1_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_1_FIFO_CLRB_0_BIT_RX_STG_1_FIFO_CLRB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_1_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ID_set", value, 15);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00001820 bits 19:16) field RX_STG_1_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG */
    ri_rcp_reg_RX_STG_1_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ID_MSK,
                                           ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ID_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001820 bits 19:16) field RX_STG_1_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_CHG_ID_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001820 bits 19:16) field RX_STG_1_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001820 bits 19:16) field RX_STG_1_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG */
        ri_rcp_reg_RX_STG_1_CFC_CFG_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                               ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_CHG_ID_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001820 bits 19:16) field RX_STG_1_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_1_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_1_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_set", value, 31);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_set", value );

    /* (0x00001828 bits 4:0) field RX_STG_1_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL */
    ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL_BIT_RX_STG_1_CFC_END_ADDR_MSK,
                                               ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL_BIT_RX_STG_1_CFC_END_ADDR_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001828 bits 4:0) field RX_STG_1_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL_BIT_RX_STG_1_CFC_END_ADDR_MSK) >> ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL_BIT_RX_STG_1_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001828 bits 4:0) field RX_STG_1_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001828 bits 4:0) field RX_STG_1_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL */
        ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL_BIT_RX_STG_1_CFC_END_ADDR_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL_BIT_RX_STG_1_CFC_END_ADDR_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001828 bits 4:0) field RX_STG_1_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL_BIT_RX_STG_1_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL_BIT_RX_STG_1_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL_BIT_RX_STG_1_CFC_END_ADDR_MSK, ODU_RCP_REG_RX_STG_1_CFC_CFG_VAL_BIT_RX_STG_1_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_1_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_RX_STG_2_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_RX_STG_2_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_RX_STG_2_FIFO_CLRB_set", value[2] , value[1] , value[0] );

    /* (0x00001a00 bits 31:0) bits 0:31 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0 */
    ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0_BIT_RX_STG_2_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0_BIT_RX_STG_2_FIFO_CLRB_OFF,
                                               value[0]);

    /* (0x00001a04 bits 31:0) bits 32:63 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1 */
    ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1_BIT_RX_STG_2_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1_BIT_RX_STG_2_FIFO_CLRB_OFF,
                                               value[1]);

    /* (0x00001a08 bits 31:0) bits 64:95 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2 */
    ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2_BIT_RX_STG_2_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2_BIT_RX_STG_2_FIFO_CLRB_OFF,
                                               value[2]);
}

static INLINE void ri_rcp_lfield_RX_STG_2_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_RX_STG_2_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00001a00 bits 31:0) bits 0:31 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0_BIT_RX_STG_2_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0_BIT_RX_STG_2_FIFO_CLRB_OFF;
    value[0] |= field_value;

    /* (0x00001a04 bits 31:0) bits 32:63 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1 */
    reg_value = ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1_BIT_RX_STG_2_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1_BIT_RX_STG_2_FIFO_CLRB_OFF;
    value[1] |= field_value;

    /* (0x00001a08 bits 31:0) bits 64:95 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2 */
    reg_value = ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2_BIT_RX_STG_2_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2_BIT_RX_STG_2_FIFO_CLRB_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_RX_STG_2_FIFO_CLRB_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_RX_STG_2_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_RX_STG_2_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_RX_STG_2_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_RX_STG_2_FIFO_CLRB_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_RX_STG_2_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001a00 bits 31:0) bits 0:31 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001a00 bits 31:0) bits 0:31 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0 */
        ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0_BIT_RX_STG_2_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0_BIT_RX_STG_2_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001a04 bits 31:0) bits 32:63 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001a04 bits 31:0) bits 32:63 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1 */
        ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1_BIT_RX_STG_2_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1_BIT_RX_STG_2_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001a08 bits 31:0) bits 64:95 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001a08 bits 31:0) bits 64:95 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2 */
        ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2_BIT_RX_STG_2_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2_BIT_RX_STG_2_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_RX_STG_2_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_RX_STG_2_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_RX_STG_2_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_RX_STG_2_FIFO_CLRB_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001a00 bits 31:0) bits 0:31 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0 */
        reg_value = ri_rcp_reg_RX_STG_2_FIFO_CLRB_0_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0_BIT_RX_STG_2_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0_BIT_RX_STG_2_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0_BIT_RX_STG_2_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_2_FIFO_CLRB_0_BIT_RX_STG_2_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001a04 bits 31:0) bits 32:63 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1 */
        reg_value = ri_rcp_reg_RX_STG_2_FIFO_CLRB_1_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1_BIT_RX_STG_2_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1_BIT_RX_STG_2_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1_BIT_RX_STG_2_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_2_FIFO_CLRB_1_BIT_RX_STG_2_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001a08 bits 31:0) bits 64:95 use field RX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2 */
        reg_value = ri_rcp_reg_RX_STG_2_FIFO_CLRB_2_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2_BIT_RX_STG_2_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2_BIT_RX_STG_2_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2_BIT_RX_STG_2_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_2_FIFO_CLRB_2_BIT_RX_STG_2_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_RX_STG_2_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ID_set", value, 127);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00001a20 bits 22:16) field RX_STG_2_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG */
    ri_rcp_reg_RX_STG_2_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ID_MSK,
                                           ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ID_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001a20 bits 22:16) field RX_STG_2_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_CHG_ID_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001a20 bits 22:16) field RX_STG_2_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001a20 bits 22:16) field RX_STG_2_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG */
        ri_rcp_reg_RX_STG_2_CFC_CFG_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                               ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_CHG_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001a20 bits 22:16) field RX_STG_2_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_2_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_2_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_set", value, 255);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_set", value );

    /* (0x00001a28 bits 7:0) field RX_STG_2_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL */
    ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL_BIT_RX_STG_2_CFC_END_ADDR_MSK,
                                               ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL_BIT_RX_STG_2_CFC_END_ADDR_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001a28 bits 7:0) field RX_STG_2_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL_BIT_RX_STG_2_CFC_END_ADDR_MSK) >> ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL_BIT_RX_STG_2_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001a28 bits 7:0) field RX_STG_2_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001a28 bits 7:0) field RX_STG_2_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL */
        ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL_BIT_RX_STG_2_CFC_END_ADDR_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL_BIT_RX_STG_2_CFC_END_ADDR_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001a28 bits 7:0) field RX_STG_2_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL_BIT_RX_STG_2_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL_BIT_RX_STG_2_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL_BIT_RX_STG_2_CFC_END_ADDR_MSK, ODU_RCP_REG_RX_STG_2_CFC_CFG_VAL_BIT_RX_STG_2_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_2_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_RX_STG_3A_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_RX_STG_3A_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_RX_STG_3A_FIFO_CLRB_set", value[2] , value[1] , value[0] );

    /* (0x00001c00 bits 31:0) bits 0:31 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0 */
    ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0_BIT_RX_STG_3A_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0_BIT_RX_STG_3A_FIFO_CLRB_OFF,
                                                value[0]);

    /* (0x00001c04 bits 31:0) bits 32:63 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1 */
    ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1_BIT_RX_STG_3A_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1_BIT_RX_STG_3A_FIFO_CLRB_OFF,
                                                value[1]);

    /* (0x00001c08 bits 31:0) bits 64:95 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2 */
    ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2_BIT_RX_STG_3A_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2_BIT_RX_STG_3A_FIFO_CLRB_OFF,
                                                value[2]);
}

static INLINE void ri_rcp_lfield_RX_STG_3A_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_RX_STG_3A_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00001c00 bits 31:0) bits 0:31 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0_BIT_RX_STG_3A_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0_BIT_RX_STG_3A_FIFO_CLRB_OFF;
    value[0] |= field_value;

    /* (0x00001c04 bits 31:0) bits 32:63 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1 */
    reg_value = ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1_BIT_RX_STG_3A_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1_BIT_RX_STG_3A_FIFO_CLRB_OFF;
    value[1] |= field_value;

    /* (0x00001c08 bits 31:0) bits 64:95 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2 */
    reg_value = ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2_BIT_RX_STG_3A_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2_BIT_RX_STG_3A_FIFO_CLRB_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_RX_STG_3A_FIFO_CLRB_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_RX_STG_3A_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_RX_STG_3A_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_RX_STG_3A_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_RX_STG_3A_FIFO_CLRB_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_RX_STG_3A_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001c00 bits 31:0) bits 0:31 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001c00 bits 31:0) bits 0:31 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0 */
        ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0_BIT_RX_STG_3A_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0_BIT_RX_STG_3A_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001c04 bits 31:0) bits 32:63 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001c04 bits 31:0) bits 32:63 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1 */
        ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1_BIT_RX_STG_3A_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1_BIT_RX_STG_3A_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001c08 bits 31:0) bits 64:95 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001c08 bits 31:0) bits 64:95 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2 */
        ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2_BIT_RX_STG_3A_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2_BIT_RX_STG_3A_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_RX_STG_3A_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_RX_STG_3A_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_RX_STG_3A_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_RX_STG_3A_FIFO_CLRB_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001c00 bits 31:0) bits 0:31 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0 */
        reg_value = ri_rcp_reg_RX_STG_3A_FIFO_CLRB_0_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0_BIT_RX_STG_3A_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0_BIT_RX_STG_3A_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0_BIT_RX_STG_3A_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_0_BIT_RX_STG_3A_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001c04 bits 31:0) bits 32:63 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1 */
        reg_value = ri_rcp_reg_RX_STG_3A_FIFO_CLRB_1_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1_BIT_RX_STG_3A_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1_BIT_RX_STG_3A_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1_BIT_RX_STG_3A_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_1_BIT_RX_STG_3A_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001c08 bits 31:0) bits 64:95 use field RX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2 */
        reg_value = ri_rcp_reg_RX_STG_3A_FIFO_CLRB_2_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2_BIT_RX_STG_3A_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2_BIT_RX_STG_3A_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2_BIT_RX_STG_3A_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_3A_FIFO_CLRB_2_BIT_RX_STG_3A_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_RX_STG_3A_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ID_set", value, 127);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00001c20 bits 22:16) field RX_STG_3A_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG */
    ri_rcp_reg_RX_STG_3A_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ID_MSK,
                                            ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ID_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001c20 bits 22:16) field RX_STG_3A_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                         odu_rcp_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                         odu_rcp_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_CHG_ID_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001c20 bits 22:16) field RX_STG_3A_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001c20 bits 22:16) field RX_STG_3A_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG */
        ri_rcp_reg_RX_STG_3A_CFC_CFG_field_set( b_ptr,
                                                h_ptr,
                                                subfield_mask << (ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                                ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                           odu_rcp_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                           odu_rcp_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_CHG_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001c20 bits 22:16) field RX_STG_3A_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3A_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3A_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_set", value, 255);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_set", value );

    /* (0x00001c28 bits 7:0) field RX_STG_3A_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL */
    ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL_BIT_RX_STG_3A_CFC_END_ADDR_MSK,
                                                ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL_BIT_RX_STG_3A_CFC_END_ADDR_OFF,
                                                value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001c28 bits 7:0) field RX_STG_3A_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL_BIT_RX_STG_3A_CFC_END_ADDR_MSK) >> ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL_BIT_RX_STG_3A_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001c28 bits 7:0) field RX_STG_3A_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001c28 bits 7:0) field RX_STG_3A_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL */
        ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL_BIT_RX_STG_3A_CFC_END_ADDR_OFF + subfield_offset),
                                                    ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL_BIT_RX_STG_3A_CFC_END_ADDR_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001c28 bits 7:0) field RX_STG_3A_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_CFG_VAL_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL_BIT_RX_STG_3A_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL_BIT_RX_STG_3A_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL_BIT_RX_STG_3A_CFC_END_ADDR_MSK, ODU_RCP_REG_RX_STG_3A_CFC_CFG_VAL_BIT_RX_STG_3A_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3A_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_RX_STG_3B_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_RX_STG_3B_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_RX_STG_3B_FIFO_CLRB_set", value[2] , value[1] , value[0] );

    /* (0x00001e00 bits 31:0) bits 0:31 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0 */
    ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0_BIT_RX_STG_3B_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0_BIT_RX_STG_3B_FIFO_CLRB_OFF,
                                                value[0]);

    /* (0x00001e04 bits 31:0) bits 32:63 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1 */
    ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1_BIT_RX_STG_3B_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1_BIT_RX_STG_3B_FIFO_CLRB_OFF,
                                                value[1]);

    /* (0x00001e08 bits 31:0) bits 64:95 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2 */
    ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2_BIT_RX_STG_3B_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2_BIT_RX_STG_3B_FIFO_CLRB_OFF,
                                                value[2]);
}

static INLINE void ri_rcp_lfield_RX_STG_3B_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_RX_STG_3B_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00001e00 bits 31:0) bits 0:31 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0_BIT_RX_STG_3B_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0_BIT_RX_STG_3B_FIFO_CLRB_OFF;
    value[0] |= field_value;

    /* (0x00001e04 bits 31:0) bits 32:63 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1 */
    reg_value = ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1_BIT_RX_STG_3B_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1_BIT_RX_STG_3B_FIFO_CLRB_OFF;
    value[1] |= field_value;

    /* (0x00001e08 bits 31:0) bits 64:95 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2 */
    reg_value = ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2_BIT_RX_STG_3B_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2_BIT_RX_STG_3B_FIFO_CLRB_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_RX_STG_3B_FIFO_CLRB_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_RX_STG_3B_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_RX_STG_3B_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_RX_STG_3B_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_RX_STG_3B_FIFO_CLRB_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_RX_STG_3B_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001e00 bits 31:0) bits 0:31 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001e00 bits 31:0) bits 0:31 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0 */
        ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0_BIT_RX_STG_3B_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0_BIT_RX_STG_3B_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001e04 bits 31:0) bits 32:63 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001e04 bits 31:0) bits 32:63 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1 */
        ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1_BIT_RX_STG_3B_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1_BIT_RX_STG_3B_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001e08 bits 31:0) bits 64:95 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001e08 bits 31:0) bits 64:95 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2 */
        ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2_BIT_RX_STG_3B_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2_BIT_RX_STG_3B_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_RX_STG_3B_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_RX_STG_3B_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_RX_STG_3B_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_RX_STG_3B_FIFO_CLRB_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001e00 bits 31:0) bits 0:31 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0 */
        reg_value = ri_rcp_reg_RX_STG_3B_FIFO_CLRB_0_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0_BIT_RX_STG_3B_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0_BIT_RX_STG_3B_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0_BIT_RX_STG_3B_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_0_BIT_RX_STG_3B_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001e04 bits 31:0) bits 32:63 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1 */
        reg_value = ri_rcp_reg_RX_STG_3B_FIFO_CLRB_1_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1_BIT_RX_STG_3B_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1_BIT_RX_STG_3B_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1_BIT_RX_STG_3B_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_1_BIT_RX_STG_3B_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001e08 bits 31:0) bits 64:95 use field RX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2 */
        reg_value = ri_rcp_reg_RX_STG_3B_FIFO_CLRB_2_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2_BIT_RX_STG_3B_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2_BIT_RX_STG_3B_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2_BIT_RX_STG_3B_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_3B_FIFO_CLRB_2_BIT_RX_STG_3B_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_RX_STG_3B_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ID_set", value, 127);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00001e20 bits 22:16) field RX_STG_3B_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG */
    ri_rcp_reg_RX_STG_3B_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ID_MSK,
                                            ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ID_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001e20 bits 22:16) field RX_STG_3B_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                         odu_rcp_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                         odu_rcp_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_CHG_ID_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001e20 bits 22:16) field RX_STG_3B_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001e20 bits 22:16) field RX_STG_3B_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG */
        ri_rcp_reg_RX_STG_3B_CFC_CFG_field_set( b_ptr,
                                                h_ptr,
                                                subfield_mask << (ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                                ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                           odu_rcp_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                           odu_rcp_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_CHG_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001e20 bits 22:16) field RX_STG_3B_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3B_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3B_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_set", value, 255);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_set", value );

    /* (0x00001e28 bits 7:0) field RX_STG_3B_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL */
    ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL_BIT_RX_STG_3B_CFC_END_ADDR_MSK,
                                                ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL_BIT_RX_STG_3B_CFC_END_ADDR_OFF,
                                                value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001e28 bits 7:0) field RX_STG_3B_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL_BIT_RX_STG_3B_CFC_END_ADDR_MSK) >> ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL_BIT_RX_STG_3B_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001e28 bits 7:0) field RX_STG_3B_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001e28 bits 7:0) field RX_STG_3B_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL */
        ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL_BIT_RX_STG_3B_CFC_END_ADDR_OFF + subfield_offset),
                                                    ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL_BIT_RX_STG_3B_CFC_END_ADDR_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001e28 bits 7:0) field RX_STG_3B_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_CFG_VAL_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL_BIT_RX_STG_3B_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL_BIT_RX_STG_3B_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL_BIT_RX_STG_3B_CFC_END_ADDR_MSK, ODU_RCP_REG_RX_STG_3B_CFC_CFG_VAL_BIT_RX_STG_3B_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3B_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_RX_STG_4_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_RX_STG_4_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_RX_STG_4_FIFO_CLRB_set", value[2] , value[1] , value[0] );

    /* (0x00002000 bits 31:0) bits 0:31 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0 */
    ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0_BIT_RX_STG_4_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0_BIT_RX_STG_4_FIFO_CLRB_OFF,
                                               value[0]);

    /* (0x00002004 bits 31:0) bits 32:63 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1 */
    ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1_BIT_RX_STG_4_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1_BIT_RX_STG_4_FIFO_CLRB_OFF,
                                               value[1]);

    /* (0x00002008 bits 31:0) bits 64:95 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2 */
    ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2_BIT_RX_STG_4_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2_BIT_RX_STG_4_FIFO_CLRB_OFF,
                                               value[2]);
}

static INLINE void ri_rcp_lfield_RX_STG_4_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_RX_STG_4_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00002000 bits 31:0) bits 0:31 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0_BIT_RX_STG_4_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0_BIT_RX_STG_4_FIFO_CLRB_OFF;
    value[0] |= field_value;

    /* (0x00002004 bits 31:0) bits 32:63 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1 */
    reg_value = ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1_BIT_RX_STG_4_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1_BIT_RX_STG_4_FIFO_CLRB_OFF;
    value[1] |= field_value;

    /* (0x00002008 bits 31:0) bits 64:95 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2 */
    reg_value = ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2_BIT_RX_STG_4_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2_BIT_RX_STG_4_FIFO_CLRB_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_RX_STG_4_FIFO_CLRB_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_RX_STG_4_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_RX_STG_4_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_RX_STG_4_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_RX_STG_4_FIFO_CLRB_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_RX_STG_4_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002000 bits 31:0) bits 0:31 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002000 bits 31:0) bits 0:31 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0 */
        ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0_BIT_RX_STG_4_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0_BIT_RX_STG_4_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002004 bits 31:0) bits 32:63 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002004 bits 31:0) bits 32:63 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1 */
        ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1_BIT_RX_STG_4_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1_BIT_RX_STG_4_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002008 bits 31:0) bits 64:95 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002008 bits 31:0) bits 64:95 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2 */
        ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2_BIT_RX_STG_4_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2_BIT_RX_STG_4_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_RX_STG_4_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_RX_STG_4_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_RX_STG_4_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_RX_STG_4_FIFO_CLRB_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002000 bits 31:0) bits 0:31 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0 */
        reg_value = ri_rcp_reg_RX_STG_4_FIFO_CLRB_0_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0_BIT_RX_STG_4_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0_BIT_RX_STG_4_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0_BIT_RX_STG_4_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_4_FIFO_CLRB_0_BIT_RX_STG_4_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002004 bits 31:0) bits 32:63 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1 */
        reg_value = ri_rcp_reg_RX_STG_4_FIFO_CLRB_1_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1_BIT_RX_STG_4_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1_BIT_RX_STG_4_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1_BIT_RX_STG_4_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_4_FIFO_CLRB_1_BIT_RX_STG_4_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002008 bits 31:0) bits 64:95 use field RX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2 */
        reg_value = ri_rcp_reg_RX_STG_4_FIFO_CLRB_2_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2_BIT_RX_STG_4_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2_BIT_RX_STG_4_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2_BIT_RX_STG_4_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_4_FIFO_CLRB_2_BIT_RX_STG_4_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_RX_STG_4_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ID_set", value, 127);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00002020 bits 22:16) field RX_STG_4_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG */
    ri_rcp_reg_RX_STG_4_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ID_MSK,
                                           ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ID_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002020 bits 22:16) field RX_STG_4_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_CHG_ID_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002020 bits 22:16) field RX_STG_4_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002020 bits 22:16) field RX_STG_4_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG */
        ri_rcp_reg_RX_STG_4_CFC_CFG_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                               ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_CHG_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002020 bits 22:16) field RX_STG_4_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_4_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_4_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_set", value, 255);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_set", value );

    /* (0x00002028 bits 7:0) field RX_STG_4_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL */
    ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL_BIT_RX_STG_4_CFC_END_ADDR_MSK,
                                               ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL_BIT_RX_STG_4_CFC_END_ADDR_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002028 bits 7:0) field RX_STG_4_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL_BIT_RX_STG_4_CFC_END_ADDR_MSK) >> ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL_BIT_RX_STG_4_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002028 bits 7:0) field RX_STG_4_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002028 bits 7:0) field RX_STG_4_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL */
        ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL_BIT_RX_STG_4_CFC_END_ADDR_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL_BIT_RX_STG_4_CFC_END_ADDR_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002028 bits 7:0) field RX_STG_4_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL_BIT_RX_STG_4_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL_BIT_RX_STG_4_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL_BIT_RX_STG_4_CFC_END_ADDR_MSK, ODU_RCP_REG_RX_STG_4_CFC_CFG_VAL_BIT_RX_STG_4_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_4_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_N_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_N_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_N_FIFO_CLRB_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_N_FIFO_CLRB_set", value );

    /* (0x00002200 bits 11:0) bits 0:11 use field RX_STG_N_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0 */
    ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0_BIT_RX_STG_N_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0_BIT_RX_STG_N_FIFO_CLRB_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_N_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_N_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002200 bits 11:0) bits 0:11 use field RX_STG_N_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0_BIT_RX_STG_N_FIFO_CLRB_MSK) >> ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0_BIT_RX_STG_N_FIFO_CLRB_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_N_FIFO_CLRB_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_N_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_N_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_N_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_N_FIFO_CLRB_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_N_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002200 bits 11:0) bits 0:11 use field RX_STG_N_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002200 bits 11:0) bits 0:11 use field RX_STG_N_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0 */
        ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0_BIT_RX_STG_N_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0_BIT_RX_STG_N_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_N_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_N_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_N_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_N_FIFO_CLRB_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002200 bits 11:0) bits 0:11 use field RX_STG_N_FIFO_CLRB of register PMC_ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_RX_STG_N_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0_BIT_RX_STG_N_FIFO_CLRB_MSK)
                  >> ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0_BIT_RX_STG_N_FIFO_CLRB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0_BIT_RX_STG_N_FIFO_CLRB_MSK, ODU_RCP_REG_RX_STG_N_FIFO_CLRB_0_BIT_RX_STG_N_FIFO_CLRB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_N_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ID_set", value, 15);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00002220 bits 19:16) field RX_STG_N_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG */
    ri_rcp_reg_RX_STG_N_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ID_MSK,
                                           ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ID_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002220 bits 19:16) field RX_STG_N_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_CHG_ID_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002220 bits 19:16) field RX_STG_N_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002220 bits 19:16) field RX_STG_N_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG */
        ri_rcp_reg_RX_STG_N_CFC_CFG_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                               ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_CHG_ID_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002220 bits 19:16) field RX_STG_N_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_N_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_N_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_set", value, 31);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_set", value );

    /* (0x00002228 bits 4:0) field RX_STG_N_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL */
    ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL_BIT_RX_STG_N_CFC_END_ADDR_MSK,
                                               ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL_BIT_RX_STG_N_CFC_END_ADDR_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002228 bits 4:0) field RX_STG_N_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL_BIT_RX_STG_N_CFC_END_ADDR_MSK) >> ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL_BIT_RX_STG_N_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002228 bits 4:0) field RX_STG_N_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002228 bits 4:0) field RX_STG_N_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL */
        ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL_BIT_RX_STG_N_CFC_END_ADDR_OFF + subfield_offset),
                                                   ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL_BIT_RX_STG_N_CFC_END_ADDR_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002228 bits 4:0) field RX_STG_N_CFC_END_ADDR of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL_BIT_RX_STG_N_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL_BIT_RX_STG_N_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL_BIT_RX_STG_N_CFC_END_ADDR_MSK, ODU_RCP_REG_RX_STG_N_CFC_CFG_VAL_BIT_RX_STG_N_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_N_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_1_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_1_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_1_FIFO_CLRB_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_1_FIFO_CLRB_set", value );

    /* (0x00002400 bits 11:0) bits 0:11 use field TX_STG_1_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0 */
    ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0_BIT_TX_STG_1_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0_BIT_TX_STG_1_FIFO_CLRB_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_1_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_1_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002400 bits 11:0) bits 0:11 use field TX_STG_1_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0_BIT_TX_STG_1_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0_BIT_TX_STG_1_FIFO_CLRB_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_1_FIFO_CLRB_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_1_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_1_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_1_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_1_FIFO_CLRB_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_1_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002400 bits 11:0) bits 0:11 use field TX_STG_1_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002400 bits 11:0) bits 0:11 use field TX_STG_1_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0 */
        ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0_BIT_TX_STG_1_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0_BIT_TX_STG_1_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_1_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_1_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_1_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_1_FIFO_CLRB_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002400 bits 11:0) bits 0:11 use field TX_STG_1_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_TX_STG_1_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0_BIT_TX_STG_1_FIFO_CLRB_MSK)
                  >> ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0_BIT_TX_STG_1_FIFO_CLRB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0_BIT_TX_STG_1_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_1_FIFO_CLRB_0_BIT_TX_STG_1_FIFO_CLRB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_1_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ID_set", value, 15);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00002420 bits 19:16) field TX_STG_1_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG */
    ri_rcp_reg_TX_STG_1_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ID_MSK,
                                           ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ID_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002420 bits 19:16) field TX_STG_1_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_CHG_ID_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002420 bits 19:16) field TX_STG_1_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002420 bits 19:16) field TX_STG_1_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG */
        ri_rcp_reg_TX_STG_1_CFC_CFG_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                               ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_CHG_ID_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002420 bits 19:16) field TX_STG_1_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_1_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_1_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_set", value, 31);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_set", value );

    /* (0x00002428 bits 4:0) field TX_STG_1_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL */
    ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL_BIT_TX_STG_1_CFC_END_ADDR_MSK,
                                               ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL_BIT_TX_STG_1_CFC_END_ADDR_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002428 bits 4:0) field TX_STG_1_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL_BIT_TX_STG_1_CFC_END_ADDR_MSK) >> ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL_BIT_TX_STG_1_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002428 bits 4:0) field TX_STG_1_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002428 bits 4:0) field TX_STG_1_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL */
        ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL_BIT_TX_STG_1_CFC_END_ADDR_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL_BIT_TX_STG_1_CFC_END_ADDR_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002428 bits 4:0) field TX_STG_1_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL_BIT_TX_STG_1_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL_BIT_TX_STG_1_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL_BIT_TX_STG_1_CFC_END_ADDR_MSK, ODU_RCP_REG_TX_STG_1_CFC_CFG_VAL_BIT_TX_STG_1_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_1_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_TX_STG_2_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_TX_STG_2_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_TX_STG_2_FIFO_CLRB_set", value[2] , value[1] , value[0] );

    /* (0x00002600 bits 31:0) bits 0:31 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0 */
    ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0_BIT_TX_STG_2_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0_BIT_TX_STG_2_FIFO_CLRB_OFF,
                                               value[0]);

    /* (0x00002604 bits 31:0) bits 32:63 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1 */
    ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1_BIT_TX_STG_2_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1_BIT_TX_STG_2_FIFO_CLRB_OFF,
                                               value[1]);

    /* (0x00002608 bits 31:0) bits 64:95 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2 */
    ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2_BIT_TX_STG_2_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2_BIT_TX_STG_2_FIFO_CLRB_OFF,
                                               value[2]);
}

static INLINE void ri_rcp_lfield_TX_STG_2_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_TX_STG_2_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00002600 bits 31:0) bits 0:31 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0_BIT_TX_STG_2_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0_BIT_TX_STG_2_FIFO_CLRB_OFF;
    value[0] |= field_value;

    /* (0x00002604 bits 31:0) bits 32:63 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1 */
    reg_value = ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1_BIT_TX_STG_2_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1_BIT_TX_STG_2_FIFO_CLRB_OFF;
    value[1] |= field_value;

    /* (0x00002608 bits 31:0) bits 64:95 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2 */
    reg_value = ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2_BIT_TX_STG_2_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2_BIT_TX_STG_2_FIFO_CLRB_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_TX_STG_2_FIFO_CLRB_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_TX_STG_2_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_TX_STG_2_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_TX_STG_2_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_TX_STG_2_FIFO_CLRB_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_TX_STG_2_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002600 bits 31:0) bits 0:31 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002600 bits 31:0) bits 0:31 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0 */
        ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0_BIT_TX_STG_2_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0_BIT_TX_STG_2_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002604 bits 31:0) bits 32:63 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002604 bits 31:0) bits 32:63 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1 */
        ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1_BIT_TX_STG_2_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1_BIT_TX_STG_2_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002608 bits 31:0) bits 64:95 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002608 bits 31:0) bits 64:95 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2 */
        ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2_BIT_TX_STG_2_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2_BIT_TX_STG_2_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_TX_STG_2_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_TX_STG_2_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_TX_STG_2_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_TX_STG_2_FIFO_CLRB_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002600 bits 31:0) bits 0:31 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0 */
        reg_value = ri_rcp_reg_TX_STG_2_FIFO_CLRB_0_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0_BIT_TX_STG_2_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0_BIT_TX_STG_2_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0_BIT_TX_STG_2_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_2_FIFO_CLRB_0_BIT_TX_STG_2_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002604 bits 31:0) bits 32:63 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1 */
        reg_value = ri_rcp_reg_TX_STG_2_FIFO_CLRB_1_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1_BIT_TX_STG_2_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1_BIT_TX_STG_2_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1_BIT_TX_STG_2_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_2_FIFO_CLRB_1_BIT_TX_STG_2_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002608 bits 31:0) bits 64:95 use field TX_STG_2_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2 */
        reg_value = ri_rcp_reg_TX_STG_2_FIFO_CLRB_2_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2_BIT_TX_STG_2_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2_BIT_TX_STG_2_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2_BIT_TX_STG_2_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_2_FIFO_CLRB_2_BIT_TX_STG_2_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_TX_STG_2_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ID_set", value, 127);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00002620 bits 22:16) field TX_STG_2_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG */
    ri_rcp_reg_TX_STG_2_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ID_MSK,
                                           ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ID_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002620 bits 22:16) field TX_STG_2_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_CHG_ID_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002620 bits 22:16) field TX_STG_2_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002620 bits 22:16) field TX_STG_2_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG */
        ri_rcp_reg_TX_STG_2_CFC_CFG_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                               ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_CHG_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002620 bits 22:16) field TX_STG_2_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_2_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_2_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_set", value, 255);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_set", value );

    /* (0x00002628 bits 7:0) field TX_STG_2_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL */
    ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL_BIT_TX_STG_2_CFC_END_ADDR_MSK,
                                               ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL_BIT_TX_STG_2_CFC_END_ADDR_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002628 bits 7:0) field TX_STG_2_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL_BIT_TX_STG_2_CFC_END_ADDR_MSK) >> ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL_BIT_TX_STG_2_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002628 bits 7:0) field TX_STG_2_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002628 bits 7:0) field TX_STG_2_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL */
        ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL_BIT_TX_STG_2_CFC_END_ADDR_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL_BIT_TX_STG_2_CFC_END_ADDR_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002628 bits 7:0) field TX_STG_2_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL_BIT_TX_STG_2_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL_BIT_TX_STG_2_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL_BIT_TX_STG_2_CFC_END_ADDR_MSK, ODU_RCP_REG_TX_STG_2_CFC_CFG_VAL_BIT_TX_STG_2_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_2_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_TX_STG_3A_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_TX_STG_3A_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_TX_STG_3A_FIFO_CLRB_set", value[2] , value[1] , value[0] );

    /* (0x00002800 bits 31:0) bits 0:31 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0 */
    ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0_BIT_TX_STG_3A_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0_BIT_TX_STG_3A_FIFO_CLRB_OFF,
                                                value[0]);

    /* (0x00002804 bits 31:0) bits 32:63 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1 */
    ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1_BIT_TX_STG_3A_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1_BIT_TX_STG_3A_FIFO_CLRB_OFF,
                                                value[1]);

    /* (0x00002808 bits 31:0) bits 64:95 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2 */
    ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2_BIT_TX_STG_3A_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2_BIT_TX_STG_3A_FIFO_CLRB_OFF,
                                                value[2]);
}

static INLINE void ri_rcp_lfield_TX_STG_3A_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_TX_STG_3A_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00002800 bits 31:0) bits 0:31 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0_BIT_TX_STG_3A_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0_BIT_TX_STG_3A_FIFO_CLRB_OFF;
    value[0] |= field_value;

    /* (0x00002804 bits 31:0) bits 32:63 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1 */
    reg_value = ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1_BIT_TX_STG_3A_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1_BIT_TX_STG_3A_FIFO_CLRB_OFF;
    value[1] |= field_value;

    /* (0x00002808 bits 31:0) bits 64:95 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2 */
    reg_value = ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2_BIT_TX_STG_3A_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2_BIT_TX_STG_3A_FIFO_CLRB_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_TX_STG_3A_FIFO_CLRB_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_TX_STG_3A_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_TX_STG_3A_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_TX_STG_3A_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_TX_STG_3A_FIFO_CLRB_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_TX_STG_3A_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002800 bits 31:0) bits 0:31 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002800 bits 31:0) bits 0:31 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0 */
        ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0_BIT_TX_STG_3A_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0_BIT_TX_STG_3A_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002804 bits 31:0) bits 32:63 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002804 bits 31:0) bits 32:63 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1 */
        ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1_BIT_TX_STG_3A_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1_BIT_TX_STG_3A_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002808 bits 31:0) bits 64:95 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002808 bits 31:0) bits 64:95 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2 */
        ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2_BIT_TX_STG_3A_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2_BIT_TX_STG_3A_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_TX_STG_3A_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_TX_STG_3A_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_TX_STG_3A_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_TX_STG_3A_FIFO_CLRB_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002800 bits 31:0) bits 0:31 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0 */
        reg_value = ri_rcp_reg_TX_STG_3A_FIFO_CLRB_0_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0_BIT_TX_STG_3A_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0_BIT_TX_STG_3A_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0_BIT_TX_STG_3A_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_0_BIT_TX_STG_3A_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002804 bits 31:0) bits 32:63 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1 */
        reg_value = ri_rcp_reg_TX_STG_3A_FIFO_CLRB_1_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1_BIT_TX_STG_3A_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1_BIT_TX_STG_3A_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1_BIT_TX_STG_3A_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_1_BIT_TX_STG_3A_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002808 bits 31:0) bits 64:95 use field TX_STG_3A_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2 */
        reg_value = ri_rcp_reg_TX_STG_3A_FIFO_CLRB_2_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2_BIT_TX_STG_3A_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2_BIT_TX_STG_3A_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2_BIT_TX_STG_3A_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_3A_FIFO_CLRB_2_BIT_TX_STG_3A_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_TX_STG_3A_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ID_set", value, 127);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00002820 bits 22:16) field TX_STG_3A_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG */
    ri_rcp_reg_TX_STG_3A_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ID_MSK,
                                            ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ID_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002820 bits 22:16) field TX_STG_3A_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                         odu_rcp_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                         odu_rcp_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_CHG_ID_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002820 bits 22:16) field TX_STG_3A_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002820 bits 22:16) field TX_STG_3A_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG */
        ri_rcp_reg_TX_STG_3A_CFC_CFG_field_set( b_ptr,
                                                h_ptr,
                                                subfield_mask << (ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                                ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                           odu_rcp_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                           odu_rcp_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_CHG_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002820 bits 22:16) field TX_STG_3A_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3A_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3A_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_set", value, 255);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_set", value );

    /* (0x00002828 bits 7:0) field TX_STG_3A_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL */
    ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL_BIT_TX_STG_3A_CFC_END_ADDR_MSK,
                                                ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL_BIT_TX_STG_3A_CFC_END_ADDR_OFF,
                                                value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002828 bits 7:0) field TX_STG_3A_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL_BIT_TX_STG_3A_CFC_END_ADDR_MSK) >> ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL_BIT_TX_STG_3A_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002828 bits 7:0) field TX_STG_3A_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002828 bits 7:0) field TX_STG_3A_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL */
        ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL_BIT_TX_STG_3A_CFC_END_ADDR_OFF + subfield_offset),
                                                    ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL_BIT_TX_STG_3A_CFC_END_ADDR_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002828 bits 7:0) field TX_STG_3A_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_CFG_VAL_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL_BIT_TX_STG_3A_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL_BIT_TX_STG_3A_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL_BIT_TX_STG_3A_CFC_END_ADDR_MSK, ODU_RCP_REG_TX_STG_3A_CFC_CFG_VAL_BIT_TX_STG_3A_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3A_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_TX_STG_3B_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_TX_STG_3B_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_TX_STG_3B_FIFO_CLRB_set", value[2] , value[1] , value[0] );

    /* (0x00002a00 bits 31:0) bits 0:31 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0 */
    ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0_BIT_TX_STG_3B_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0_BIT_TX_STG_3B_FIFO_CLRB_OFF,
                                                value[0]);

    /* (0x00002a04 bits 31:0) bits 32:63 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1 */
    ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1_BIT_TX_STG_3B_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1_BIT_TX_STG_3B_FIFO_CLRB_OFF,
                                                value[1]);

    /* (0x00002a08 bits 31:0) bits 64:95 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2 */
    ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2_BIT_TX_STG_3B_FIFO_CLRB_MSK,
                                                ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2_BIT_TX_STG_3B_FIFO_CLRB_OFF,
                                                value[2]);
}

static INLINE void ri_rcp_lfield_TX_STG_3B_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_TX_STG_3B_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00002a00 bits 31:0) bits 0:31 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0_BIT_TX_STG_3B_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0_BIT_TX_STG_3B_FIFO_CLRB_OFF;
    value[0] |= field_value;

    /* (0x00002a04 bits 31:0) bits 32:63 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1 */
    reg_value = ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1_BIT_TX_STG_3B_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1_BIT_TX_STG_3B_FIFO_CLRB_OFF;
    value[1] |= field_value;

    /* (0x00002a08 bits 31:0) bits 64:95 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2 */
    reg_value = ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2_BIT_TX_STG_3B_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2_BIT_TX_STG_3B_FIFO_CLRB_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_TX_STG_3B_FIFO_CLRB_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_TX_STG_3B_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_TX_STG_3B_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_TX_STG_3B_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_TX_STG_3B_FIFO_CLRB_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_TX_STG_3B_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002a00 bits 31:0) bits 0:31 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002a00 bits 31:0) bits 0:31 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0 */
        ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0_BIT_TX_STG_3B_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0_BIT_TX_STG_3B_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002a04 bits 31:0) bits 32:63 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002a04 bits 31:0) bits 32:63 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1 */
        ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1_BIT_TX_STG_3B_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1_BIT_TX_STG_3B_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002a08 bits 31:0) bits 64:95 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002a08 bits 31:0) bits 64:95 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2 */
        ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2_BIT_TX_STG_3B_FIFO_CLRB_OFF + subfield_offset),
                                                    ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2_BIT_TX_STG_3B_FIFO_CLRB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_TX_STG_3B_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_TX_STG_3B_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_TX_STG_3B_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_TX_STG_3B_FIFO_CLRB_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002a00 bits 31:0) bits 0:31 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0 */
        reg_value = ri_rcp_reg_TX_STG_3B_FIFO_CLRB_0_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0_BIT_TX_STG_3B_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0_BIT_TX_STG_3B_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0_BIT_TX_STG_3B_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_0_BIT_TX_STG_3B_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002a04 bits 31:0) bits 32:63 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1 */
        reg_value = ri_rcp_reg_TX_STG_3B_FIFO_CLRB_1_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1_BIT_TX_STG_3B_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1_BIT_TX_STG_3B_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1_BIT_TX_STG_3B_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_1_BIT_TX_STG_3B_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002a08 bits 31:0) bits 64:95 use field TX_STG_3B_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2 */
        reg_value = ri_rcp_reg_TX_STG_3B_FIFO_CLRB_2_read( b_ptr,
                                                           h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2_BIT_TX_STG_3B_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2_BIT_TX_STG_3B_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2_BIT_TX_STG_3B_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_3B_FIFO_CLRB_2_BIT_TX_STG_3B_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_TX_STG_3B_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ID_set", value, 127);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00002a20 bits 22:16) field TX_STG_3B_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG */
    ri_rcp_reg_TX_STG_3B_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ID_MSK,
                                            ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ID_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002a20 bits 22:16) field TX_STG_3B_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                         odu_rcp_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                         odu_rcp_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_CHG_ID_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002a20 bits 22:16) field TX_STG_3B_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002a20 bits 22:16) field TX_STG_3B_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG */
        ri_rcp_reg_TX_STG_3B_CFC_CFG_field_set( b_ptr,
                                                h_ptr,
                                                subfield_mask << (ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                                ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                           odu_rcp_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                           odu_rcp_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_CHG_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002a20 bits 22:16) field TX_STG_3B_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3B_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3B_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_set", value, 255);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_set", value );

    /* (0x00002a28 bits 7:0) field TX_STG_3B_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL */
    ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_field_set( b_ptr,
                                                h_ptr,
                                                ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL_BIT_TX_STG_3B_CFC_END_ADDR_MSK,
                                                ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL_BIT_TX_STG_3B_CFC_END_ADDR_OFF,
                                                value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002a28 bits 7:0) field TX_STG_3B_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL_BIT_TX_STG_3B_CFC_END_ADDR_MSK) >> ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL_BIT_TX_STG_3B_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002a28 bits 7:0) field TX_STG_3B_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002a28 bits 7:0) field TX_STG_3B_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL */
        ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL_BIT_TX_STG_3B_CFC_END_ADDR_OFF + subfield_offset),
                                                    ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL_BIT_TX_STG_3B_CFC_END_ADDR_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002a28 bits 7:0) field TX_STG_3B_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_CFG_VAL_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL_BIT_TX_STG_3B_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL_BIT_TX_STG_3B_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL_BIT_TX_STG_3B_CFC_END_ADDR_MSK, ODU_RCP_REG_TX_STG_3B_CFC_CFG_VAL_BIT_TX_STG_3B_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3B_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_TX_STG_4_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_TX_STG_4_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_TX_STG_4_FIFO_CLRB_set", value[2] , value[1] , value[0] );

    /* (0x00002c00 bits 31:0) bits 0:31 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0 */
    ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0_BIT_TX_STG_4_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0_BIT_TX_STG_4_FIFO_CLRB_OFF,
                                               value[0]);

    /* (0x00002c04 bits 31:0) bits 32:63 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1 */
    ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1_BIT_TX_STG_4_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1_BIT_TX_STG_4_FIFO_CLRB_OFF,
                                               value[1]);

    /* (0x00002c08 bits 31:0) bits 64:95 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2 */
    ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2_BIT_TX_STG_4_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2_BIT_TX_STG_4_FIFO_CLRB_OFF,
                                               value[2]);
}

static INLINE void ri_rcp_lfield_TX_STG_4_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_TX_STG_4_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00002c00 bits 31:0) bits 0:31 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0_BIT_TX_STG_4_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0_BIT_TX_STG_4_FIFO_CLRB_OFF;
    value[0] |= field_value;

    /* (0x00002c04 bits 31:0) bits 32:63 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1 */
    reg_value = ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1_BIT_TX_STG_4_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1_BIT_TX_STG_4_FIFO_CLRB_OFF;
    value[1] |= field_value;

    /* (0x00002c08 bits 31:0) bits 64:95 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2 */
    reg_value = ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2_BIT_TX_STG_4_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2_BIT_TX_STG_4_FIFO_CLRB_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_TX_STG_4_FIFO_CLRB_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_TX_STG_4_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_TX_STG_4_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_TX_STG_4_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_TX_STG_4_FIFO_CLRB_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_TX_STG_4_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002c00 bits 31:0) bits 0:31 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002c00 bits 31:0) bits 0:31 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0 */
        ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0_BIT_TX_STG_4_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0_BIT_TX_STG_4_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002c04 bits 31:0) bits 32:63 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002c04 bits 31:0) bits 32:63 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1 */
        ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1_BIT_TX_STG_4_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1_BIT_TX_STG_4_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002c08 bits 31:0) bits 64:95 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002c08 bits 31:0) bits 64:95 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2 */
        ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2_BIT_TX_STG_4_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2_BIT_TX_STG_4_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_TX_STG_4_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_TX_STG_4_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_TX_STG_4_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_TX_STG_4_FIFO_CLRB_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002c00 bits 31:0) bits 0:31 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0 */
        reg_value = ri_rcp_reg_TX_STG_4_FIFO_CLRB_0_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0_BIT_TX_STG_4_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0_BIT_TX_STG_4_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0_BIT_TX_STG_4_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_4_FIFO_CLRB_0_BIT_TX_STG_4_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002c04 bits 31:0) bits 32:63 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1 */
        reg_value = ri_rcp_reg_TX_STG_4_FIFO_CLRB_1_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1_BIT_TX_STG_4_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1_BIT_TX_STG_4_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1_BIT_TX_STG_4_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_4_FIFO_CLRB_1_BIT_TX_STG_4_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002c08 bits 31:0) bits 64:95 use field TX_STG_4_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2 */
        reg_value = ri_rcp_reg_TX_STG_4_FIFO_CLRB_2_read( b_ptr,
                                                          h_ptr);
        field_value = (reg_value & ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2_BIT_TX_STG_4_FIFO_CLRB_MSK)
                      >> ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2_BIT_TX_STG_4_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2_BIT_TX_STG_4_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_4_FIFO_CLRB_2_BIT_TX_STG_4_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_TX_STG_4_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ID_set", value, 127);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00002c20 bits 22:16) field TX_STG_4_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG */
    ri_rcp_reg_TX_STG_4_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ID_MSK,
                                           ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ID_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002c20 bits 22:16) field TX_STG_4_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_CHG_ID_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002c20 bits 22:16) field TX_STG_4_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002c20 bits 22:16) field TX_STG_4_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG */
        ri_rcp_reg_TX_STG_4_CFC_CFG_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                               ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_CHG_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002c20 bits 22:16) field TX_STG_4_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_4_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_4_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_set", value, 255);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_set", value );

    /* (0x00002c28 bits 7:0) field TX_STG_4_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL */
    ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL_BIT_TX_STG_4_CFC_END_ADDR_MSK,
                                               ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL_BIT_TX_STG_4_CFC_END_ADDR_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002c28 bits 7:0) field TX_STG_4_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL_BIT_TX_STG_4_CFC_END_ADDR_MSK) >> ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL_BIT_TX_STG_4_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002c28 bits 7:0) field TX_STG_4_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002c28 bits 7:0) field TX_STG_4_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL */
        ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL_BIT_TX_STG_4_CFC_END_ADDR_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL_BIT_TX_STG_4_CFC_END_ADDR_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002c28 bits 7:0) field TX_STG_4_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL_BIT_TX_STG_4_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL_BIT_TX_STG_4_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL_BIT_TX_STG_4_CFC_END_ADDR_MSK, ODU_RCP_REG_TX_STG_4_CFC_CFG_VAL_BIT_TX_STG_4_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_4_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_N_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_N_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_N_FIFO_CLRB_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_N_FIFO_CLRB_set", value );

    /* (0x00002e00 bits 11:0) bits 0:11 use field TX_STG_N_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0 */
    ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0_BIT_TX_STG_N_FIFO_CLRB_MSK,
                                               ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0_BIT_TX_STG_N_FIFO_CLRB_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_N_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_N_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002e00 bits 11:0) bits 0:11 use field TX_STG_N_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0_BIT_TX_STG_N_FIFO_CLRB_MSK) >> ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0_BIT_TX_STG_N_FIFO_CLRB_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_N_FIFO_CLRB_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_N_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_N_FIFO_CLRB_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_N_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_N_FIFO_CLRB_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_N_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002e00 bits 11:0) bits 0:11 use field TX_STG_N_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002e00 bits 11:0) bits 0:11 use field TX_STG_N_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0 */
        ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0_BIT_TX_STG_N_FIFO_CLRB_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0_BIT_TX_STG_N_FIFO_CLRB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_N_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_N_FIFO_CLRB_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_N_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_N_FIFO_CLRB_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002e00 bits 11:0) bits 0:11 use field TX_STG_N_FIFO_CLRB of register PMC_ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0 */
    reg_value = ri_rcp_reg_TX_STG_N_FIFO_CLRB_0_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0_BIT_TX_STG_N_FIFO_CLRB_MSK)
                  >> ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0_BIT_TX_STG_N_FIFO_CLRB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0_BIT_TX_STG_N_FIFO_CLRB_MSK, ODU_RCP_REG_TX_STG_N_FIFO_CLRB_0_BIT_TX_STG_N_FIFO_CLRB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_N_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ID_set", value, 15);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ID_set", value );

    /* (0x00002e20 bits 19:16) field TX_STG_N_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG */
    ri_rcp_reg_TX_STG_N_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ID_MSK,
                                           ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ID_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002e20 bits 19:16) field TX_STG_N_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ID_MSK) >> ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ID_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_CHG_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_CHG_ID_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002e20 bits 19:16) field TX_STG_N_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002e20 bits 19:16) field TX_STG_N_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG */
        ri_rcp_reg_TX_STG_N_CFC_CFG_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ID_OFF + subfield_offset),
                                               ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ID_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_CHG_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                          odu_rcp_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_CHG_ID_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002e20 bits 19:16) field TX_STG_N_CFC_END_ADDR_CHG_ID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ID_MSK, ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_N_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_N_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_set", value, 31);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_set", value );

    /* (0x00002e28 bits 4:0) field TX_STG_N_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL */
    ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_field_set( b_ptr,
                                               h_ptr,
                                               ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL_BIT_TX_STG_N_CFC_END_ADDR_MSK,
                                               ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL_BIT_TX_STG_N_CFC_END_ADDR_OFF,
                                               value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002e28 bits 4:0) field TX_STG_N_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL_BIT_TX_STG_N_CFC_END_ADDR_MSK) >> ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL_BIT_TX_STG_N_CFC_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00002e28 bits 4:0) field TX_STG_N_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00002e28 bits 4:0) field TX_STG_N_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL */
        ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL_BIT_TX_STG_N_CFC_END_ADDR_OFF + subfield_offset),
                                                   ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL_BIT_TX_STG_N_CFC_END_ADDR_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00002e28 bits 4:0) field TX_STG_N_CFC_END_ADDR of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_CFG_VAL_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL_BIT_TX_STG_N_CFC_END_ADDR_MSK)
                  >> ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL_BIT_TX_STG_N_CFC_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL_BIT_TX_STG_N_CFC_END_ADDR_MSK, ODU_RCP_REG_TX_STG_N_CFC_CFG_VAL_BIT_TX_STG_N_CFC_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_N_CFC_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_SCH_CAL_EN_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_SCH_CAL_EN_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_SCH_CAL_EN_set", value, 63);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_SCH_CAL_EN_set", value );

    /* (0x00003000 bits 5:0) field REG_SCH_CAL_EN of register PMC_ODU_RCP_REG_REG_SCH_CAL_ENABLE */
    ri_rcp_reg_REG_SCH_CAL_ENABLE_field_set( b_ptr,
                                             h_ptr,
                                             ODU_RCP_REG_REG_SCH_CAL_ENABLE_BIT_REG_SCH_CAL_EN_MSK,
                                             ODU_RCP_REG_REG_SCH_CAL_ENABLE_BIT_REG_SCH_CAL_EN_OFF,
                                             value);
}

static INLINE UINT32 ri_rcp_field_REG_SCH_CAL_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_SCH_CAL_EN_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00003000 bits 5:0) field REG_SCH_CAL_EN of register PMC_ODU_RCP_REG_REG_SCH_CAL_ENABLE */
    reg_value = ri_rcp_reg_REG_SCH_CAL_ENABLE_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_SCH_CAL_ENABLE_BIT_REG_SCH_CAL_EN_MSK) >> ODU_RCP_REG_REG_SCH_CAL_ENABLE_BIT_REG_SCH_CAL_EN_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_SCH_CAL_EN_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_SCH_CAL_EN_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_SCH_CAL_EN_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_SCH_CAL_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_SCH_CAL_EN_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_SCH_CAL_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00003000 bits 5:0) field REG_SCH_CAL_EN of register PMC_ODU_RCP_REG_REG_SCH_CAL_ENABLE */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00003000 bits 5:0) field REG_SCH_CAL_EN of register PMC_ODU_RCP_REG_REG_SCH_CAL_ENABLE */
        ri_rcp_reg_REG_SCH_CAL_ENABLE_field_set( b_ptr,
                                                 h_ptr,
                                                 subfield_mask << (ODU_RCP_REG_REG_SCH_CAL_ENABLE_BIT_REG_SCH_CAL_EN_OFF + subfield_offset),
                                                 ODU_RCP_REG_REG_SCH_CAL_ENABLE_BIT_REG_SCH_CAL_EN_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_SCH_CAL_EN_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_SCH_CAL_EN_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_SCH_CAL_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_SCH_CAL_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00003000 bits 5:0) field REG_SCH_CAL_EN of register PMC_ODU_RCP_REG_REG_SCH_CAL_ENABLE */
    reg_value = ri_rcp_reg_REG_SCH_CAL_ENABLE_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_SCH_CAL_ENABLE_BIT_REG_SCH_CAL_EN_MSK)
                  >> ODU_RCP_REG_REG_SCH_CAL_ENABLE_BIT_REG_SCH_CAL_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_SCH_CAL_ENABLE_BIT_REG_SCH_CAL_EN_MSK, ODU_RCP_REG_REG_SCH_CAL_ENABLE_BIT_REG_SCH_CAL_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_SCH_CAL_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_SCH_CAL_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_SCH_CAL_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_SCH_CAL_SEL_set", value, 63);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_REG_SCH_CAL_SEL_set", value );

    /* (0x00003004 bits 5:0) field REG_SCH_CAL_SEL of register PMC_ODU_RCP_REG_REG_SCH_CAL_SEL */
    ri_rcp_reg_REG_SCH_CAL_SEL_field_set( b_ptr,
                                          h_ptr,
                                          ODU_RCP_REG_REG_SCH_CAL_SEL_BIT_REG_SCH_CAL_SEL_MSK,
                                          ODU_RCP_REG_REG_SCH_CAL_SEL_BIT_REG_SCH_CAL_SEL_OFF,
                                          value);
}

static INLINE UINT32 ri_rcp_field_REG_SCH_CAL_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_SCH_CAL_SEL_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00003004 bits 5:0) field REG_SCH_CAL_SEL of register PMC_ODU_RCP_REG_REG_SCH_CAL_SEL */
    reg_value = ri_rcp_reg_REG_SCH_CAL_SEL_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_REG_SCH_CAL_SEL_BIT_REG_SCH_CAL_SEL_MSK) >> ODU_RCP_REG_REG_SCH_CAL_SEL_BIT_REG_SCH_CAL_SEL_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_REG_SCH_CAL_SEL_get", value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_SCH_CAL_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_SCH_CAL_SEL_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_SCH_CAL_SEL_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_SCH_CAL_SEL_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_SCH_CAL_SEL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00003004 bits 5:0) field REG_SCH_CAL_SEL of register PMC_ODU_RCP_REG_REG_SCH_CAL_SEL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00003004 bits 5:0) field REG_SCH_CAL_SEL of register PMC_ODU_RCP_REG_REG_SCH_CAL_SEL */
        ri_rcp_reg_REG_SCH_CAL_SEL_field_set( b_ptr,
                                              h_ptr,
                                              subfield_mask << (ODU_RCP_REG_REG_SCH_CAL_SEL_BIT_REG_SCH_CAL_SEL_OFF + subfield_offset),
                                              ODU_RCP_REG_REG_SCH_CAL_SEL_BIT_REG_SCH_CAL_SEL_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_SCH_CAL_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_SCH_CAL_SEL_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_SCH_CAL_SEL_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_SCH_CAL_SEL_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00003004 bits 5:0) field REG_SCH_CAL_SEL of register PMC_ODU_RCP_REG_REG_SCH_CAL_SEL */
    reg_value = ri_rcp_reg_REG_SCH_CAL_SEL_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_REG_SCH_CAL_SEL_BIT_REG_SCH_CAL_SEL_MSK)
                  >> ODU_RCP_REG_REG_SCH_CAL_SEL_BIT_REG_SCH_CAL_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_REG_SCH_CAL_SEL_BIT_REG_SCH_CAL_SEL_MSK, ODU_RCP_REG_REG_SCH_CAL_SEL_BIT_REG_SCH_CAL_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_SCH_CAL_SEL_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_burstsize12
 * ==================================================================================
 */
static INLINE void ri_rcp_lfield_SCH_STG_1_ACT_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value[12] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_SCH_STG_1_ACT_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value[12] )
{
    IOLOG( "%s ", "ri_rcp_lfield_SCH_STG_1_ACT_CFG_set");
    ri_rcp_reg_SCH_STG_1_ACT_CFG_array_burst_write( b_ptr,
                                                    h_ptr,
                                                    0,
                                                    12,
                                                    value);
}

static INLINE void ri_rcp_lfield_SCH_STG_1_ACT_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value[12] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_SCH_STG_1_ACT_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value[12] )
{
    IOLOG( "%s ", "ri_rcp_lfield_SCH_STG_1_ACT_CFG_get");
    ri_rcp_reg_SCH_STG_1_ACT_CFG_array_burst_read( b_ptr,
                                                   h_ptr,
                                                   0,
                                                   12,
                                                   (UINT32 *)value);
}

static INLINE void ri_rcp_lfield_range_SCH_STG_1_ACT_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_SCH_STG_1_ACT_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ri_rcp_lfield_range_SCH_STG_1_ACT_CFG_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ri_rcp_lfield_range_SCH_STG_1_ACT_CFG_set", start_bit, stop_bit, value);
    ri_rcp_reg_SCH_STG_1_ACT_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}

static INLINE UINT32 ri_rcp_lfield_range_SCH_STG_1_ACT_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_SCH_STG_1_ACT_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ri_rcp_lfield_range_SCH_STG_1_ACT_CFG_get", start_bit, stop_bit );
    }
    reg_value = ri_rcp_reg_SCH_STG_1_ACT_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ri_rcp_lfield_range_SCH_STG_1_ACT_CFG_get", start_bit, stop_bit, value );
    return value;
}

static INLINE void ri_rcp_lfield_SCH_STG_1_STBY_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[12] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_SCH_STG_1_STBY_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[12] )
{
    IOLOG( "%s ", "ri_rcp_lfield_SCH_STG_1_STBY_CFG_set");
    ri_rcp_reg_SCH_STG_1_STBY_CFG_array_burst_write( b_ptr,
                                                     h_ptr,
                                                     0,
                                                     12,
                                                     value);
}

static INLINE void ri_rcp_lfield_SCH_STG_1_STBY_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[12] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_SCH_STG_1_STBY_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[12] )
{
    IOLOG( "%s ", "ri_rcp_lfield_SCH_STG_1_STBY_CFG_get");
    ri_rcp_reg_SCH_STG_1_STBY_CFG_array_burst_read( b_ptr,
                                                    h_ptr,
                                                    0,
                                                    12,
                                                    (UINT32 *)value);
}

static INLINE void ri_rcp_lfield_range_SCH_STG_1_STBY_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_SCH_STG_1_STBY_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ri_rcp_lfield_range_SCH_STG_1_STBY_CFG_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ri_rcp_lfield_range_SCH_STG_1_STBY_CFG_set", start_bit, stop_bit, value);
    ri_rcp_reg_SCH_STG_1_STBY_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   word_number,
                                                   mask,
                                                   field_ofs,
                                                   value);
}

static INLINE UINT32 ri_rcp_lfield_range_SCH_STG_1_STBY_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_SCH_STG_1_STBY_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ri_rcp_lfield_range_SCH_STG_1_STBY_CFG_get", start_bit, stop_bit );
    }
    reg_value = ri_rcp_reg_SCH_STG_1_STBY_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ri_rcp_lfield_range_SCH_STG_1_STBY_CFG_get", start_bit, stop_bit, value );
    return value;
}

static INLINE void ri_rcp_lfield_SCH_STG_N_ACT_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value[12] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_SCH_STG_N_ACT_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value[12] )
{
    IOLOG( "%s ", "ri_rcp_lfield_SCH_STG_N_ACT_CFG_set");
    ri_rcp_reg_SCH_STG_N_ACT_CFG_array_burst_write( b_ptr,
                                                    h_ptr,
                                                    0,
                                                    12,
                                                    value);
}

static INLINE void ri_rcp_lfield_SCH_STG_N_ACT_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value[12] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_SCH_STG_N_ACT_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 value[12] )
{
    IOLOG( "%s ", "ri_rcp_lfield_SCH_STG_N_ACT_CFG_get");
    ri_rcp_reg_SCH_STG_N_ACT_CFG_array_burst_read( b_ptr,
                                                   h_ptr,
                                                   0,
                                                   12,
                                                   (UINT32 *)value);
}

static INLINE void ri_rcp_lfield_range_SCH_STG_N_ACT_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_SCH_STG_N_ACT_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ri_rcp_lfield_range_SCH_STG_N_ACT_CFG_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ri_rcp_lfield_range_SCH_STG_N_ACT_CFG_set", start_bit, stop_bit, value);
    ri_rcp_reg_SCH_STG_N_ACT_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}

static INLINE UINT32 ri_rcp_lfield_range_SCH_STG_N_ACT_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_SCH_STG_N_ACT_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ri_rcp_lfield_range_SCH_STG_N_ACT_CFG_get", start_bit, stop_bit );
    }
    reg_value = ri_rcp_reg_SCH_STG_N_ACT_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ri_rcp_lfield_range_SCH_STG_N_ACT_CFG_get", start_bit, stop_bit, value );
    return value;
}

static INLINE void ri_rcp_lfield_SCH_STG_N_STBY_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[12] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_SCH_STG_N_STBY_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[12] )
{
    IOLOG( "%s ", "ri_rcp_lfield_SCH_STG_N_STBY_CFG_set");
    ri_rcp_reg_SCH_STG_N_STBY_CFG_array_burst_write( b_ptr,
                                                     h_ptr,
                                                     0,
                                                     12,
                                                     value);
}

static INLINE void ri_rcp_lfield_SCH_STG_N_STBY_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[12] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_SCH_STG_N_STBY_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value[12] )
{
    IOLOG( "%s ", "ri_rcp_lfield_SCH_STG_N_STBY_CFG_get");
    ri_rcp_reg_SCH_STG_N_STBY_CFG_array_burst_read( b_ptr,
                                                    h_ptr,
                                                    0,
                                                    12,
                                                    (UINT32 *)value);
}

static INLINE void ri_rcp_lfield_range_SCH_STG_N_STBY_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_SCH_STG_N_STBY_CFG_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ri_rcp_lfield_range_SCH_STG_N_STBY_CFG_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ri_rcp_lfield_range_SCH_STG_N_STBY_CFG_set", start_bit, stop_bit, value);
    ri_rcp_reg_SCH_STG_N_STBY_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   word_number,
                                                   mask,
                                                   field_ofs,
                                                   value);
}

static INLINE UINT32 ri_rcp_lfield_range_SCH_STG_N_STBY_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_SCH_STG_N_STBY_CFG_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ri_rcp_lfield_range_SCH_STG_N_STBY_CFG_get", start_bit, stop_bit );
    }
    reg_value = ri_rcp_reg_SCH_STG_N_STBY_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ri_rcp_lfield_range_SCH_STG_N_STBY_CFG_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_size12
 * ==================================================================================
 */
static INLINE void ri_rcp_field_REG_RX_STG_1_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_RX_STG_1_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_1_APS_LEVEL_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_RX_STG_1_APS_LEVEL_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_1_APS_LEVEL_set", N, value );

    /* ((0x00000c00 + (N) * 0x04) bits 2:0) field REG_RX_STG_1_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_1_APS_LEVEL index N=0..11 */
    ri_rcp_reg_RX_STG_1_APS_LEVEL_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_RX_STG_1_APS_LEVEL_BIT_REG_RX_STG_1_APS_LEVEL_MSK,
                                                   ODU_RCP_REG_RX_STG_1_APS_LEVEL_BIT_REG_RX_STG_1_APS_LEVEL_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_REG_RX_STG_1_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_RX_STG_1_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_1_APS_LEVEL_get", N, 11);
    /* ((0x00000c00 + (N) * 0x04) bits 2:0) field REG_RX_STG_1_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_1_APS_LEVEL index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_1_APS_LEVEL_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_RX_STG_1_APS_LEVEL_BIT_REG_RX_STG_1_APS_LEVEL_MSK) >> ODU_RCP_REG_RX_STG_1_APS_LEVEL_BIT_REG_RX_STG_1_APS_LEVEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_1_APS_LEVEL_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000c00 + (N) * 0x04) bits 2:0) field REG_RX_STG_1_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_1_APS_LEVEL index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000c00 + (N) * 0x04) bits 2:0) field REG_RX_STG_1_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_1_APS_LEVEL index N=0..11 */
        ri_rcp_reg_RX_STG_1_APS_LEVEL_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_RX_STG_1_APS_LEVEL_BIT_REG_RX_STG_1_APS_LEVEL_OFF + subfield_offset),
                                                       ODU_RCP_REG_RX_STG_1_APS_LEVEL_BIT_REG_RX_STG_1_APS_LEVEL_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000c00 + (N) * 0x04) bits 2:0) field REG_RX_STG_1_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_1_APS_LEVEL index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_1_APS_LEVEL_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_1_APS_LEVEL_BIT_REG_RX_STG_1_APS_LEVEL_MSK)
                  >> ODU_RCP_REG_RX_STG_1_APS_LEVEL_BIT_REG_RX_STG_1_APS_LEVEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_1_APS_LEVEL_BIT_REG_RX_STG_1_APS_LEVEL_MSK, ODU_RCP_REG_RX_STG_1_APS_LEVEL_BIT_REG_RX_STG_1_APS_LEVEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_1_APS_LEVEL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_RX_STG_N_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_RX_STG_N_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_N_APS_LEVEL_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_RX_STG_N_APS_LEVEL_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_N_APS_LEVEL_set", N, value );

    /* ((0x00001280 + (N) * 0x04) bits 2:0) field REG_RX_STG_N_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_N_APS_LEVEL index N=0..11 */
    ri_rcp_reg_RX_STG_N_APS_LEVEL_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_RX_STG_N_APS_LEVEL_BIT_REG_RX_STG_N_APS_LEVEL_MSK,
                                                   ODU_RCP_REG_RX_STG_N_APS_LEVEL_BIT_REG_RX_STG_N_APS_LEVEL_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_REG_RX_STG_N_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_RX_STG_N_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_N_APS_LEVEL_get", N, 11);
    /* ((0x00001280 + (N) * 0x04) bits 2:0) field REG_RX_STG_N_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_N_APS_LEVEL index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_N_APS_LEVEL_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_RX_STG_N_APS_LEVEL_BIT_REG_RX_STG_N_APS_LEVEL_MSK) >> ODU_RCP_REG_RX_STG_N_APS_LEVEL_BIT_REG_RX_STG_N_APS_LEVEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_N_APS_LEVEL_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001280 + (N) * 0x04) bits 2:0) field REG_RX_STG_N_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_N_APS_LEVEL index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001280 + (N) * 0x04) bits 2:0) field REG_RX_STG_N_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_N_APS_LEVEL index N=0..11 */
        ri_rcp_reg_RX_STG_N_APS_LEVEL_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_RX_STG_N_APS_LEVEL_BIT_REG_RX_STG_N_APS_LEVEL_OFF + subfield_offset),
                                                       ODU_RCP_REG_RX_STG_N_APS_LEVEL_BIT_REG_RX_STG_N_APS_LEVEL_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001280 + (N) * 0x04) bits 2:0) field REG_RX_STG_N_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_N_APS_LEVEL index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_N_APS_LEVEL_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_N_APS_LEVEL_BIT_REG_RX_STG_N_APS_LEVEL_MSK)
                  >> ODU_RCP_REG_RX_STG_N_APS_LEVEL_BIT_REG_RX_STG_N_APS_LEVEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_N_APS_LEVEL_BIT_REG_RX_STG_N_APS_LEVEL_MSK, ODU_RCP_REG_RX_STG_N_APS_LEVEL_BIT_REG_RX_STG_N_APS_LEVEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_N_APS_LEVEL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_1_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_1_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_1_CFC_IPT_VALID_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_1_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_1_CFC_IPT_VALID_set", N, value );

    /* ((0x00001840 + (N) * 0x04) bits 24) field RX_STG_1_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
    ri_rcp_reg_RX_STG_1_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VALID_MSK,
                                                 ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VALID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_1_CFC_IPT_VALID_get", N, 11);
    /* ((0x00001840 + (N) * 0x04) bits 24) field RX_STG_1_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_1_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_1_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_1_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_1_CFC_IPT_ID_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_1_CFC_IPT_ID_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_1_CFC_IPT_ID_set", N, value );

    /* ((0x00001840 + (N) * 0x04) bits 19:16) field RX_STG_1_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
    ri_rcp_reg_RX_STG_1_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_ID_MSK,
                                                 ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_ID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_1_CFC_IPT_ID_get", N, 11);
    /* ((0x00001840 + (N) * 0x04) bits 19:16) field RX_STG_1_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_ID_MSK) >> ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_1_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001840 + (N) * 0x04) bits 19:16) field RX_STG_1_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001840 + (N) * 0x04) bits 19:16) field RX_STG_1_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
        ri_rcp_reg_RX_STG_1_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_ID_OFF + subfield_offset),
                                                     ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_ID_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001840 + (N) * 0x04) bits 19:16) field RX_STG_1_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_ID_MSK, ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_1_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_1_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_1_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_1_CFC_IPT_VA_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_1_CFC_IPT_VA_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_1_CFC_IPT_VA_set", N, value );

    /* ((0x00001840 + (N) * 0x04) bits 3:0) field RX_STG_1_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
    ri_rcp_reg_RX_STG_1_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VA_MSK,
                                                 ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VA_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_1_CFC_IPT_VA_get", N, 11);
    /* ((0x00001840 + (N) * 0x04) bits 3:0) field RX_STG_1_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VA_MSK) >> ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_1_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001840 + (N) * 0x04) bits 3:0) field RX_STG_1_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001840 + (N) * 0x04) bits 3:0) field RX_STG_1_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
        ri_rcp_reg_RX_STG_1_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VA_OFF + subfield_offset),
                                                     ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VA_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001840 + (N) * 0x04) bits 3:0) field RX_STG_1_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_1_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VA_MSK, ODU_RCP_REG_RX_STG_1_CFC_IPT_BIT_RX_STG_1_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_1_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_N_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_N_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_N_CFC_IPT_VALID_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_N_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_N_CFC_IPT_VALID_set", N, value );

    /* ((0x00002240 + (N) * 0x04) bits 24) field RX_STG_N_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
    ri_rcp_reg_RX_STG_N_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VALID_MSK,
                                                 ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VALID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_N_CFC_IPT_VALID_get", N, 11);
    /* ((0x00002240 + (N) * 0x04) bits 24) field RX_STG_N_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_N_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_N_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_N_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_N_CFC_IPT_ID_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_N_CFC_IPT_ID_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_N_CFC_IPT_ID_set", N, value );

    /* ((0x00002240 + (N) * 0x04) bits 19:16) field RX_STG_N_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
    ri_rcp_reg_RX_STG_N_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_ID_MSK,
                                                 ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_ID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_N_CFC_IPT_ID_get", N, 11);
    /* ((0x00002240 + (N) * 0x04) bits 19:16) field RX_STG_N_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_ID_MSK) >> ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_N_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002240 + (N) * 0x04) bits 19:16) field RX_STG_N_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002240 + (N) * 0x04) bits 19:16) field RX_STG_N_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
        ri_rcp_reg_RX_STG_N_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_ID_OFF + subfield_offset),
                                                     ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_ID_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002240 + (N) * 0x04) bits 19:16) field RX_STG_N_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_ID_MSK, ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_N_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_N_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_N_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_N_CFC_IPT_VA_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_N_CFC_IPT_VA_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_N_CFC_IPT_VA_set", N, value );

    /* ((0x00002240 + (N) * 0x04) bits 3:0) field RX_STG_N_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
    ri_rcp_reg_RX_STG_N_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VA_MSK,
                                                 ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VA_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_N_CFC_IPT_VA_get", N, 11);
    /* ((0x00002240 + (N) * 0x04) bits 3:0) field RX_STG_N_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VA_MSK) >> ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_N_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002240 + (N) * 0x04) bits 3:0) field RX_STG_N_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002240 + (N) * 0x04) bits 3:0) field RX_STG_N_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
        ri_rcp_reg_RX_STG_N_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VA_OFF + subfield_offset),
                                                     ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VA_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002240 + (N) * 0x04) bits 3:0) field RX_STG_N_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_N_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VA_MSK, ODU_RCP_REG_RX_STG_N_CFC_IPT_BIT_RX_STG_N_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_N_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_1_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_1_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_1_CFC_IPT_VALID_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_1_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_1_CFC_IPT_VALID_set", N, value );

    /* ((0x00002440 + (N) * 0x04) bits 24) field TX_STG_1_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
    ri_rcp_reg_TX_STG_1_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VALID_MSK,
                                                 ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VALID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_1_CFC_IPT_VALID_get", N, 11);
    /* ((0x00002440 + (N) * 0x04) bits 24) field TX_STG_1_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_1_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_1_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_1_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_1_CFC_IPT_ID_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_1_CFC_IPT_ID_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_1_CFC_IPT_ID_set", N, value );

    /* ((0x00002440 + (N) * 0x04) bits 19:16) field TX_STG_1_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
    ri_rcp_reg_TX_STG_1_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_ID_MSK,
                                                 ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_ID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_1_CFC_IPT_ID_get", N, 11);
    /* ((0x00002440 + (N) * 0x04) bits 19:16) field TX_STG_1_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_ID_MSK) >> ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_1_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002440 + (N) * 0x04) bits 19:16) field TX_STG_1_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002440 + (N) * 0x04) bits 19:16) field TX_STG_1_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
        ri_rcp_reg_TX_STG_1_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_ID_OFF + subfield_offset),
                                                     ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_ID_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002440 + (N) * 0x04) bits 19:16) field TX_STG_1_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_ID_MSK, ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_1_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_1_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_1_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_1_CFC_IPT_VA_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_1_CFC_IPT_VA_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_1_CFC_IPT_VA_set", N, value );

    /* ((0x00002440 + (N) * 0x04) bits 3:0) field TX_STG_1_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
    ri_rcp_reg_TX_STG_1_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VA_MSK,
                                                 ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VA_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_1_CFC_IPT_VA_get", N, 11);
    /* ((0x00002440 + (N) * 0x04) bits 3:0) field TX_STG_1_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VA_MSK) >> ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_1_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002440 + (N) * 0x04) bits 3:0) field TX_STG_1_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002440 + (N) * 0x04) bits 3:0) field TX_STG_1_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
        ri_rcp_reg_TX_STG_1_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VA_OFF + subfield_offset),
                                                     ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VA_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002440 + (N) * 0x04) bits 3:0) field TX_STG_1_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_1_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VA_MSK, ODU_RCP_REG_TX_STG_1_CFC_IPT_BIT_TX_STG_1_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_1_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_N_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_N_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_N_CFC_IPT_VALID_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_N_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_N_CFC_IPT_VALID_set", N, value );

    /* ((0x00002e40 + (N) * 0x04) bits 24) field TX_STG_N_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
    ri_rcp_reg_TX_STG_N_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VALID_MSK,
                                                 ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VALID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_N_CFC_IPT_VALID_get", N, 11);
    /* ((0x00002e40 + (N) * 0x04) bits 24) field TX_STG_N_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_N_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_N_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_N_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_N_CFC_IPT_ID_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_N_CFC_IPT_ID_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_N_CFC_IPT_ID_set", N, value );

    /* ((0x00002e40 + (N) * 0x04) bits 19:16) field TX_STG_N_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
    ri_rcp_reg_TX_STG_N_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_ID_MSK,
                                                 ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_ID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_N_CFC_IPT_ID_get", N, 11);
    /* ((0x00002e40 + (N) * 0x04) bits 19:16) field TX_STG_N_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_ID_MSK) >> ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_N_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002e40 + (N) * 0x04) bits 19:16) field TX_STG_N_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002e40 + (N) * 0x04) bits 19:16) field TX_STG_N_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
        ri_rcp_reg_TX_STG_N_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_ID_OFF + subfield_offset),
                                                     ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_ID_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002e40 + (N) * 0x04) bits 19:16) field TX_STG_N_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_ID_MSK, ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_N_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_N_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_N_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_N_CFC_IPT_VA_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_N_CFC_IPT_VA_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_N_CFC_IPT_VA_set", N, value );

    /* ((0x00002e40 + (N) * 0x04) bits 3:0) field TX_STG_N_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
    ri_rcp_reg_TX_STG_N_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VA_MSK,
                                                 ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VA_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_N_CFC_IPT_VA_get", N, 11);
    /* ((0x00002e40 + (N) * 0x04) bits 3:0) field TX_STG_N_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VA_MSK) >> ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_N_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002e40 + (N) * 0x04) bits 3:0) field TX_STG_N_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002e40 + (N) * 0x04) bits 3:0) field TX_STG_N_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
        ri_rcp_reg_TX_STG_N_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VA_OFF + subfield_offset),
                                                     ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VA_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002e40 + (N) * 0x04) bits 3:0) field TX_STG_N_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_N_CFC_IPT index N=0..11 */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VA_MSK, ODU_RCP_REG_TX_STG_N_CFC_IPT_BIT_TX_STG_N_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_N_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_size96
 * ==================================================================================
 */
static INLINE void ri_rcp_field_REG_RX_STG_2_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_RX_STG_2_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_2_APS_LEVEL_set", N, 95);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_RX_STG_2_APS_LEVEL_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_2_APS_LEVEL_set", N, value );

    /* ((0x00000c80 + (N) * 0x04) bits 2:0) field REG_RX_STG_2_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_2_APS_LEVEL index N=0..95 */
    ri_rcp_reg_RX_STG_2_APS_LEVEL_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_RX_STG_2_APS_LEVEL_BIT_REG_RX_STG_2_APS_LEVEL_MSK,
                                                   ODU_RCP_REG_RX_STG_2_APS_LEVEL_BIT_REG_RX_STG_2_APS_LEVEL_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_REG_RX_STG_2_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_RX_STG_2_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_2_APS_LEVEL_get", N, 95);
    /* ((0x00000c80 + (N) * 0x04) bits 2:0) field REG_RX_STG_2_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_2_APS_LEVEL index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_2_APS_LEVEL_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_RX_STG_2_APS_LEVEL_BIT_REG_RX_STG_2_APS_LEVEL_MSK) >> ODU_RCP_REG_RX_STG_2_APS_LEVEL_BIT_REG_RX_STG_2_APS_LEVEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_2_APS_LEVEL_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000c80 + (N) * 0x04) bits 2:0) field REG_RX_STG_2_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_2_APS_LEVEL index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000c80 + (N) * 0x04) bits 2:0) field REG_RX_STG_2_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_2_APS_LEVEL index N=0..95 */
        ri_rcp_reg_RX_STG_2_APS_LEVEL_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_RX_STG_2_APS_LEVEL_BIT_REG_RX_STG_2_APS_LEVEL_OFF + subfield_offset),
                                                       ODU_RCP_REG_RX_STG_2_APS_LEVEL_BIT_REG_RX_STG_2_APS_LEVEL_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000c80 + (N) * 0x04) bits 2:0) field REG_RX_STG_2_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_2_APS_LEVEL index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_2_APS_LEVEL_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_2_APS_LEVEL_BIT_REG_RX_STG_2_APS_LEVEL_MSK)
                  >> ODU_RCP_REG_RX_STG_2_APS_LEVEL_BIT_REG_RX_STG_2_APS_LEVEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_2_APS_LEVEL_BIT_REG_RX_STG_2_APS_LEVEL_MSK, ODU_RCP_REG_RX_STG_2_APS_LEVEL_BIT_REG_RX_STG_2_APS_LEVEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_2_APS_LEVEL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_RX_STG_3A_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_RX_STG_3A_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_3A_APS_LEVEL_set", N, 95);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_RX_STG_3A_APS_LEVEL_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_3A_APS_LEVEL_set", N, value );

    /* ((0x00000e00 + (N) * 0x04) bits 2:0) field REG_RX_STG_3A_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_3A_APS_LEVEL index N=0..95 */
    ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    ODU_RCP_REG_RX_STG_3A_APS_LEVEL_BIT_REG_RX_STG_3A_APS_LEVEL_MSK,
                                                    ODU_RCP_REG_RX_STG_3A_APS_LEVEL_BIT_REG_RX_STG_3A_APS_LEVEL_OFF,
                                                    value);
}

static INLINE UINT32 ri_rcp_field_REG_RX_STG_3A_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_RX_STG_3A_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_3A_APS_LEVEL_get", N, 95);
    /* ((0x00000e00 + (N) * 0x04) bits 2:0) field REG_RX_STG_3A_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_3A_APS_LEVEL index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & ODU_RCP_REG_RX_STG_3A_APS_LEVEL_BIT_REG_RX_STG_3A_APS_LEVEL_MSK) >> ODU_RCP_REG_RX_STG_3A_APS_LEVEL_BIT_REG_RX_STG_3A_APS_LEVEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_3A_APS_LEVEL_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000e00 + (N) * 0x04) bits 2:0) field REG_RX_STG_3A_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_3A_APS_LEVEL index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000e00 + (N) * 0x04) bits 2:0) field REG_RX_STG_3A_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_3A_APS_LEVEL index N=0..95 */
        ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (ODU_RCP_REG_RX_STG_3A_APS_LEVEL_BIT_REG_RX_STG_3A_APS_LEVEL_OFF + subfield_offset),
                                                        ODU_RCP_REG_RX_STG_3A_APS_LEVEL_BIT_REG_RX_STG_3A_APS_LEVEL_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000e00 + (N) * 0x04) bits 2:0) field REG_RX_STG_3A_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_3A_APS_LEVEL index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3A_APS_LEVEL_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3A_APS_LEVEL_BIT_REG_RX_STG_3A_APS_LEVEL_MSK)
                  >> ODU_RCP_REG_RX_STG_3A_APS_LEVEL_BIT_REG_RX_STG_3A_APS_LEVEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3A_APS_LEVEL_BIT_REG_RX_STG_3A_APS_LEVEL_MSK, ODU_RCP_REG_RX_STG_3A_APS_LEVEL_BIT_REG_RX_STG_3A_APS_LEVEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_3A_APS_LEVEL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_RX_STG_3B_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_RX_STG_3B_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_3B_APS_LEVEL_set", N, 95);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_RX_STG_3B_APS_LEVEL_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_3B_APS_LEVEL_set", N, value );

    /* ((0x00000f80 + (N) * 0x04) bits 2:0) field REG_RX_STG_3B_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_3B_APS_LEVEL index N=0..95 */
    ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    ODU_RCP_REG_RX_STG_3B_APS_LEVEL_BIT_REG_RX_STG_3B_APS_LEVEL_MSK,
                                                    ODU_RCP_REG_RX_STG_3B_APS_LEVEL_BIT_REG_RX_STG_3B_APS_LEVEL_OFF,
                                                    value);
}

static INLINE UINT32 ri_rcp_field_REG_RX_STG_3B_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_RX_STG_3B_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_3B_APS_LEVEL_get", N, 95);
    /* ((0x00000f80 + (N) * 0x04) bits 2:0) field REG_RX_STG_3B_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_3B_APS_LEVEL index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & ODU_RCP_REG_RX_STG_3B_APS_LEVEL_BIT_REG_RX_STG_3B_APS_LEVEL_MSK) >> ODU_RCP_REG_RX_STG_3B_APS_LEVEL_BIT_REG_RX_STG_3B_APS_LEVEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_3B_APS_LEVEL_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000f80 + (N) * 0x04) bits 2:0) field REG_RX_STG_3B_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_3B_APS_LEVEL index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000f80 + (N) * 0x04) bits 2:0) field REG_RX_STG_3B_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_3B_APS_LEVEL index N=0..95 */
        ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (ODU_RCP_REG_RX_STG_3B_APS_LEVEL_BIT_REG_RX_STG_3B_APS_LEVEL_OFF + subfield_offset),
                                                        ODU_RCP_REG_RX_STG_3B_APS_LEVEL_BIT_REG_RX_STG_3B_APS_LEVEL_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000f80 + (N) * 0x04) bits 2:0) field REG_RX_STG_3B_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_3B_APS_LEVEL index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3B_APS_LEVEL_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3B_APS_LEVEL_BIT_REG_RX_STG_3B_APS_LEVEL_MSK)
                  >> ODU_RCP_REG_RX_STG_3B_APS_LEVEL_BIT_REG_RX_STG_3B_APS_LEVEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3B_APS_LEVEL_BIT_REG_RX_STG_3B_APS_LEVEL_MSK, ODU_RCP_REG_RX_STG_3B_APS_LEVEL_BIT_REG_RX_STG_3B_APS_LEVEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_3B_APS_LEVEL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_REG_RX_STG_4_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_REG_RX_STG_4_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_4_APS_LEVEL_set", N, 95);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_REG_RX_STG_4_APS_LEVEL_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_4_APS_LEVEL_set", N, value );

    /* ((0x00001100 + (N) * 0x04) bits 2:0) field REG_RX_STG_4_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_4_APS_LEVEL index N=0..95 */
    ri_rcp_reg_RX_STG_4_APS_LEVEL_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_RX_STG_4_APS_LEVEL_BIT_REG_RX_STG_4_APS_LEVEL_MSK,
                                                   ODU_RCP_REG_RX_STG_4_APS_LEVEL_BIT_REG_RX_STG_4_APS_LEVEL_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_REG_RX_STG_4_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_REG_RX_STG_4_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_REG_RX_STG_4_APS_LEVEL_get", N, 95);
    /* ((0x00001100 + (N) * 0x04) bits 2:0) field REG_RX_STG_4_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_4_APS_LEVEL index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_4_APS_LEVEL_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_RX_STG_4_APS_LEVEL_BIT_REG_RX_STG_4_APS_LEVEL_MSK) >> ODU_RCP_REG_RX_STG_4_APS_LEVEL_BIT_REG_RX_STG_4_APS_LEVEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_REG_RX_STG_4_APS_LEVEL_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001100 + (N) * 0x04) bits 2:0) field REG_RX_STG_4_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_4_APS_LEVEL index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001100 + (N) * 0x04) bits 2:0) field REG_RX_STG_4_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_4_APS_LEVEL index N=0..95 */
        ri_rcp_reg_RX_STG_4_APS_LEVEL_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_RX_STG_4_APS_LEVEL_BIT_REG_RX_STG_4_APS_LEVEL_OFF + subfield_offset),
                                                       ODU_RCP_REG_RX_STG_4_APS_LEVEL_BIT_REG_RX_STG_4_APS_LEVEL_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001100 + (N) * 0x04) bits 2:0) field REG_RX_STG_4_APS_LEVEL of register PMC_ODU_RCP_REG_RX_STG_4_APS_LEVEL index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_4_APS_LEVEL_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_4_APS_LEVEL_BIT_REG_RX_STG_4_APS_LEVEL_MSK)
                  >> ODU_RCP_REG_RX_STG_4_APS_LEVEL_BIT_REG_RX_STG_4_APS_LEVEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_4_APS_LEVEL_BIT_REG_RX_STG_4_APS_LEVEL_MSK, ODU_RCP_REG_RX_STG_4_APS_LEVEL_BIT_REG_RX_STG_4_APS_LEVEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_REG_RX_STG_4_APS_LEVEL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_2_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_2_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_2_CFC_IPT_VALID_set", N, 95);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_2_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_2_CFC_IPT_VALID_set", N, value );

    /* ((0x00001a40 + (N) * 0x04) bits 24) field RX_STG_2_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_2_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VALID_MSK,
                                                 ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VALID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_2_CFC_IPT_VALID_get", N, 95);
    /* ((0x00001a40 + (N) * 0x04) bits 24) field RX_STG_2_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_2_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_2_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_2_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_2_CFC_IPT_ID_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_2_CFC_IPT_ID_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_2_CFC_IPT_ID_set", N, value );

    /* ((0x00001a40 + (N) * 0x04) bits 22:16) field RX_STG_2_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_2_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_ID_MSK,
                                                 ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_ID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_2_CFC_IPT_ID_get", N, 95);
    /* ((0x00001a40 + (N) * 0x04) bits 22:16) field RX_STG_2_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_ID_MSK) >> ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_2_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001a40 + (N) * 0x04) bits 22:16) field RX_STG_2_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001a40 + (N) * 0x04) bits 22:16) field RX_STG_2_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
        ri_rcp_reg_RX_STG_2_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_ID_OFF + subfield_offset),
                                                     ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_ID_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001a40 + (N) * 0x04) bits 22:16) field RX_STG_2_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_ID_MSK, ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_2_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_2_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_2_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_2_CFC_IPT_VA_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_2_CFC_IPT_VA_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_2_CFC_IPT_VA_set", N, value );

    /* ((0x00001a40 + (N) * 0x04) bits 6:0) field RX_STG_2_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_2_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VA_MSK,
                                                 ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VA_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_2_CFC_IPT_VA_get", N, 95);
    /* ((0x00001a40 + (N) * 0x04) bits 6:0) field RX_STG_2_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VA_MSK) >> ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_2_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001a40 + (N) * 0x04) bits 6:0) field RX_STG_2_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001a40 + (N) * 0x04) bits 6:0) field RX_STG_2_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
        ri_rcp_reg_RX_STG_2_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VA_OFF + subfield_offset),
                                                     ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VA_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001a40 + (N) * 0x04) bits 6:0) field RX_STG_2_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_2_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VA_MSK, ODU_RCP_REG_RX_STG_2_CFC_IPT_BIT_RX_STG_2_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_2_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3A_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3A_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3A_CFC_IPT_VALID_set", N, 95);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_IPT_VALID_set", N, value );

    /* ((0x00001c40 + (N) * 0x04) bits 24) field RX_STG_3A_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_3A_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VALID_MSK,
                                                  ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VALID_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3A_CFC_IPT_VALID_get", N, 95);
    /* ((0x00001c40 + (N) * 0x04) bits 24) field RX_STG_3A_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3A_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3A_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3A_CFC_IPT_ID_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_IPT_ID_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_IPT_ID_set", N, value );

    /* ((0x00001c40 + (N) * 0x04) bits 22:16) field RX_STG_3A_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_3A_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_ID_MSK,
                                                  ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_ID_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3A_CFC_IPT_ID_get", N, 95);
    /* ((0x00001c40 + (N) * 0x04) bits 22:16) field RX_STG_3A_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_ID_MSK) >> ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001c40 + (N) * 0x04) bits 22:16) field RX_STG_3A_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001c40 + (N) * 0x04) bits 22:16) field RX_STG_3A_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
        ri_rcp_reg_RX_STG_3A_CFC_IPT_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_ID_OFF + subfield_offset),
                                                      ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_ID_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001c40 + (N) * 0x04) bits 22:16) field RX_STG_3A_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_ID_MSK, ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3A_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3A_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3A_CFC_IPT_VA_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_IPT_VA_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_IPT_VA_set", N, value );

    /* ((0x00001c40 + (N) * 0x04) bits 6:0) field RX_STG_3A_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_3A_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VA_MSK,
                                                  ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VA_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3A_CFC_IPT_VA_get", N, 95);
    /* ((0x00001c40 + (N) * 0x04) bits 6:0) field RX_STG_3A_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VA_MSK) >> ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001c40 + (N) * 0x04) bits 6:0) field RX_STG_3A_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001c40 + (N) * 0x04) bits 6:0) field RX_STG_3A_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
        ri_rcp_reg_RX_STG_3A_CFC_IPT_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VA_OFF + subfield_offset),
                                                      ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VA_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001c40 + (N) * 0x04) bits 6:0) field RX_STG_3A_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VA_MSK, ODU_RCP_REG_RX_STG_3A_CFC_IPT_BIT_RX_STG_3A_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3A_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3B_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3B_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3B_CFC_IPT_VALID_set", N, 95);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_IPT_VALID_set", N, value );

    /* ((0x00001e40 + (N) * 0x04) bits 24) field RX_STG_3B_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_3B_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VALID_MSK,
                                                  ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VALID_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3B_CFC_IPT_VALID_get", N, 95);
    /* ((0x00001e40 + (N) * 0x04) bits 24) field RX_STG_3B_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3B_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3B_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3B_CFC_IPT_ID_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_IPT_ID_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_IPT_ID_set", N, value );

    /* ((0x00001e40 + (N) * 0x04) bits 22:16) field RX_STG_3B_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_3B_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_ID_MSK,
                                                  ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_ID_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3B_CFC_IPT_ID_get", N, 95);
    /* ((0x00001e40 + (N) * 0x04) bits 22:16) field RX_STG_3B_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_ID_MSK) >> ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001e40 + (N) * 0x04) bits 22:16) field RX_STG_3B_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001e40 + (N) * 0x04) bits 22:16) field RX_STG_3B_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
        ri_rcp_reg_RX_STG_3B_CFC_IPT_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_ID_OFF + subfield_offset),
                                                      ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_ID_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001e40 + (N) * 0x04) bits 22:16) field RX_STG_3B_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_ID_MSK, ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3B_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3B_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3B_CFC_IPT_VA_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_IPT_VA_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_IPT_VA_set", N, value );

    /* ((0x00001e40 + (N) * 0x04) bits 6:0) field RX_STG_3B_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_3B_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VA_MSK,
                                                  ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VA_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_3B_CFC_IPT_VA_get", N, 95);
    /* ((0x00001e40 + (N) * 0x04) bits 6:0) field RX_STG_3B_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VA_MSK) >> ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001e40 + (N) * 0x04) bits 6:0) field RX_STG_3B_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001e40 + (N) * 0x04) bits 6:0) field RX_STG_3B_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
        ri_rcp_reg_RX_STG_3B_CFC_IPT_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VA_OFF + subfield_offset),
                                                      ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VA_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001e40 + (N) * 0x04) bits 6:0) field RX_STG_3B_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VA_MSK, ODU_RCP_REG_RX_STG_3B_CFC_IPT_BIT_RX_STG_3B_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_3B_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_4_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_4_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_4_CFC_IPT_VALID_set", N, 95);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_4_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_4_CFC_IPT_VALID_set", N, value );

    /* ((0x00002040 + (N) * 0x04) bits 24) field RX_STG_4_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_4_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VALID_MSK,
                                                 ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VALID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_4_CFC_IPT_VALID_get", N, 95);
    /* ((0x00002040 + (N) * 0x04) bits 24) field RX_STG_4_CFC_IPT_VALID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_4_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_4_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_4_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_4_CFC_IPT_ID_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_4_CFC_IPT_ID_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_4_CFC_IPT_ID_set", N, value );

    /* ((0x00002040 + (N) * 0x04) bits 22:16) field RX_STG_4_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_4_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_ID_MSK,
                                                 ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_ID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_4_CFC_IPT_ID_get", N, 95);
    /* ((0x00002040 + (N) * 0x04) bits 22:16) field RX_STG_4_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_ID_MSK) >> ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_4_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002040 + (N) * 0x04) bits 22:16) field RX_STG_4_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002040 + (N) * 0x04) bits 22:16) field RX_STG_4_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
        ri_rcp_reg_RX_STG_4_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_ID_OFF + subfield_offset),
                                                     ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_ID_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002040 + (N) * 0x04) bits 22:16) field RX_STG_4_CFC_IPT_ID of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_ID_MSK, ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_4_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_4_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_4_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_4_CFC_IPT_VA_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_4_CFC_IPT_VA_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_RX_STG_4_CFC_IPT_VA_set", N, value );

    /* ((0x00002040 + (N) * 0x04) bits 6:0) field RX_STG_4_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
    ri_rcp_reg_RX_STG_4_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VA_MSK,
                                                 ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VA_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_RX_STG_4_CFC_IPT_VA_get", N, 95);
    /* ((0x00002040 + (N) * 0x04) bits 6:0) field RX_STG_4_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VA_MSK) >> ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_RX_STG_4_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002040 + (N) * 0x04) bits 6:0) field RX_STG_4_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002040 + (N) * 0x04) bits 6:0) field RX_STG_4_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
        ri_rcp_reg_RX_STG_4_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VA_OFF + subfield_offset),
                                                     ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VA_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002040 + (N) * 0x04) bits 6:0) field RX_STG_4_CFC_IPT_VA of register PMC_ODU_RCP_REG_RX_STG_4_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VA_MSK, ODU_RCP_REG_RX_STG_4_CFC_IPT_BIT_RX_STG_4_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_RX_STG_4_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_2_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_2_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_2_CFC_IPT_VALID_set", N, 95);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_2_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_2_CFC_IPT_VALID_set", N, value );

    /* ((0x00002640 + (N) * 0x04) bits 24) field TX_STG_2_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_2_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VALID_MSK,
                                                 ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VALID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_2_CFC_IPT_VALID_get", N, 95);
    /* ((0x00002640 + (N) * 0x04) bits 24) field TX_STG_2_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_2_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_2_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_2_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_2_CFC_IPT_ID_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_2_CFC_IPT_ID_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_2_CFC_IPT_ID_set", N, value );

    /* ((0x00002640 + (N) * 0x04) bits 22:16) field TX_STG_2_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_2_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_ID_MSK,
                                                 ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_ID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_2_CFC_IPT_ID_get", N, 95);
    /* ((0x00002640 + (N) * 0x04) bits 22:16) field TX_STG_2_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_ID_MSK) >> ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_2_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002640 + (N) * 0x04) bits 22:16) field TX_STG_2_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002640 + (N) * 0x04) bits 22:16) field TX_STG_2_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
        ri_rcp_reg_TX_STG_2_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_ID_OFF + subfield_offset),
                                                     ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_ID_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002640 + (N) * 0x04) bits 22:16) field TX_STG_2_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_ID_MSK, ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_2_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_2_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_2_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_2_CFC_IPT_VA_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_2_CFC_IPT_VA_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_2_CFC_IPT_VA_set", N, value );

    /* ((0x00002640 + (N) * 0x04) bits 6:0) field TX_STG_2_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_2_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VA_MSK,
                                                 ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VA_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_2_CFC_IPT_VA_get", N, 95);
    /* ((0x00002640 + (N) * 0x04) bits 6:0) field TX_STG_2_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VA_MSK) >> ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_2_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002640 + (N) * 0x04) bits 6:0) field TX_STG_2_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002640 + (N) * 0x04) bits 6:0) field TX_STG_2_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
        ri_rcp_reg_TX_STG_2_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VA_OFF + subfield_offset),
                                                     ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VA_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002640 + (N) * 0x04) bits 6:0) field TX_STG_2_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_2_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VA_MSK, ODU_RCP_REG_TX_STG_2_CFC_IPT_BIT_TX_STG_2_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_2_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3A_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3A_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3A_CFC_IPT_VALID_set", N, 95);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_IPT_VALID_set", N, value );

    /* ((0x00002840 + (N) * 0x04) bits 24) field TX_STG_3A_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_3A_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VALID_MSK,
                                                  ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VALID_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3A_CFC_IPT_VALID_get", N, 95);
    /* ((0x00002840 + (N) * 0x04) bits 24) field TX_STG_3A_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3A_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3A_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3A_CFC_IPT_ID_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_IPT_ID_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_IPT_ID_set", N, value );

    /* ((0x00002840 + (N) * 0x04) bits 22:16) field TX_STG_3A_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_3A_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_ID_MSK,
                                                  ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_ID_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3A_CFC_IPT_ID_get", N, 95);
    /* ((0x00002840 + (N) * 0x04) bits 22:16) field TX_STG_3A_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_ID_MSK) >> ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002840 + (N) * 0x04) bits 22:16) field TX_STG_3A_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002840 + (N) * 0x04) bits 22:16) field TX_STG_3A_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
        ri_rcp_reg_TX_STG_3A_CFC_IPT_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_ID_OFF + subfield_offset),
                                                      ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_ID_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002840 + (N) * 0x04) bits 22:16) field TX_STG_3A_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_ID_MSK, ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3A_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3A_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3A_CFC_IPT_VA_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_IPT_VA_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_IPT_VA_set", N, value );

    /* ((0x00002840 + (N) * 0x04) bits 6:0) field TX_STG_3A_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_3A_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VA_MSK,
                                                  ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VA_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3A_CFC_IPT_VA_get", N, 95);
    /* ((0x00002840 + (N) * 0x04) bits 6:0) field TX_STG_3A_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VA_MSK) >> ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002840 + (N) * 0x04) bits 6:0) field TX_STG_3A_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002840 + (N) * 0x04) bits 6:0) field TX_STG_3A_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
        ri_rcp_reg_TX_STG_3A_CFC_IPT_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VA_OFF + subfield_offset),
                                                      ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VA_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002840 + (N) * 0x04) bits 6:0) field TX_STG_3A_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VA_MSK, ODU_RCP_REG_TX_STG_3A_CFC_IPT_BIT_TX_STG_3A_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3A_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3B_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3B_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3B_CFC_IPT_VALID_set", N, 95);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_IPT_VALID_set", N, value );

    /* ((0x00002a40 + (N) * 0x04) bits 24) field TX_STG_3B_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_3B_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VALID_MSK,
                                                  ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VALID_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3B_CFC_IPT_VALID_get", N, 95);
    /* ((0x00002a40 + (N) * 0x04) bits 24) field TX_STG_3B_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3B_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3B_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3B_CFC_IPT_ID_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_IPT_ID_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_IPT_ID_set", N, value );

    /* ((0x00002a40 + (N) * 0x04) bits 22:16) field TX_STG_3B_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_3B_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_ID_MSK,
                                                  ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_ID_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3B_CFC_IPT_ID_get", N, 95);
    /* ((0x00002a40 + (N) * 0x04) bits 22:16) field TX_STG_3B_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_ID_MSK) >> ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002a40 + (N) * 0x04) bits 22:16) field TX_STG_3B_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002a40 + (N) * 0x04) bits 22:16) field TX_STG_3B_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
        ri_rcp_reg_TX_STG_3B_CFC_IPT_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_ID_OFF + subfield_offset),
                                                      ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_ID_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002a40 + (N) * 0x04) bits 22:16) field TX_STG_3B_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_ID_MSK, ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3B_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3B_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3B_CFC_IPT_VA_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_IPT_VA_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_IPT_VA_set", N, value );

    /* ((0x00002a40 + (N) * 0x04) bits 6:0) field TX_STG_3B_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_3B_CFC_IPT_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VA_MSK,
                                                  ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VA_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_3B_CFC_IPT_VA_get", N, 95);
    /* ((0x00002a40 + (N) * 0x04) bits 6:0) field TX_STG_3B_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VA_MSK) >> ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002a40 + (N) * 0x04) bits 6:0) field TX_STG_3B_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002a40 + (N) * 0x04) bits 6:0) field TX_STG_3B_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
        ri_rcp_reg_TX_STG_3B_CFC_IPT_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VA_OFF + subfield_offset),
                                                      ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VA_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002a40 + (N) * 0x04) bits 6:0) field TX_STG_3B_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_IPT_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VA_MSK, ODU_RCP_REG_TX_STG_3B_CFC_IPT_BIT_TX_STG_3B_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_3B_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_4_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_4_CFC_IPT_VALID_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_4_CFC_IPT_VALID_set", N, 95);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_4_CFC_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_4_CFC_IPT_VALID_set", N, value );

    /* ((0x00002c40 + (N) * 0x04) bits 24) field TX_STG_4_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_4_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VALID_MSK,
                                                 ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VALID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_IPT_VALID_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_4_CFC_IPT_VALID_get", N, 95);
    /* ((0x00002c40 + (N) * 0x04) bits 24) field TX_STG_4_CFC_IPT_VALID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VALID_MSK) >> ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_4_CFC_IPT_VALID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_4_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_4_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_4_CFC_IPT_ID_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_4_CFC_IPT_ID_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_4_CFC_IPT_ID_set", N, value );

    /* ((0x00002c40 + (N) * 0x04) bits 22:16) field TX_STG_4_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_4_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_ID_MSK,
                                                 ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_ID_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_4_CFC_IPT_ID_get", N, 95);
    /* ((0x00002c40 + (N) * 0x04) bits 22:16) field TX_STG_4_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_ID_MSK) >> ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_4_CFC_IPT_ID_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002c40 + (N) * 0x04) bits 22:16) field TX_STG_4_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002c40 + (N) * 0x04) bits 22:16) field TX_STG_4_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
        ri_rcp_reg_TX_STG_4_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_ID_OFF + subfield_offset),
                                                     ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_ID_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002c40 + (N) * 0x04) bits 22:16) field TX_STG_4_CFC_IPT_ID of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_ID_MSK)
                  >> ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_ID_MSK, ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_4_CFC_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_4_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_4_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_4_CFC_IPT_VA_set", N, 95);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_4_CFC_IPT_VA_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_TX_STG_4_CFC_IPT_VA_set", N, value );

    /* ((0x00002c40 + (N) * 0x04) bits 6:0) field TX_STG_4_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
    ri_rcp_reg_TX_STG_4_CFC_IPT_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VA_MSK,
                                                 ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VA_OFF,
                                                 value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_TX_STG_4_CFC_IPT_VA_get", N, 95);
    /* ((0x00002c40 + (N) * 0x04) bits 6:0) field TX_STG_4_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VA_MSK) >> ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_TX_STG_4_CFC_IPT_VA_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002c40 + (N) * 0x04) bits 6:0) field TX_STG_4_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002c40 + (N) * 0x04) bits 6:0) field TX_STG_4_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
        ri_rcp_reg_TX_STG_4_CFC_IPT_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VA_OFF + subfield_offset),
                                                     ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VA_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002c40 + (N) * 0x04) bits 6:0) field TX_STG_4_CFC_IPT_VA of register PMC_ODU_RCP_REG_TX_STG_4_CFC_IPT index N=0..95 */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_IPT_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VA_MSK)
                  >> ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VA_MSK, ODU_RCP_REG_TX_STG_4_CFC_IPT_BIT_TX_STG_4_CFC_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_TX_STG_4_CFC_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_edge
 * ==================================================================================
 */
static INLINE void ri_rcp_field_DBG_TRIG_set( ri_rcp_buffer_t *b_ptr,
                                              odu_rcp_handle_t *h_ptr,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_DBG_TRIG_set( ri_rcp_buffer_t *b_ptr,
                                              odu_rcp_handle_t *h_ptr,
                                              UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_DBG_TRIG_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_DBG_TRIG_set", value );

    /* (0x00001304 bits 16) field DBG_TRIG of register PMC_ODU_RCP_REG_DBG_CTRL */
    ri_rcp_reg_DBG_CTRL_field_set( b_ptr,
                                   h_ptr,
                                   ODU_RCP_REG_DBG_CTRL_BIT_DBG_TRIG_MSK,
                                   ODU_RCP_REG_DBG_CTRL_BIT_DBG_TRIG_OFF,
                                   value);
}

static INLINE UINT32 ri_rcp_field_DBG_TRIG_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_DBG_TRIG_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001304 bits 16) field DBG_TRIG of register PMC_ODU_RCP_REG_DBG_CTRL */
    reg_value = ri_rcp_reg_DBG_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_DBG_CTRL_BIT_DBG_TRIG_MSK) >> ODU_RCP_REG_DBG_CTRL_BIT_DBG_TRIG_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_DBG_TRIG_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00001820 bits 28) field RX_STG_1_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG */
    ri_rcp_reg_RX_STG_1_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ABORT_MSK,
                                           ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ABORT_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001820 bits 28) field RX_STG_1_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00001820 bits 24) field RX_STG_1_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG */
    ri_rcp_reg_RX_STG_1_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_REQ_MSK,
                                           ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_REQ_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001820 bits 24) field RX_STG_1_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_RX_STG_1_CFC_CFG_BIT_RX_STG_1_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00001a20 bits 28) field RX_STG_2_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG */
    ri_rcp_reg_RX_STG_2_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ABORT_MSK,
                                           ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ABORT_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001a20 bits 28) field RX_STG_2_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00001a20 bits 24) field RX_STG_2_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG */
    ri_rcp_reg_RX_STG_2_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_REQ_MSK,
                                           ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_REQ_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001a20 bits 24) field RX_STG_2_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_RX_STG_2_CFC_CFG_BIT_RX_STG_2_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00001c20 bits 28) field RX_STG_3A_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG */
    ri_rcp_reg_RX_STG_3A_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ABORT_MSK,
                                            ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ABORT_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001c20 bits 28) field RX_STG_3A_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00001c20 bits 24) field RX_STG_3A_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG */
    ri_rcp_reg_RX_STG_3A_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_REQ_MSK,
                                            ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_REQ_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001c20 bits 24) field RX_STG_3A_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_RX_STG_3A_CFC_CFG_BIT_RX_STG_3A_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00001e20 bits 28) field RX_STG_3B_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG */
    ri_rcp_reg_RX_STG_3B_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ABORT_MSK,
                                            ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ABORT_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001e20 bits 28) field RX_STG_3B_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00001e20 bits 24) field RX_STG_3B_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG */
    ri_rcp_reg_RX_STG_3B_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_REQ_MSK,
                                            ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_REQ_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001e20 bits 24) field RX_STG_3B_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_RX_STG_3B_CFC_CFG_BIT_RX_STG_3B_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00002020 bits 28) field RX_STG_4_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG */
    ri_rcp_reg_RX_STG_4_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ABORT_MSK,
                                           ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ABORT_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002020 bits 28) field RX_STG_4_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00002020 bits 24) field RX_STG_4_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG */
    ri_rcp_reg_RX_STG_4_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_REQ_MSK,
                                           ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_REQ_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002020 bits 24) field RX_STG_4_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_RX_STG_4_CFC_CFG_BIT_RX_STG_4_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00002220 bits 28) field RX_STG_N_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG */
    ri_rcp_reg_RX_STG_N_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ABORT_MSK,
                                           ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ABORT_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002220 bits 28) field RX_STG_N_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00002220 bits 24) field RX_STG_N_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG */
    ri_rcp_reg_RX_STG_N_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_REQ_MSK,
                                           ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_REQ_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002220 bits 24) field RX_STG_N_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_RX_STG_N_CFC_CFG_BIT_RX_STG_N_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00002420 bits 28) field TX_STG_1_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG */
    ri_rcp_reg_TX_STG_1_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ABORT_MSK,
                                           ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ABORT_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002420 bits 28) field TX_STG_1_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00002420 bits 24) field TX_STG_1_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG */
    ri_rcp_reg_TX_STG_1_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_REQ_MSK,
                                           ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_REQ_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002420 bits 24) field TX_STG_1_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_TX_STG_1_CFC_CFG_BIT_TX_STG_1_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00002620 bits 28) field TX_STG_2_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG */
    ri_rcp_reg_TX_STG_2_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ABORT_MSK,
                                           ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ABORT_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002620 bits 28) field TX_STG_2_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00002620 bits 24) field TX_STG_2_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG */
    ri_rcp_reg_TX_STG_2_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_REQ_MSK,
                                           ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_REQ_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002620 bits 24) field TX_STG_2_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_TX_STG_2_CFC_CFG_BIT_TX_STG_2_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00002820 bits 28) field TX_STG_3A_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG */
    ri_rcp_reg_TX_STG_3A_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ABORT_MSK,
                                            ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ABORT_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002820 bits 28) field TX_STG_3A_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00002820 bits 24) field TX_STG_3A_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG */
    ri_rcp_reg_TX_STG_3A_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_REQ_MSK,
                                            ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_REQ_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002820 bits 24) field TX_STG_3A_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_TX_STG_3A_CFC_CFG_BIT_TX_STG_3A_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00002a20 bits 28) field TX_STG_3B_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG */
    ri_rcp_reg_TX_STG_3B_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ABORT_MSK,
                                            ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ABORT_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002a20 bits 28) field TX_STG_3B_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00002a20 bits 24) field TX_STG_3B_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG */
    ri_rcp_reg_TX_STG_3B_CFC_CFG_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_REQ_MSK,
                                            ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_REQ_OFF,
                                            value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002a20 bits 24) field TX_STG_3B_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_TX_STG_3B_CFC_CFG_BIT_TX_STG_3B_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00002c20 bits 28) field TX_STG_4_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG */
    ri_rcp_reg_TX_STG_4_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ABORT_MSK,
                                           ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ABORT_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002c20 bits 28) field TX_STG_4_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00002c20 bits 24) field TX_STG_4_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG */
    ri_rcp_reg_TX_STG_4_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_REQ_MSK,
                                           ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_REQ_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002c20 bits 24) field TX_STG_4_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_TX_STG_4_CFC_CFG_BIT_TX_STG_4_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ABORT_set( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ABORT_set", value );

    /* (0x00002e20 bits 28) field TX_STG_N_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG */
    ri_rcp_reg_TX_STG_N_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ABORT_MSK,
                                           ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ABORT_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ABORT_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002e20 bits 28) field TX_STG_N_CFC_END_ADDR_CHG_ABORT of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ABORT_MSK) >> ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_ABORT_get", value );

    return value;
}
static INLINE void ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_REQ_set( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_REQ_set", value );

    /* (0x00002e20 bits 24) field TX_STG_N_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG */
    ri_rcp_reg_TX_STG_N_CFC_CFG_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_REQ_MSK,
                                           ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_REQ_OFF,
                                           value);
}

static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_REQ_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002e20 bits 24) field TX_STG_N_CFC_END_ADDR_CHG_REQ of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_REQ_MSK) >> ODU_RCP_REG_TX_STG_N_CFC_CFG_BIT_TX_STG_N_CFC_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_REQ_get", value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */
static INLINE void ri_rcp_field_FEGE_TIP_E_set( ri_rcp_buffer_t *b_ptr,
                                                odu_rcp_handle_t *h_ptr,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_FEGE_TIP_E_set( ri_rcp_buffer_t *b_ptr,
                                                odu_rcp_handle_t *h_ptr,
                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_FEGE_TIP_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_FEGE_TIP_E_set", value );

    /* (0x00000040 bits 0) field FEGE_TIP_E of register PMC_ODU_RCP_REG_GEN_IRQ_E */
    ri_rcp_reg_GEN_IRQ_E_field_set( b_ptr,
                                    h_ptr,
                                    ODU_RCP_REG_GEN_IRQ_E_BIT_FEGE_TIP_E_MSK,
                                    ODU_RCP_REG_GEN_IRQ_E_BIT_FEGE_TIP_E_OFF,
                                    value);
}

static INLINE UINT32 ri_rcp_field_FEGE_TIP_E_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_FEGE_TIP_E_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000040 bits 0) field FEGE_TIP_E of register PMC_ODU_RCP_REG_GEN_IRQ_E */
    reg_value = ri_rcp_reg_GEN_IRQ_E_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_GEN_IRQ_E_BIT_FEGE_TIP_E_MSK) >> ODU_RCP_REG_GEN_IRQ_E_BIT_FEGE_TIP_E_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_FEGE_TIP_E_get", value );

    return value;
}
static INLINE void ri_rcp_lfield_CFC_FIFO_IRQ_E_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_CFC_FIFO_IRQ_E_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_FIFO_IRQ_E_set", value[2] , value[1] , value[0] );

    /* (0x00001360 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_0 */
    ri_rcp_reg_CFC_FIFO_IRQ_EN_0_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_CFC_FIFO_IRQ_EN_0_BIT_CFC_FIFO_IRQ_E_MSK,
                                            ODU_RCP_REG_CFC_FIFO_IRQ_EN_0_BIT_CFC_FIFO_IRQ_E_OFF,
                                            value[0]);

    /* (0x00001364 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_1 */
    ri_rcp_reg_CFC_FIFO_IRQ_EN_1_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_CFC_FIFO_IRQ_EN_1_BIT_CFC_FIFO_IRQ_E_MSK,
                                            ODU_RCP_REG_CFC_FIFO_IRQ_EN_1_BIT_CFC_FIFO_IRQ_E_OFF,
                                            value[1]);

    /* (0x00001368 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_2 */
    ri_rcp_reg_CFC_FIFO_IRQ_EN_2_field_set( b_ptr,
                                            h_ptr,
                                            ODU_RCP_REG_CFC_FIFO_IRQ_EN_2_BIT_CFC_FIFO_IRQ_E_MSK,
                                            ODU_RCP_REG_CFC_FIFO_IRQ_EN_2_BIT_CFC_FIFO_IRQ_E_OFF,
                                            value[2]);
}

static INLINE void ri_rcp_lfield_CFC_FIFO_IRQ_E_get( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_CFC_FIFO_IRQ_E_get( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00001360 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_0 */
    reg_value = ri_rcp_reg_CFC_FIFO_IRQ_EN_0_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_EN_0_BIT_CFC_FIFO_IRQ_E_MSK) >> ODU_RCP_REG_CFC_FIFO_IRQ_EN_0_BIT_CFC_FIFO_IRQ_E_OFF;
    value[0] |= field_value;

    /* (0x00001364 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_1 */
    reg_value = ri_rcp_reg_CFC_FIFO_IRQ_EN_1_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_EN_1_BIT_CFC_FIFO_IRQ_E_MSK) >> ODU_RCP_REG_CFC_FIFO_IRQ_EN_1_BIT_CFC_FIFO_IRQ_E_OFF;
    value[1] |= field_value;

    /* (0x00001368 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_2 */
    reg_value = ri_rcp_reg_CFC_FIFO_IRQ_EN_2_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_EN_2_BIT_CFC_FIFO_IRQ_E_MSK) >> ODU_RCP_REG_CFC_FIFO_IRQ_EN_2_BIT_CFC_FIFO_IRQ_E_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_FIFO_IRQ_E_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_CFC_FIFO_IRQ_E_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_CFC_FIFO_IRQ_E_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_FIFO_IRQ_E_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_FIFO_IRQ_E_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_FIFO_IRQ_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001360 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001360 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_0 */
        ri_rcp_reg_CFC_FIFO_IRQ_EN_0_field_set( b_ptr,
                                                h_ptr,
                                                subfield_mask << (ODU_RCP_REG_CFC_FIFO_IRQ_EN_0_BIT_CFC_FIFO_IRQ_E_OFF + subfield_offset),
                                                ODU_RCP_REG_CFC_FIFO_IRQ_EN_0_BIT_CFC_FIFO_IRQ_E_OFF + subfield_offset,
                                                value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001364 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001364 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_1 */
        ri_rcp_reg_CFC_FIFO_IRQ_EN_1_field_set( b_ptr,
                                                h_ptr,
                                                subfield_mask << (ODU_RCP_REG_CFC_FIFO_IRQ_EN_1_BIT_CFC_FIFO_IRQ_E_OFF + subfield_offset),
                                                ODU_RCP_REG_CFC_FIFO_IRQ_EN_1_BIT_CFC_FIFO_IRQ_E_OFF + subfield_offset,
                                                value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001368 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001368 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_2 */
        ri_rcp_reg_CFC_FIFO_IRQ_EN_2_field_set( b_ptr,
                                                h_ptr,
                                                subfield_mask << (ODU_RCP_REG_CFC_FIFO_IRQ_EN_2_BIT_CFC_FIFO_IRQ_E_OFF + subfield_offset),
                                                ODU_RCP_REG_CFC_FIFO_IRQ_EN_2_BIT_CFC_FIFO_IRQ_E_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_CFC_FIFO_IRQ_E_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_CFC_FIFO_IRQ_E_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_FIFO_IRQ_E_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_FIFO_IRQ_E_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001360 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_0 */
        reg_value = ri_rcp_reg_CFC_FIFO_IRQ_EN_0_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_EN_0_BIT_CFC_FIFO_IRQ_E_MSK)
                      >> ODU_RCP_REG_CFC_FIFO_IRQ_EN_0_BIT_CFC_FIFO_IRQ_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_FIFO_IRQ_EN_0_BIT_CFC_FIFO_IRQ_E_MSK, ODU_RCP_REG_CFC_FIFO_IRQ_EN_0_BIT_CFC_FIFO_IRQ_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001364 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_1 */
        reg_value = ri_rcp_reg_CFC_FIFO_IRQ_EN_1_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_EN_1_BIT_CFC_FIFO_IRQ_E_MSK)
                      >> ODU_RCP_REG_CFC_FIFO_IRQ_EN_1_BIT_CFC_FIFO_IRQ_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_FIFO_IRQ_EN_1_BIT_CFC_FIFO_IRQ_E_MSK, ODU_RCP_REG_CFC_FIFO_IRQ_EN_1_BIT_CFC_FIFO_IRQ_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001368 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_E of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_EN_2 */
        reg_value = ri_rcp_reg_CFC_FIFO_IRQ_EN_2_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_EN_2_BIT_CFC_FIFO_IRQ_E_MSK)
                      >> ODU_RCP_REG_CFC_FIFO_IRQ_EN_2_BIT_CFC_FIFO_IRQ_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_FIFO_IRQ_EN_2_BIT_CFC_FIFO_IRQ_E_MSK, ODU_RCP_REG_CFC_FIFO_IRQ_EN_2_BIT_CFC_FIFO_IRQ_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_FIFO_IRQ_E_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_CFC_IPT_ERR_E_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_CFC_IPT_ERR_E_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_IPT_ERR_E_set", value[2] , value[1] , value[0] );

    /* (0x00001380 bits 31:0) bits 0:31 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_0 */
    ri_rcp_reg_CFC_IPT_ERR_EN_0_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_CFC_IPT_ERR_EN_0_BIT_CFC_IPT_ERR_E_MSK,
                                           ODU_RCP_REG_CFC_IPT_ERR_EN_0_BIT_CFC_IPT_ERR_E_OFF,
                                           value[0]);

    /* (0x00001384 bits 31:0) bits 32:63 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_1 */
    ri_rcp_reg_CFC_IPT_ERR_EN_1_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_CFC_IPT_ERR_EN_1_BIT_CFC_IPT_ERR_E_MSK,
                                           ODU_RCP_REG_CFC_IPT_ERR_EN_1_BIT_CFC_IPT_ERR_E_OFF,
                                           value[1]);

    /* (0x00001388 bits 31:0) bits 64:95 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_2 */
    ri_rcp_reg_CFC_IPT_ERR_EN_2_field_set( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_CFC_IPT_ERR_EN_2_BIT_CFC_IPT_ERR_E_MSK,
                                           ODU_RCP_REG_CFC_IPT_ERR_EN_2_BIT_CFC_IPT_ERR_E_OFF,
                                           value[2]);
}

static INLINE void ri_rcp_lfield_CFC_IPT_ERR_E_get( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_CFC_IPT_ERR_E_get( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00001380 bits 31:0) bits 0:31 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_0 */
    reg_value = ri_rcp_reg_CFC_IPT_ERR_EN_0_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_EN_0_BIT_CFC_IPT_ERR_E_MSK) >> ODU_RCP_REG_CFC_IPT_ERR_EN_0_BIT_CFC_IPT_ERR_E_OFF;
    value[0] |= field_value;

    /* (0x00001384 bits 31:0) bits 32:63 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_1 */
    reg_value = ri_rcp_reg_CFC_IPT_ERR_EN_1_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_EN_1_BIT_CFC_IPT_ERR_E_MSK) >> ODU_RCP_REG_CFC_IPT_ERR_EN_1_BIT_CFC_IPT_ERR_E_OFF;
    value[1] |= field_value;

    /* (0x00001388 bits 31:0) bits 64:95 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_2 */
    reg_value = ri_rcp_reg_CFC_IPT_ERR_EN_2_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_EN_2_BIT_CFC_IPT_ERR_E_MSK) >> ODU_RCP_REG_CFC_IPT_ERR_EN_2_BIT_CFC_IPT_ERR_E_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_IPT_ERR_E_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_CFC_IPT_ERR_E_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_CFC_IPT_ERR_E_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_IPT_ERR_E_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_IPT_ERR_E_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_IPT_ERR_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001380 bits 31:0) bits 0:31 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001380 bits 31:0) bits 0:31 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_0 */
        ri_rcp_reg_CFC_IPT_ERR_EN_0_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_CFC_IPT_ERR_EN_0_BIT_CFC_IPT_ERR_E_OFF + subfield_offset),
                                               ODU_RCP_REG_CFC_IPT_ERR_EN_0_BIT_CFC_IPT_ERR_E_OFF + subfield_offset,
                                               value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001384 bits 31:0) bits 32:63 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001384 bits 31:0) bits 32:63 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_1 */
        ri_rcp_reg_CFC_IPT_ERR_EN_1_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_CFC_IPT_ERR_EN_1_BIT_CFC_IPT_ERR_E_OFF + subfield_offset),
                                               ODU_RCP_REG_CFC_IPT_ERR_EN_1_BIT_CFC_IPT_ERR_E_OFF + subfield_offset,
                                               value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001388 bits 31:0) bits 64:95 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001388 bits 31:0) bits 64:95 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_2 */
        ri_rcp_reg_CFC_IPT_ERR_EN_2_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_CFC_IPT_ERR_EN_2_BIT_CFC_IPT_ERR_E_OFF + subfield_offset),
                                               ODU_RCP_REG_CFC_IPT_ERR_EN_2_BIT_CFC_IPT_ERR_E_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_CFC_IPT_ERR_E_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_CFC_IPT_ERR_E_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_IPT_ERR_E_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_IPT_ERR_E_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001380 bits 31:0) bits 0:31 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_0 */
        reg_value = ri_rcp_reg_CFC_IPT_ERR_EN_0_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_EN_0_BIT_CFC_IPT_ERR_E_MSK)
                      >> ODU_RCP_REG_CFC_IPT_ERR_EN_0_BIT_CFC_IPT_ERR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_IPT_ERR_EN_0_BIT_CFC_IPT_ERR_E_MSK, ODU_RCP_REG_CFC_IPT_ERR_EN_0_BIT_CFC_IPT_ERR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001384 bits 31:0) bits 32:63 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_1 */
        reg_value = ri_rcp_reg_CFC_IPT_ERR_EN_1_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_EN_1_BIT_CFC_IPT_ERR_E_MSK)
                      >> ODU_RCP_REG_CFC_IPT_ERR_EN_1_BIT_CFC_IPT_ERR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_IPT_ERR_EN_1_BIT_CFC_IPT_ERR_E_MSK, ODU_RCP_REG_CFC_IPT_ERR_EN_1_BIT_CFC_IPT_ERR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001388 bits 31:0) bits 64:95 use field CFC_IPT_ERR_E of register PMC_ODU_RCP_REG_CFC_IPT_ERR_EN_2 */
        reg_value = ri_rcp_reg_CFC_IPT_ERR_EN_2_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_EN_2_BIT_CFC_IPT_ERR_E_MSK)
                      >> ODU_RCP_REG_CFC_IPT_ERR_EN_2_BIT_CFC_IPT_ERR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_IPT_ERR_EN_2_BIT_CFC_IPT_ERR_E_MSK, ODU_RCP_REG_CFC_IPT_ERR_EN_2_BIT_CFC_IPT_ERR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_IPT_ERR_E_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_summary
 * ==================================================================================
 */
static INLINE UINT32 ri_rcp_field_INTERRUPT_SUMMARY_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_INTERRUPT_SUMMARY_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 12:0) bits 0:12 use field INTERRUPT_SUMMARY of register PMC_ODU_RCP_REG_IRQ_SUMMARY */
    reg_value = ri_rcp_reg_IRQ_SUMMARY_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_IRQ_SUMMARY_BIT_INTERRUPT_SUMMARY_MSK) >> ODU_RCP_REG_IRQ_SUMMARY_BIT_INTERRUPT_SUMMARY_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_INTERRUPT_SUMMARY_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_range_INTERRUPT_SUMMARY_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_INTERRUPT_SUMMARY_get( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_INTERRUPT_SUMMARY_get", stop_bit, start_bit );
    if (stop_bit > 12) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_INTERRUPT_SUMMARY_get", stop_bit, 12 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 12) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 12;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000010 bits 12:0) bits 0:12 use field INTERRUPT_SUMMARY of register PMC_ODU_RCP_REG_IRQ_SUMMARY */
    reg_value = ri_rcp_reg_IRQ_SUMMARY_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_IRQ_SUMMARY_BIT_INTERRUPT_SUMMARY_MSK)
                  >> ODU_RCP_REG_IRQ_SUMMARY_BIT_INTERRUPT_SUMMARY_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_IRQ_SUMMARY_BIT_INTERRUPT_SUMMARY_MSK, ODU_RCP_REG_IRQ_SUMMARY_BIT_INTERRUPT_SUMMARY_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_INTERRUPT_SUMMARY_get", start_bit, stop_bit, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_field_range_INTERRUPT_SUMMARY_poll( ri_rcp_buffer_t *b_ptr,
                                                                              odu_rcp_handle_t *h_ptr,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_field_range_INTERRUPT_SUMMARY_poll( ri_rcp_buffer_t *b_ptr,
                                                                              odu_rcp_handle_t *h_ptr,
                                                                              UINT32 start_bit,
                                                                              UINT32 stop_bit,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_INTERRUPT_SUMMARY_poll", stop_bit, start_bit );
    if (stop_bit > 12) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_INTERRUPT_SUMMARY_poll", stop_bit, 12 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_INTERRUPT_SUMMARY_poll", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000010 bits 12:0) bits 0:12 use field INTERRUPT_SUMMARY of register PMC_ODU_RCP_REG_IRQ_SUMMARY */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_start_bit = 0;
        }
        if (stop_bit < 12) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 12;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000010 bits 12:0) bits 0:12 use field INTERRUPT_SUMMARY of register PMC_ODU_RCP_REG_IRQ_SUMMARY */
        return ri_rcp_reg_IRQ_SUMMARY_poll( b_ptr,
                                            h_ptr,
                                            subfield_mask << (ODU_RCP_REG_IRQ_SUMMARY_BIT_INTERRUPT_SUMMARY_OFF + subfield_offset),
                                            value << (ODU_RCP_REG_IRQ_SUMMARY_BIT_INTERRUPT_SUMMARY_OFF + subfield_offset),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}

static INLINE PMC_POLL_RETURN_TYPE ri_rcp_field_INTERRUPT_SUMMARY_poll( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_field_INTERRUPT_SUMMARY_poll( ri_rcp_buffer_t *b_ptr,
                                                                        odu_rcp_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "ri_rcp_field_INTERRUPT_SUMMARY_poll", value );

    /* (0x00000010 bits 12:0) bits 0:12 use field INTERRUPT_SUMMARY of register PMC_ODU_RCP_REG_IRQ_SUMMARY */
    return ri_rcp_reg_IRQ_SUMMARY_poll( b_ptr,
                                        h_ptr,
                                        ODU_RCP_REG_IRQ_SUMMARY_BIT_INTERRUPT_SUMMARY_MSK,
                                        (value<<ODU_RCP_REG_IRQ_SUMMARY_BIT_INTERRUPT_SUMMARY_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_sync
 * ==================================================================================
 */
static INLINE void ri_rcp_field_FEGE_TIP_I_set_to_clear( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_FEGE_TIP_I_set_to_clear( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_FEGE_TIP_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "ri_rcp_field_FEGE_TIP_I_set_to_clear", value );

    /* (0x00000020 bits 0) field FEGE_TIP_I of register PMC_ODU_RCP_REG_GEN_IRQ_I */
    ri_rcp_reg_GEN_IRQ_I_action_on_write_field_set( b_ptr,
                                                    h_ptr,
                                                    ODU_RCP_REG_GEN_IRQ_I_BIT_FEGE_TIP_I_MSK,
                                                    ODU_RCP_REG_GEN_IRQ_I_BIT_FEGE_TIP_I_OFF,
                                                    value);
}

static INLINE UINT32 ri_rcp_field_FEGE_TIP_I_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_FEGE_TIP_I_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000020 bits 0) field FEGE_TIP_I of register PMC_ODU_RCP_REG_GEN_IRQ_I */
    reg_value = ri_rcp_reg_GEN_IRQ_I_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_GEN_IRQ_I_BIT_FEGE_TIP_I_MSK) >> ODU_RCP_REG_GEN_IRQ_I_BIT_FEGE_TIP_I_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_FEGE_TIP_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_field_FEGE_TIP_I_poll( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 value,
                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                 UINT32 max_count,
                                                                 UINT32 *num_failed_polls,
                                                                 UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_field_FEGE_TIP_I_poll( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32 value,
                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                 UINT32 max_count,
                                                                 UINT32 *num_failed_polls,
                                                                 UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "ri_rcp_field_FEGE_TIP_I_poll", value );

    /* (0x00000020 bits 0) field FEGE_TIP_I of register PMC_ODU_RCP_REG_GEN_IRQ_I */
    return ri_rcp_reg_GEN_IRQ_I_poll( b_ptr,
                                      h_ptr,
                                      ODU_RCP_REG_GEN_IRQ_I_BIT_FEGE_TIP_I_MSK,
                                      (value<<ODU_RCP_REG_GEN_IRQ_I_BIT_FEGE_TIP_I_OFF),
                                      cmp,
                                      max_count,
                                      num_failed_polls,
                                      delay_between_polls_in_microseconds);
}

static INLINE void ri_rcp_lfield_CFC_FIFO_IRQ_I_set_to_clear( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_CFC_FIFO_IRQ_I_set_to_clear( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_FIFO_IRQ_I_set_to_clear", value[2] , value[1] , value[0] );

    /* (0x00001330 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0 */
    ri_rcp_reg_CFC_FIFO_IRQ_0_action_on_write_field_set( b_ptr,
                                                         h_ptr,
                                                         ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_MSK,
                                                         ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_OFF,
                                                         value[0]);

    /* (0x00001334 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1 */
    ri_rcp_reg_CFC_FIFO_IRQ_1_action_on_write_field_set( b_ptr,
                                                         h_ptr,
                                                         ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_MSK,
                                                         ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_OFF,
                                                         value[1]);

    /* (0x00001338 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2 */
    ri_rcp_reg_CFC_FIFO_IRQ_2_action_on_write_field_set( b_ptr,
                                                         h_ptr,
                                                         ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_MSK,
                                                         ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_OFF,
                                                         value[2]);
}

static INLINE void ri_rcp_lfield_CFC_FIFO_IRQ_I_get( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_CFC_FIFO_IRQ_I_get( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00001330 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0 */
    reg_value = ri_rcp_reg_CFC_FIFO_IRQ_0_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_MSK) >> ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_OFF;
    value[0] |= field_value;

    /* (0x00001334 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1 */
    reg_value = ri_rcp_reg_CFC_FIFO_IRQ_1_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_MSK) >> ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_OFF;
    value[1] |= field_value;

    /* (0x00001338 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2 */
    reg_value = ri_rcp_reg_CFC_FIFO_IRQ_2_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_MSK) >> ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_FIFO_IRQ_I_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_CFC_FIFO_IRQ_I_set_to_clear( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_CFC_FIFO_IRQ_I_set_to_clear( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_FIFO_IRQ_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_FIFO_IRQ_I_set_to_clear", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_FIFO_IRQ_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001330 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001330 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0 */
        ri_rcp_reg_CFC_FIFO_IRQ_0_action_on_write_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset),
                                                             ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001334 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001334 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1 */
        ri_rcp_reg_CFC_FIFO_IRQ_1_action_on_write_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset),
                                                             ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001338 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001338 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2 */
        ri_rcp_reg_CFC_FIFO_IRQ_2_action_on_write_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset),
                                                             ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_CFC_FIFO_IRQ_I_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_CFC_FIFO_IRQ_I_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_FIFO_IRQ_I_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_FIFO_IRQ_I_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001330 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0 */
        reg_value = ri_rcp_reg_CFC_FIFO_IRQ_0_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_MSK)
                      >> ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_MSK, ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001334 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1 */
        reg_value = ri_rcp_reg_CFC_FIFO_IRQ_1_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_MSK)
                      >> ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_MSK, ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001338 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2 */
        reg_value = ri_rcp_reg_CFC_FIFO_IRQ_2_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_MSK)
                      >> ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_MSK, ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_FIFO_IRQ_I_get", start_bit, stop_bit, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_lfield_range_CFC_FIFO_IRQ_I_poll( ri_rcp_buffer_t *b_ptr,
                                                                            odu_rcp_handle_t *h_ptr,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_lfield_range_CFC_FIFO_IRQ_I_poll( ri_rcp_buffer_t *b_ptr,
                                                                            odu_rcp_handle_t *h_ptr,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_FIFO_IRQ_I_poll", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_FIFO_IRQ_I_poll", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_FIFO_IRQ_I_poll", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001330 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001330 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0 */
        return ri_rcp_reg_CFC_FIFO_IRQ_0_poll( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset),
                                               value << (ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset),
                                               cmp,
                                               max_count,
                                               num_failed_polls,
                                               delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001334 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001334 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1 */
        return ri_rcp_reg_CFC_FIFO_IRQ_1_poll( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset),
                                               value << (ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset),
                                               cmp,
                                               max_count,
                                               num_failed_polls,
                                               delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001338 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001338 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2 */
        return ri_rcp_reg_CFC_FIFO_IRQ_2_poll( b_ptr,
                                               h_ptr,
                                               subfield_mask << (ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset),
                                               value << (ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_OFF + subfield_offset),
                                               cmp,
                                               max_count,
                                               num_failed_polls,
                                               delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}

static INLINE PMC_POLL_RETURN_TYPE ri_rcp_lfield_CFC_FIFO_IRQ_I_poll( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 value[3],
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_lfield_CFC_FIFO_IRQ_I_poll( ri_rcp_buffer_t *b_ptr,
                                                                      odu_rcp_handle_t *h_ptr,
                                                                      UINT32 value[3],
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_FIFO_IRQ_I_poll", value[2] , value[1] , value[0] );

    /* (0x00001330 bits 31:0) bits 0:31 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_0 */
    return ri_rcp_reg_CFC_FIFO_IRQ_0_poll( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_MSK,
                                           (value[0]<<ODU_RCP_REG_CFC_FIFO_IRQ_0_BIT_CFC_FIFO_IRQ_I_OFF),
                                           cmp,
                                           max_count,
                                           num_failed_polls,
                                           delay_between_polls_in_microseconds);

    /* (0x00001334 bits 31:0) bits 32:63 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_1 */
    return ri_rcp_reg_CFC_FIFO_IRQ_1_poll( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_MSK,
                                           (value[1]<<ODU_RCP_REG_CFC_FIFO_IRQ_1_BIT_CFC_FIFO_IRQ_I_OFF),
                                           cmp,
                                           max_count,
                                           num_failed_polls,
                                           delay_between_polls_in_microseconds);

    /* (0x00001338 bits 31:0) bits 64:95 use field CFC_FIFO_IRQ_I of register PMC_ODU_RCP_REG_CFC_FIFO_IRQ_2 */
    return ri_rcp_reg_CFC_FIFO_IRQ_2_poll( b_ptr,
                                           h_ptr,
                                           ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_MSK,
                                           (value[2]<<ODU_RCP_REG_CFC_FIFO_IRQ_2_BIT_CFC_FIFO_IRQ_I_OFF),
                                           cmp,
                                           max_count,
                                           num_failed_polls,
                                           delay_between_polls_in_microseconds);
}

static INLINE void ri_rcp_lfield_CFC_IPT_ERR_I_set_to_clear( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_CFC_IPT_ERR_I_set_to_clear( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_IPT_ERR_I_set_to_clear", value[2] , value[1] , value[0] );

    /* (0x00001344 bits 31:0) bits 0:31 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_0 */
    ri_rcp_reg_CFC_IPT_ERR_0_action_on_write_field_set( b_ptr,
                                                        h_ptr,
                                                        ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_MSK,
                                                        ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_OFF,
                                                        value[0]);

    /* (0x00001348 bits 31:0) bits 32:63 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_1 */
    ri_rcp_reg_CFC_IPT_ERR_1_action_on_write_field_set( b_ptr,
                                                        h_ptr,
                                                        ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_MSK,
                                                        ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_OFF,
                                                        value[1]);

    /* (0x0000134c bits 31:0) bits 64:95 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_2 */
    ri_rcp_reg_CFC_IPT_ERR_2_action_on_write_field_set( b_ptr,
                                                        h_ptr,
                                                        ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_MSK,
                                                        ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_OFF,
                                                        value[2]);
}

static INLINE void ri_rcp_lfield_CFC_IPT_ERR_I_get( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_CFC_IPT_ERR_I_get( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00001344 bits 31:0) bits 0:31 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_0 */
    reg_value = ri_rcp_reg_CFC_IPT_ERR_0_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_MSK) >> ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_OFF;
    value[0] |= field_value;

    /* (0x00001348 bits 31:0) bits 32:63 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_1 */
    reg_value = ri_rcp_reg_CFC_IPT_ERR_1_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_MSK) >> ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_OFF;
    value[1] |= field_value;

    /* (0x0000134c bits 31:0) bits 64:95 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_2 */
    reg_value = ri_rcp_reg_CFC_IPT_ERR_2_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_MSK) >> ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_IPT_ERR_I_get", value[2] , value[1] , value[0] );

}
static INLINE void ri_rcp_lfield_range_CFC_IPT_ERR_I_set_to_clear( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_range_CFC_IPT_ERR_I_set_to_clear( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_IPT_ERR_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_IPT_ERR_I_set_to_clear", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_IPT_ERR_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001344 bits 31:0) bits 0:31 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001344 bits 31:0) bits 0:31 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_0 */
        ri_rcp_reg_CFC_IPT_ERR_0_action_on_write_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_OFF + subfield_offset),
                                                            ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001348 bits 31:0) bits 32:63 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001348 bits 31:0) bits 32:63 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_1 */
        ri_rcp_reg_CFC_IPT_ERR_1_action_on_write_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_OFF + subfield_offset),
                                                            ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000134c bits 31:0) bits 64:95 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000134c bits 31:0) bits 64:95 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_2 */
        ri_rcp_reg_CFC_IPT_ERR_2_action_on_write_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_OFF + subfield_offset),
                                                            ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_lfield_range_CFC_IPT_ERR_I_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_CFC_IPT_ERR_I_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_IPT_ERR_I_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_IPT_ERR_I_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001344 bits 31:0) bits 0:31 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_0 */
        reg_value = ri_rcp_reg_CFC_IPT_ERR_0_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_MSK)
                      >> ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_MSK, ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001348 bits 31:0) bits 32:63 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_1 */
        reg_value = ri_rcp_reg_CFC_IPT_ERR_1_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_MSK)
                      >> ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_MSK, ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000134c bits 31:0) bits 64:95 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_2 */
        reg_value = ri_rcp_reg_CFC_IPT_ERR_2_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_MSK)
                      >> ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_MSK, ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_IPT_ERR_I_get", start_bit, stop_bit, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_lfield_range_CFC_IPT_ERR_I_poll( ri_rcp_buffer_t *b_ptr,
                                                                           odu_rcp_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_lfield_range_CFC_IPT_ERR_I_poll( ri_rcp_buffer_t *b_ptr,
                                                                           odu_rcp_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_IPT_ERR_I_poll", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_IPT_ERR_I_poll", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_IPT_ERR_I_poll", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001344 bits 31:0) bits 0:31 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_0 */
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001344 bits 31:0) bits 0:31 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_0 */
        return ri_rcp_reg_CFC_IPT_ERR_0_poll( b_ptr,
                                              h_ptr,
                                              subfield_mask << (ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_OFF + subfield_offset),
                                              value << (ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_OFF + subfield_offset),
                                              cmp,
                                              max_count,
                                              num_failed_polls,
                                              delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00001348 bits 31:0) bits 32:63 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001348 bits 31:0) bits 32:63 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_1 */
        return ri_rcp_reg_CFC_IPT_ERR_1_poll( b_ptr,
                                              h_ptr,
                                              subfield_mask << (ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_OFF + subfield_offset),
                                              value << (ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_OFF + subfield_offset),
                                              cmp,
                                              max_count,
                                              num_failed_polls,
                                              delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000134c bits 31:0) bits 64:95 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000134c bits 31:0) bits 64:95 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_2 */
        return ri_rcp_reg_CFC_IPT_ERR_2_poll( b_ptr,
                                              h_ptr,
                                              subfield_mask << (ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_OFF + subfield_offset),
                                              value << (ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_OFF + subfield_offset),
                                              cmp,
                                              max_count,
                                              num_failed_polls,
                                              delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}

static INLINE PMC_POLL_RETURN_TYPE ri_rcp_lfield_CFC_IPT_ERR_I_poll( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value[3],
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ri_rcp_lfield_CFC_IPT_ERR_I_poll( ri_rcp_buffer_t *b_ptr,
                                                                     odu_rcp_handle_t *h_ptr,
                                                                     UINT32 value[3],
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_IPT_ERR_I_poll", value[2] , value[1] , value[0] );

    /* (0x00001344 bits 31:0) bits 0:31 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_0 */
    return ri_rcp_reg_CFC_IPT_ERR_0_poll( b_ptr,
                                          h_ptr,
                                          ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_MSK,
                                          (value[0]<<ODU_RCP_REG_CFC_IPT_ERR_0_BIT_CFC_IPT_ERR_I_OFF),
                                          cmp,
                                          max_count,
                                          num_failed_polls,
                                          delay_between_polls_in_microseconds);

    /* (0x00001348 bits 31:0) bits 32:63 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_1 */
    return ri_rcp_reg_CFC_IPT_ERR_1_poll( b_ptr,
                                          h_ptr,
                                          ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_MSK,
                                          (value[1]<<ODU_RCP_REG_CFC_IPT_ERR_1_BIT_CFC_IPT_ERR_I_OFF),
                                          cmp,
                                          max_count,
                                          num_failed_polls,
                                          delay_between_polls_in_microseconds);

    /* (0x0000134c bits 31:0) bits 64:95 use field CFC_IPT_ERR_I of register PMC_ODU_RCP_REG_CFC_IPT_ERR_2 */
    return ri_rcp_reg_CFC_IPT_ERR_2_poll( b_ptr,
                                          h_ptr,
                                          ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_MSK,
                                          (value[2]<<ODU_RCP_REG_CFC_IPT_ERR_2_BIT_CFC_IPT_ERR_I_OFF),
                                          cmp,
                                          max_count,
                                          num_failed_polls,
                                          delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset ram_N_size32
 * ==================================================================================
 */
static INLINE void ri_rcp_field_HO_ODU_DST_DIGI_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_HO_ODU_DST_DIGI_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_HO_ODU_DST_DIGI_set", N, 31);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_HO_ODU_DST_DIGI_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_HO_ODU_DST_DIGI_set", N, value );

    /* ((0x00000080 + (N) * 4) bits 23:16) field HO_ODU_DST_DIGI of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_DIGI_MSK,
                                                  ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_DIGI_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_HO_ODU_DST_DIGI_get( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_HO_ODU_DST_DIGI_get( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_HO_ODU_DST_DIGI_get", N, 31);
    /* ((0x00000080 + (N) * 4) bits 23:16) field HO_ODU_DST_DIGI of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    reg_value = ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_DIGI_MSK) >> ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_DIGI_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_HO_ODU_DST_DIGI_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_HO_ODU_DST_DIGI_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_HO_ODU_DST_DIGI_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_HO_ODU_DST_DIGI_set", N, 31);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_HO_ODU_DST_DIGI_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_HO_ODU_DST_DIGI_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_HO_ODU_DST_DIGI_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000080 + (N) * 4) bits 23:16) field HO_ODU_DST_DIGI of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000080 + (N) * 4) bits 23:16) field HO_ODU_DST_DIGI of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
        ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_DIGI_OFF + subfield_offset),
                                                      ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_DIGI_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_HO_ODU_DST_DIGI_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_HO_ODU_DST_DIGI_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_HO_ODU_DST_DIGI_get", N, 31);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_HO_ODU_DST_DIGI_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_HO_ODU_DST_DIGI_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000080 + (N) * 4) bits 23:16) field HO_ODU_DST_DIGI of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    reg_value = ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_DIGI_MSK)
                  >> ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_DIGI_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_DIGI_MSK, ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_DIGI_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_HO_ODU_DST_DIGI_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_HO_ODU_DST_FRM_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_HO_ODU_DST_FRM_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_HO_ODU_DST_FRM_set", N, 31);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_HO_ODU_DST_FRM_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_HO_ODU_DST_FRM_set", N, value );

    /* ((0x00000080 + (N) * 4) bits 10:8) field HO_ODU_DST_FRM of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_FRM_MSK,
                                                  ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_FRM_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_HO_ODU_DST_FRM_get( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_HO_ODU_DST_FRM_get( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_HO_ODU_DST_FRM_get", N, 31);
    /* ((0x00000080 + (N) * 4) bits 10:8) field HO_ODU_DST_FRM of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    reg_value = ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_FRM_MSK) >> ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_FRM_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_HO_ODU_DST_FRM_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_HO_ODU_DST_FRM_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_HO_ODU_DST_FRM_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_HO_ODU_DST_FRM_set", N, 31);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_HO_ODU_DST_FRM_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_HO_ODU_DST_FRM_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_HO_ODU_DST_FRM_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000080 + (N) * 4) bits 10:8) field HO_ODU_DST_FRM of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000080 + (N) * 4) bits 10:8) field HO_ODU_DST_FRM of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
        ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_FRM_OFF + subfield_offset),
                                                      ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_FRM_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_HO_ODU_DST_FRM_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_HO_ODU_DST_FRM_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_HO_ODU_DST_FRM_get", N, 31);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_HO_ODU_DST_FRM_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_HO_ODU_DST_FRM_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000080 + (N) * 4) bits 10:8) field HO_ODU_DST_FRM of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    reg_value = ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_FRM_MSK)
                  >> ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_FRM_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_FRM_MSK, ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_FRM_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_HO_ODU_DST_FRM_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_HO_ODU_DST_CHANNEL_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_HO_ODU_DST_CHANNEL_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_HO_ODU_DST_CHANNEL_set", N, 31);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_HO_ODU_DST_CHANNEL_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_HO_ODU_DST_CHANNEL_set", N, value );

    /* ((0x00000080 + (N) * 4) bits 6:0) field HO_ODU_DST_CHANNEL of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_CHANNEL_MSK,
                                                  ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_CHANNEL_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_HO_ODU_DST_CHANNEL_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_HO_ODU_DST_CHANNEL_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_HO_ODU_DST_CHANNEL_get", N, 31);
    /* ((0x00000080 + (N) * 4) bits 6:0) field HO_ODU_DST_CHANNEL of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    reg_value = ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_CHANNEL_MSK) >> ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_CHANNEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_HO_ODU_DST_CHANNEL_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_HO_ODU_DST_CHANNEL_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_HO_ODU_DST_CHANNEL_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_HO_ODU_DST_CHANNEL_set", N, 31);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_HO_ODU_DST_CHANNEL_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_HO_ODU_DST_CHANNEL_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_HO_ODU_DST_CHANNEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000080 + (N) * 4) bits 6:0) field HO_ODU_DST_CHANNEL of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000080 + (N) * 4) bits 6:0) field HO_ODU_DST_CHANNEL of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
        ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_CHANNEL_OFF + subfield_offset),
                                                      ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_CHANNEL_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_HO_ODU_DST_CHANNEL_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_HO_ODU_DST_CHANNEL_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 31)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_HO_ODU_DST_CHANNEL_get", N, 31);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_HO_ODU_DST_CHANNEL_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_HO_ODU_DST_CHANNEL_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000080 + (N) * 4) bits 6:0) field HO_ODU_DST_CHANNEL of register PMC_ODU_RCP_REG_HO_ODU_MAC_DA_CFG index N=0..31 */
    reg_value = ri_rcp_reg_HO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_CHANNEL_MSK)
                  >> ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_CHANNEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_CHANNEL_MSK, ODU_RCP_REG_HO_ODU_MAC_DA_CFG_BIT_HO_ODU_DST_CHANNEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_HO_ODU_DST_CHANNEL_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset ram_N_size49
 * ==================================================================================
 */
static INLINE void ri_rcp_field_SCH_STG_2_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_2_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_2_ACT_CH_NP1_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_2_ACT_CH_NP1_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_2_ACT_CH_NP1_set", N, value );

    /* ((0x00003100 + (N) * 4) bits 14:8) field SCH_STG_2_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_2_ACT_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_NP1_MSK,
                                                  ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_NP1_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_2_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_2_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_2_ACT_CH_NP1_get", N, 48);
    /* ((0x00003100 + (N) * 4) bits 14:8) field SCH_STG_2_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_2_ACT_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_NP1_MSK) >> ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_NP1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_2_ACT_CH_NP1_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003100 + (N) * 4) bits 14:8) field SCH_STG_2_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003100 + (N) * 4) bits 14:8) field SCH_STG_2_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_2_ACT_CFG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_NP1_OFF + subfield_offset),
                                                      ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_NP1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003100 + (N) * 4) bits 14:8) field SCH_STG_2_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_2_ACT_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_NP1_MSK)
                  >> ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_NP1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_NP1_MSK, ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_NP1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_2_ACT_CH_NP1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_2_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_2_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_2_ACT_CH_N_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_2_ACT_CH_N_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_2_ACT_CH_N_set", N, value );

    /* ((0x00003100 + (N) * 4) bits 6:0) field SCH_STG_2_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_2_ACT_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_N_MSK,
                                                  ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_N_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_2_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_2_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_2_ACT_CH_N_get", N, 48);
    /* ((0x00003100 + (N) * 4) bits 6:0) field SCH_STG_2_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_2_ACT_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_N_MSK) >> ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_N_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_2_ACT_CH_N_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_2_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_2_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_N_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_N_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_N_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_2_ACT_CH_N_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003100 + (N) * 4) bits 6:0) field SCH_STG_2_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003100 + (N) * 4) bits 6:0) field SCH_STG_2_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_2_ACT_CFG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_N_OFF + subfield_offset),
                                                      ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_N_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_2_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_2_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_N_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_N_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_2_ACT_CH_N_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003100 + (N) * 4) bits 6:0) field SCH_STG_2_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_2_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_2_ACT_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_N_MSK)
                  >> ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_N_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_N_MSK, ODU_RCP_REG_SCH_STG_2_ACT_CFG_BIT_SCH_STG_2_ACT_CH_N_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_2_ACT_CH_N_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_2_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_2_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_2_STBY_CH_NP1_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_2_STBY_CH_NP1_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_2_STBY_CH_NP1_set", N, value );

    /* ((0x00003200 + (N) * 4) bits 14:8) field SCH_STG_2_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_2_STBY_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_NP1_MSK,
                                                   ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_NP1_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_2_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_2_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_2_STBY_CH_NP1_get", N, 48);
    /* ((0x00003200 + (N) * 4) bits 14:8) field SCH_STG_2_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_2_STBY_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_NP1_MSK) >> ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_NP1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_2_STBY_CH_NP1_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003200 + (N) * 4) bits 14:8) field SCH_STG_2_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003200 + (N) * 4) bits 14:8) field SCH_STG_2_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_2_STBY_CFG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_NP1_OFF + subfield_offset),
                                                       ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_NP1_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003200 + (N) * 4) bits 14:8) field SCH_STG_2_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_2_STBY_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_NP1_MSK)
                  >> ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_NP1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_NP1_MSK, ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_NP1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_2_STBY_CH_NP1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_2_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_2_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_2_STBY_CH_N_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_2_STBY_CH_N_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_2_STBY_CH_N_set", N, value );

    /* ((0x00003200 + (N) * 4) bits 6:0) field SCH_STG_2_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_2_STBY_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_N_MSK,
                                                   ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_N_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_2_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_2_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_2_STBY_CH_N_get", N, 48);
    /* ((0x00003200 + (N) * 4) bits 6:0) field SCH_STG_2_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_2_STBY_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_N_MSK) >> ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_N_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_2_STBY_CH_N_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_2_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_2_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_N_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_N_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_N_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_2_STBY_CH_N_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003200 + (N) * 4) bits 6:0) field SCH_STG_2_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003200 + (N) * 4) bits 6:0) field SCH_STG_2_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_2_STBY_CFG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_N_OFF + subfield_offset),
                                                       ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_N_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_2_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_2_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_N_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_N_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_2_STBY_CH_N_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003200 + (N) * 4) bits 6:0) field SCH_STG_2_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_2_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_2_STBY_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_N_MSK)
                  >> ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_N_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_N_MSK, ODU_RCP_REG_SCH_STG_2_STBY_CFG_BIT_SCH_STG_2_STBY_CH_N_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_2_STBY_CH_N_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_3A_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_3A_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3A_ACT_CH_NP1_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_3A_ACT_CH_NP1_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_3A_ACT_CH_NP1_set", N, value );

    /* ((0x00003300 + (N) * 4) bits 14:8) field SCH_STG_3A_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_NP1_MSK,
                                                   ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_NP1_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_3A_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_3A_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3A_ACT_CH_NP1_get", N, 48);
    /* ((0x00003300 + (N) * 4) bits 14:8) field SCH_STG_3A_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_NP1_MSK) >> ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_NP1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_3A_ACT_CH_NP1_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003300 + (N) * 4) bits 14:8) field SCH_STG_3A_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003300 + (N) * 4) bits 14:8) field SCH_STG_3A_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_NP1_OFF + subfield_offset),
                                                       ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_NP1_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003300 + (N) * 4) bits 14:8) field SCH_STG_3A_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_NP1_MSK)
                  >> ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_NP1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_NP1_MSK, ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_NP1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_NP1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_3A_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_3A_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3A_ACT_CH_N_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_3A_ACT_CH_N_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_3A_ACT_CH_N_set", N, value );

    /* ((0x00003300 + (N) * 4) bits 6:0) field SCH_STG_3A_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_N_MSK,
                                                   ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_N_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_3A_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_3A_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3A_ACT_CH_N_get", N, 48);
    /* ((0x00003300 + (N) * 4) bits 6:0) field SCH_STG_3A_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_N_MSK) >> ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_N_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_3A_ACT_CH_N_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003300 + (N) * 4) bits 6:0) field SCH_STG_3A_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003300 + (N) * 4) bits 6:0) field SCH_STG_3A_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_N_OFF + subfield_offset),
                                                       ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_N_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003300 + (N) * 4) bits 6:0) field SCH_STG_3A_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3A_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3A_ACT_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_N_MSK)
                  >> ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_N_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_N_MSK, ODU_RCP_REG_SCH_STG_3A_ACT_CFG_BIT_SCH_STG_3A_ACT_CH_N_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3A_ACT_CH_N_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_3A_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_3A_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3A_STBY_CH_NP1_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_3A_STBY_CH_NP1_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_3A_STBY_CH_NP1_set", N, value );

    /* ((0x00003400 + (N) * 4) bits 14:8) field SCH_STG_3A_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_NP1_MSK,
                                                    ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_NP1_OFF,
                                                    value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_3A_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_3A_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3A_STBY_CH_NP1_get", N, 48);
    /* ((0x00003400 + (N) * 4) bits 14:8) field SCH_STG_3A_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_NP1_MSK) >> ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_NP1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_3A_STBY_CH_NP1_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003400 + (N) * 4) bits 14:8) field SCH_STG_3A_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003400 + (N) * 4) bits 14:8) field SCH_STG_3A_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_NP1_OFF + subfield_offset),
                                                        ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_NP1_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003400 + (N) * 4) bits 14:8) field SCH_STG_3A_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_NP1_MSK)
                  >> ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_NP1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_NP1_MSK, ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_NP1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_NP1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_3A_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_3A_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3A_STBY_CH_N_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_3A_STBY_CH_N_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_3A_STBY_CH_N_set", N, value );

    /* ((0x00003400 + (N) * 4) bits 6:0) field SCH_STG_3A_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_N_MSK,
                                                    ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_N_OFF,
                                                    value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_3A_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_3A_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3A_STBY_CH_N_get", N, 48);
    /* ((0x00003400 + (N) * 4) bits 6:0) field SCH_STG_3A_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_N_MSK) >> ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_N_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_3A_STBY_CH_N_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003400 + (N) * 4) bits 6:0) field SCH_STG_3A_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003400 + (N) * 4) bits 6:0) field SCH_STG_3A_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_N_OFF + subfield_offset),
                                                        ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_N_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003400 + (N) * 4) bits 6:0) field SCH_STG_3A_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3A_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3A_STBY_CFG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_N_MSK)
                  >> ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_N_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_N_MSK, ODU_RCP_REG_SCH_STG_3A_STBY_CFG_BIT_SCH_STG_3A_STBY_CH_N_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3A_STBY_CH_N_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_3B_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_3B_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3B_ACT_CH_NP1_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_3B_ACT_CH_NP1_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_3B_ACT_CH_NP1_set", N, value );

    /* ((0x00003500 + (N) * 4) bits 14:8) field SCH_STG_3B_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_NP1_MSK,
                                                   ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_NP1_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_3B_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_3B_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3B_ACT_CH_NP1_get", N, 48);
    /* ((0x00003500 + (N) * 4) bits 14:8) field SCH_STG_3B_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_NP1_MSK) >> ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_NP1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_3B_ACT_CH_NP1_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003500 + (N) * 4) bits 14:8) field SCH_STG_3B_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003500 + (N) * 4) bits 14:8) field SCH_STG_3B_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_NP1_OFF + subfield_offset),
                                                       ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_NP1_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003500 + (N) * 4) bits 14:8) field SCH_STG_3B_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_NP1_MSK)
                  >> ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_NP1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_NP1_MSK, ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_NP1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_NP1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_3B_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_3B_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3B_ACT_CH_N_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_3B_ACT_CH_N_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_3B_ACT_CH_N_set", N, value );

    /* ((0x00003500 + (N) * 4) bits 6:0) field SCH_STG_3B_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_N_MSK,
                                                   ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_N_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_3B_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_3B_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3B_ACT_CH_N_get", N, 48);
    /* ((0x00003500 + (N) * 4) bits 6:0) field SCH_STG_3B_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_N_MSK) >> ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_N_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_3B_ACT_CH_N_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003500 + (N) * 4) bits 6:0) field SCH_STG_3B_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003500 + (N) * 4) bits 6:0) field SCH_STG_3B_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_N_OFF + subfield_offset),
                                                       ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_N_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003500 + (N) * 4) bits 6:0) field SCH_STG_3B_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3B_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3B_ACT_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_N_MSK)
                  >> ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_N_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_N_MSK, ODU_RCP_REG_SCH_STG_3B_ACT_CFG_BIT_SCH_STG_3B_ACT_CH_N_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3B_ACT_CH_N_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_3B_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_3B_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3B_STBY_CH_NP1_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_3B_STBY_CH_NP1_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_3B_STBY_CH_NP1_set", N, value );

    /* ((0x00003600 + (N) * 4) bits 14:8) field SCH_STG_3B_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_NP1_MSK,
                                                    ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_NP1_OFF,
                                                    value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_3B_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_3B_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3B_STBY_CH_NP1_get", N, 48);
    /* ((0x00003600 + (N) * 4) bits 14:8) field SCH_STG_3B_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_NP1_MSK) >> ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_NP1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_3B_STBY_CH_NP1_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003600 + (N) * 4) bits 14:8) field SCH_STG_3B_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003600 + (N) * 4) bits 14:8) field SCH_STG_3B_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_NP1_OFF + subfield_offset),
                                                        ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_NP1_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                    odu_rcp_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003600 + (N) * 4) bits 14:8) field SCH_STG_3B_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_NP1_MSK)
                  >> ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_NP1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_NP1_MSK, ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_NP1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_NP1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_3B_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_3B_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3B_STBY_CH_N_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_3B_STBY_CH_N_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_3B_STBY_CH_N_set", N, value );

    /* ((0x00003600 + (N) * 4) bits 6:0) field SCH_STG_3B_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_N_MSK,
                                                    ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_N_OFF,
                                                    value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_3B_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_3B_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_3B_STBY_CH_N_get", N, 48);
    /* ((0x00003600 + (N) * 4) bits 6:0) field SCH_STG_3B_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_N_MSK) >> ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_N_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_3B_STBY_CH_N_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003600 + (N) * 4) bits 6:0) field SCH_STG_3B_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003600 + (N) * 4) bits 6:0) field SCH_STG_3B_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_N_OFF + subfield_offset),
                                                        ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_N_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003600 + (N) * 4) bits 6:0) field SCH_STG_3B_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_3B_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_3B_STBY_CFG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_N_MSK)
                  >> ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_N_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_N_MSK, ODU_RCP_REG_SCH_STG_3B_STBY_CFG_BIT_SCH_STG_3B_STBY_CH_N_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_3B_STBY_CH_N_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_4_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_4_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_4_ACT_CH_NP1_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_4_ACT_CH_NP1_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_4_ACT_CH_NP1_set", N, value );

    /* ((0x00003700 + (N) * 4) bits 14:8) field SCH_STG_4_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_4_ACT_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_NP1_MSK,
                                                  ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_NP1_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_4_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_4_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_4_ACT_CH_NP1_get", N, 48);
    /* ((0x00003700 + (N) * 4) bits 14:8) field SCH_STG_4_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_4_ACT_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_NP1_MSK) >> ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_NP1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_4_ACT_CH_NP1_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003700 + (N) * 4) bits 14:8) field SCH_STG_4_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003700 + (N) * 4) bits 14:8) field SCH_STG_4_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_4_ACT_CFG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_NP1_OFF + subfield_offset),
                                                      ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_NP1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                  odu_rcp_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003700 + (N) * 4) bits 14:8) field SCH_STG_4_ACT_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_4_ACT_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_NP1_MSK)
                  >> ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_NP1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_NP1_MSK, ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_NP1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_4_ACT_CH_NP1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_4_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_4_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_4_ACT_CH_N_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_4_ACT_CH_N_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_4_ACT_CH_N_set", N, value );

    /* ((0x00003700 + (N) * 4) bits 6:0) field SCH_STG_4_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_4_ACT_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_N_MSK,
                                                  ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_N_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_4_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_4_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_4_ACT_CH_N_get", N, 48);
    /* ((0x00003700 + (N) * 4) bits 6:0) field SCH_STG_4_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_4_ACT_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_N_MSK) >> ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_N_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_4_ACT_CH_N_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_4_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_4_ACT_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_N_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_N_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_N_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_4_ACT_CH_N_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003700 + (N) * 4) bits 6:0) field SCH_STG_4_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003700 + (N) * 4) bits 6:0) field SCH_STG_4_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_4_ACT_CFG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_N_OFF + subfield_offset),
                                                      ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_N_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_4_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_4_ACT_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_N_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_N_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_4_ACT_CH_N_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003700 + (N) * 4) bits 6:0) field SCH_STG_4_ACT_CH_N of register PMC_ODU_RCP_REG_SCH_STG_4_ACT_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_4_ACT_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_N_MSK)
                  >> ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_N_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_N_MSK, ODU_RCP_REG_SCH_STG_4_ACT_CFG_BIT_SCH_STG_4_ACT_CH_N_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_4_ACT_CH_N_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_4_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_4_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_4_STBY_CH_NP1_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_4_STBY_CH_NP1_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_4_STBY_CH_NP1_set", N, value );

    /* ((0x00003800 + (N) * 4) bits 14:8) field SCH_STG_4_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_4_STBY_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_NP1_MSK,
                                                   ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_NP1_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_4_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_4_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_4_STBY_CH_NP1_get", N, 48);
    /* ((0x00003800 + (N) * 4) bits 14:8) field SCH_STG_4_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_4_STBY_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_NP1_MSK) >> ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_NP1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_4_STBY_CH_NP1_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_set( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003800 + (N) * 4) bits 14:8) field SCH_STG_4_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003800 + (N) * 4) bits 14:8) field SCH_STG_4_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_4_STBY_CFG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_NP1_OFF + subfield_offset),
                                                       ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_NP1_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_get( ri_rcp_buffer_t *b_ptr,
                                                                   odu_rcp_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003800 + (N) * 4) bits 14:8) field SCH_STG_4_STBY_CH_NP1 of register PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_4_STBY_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_NP1_MSK)
                  >> ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_NP1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_NP1_MSK, ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_NP1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_4_STBY_CH_NP1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_SCH_STG_4_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_SCH_STG_4_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                         odu_rcp_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_4_STBY_CH_N_set", N, 48);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_SCH_STG_4_STBY_CH_N_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_SCH_STG_4_STBY_CH_N_set", N, value );

    /* ((0x00003800 + (N) * 4) bits 6:0) field SCH_STG_4_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG index N=0..48 */
    ri_rcp_reg_SCH_STG_4_STBY_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_N_MSK,
                                                   ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_N_OFF,
                                                   value);
}

static INLINE UINT32 ri_rcp_field_SCH_STG_4_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_SCH_STG_4_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_SCH_STG_4_STBY_CH_N_get", N, 48);
    /* ((0x00003800 + (N) * 4) bits 6:0) field SCH_STG_4_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_4_STBY_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_N_MSK) >> ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_N_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_SCH_STG_4_STBY_CH_N_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_SCH_STG_4_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_SCH_STG_4_STBY_CH_N_set( ri_rcp_buffer_t *b_ptr,
                                                               odu_rcp_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_N_set", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_N_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_N_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_4_STBY_CH_N_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00003800 + (N) * 4) bits 6:0) field SCH_STG_4_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG index N=0..48 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00003800 + (N) * 4) bits 6:0) field SCH_STG_4_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG index N=0..48 */
        ri_rcp_reg_SCH_STG_4_STBY_CFG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_N_OFF + subfield_offset),
                                                       ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_N_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_SCH_STG_4_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_SCH_STG_4_STBY_CH_N_get( ri_rcp_buffer_t *b_ptr,
                                                                 odu_rcp_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 48)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_N_get", N, 48);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_N_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_SCH_STG_4_STBY_CH_N_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00003800 + (N) * 4) bits 6:0) field SCH_STG_4_STBY_CH_N of register PMC_ODU_RCP_REG_SCH_STG_4_STBY_CFG index N=0..48 */
    reg_value = ri_rcp_reg_SCH_STG_4_STBY_CFG_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_N_MSK)
                  >> ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_N_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_N_MSK, ODU_RCP_REG_SCH_STG_4_STBY_CFG_BIT_SCH_STG_4_STBY_CH_N_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_SCH_STG_4_STBY_CH_N_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset ram_N_size512
 * ==================================================================================
 */
static INLINE void ri_rcp_field_LO_ODU_DST_DIGI_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_LO_ODU_DST_DIGI_set( ri_rcp_buffer_t *b_ptr,
                                                     odu_rcp_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_LO_ODU_DST_DIGI_set", N, 511);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_LO_ODU_DST_DIGI_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_LO_ODU_DST_DIGI_set", N, value );

    /* ((0x00000100 + (N) * 4) bits 23:16) field LO_ODU_DST_DIGI of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_DIGI_MSK,
                                                  ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_DIGI_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_LO_ODU_DST_DIGI_get( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_LO_ODU_DST_DIGI_get( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_LO_ODU_DST_DIGI_get", N, 511);
    /* ((0x00000100 + (N) * 4) bits 23:16) field LO_ODU_DST_DIGI of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    reg_value = ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_DIGI_MSK) >> ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_DIGI_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_LO_ODU_DST_DIGI_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_LO_ODU_DST_DIGI_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_LO_ODU_DST_DIGI_set( ri_rcp_buffer_t *b_ptr,
                                                           odu_rcp_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_LO_ODU_DST_DIGI_set", N, 511);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_LO_ODU_DST_DIGI_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_LO_ODU_DST_DIGI_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_LO_ODU_DST_DIGI_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000100 + (N) * 4) bits 23:16) field LO_ODU_DST_DIGI of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000100 + (N) * 4) bits 23:16) field LO_ODU_DST_DIGI of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
        ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_DIGI_OFF + subfield_offset),
                                                      ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_DIGI_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_LO_ODU_DST_DIGI_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_LO_ODU_DST_DIGI_get( ri_rcp_buffer_t *b_ptr,
                                                             odu_rcp_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_LO_ODU_DST_DIGI_get", N, 511);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_LO_ODU_DST_DIGI_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_LO_ODU_DST_DIGI_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 4) bits 23:16) field LO_ODU_DST_DIGI of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    reg_value = ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_DIGI_MSK)
                  >> ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_DIGI_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_DIGI_MSK, ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_DIGI_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_LO_ODU_DST_DIGI_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_LO_ODU_DST_FRM_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_LO_ODU_DST_FRM_set( ri_rcp_buffer_t *b_ptr,
                                                    odu_rcp_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_LO_ODU_DST_FRM_set", N, 511);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_LO_ODU_DST_FRM_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_LO_ODU_DST_FRM_set", N, value );

    /* ((0x00000100 + (N) * 4) bits 10:8) field LO_ODU_DST_FRM of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_FRM_MSK,
                                                  ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_FRM_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_LO_ODU_DST_FRM_get( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_LO_ODU_DST_FRM_get( ri_rcp_buffer_t *b_ptr,
                                                      odu_rcp_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_LO_ODU_DST_FRM_get", N, 511);
    /* ((0x00000100 + (N) * 4) bits 10:8) field LO_ODU_DST_FRM of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    reg_value = ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_FRM_MSK) >> ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_FRM_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_LO_ODU_DST_FRM_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_LO_ODU_DST_FRM_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_LO_ODU_DST_FRM_set( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_LO_ODU_DST_FRM_set", N, 511);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_LO_ODU_DST_FRM_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_LO_ODU_DST_FRM_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_LO_ODU_DST_FRM_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000100 + (N) * 4) bits 10:8) field LO_ODU_DST_FRM of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000100 + (N) * 4) bits 10:8) field LO_ODU_DST_FRM of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
        ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_FRM_OFF + subfield_offset),
                                                      ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_FRM_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_LO_ODU_DST_FRM_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_LO_ODU_DST_FRM_get( ri_rcp_buffer_t *b_ptr,
                                                            odu_rcp_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_LO_ODU_DST_FRM_get", N, 511);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_LO_ODU_DST_FRM_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_LO_ODU_DST_FRM_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 4) bits 10:8) field LO_ODU_DST_FRM of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    reg_value = ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_FRM_MSK)
                  >> ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_FRM_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_FRM_MSK, ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_FRM_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_LO_ODU_DST_FRM_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_field_LO_ODU_DST_CHANNEL_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_LO_ODU_DST_CHANNEL_set( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_LO_ODU_DST_CHANNEL_set", N, 511);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ri_rcp_field_LO_ODU_DST_CHANNEL_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "ri_rcp_field_LO_ODU_DST_CHANNEL_set", N, value );

    /* ((0x00000100 + (N) * 4) bits 6:0) field LO_ODU_DST_CHANNEL of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_CHANNEL_MSK,
                                                  ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_CHANNEL_OFF,
                                                  value);
}

static INLINE UINT32 ri_rcp_field_LO_ODU_DST_CHANNEL_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_LO_ODU_DST_CHANNEL_get( ri_rcp_buffer_t *b_ptr,
                                                          odu_rcp_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_LO_ODU_DST_CHANNEL_get", N, 511);
    /* ((0x00000100 + (N) * 4) bits 6:0) field LO_ODU_DST_CHANNEL of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    reg_value = ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_CHANNEL_MSK) >> ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_CHANNEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "ri_rcp_field_LO_ODU_DST_CHANNEL_get", N, value );

    return value;
}
static INLINE void ri_rcp_field_range_LO_ODU_DST_CHANNEL_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ri_rcp_field_range_LO_ODU_DST_CHANNEL_set( ri_rcp_buffer_t *b_ptr,
                                                              odu_rcp_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_LO_ODU_DST_CHANNEL_set", N, 511);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_LO_ODU_DST_CHANNEL_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_LO_ODU_DST_CHANNEL_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_LO_ODU_DST_CHANNEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000100 + (N) * 4) bits 6:0) field LO_ODU_DST_CHANNEL of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000100 + (N) * 4) bits 6:0) field LO_ODU_DST_CHANNEL of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
        ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_CHANNEL_OFF + subfield_offset),
                                                      ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_CHANNEL_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ri_rcp_field_range_LO_ODU_DST_CHANNEL_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_LO_ODU_DST_CHANNEL_get( ri_rcp_buffer_t *b_ptr,
                                                                odu_rcp_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ri_rcp_field_range_LO_ODU_DST_CHANNEL_get", N, 511);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_LO_ODU_DST_CHANNEL_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_LO_ODU_DST_CHANNEL_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 4) bits 6:0) field LO_ODU_DST_CHANNEL of register PMC_ODU_RCP_REG_LO_ODU_MAC_DA_CFG index N=0..511 */
    reg_value = ri_rcp_reg_LO_ODU_MAC_DA_CFG_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_CHANNEL_MSK)
                  >> ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_CHANNEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_CHANNEL_MSK, ODU_RCP_REG_LO_ODU_MAC_DA_CFG_BIT_LO_ODU_DST_CHANNEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_LO_ODU_DST_CHANNEL_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status
 * ==================================================================================
 */
static INLINE UINT32 ri_rcp_field_DBG_RDATA_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_DBG_RDATA_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001308 bits 31:0) field DBG_RDATA of register PMC_ODU_RCP_REG_DBG_RDATA */
    reg_value = ri_rcp_reg_DBG_RDATA_read(  b_ptr, h_ptr);
    value = (reg_value & ODU_RCP_REG_DBG_RDATA_BIT_DBG_RDATA_MSK) >> ODU_RCP_REG_DBG_RDATA_BIT_DBG_RDATA_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_DBG_RDATA_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_range_DBG_RDATA_get( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_range_DBG_RDATA_get( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_field_range_DBG_RDATA_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_field_range_DBG_RDATA_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001308 bits 31:0) field DBG_RDATA of register PMC_ODU_RCP_REG_DBG_RDATA */
    reg_value = ri_rcp_reg_DBG_RDATA_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_DBG_RDATA_BIT_DBG_RDATA_MSK)
                  >> ODU_RCP_REG_DBG_RDATA_BIT_DBG_RDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_DBG_RDATA_BIT_DBG_RDATA_MSK, ODU_RCP_REG_DBG_RDATA_BIT_DBG_RDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_field_range_DBG_RDATA_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_CFC_EMPTY_get( ri_rcp_buffer_t *b_ptr,
                                                odu_rcp_handle_t *h_ptr,
                                                UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_CFC_EMPTY_get( ri_rcp_buffer_t *b_ptr,
                                                odu_rcp_handle_t *h_ptr,
                                                UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x000013c4 bits 31:0) bits 0:31 use field CFC_EMPTY of register PMC_ODU_RCP_REG_CFC_EMPTY_0 */
    reg_value = ri_rcp_reg_CFC_EMPTY_0_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_EMPTY_0_BIT_CFC_EMPTY_MSK) >> ODU_RCP_REG_CFC_EMPTY_0_BIT_CFC_EMPTY_OFF;
    value[0] |= field_value;

    /* (0x000013c8 bits 31:0) bits 32:63 use field CFC_EMPTY of register PMC_ODU_RCP_REG_CFC_EMPTY_1 */
    reg_value = ri_rcp_reg_CFC_EMPTY_1_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_EMPTY_1_BIT_CFC_EMPTY_MSK) >> ODU_RCP_REG_CFC_EMPTY_1_BIT_CFC_EMPTY_OFF;
    value[1] |= field_value;

    /* (0x000013cc bits 31:0) bits 64:95 use field CFC_EMPTY of register PMC_ODU_RCP_REG_CFC_EMPTY_2 */
    reg_value = ri_rcp_reg_CFC_EMPTY_2_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_EMPTY_2_BIT_CFC_EMPTY_MSK) >> ODU_RCP_REG_CFC_EMPTY_2_BIT_CFC_EMPTY_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_EMPTY_get", value[2] , value[1] , value[0] );

}
static INLINE UINT32 ri_rcp_lfield_range_CFC_EMPTY_get( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_CFC_EMPTY_get( ri_rcp_buffer_t *b_ptr,
                                                        odu_rcp_handle_t *h_ptr,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_EMPTY_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_EMPTY_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000013c4 bits 31:0) bits 0:31 use field CFC_EMPTY of register PMC_ODU_RCP_REG_CFC_EMPTY_0 */
        reg_value = ri_rcp_reg_CFC_EMPTY_0_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_EMPTY_0_BIT_CFC_EMPTY_MSK)
                      >> ODU_RCP_REG_CFC_EMPTY_0_BIT_CFC_EMPTY_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_EMPTY_0_BIT_CFC_EMPTY_MSK, ODU_RCP_REG_CFC_EMPTY_0_BIT_CFC_EMPTY_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000013c8 bits 31:0) bits 32:63 use field CFC_EMPTY of register PMC_ODU_RCP_REG_CFC_EMPTY_1 */
        reg_value = ri_rcp_reg_CFC_EMPTY_1_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_EMPTY_1_BIT_CFC_EMPTY_MSK)
                      >> ODU_RCP_REG_CFC_EMPTY_1_BIT_CFC_EMPTY_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_EMPTY_1_BIT_CFC_EMPTY_MSK, ODU_RCP_REG_CFC_EMPTY_1_BIT_CFC_EMPTY_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000013cc bits 31:0) bits 64:95 use field CFC_EMPTY of register PMC_ODU_RCP_REG_CFC_EMPTY_2 */
        reg_value = ri_rcp_reg_CFC_EMPTY_2_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_EMPTY_2_BIT_CFC_EMPTY_MSK)
                      >> ODU_RCP_REG_CFC_EMPTY_2_BIT_CFC_EMPTY_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_EMPTY_2_BIT_CFC_EMPTY_MSK, ODU_RCP_REG_CFC_EMPTY_2_BIT_CFC_EMPTY_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_EMPTY_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void ri_rcp_lfield_CFC_FULL_get( ri_rcp_buffer_t *b_ptr,
                                               odu_rcp_handle_t *h_ptr,
                                               UINT32 value[3] ) ALWAYS_INLINE;
static INLINE void ri_rcp_lfield_CFC_FULL_get( ri_rcp_buffer_t *b_ptr,
                                               odu_rcp_handle_t *h_ptr,
                                               UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x000013d0 bits 31:0) bits 0:31 use field CFC_FULL of register PMC_ODU_RCP_REG_CFC_FULL_0 */
    reg_value = ri_rcp_reg_CFC_FULL_0_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_FULL_0_BIT_CFC_FULL_MSK) >> ODU_RCP_REG_CFC_FULL_0_BIT_CFC_FULL_OFF;
    value[0] |= field_value;

    /* (0x000013d4 bits 31:0) bits 32:63 use field CFC_FULL of register PMC_ODU_RCP_REG_CFC_FULL_1 */
    reg_value = ri_rcp_reg_CFC_FULL_1_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_FULL_1_BIT_CFC_FULL_MSK) >> ODU_RCP_REG_CFC_FULL_1_BIT_CFC_FULL_OFF;
    value[1] |= field_value;

    /* (0x000013d8 bits 31:0) bits 64:95 use field CFC_FULL of register PMC_ODU_RCP_REG_CFC_FULL_2 */
    reg_value = ri_rcp_reg_CFC_FULL_2_read(  b_ptr, h_ptr);
    field_value = (reg_value & ODU_RCP_REG_CFC_FULL_2_BIT_CFC_FULL_MSK) >> ODU_RCP_REG_CFC_FULL_2_BIT_CFC_FULL_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ri_rcp_lfield_CFC_FULL_get", value[2] , value[1] , value[0] );

}
static INLINE UINT32 ri_rcp_lfield_range_CFC_FULL_get( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_lfield_range_CFC_FULL_get( ri_rcp_buffer_t *b_ptr,
                                                       odu_rcp_handle_t *h_ptr,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ri_rcp_lfield_range_CFC_FULL_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ri_rcp_lfield_range_CFC_FULL_get", stop_bit, 95 );
    if (start_bit <= 31) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000013d0 bits 31:0) bits 0:31 use field CFC_FULL of register PMC_ODU_RCP_REG_CFC_FULL_0 */
        reg_value = ri_rcp_reg_CFC_FULL_0_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_FULL_0_BIT_CFC_FULL_MSK)
                      >> ODU_RCP_REG_CFC_FULL_0_BIT_CFC_FULL_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_FULL_0_BIT_CFC_FULL_MSK, ODU_RCP_REG_CFC_FULL_0_BIT_CFC_FULL_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000013d4 bits 31:0) bits 32:63 use field CFC_FULL of register PMC_ODU_RCP_REG_CFC_FULL_1 */
        reg_value = ri_rcp_reg_CFC_FULL_1_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_FULL_1_BIT_CFC_FULL_MSK)
                      >> ODU_RCP_REG_CFC_FULL_1_BIT_CFC_FULL_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_FULL_1_BIT_CFC_FULL_MSK, ODU_RCP_REG_CFC_FULL_1_BIT_CFC_FULL_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000013d8 bits 31:0) bits 64:95 use field CFC_FULL of register PMC_ODU_RCP_REG_CFC_FULL_2 */
        reg_value = ri_rcp_reg_CFC_FULL_2_read(  b_ptr, h_ptr);
        field_value = (reg_value & ODU_RCP_REG_CFC_FULL_2_BIT_CFC_FULL_MSK)
                      >> ODU_RCP_REG_CFC_FULL_2_BIT_CFC_FULL_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODU_RCP_REG_CFC_FULL_2_BIT_CFC_FULL_MSK, ODU_RCP_REG_CFC_FULL_2_BIT_CFC_FULL_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ri_rcp_lfield_range_CFC_FULL_get", start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001824 bits 0) field RX_STG_1_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_RX_STG_1_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_RX_STG_1_CFC_CFG_STAT_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_1_CFC_CFG_STAT_BIT_RX_STG_1_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_RX_STG_1_CFC_CFG_STAT_BIT_RX_STG_1_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_1_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001a24 bits 0) field RX_STG_2_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_RX_STG_2_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_RX_STG_2_CFC_CFG_STAT_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_2_CFC_CFG_STAT_BIT_RX_STG_2_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_RX_STG_2_CFC_CFG_STAT_BIT_RX_STG_2_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_2_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001c24 bits 0) field RX_STG_3A_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_RX_STG_3A_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_RX_STG_3A_CFC_CFG_STAT_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_3A_CFC_CFG_STAT_BIT_RX_STG_3A_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_RX_STG_3A_CFC_CFG_STAT_BIT_RX_STG_3A_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_3A_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001e24 bits 0) field RX_STG_3B_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_RX_STG_3B_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_RX_STG_3B_CFC_CFG_STAT_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_3B_CFC_CFG_STAT_BIT_RX_STG_3B_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_RX_STG_3B_CFC_CFG_STAT_BIT_RX_STG_3B_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_3B_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002024 bits 0) field RX_STG_4_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_RX_STG_4_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_RX_STG_4_CFC_CFG_STAT_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_4_CFC_CFG_STAT_BIT_RX_STG_4_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_RX_STG_4_CFC_CFG_STAT_BIT_RX_STG_4_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_4_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002224 bits 0) field RX_STG_N_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_RX_STG_N_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_RX_STG_N_CFC_CFG_STAT_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_RX_STG_N_CFC_CFG_STAT_BIT_RX_STG_N_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_RX_STG_N_CFC_CFG_STAT_BIT_RX_STG_N_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_RX_STG_N_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002424 bits 0) field TX_STG_1_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_TX_STG_1_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_TX_STG_1_CFC_CFG_STAT_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_1_CFC_CFG_STAT_BIT_TX_STG_1_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_TX_STG_1_CFC_CFG_STAT_BIT_TX_STG_1_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_1_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002624 bits 0) field TX_STG_2_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_TX_STG_2_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_TX_STG_2_CFC_CFG_STAT_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_2_CFC_CFG_STAT_BIT_TX_STG_2_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_TX_STG_2_CFC_CFG_STAT_BIT_TX_STG_2_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_2_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002824 bits 0) field TX_STG_3A_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_TX_STG_3A_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_TX_STG_3A_CFC_CFG_STAT_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_3A_CFC_CFG_STAT_BIT_TX_STG_3A_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_TX_STG_3A_CFC_CFG_STAT_BIT_TX_STG_3A_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_3A_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002a24 bits 0) field TX_STG_3B_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_TX_STG_3B_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_TX_STG_3B_CFC_CFG_STAT_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_3B_CFC_CFG_STAT_BIT_TX_STG_3B_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_TX_STG_3B_CFC_CFG_STAT_BIT_TX_STG_3B_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_3B_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002c24 bits 0) field TX_STG_4_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_TX_STG_4_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_TX_STG_4_CFC_CFG_STAT_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_4_CFC_CFG_STAT_BIT_TX_STG_4_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_TX_STG_4_CFC_CFG_STAT_BIT_TX_STG_4_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_4_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}
static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_SUCCESS_get( ri_rcp_buffer_t *b_ptr, odu_rcp_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002e24 bits 0) field TX_STG_N_CFC_END_ADDR_CHG_SUCCESS of register PMC_ODU_RCP_REG_TX_STG_N_CFC_CFG_STAT */
    reg_value = ri_rcp_reg_TX_STG_N_CFC_CFG_STAT_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & ODU_RCP_REG_TX_STG_N_CFC_CFG_STAT_BIT_TX_STG_N_CFC_END_ADDR_CHG_SUCCESS_MSK) >> ODU_RCP_REG_TX_STG_N_CFC_CFG_STAT_BIT_TX_STG_N_CFC_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "ri_rcp_field_TX_STG_N_CFC_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _RI_RCP_IO_INLINE_H */
