/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the c8_mdsp block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml-filtered/cni_uni_txrx_apb_bridge.xml
 *     block_uri "TBD"
 *     block_part_number "PM20_80_19"
 *     block_mnemonic "MDSP_C8_40N"
 * 
 *****************************************************************************/
#ifndef _C8_MDSP_IO_INLINE_H
#define _C8_MDSP_IO_INLINE_H

#include "c8.h"
#include "c8_mdsp_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *  tsb level structure and access functions for c8_mdsp
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** ERROR: range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    c8_handle_t * h_ptr;
    UINT32 A;
    pmc_sys_handle_t * sys_handle;
    UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} c8_mdsp_buffer_t;

#ifndef c8_mdsp_buffer_init
#define c8_mdsp_buffer_init( b_ptr, h_ptr, A ) \
       _c8_mdsp_buffer_init( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE void _c8_mdsp_buffer_init( LOG_CALLER_DEFN
                                         c8_mdsp_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->A                        = A;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = (((pmc_handle_t *)h_ptr)->base_address + ((0)*0x01000) );
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s A=%d", "c8_mdsp_buffer_init", A);
    
}

#ifndef c8_mdsp_buffer_flush
#define c8_mdsp_buffer_flush( b_ptr ) \
       _c8_mdsp_buffer_flush( LOG_CALLER b_ptr )
#endif

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void _c8_mdsp_buffer_flush( LOG_CALLER_DEFN c8_mdsp_buffer_t *b_ptr )
{
    IOLOG( "c8_mdsp_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 c8_mdsp_reg_read( c8_mdsp_buffer_t *b_ptr,
                                       c8_handle_t *h_ptr,
                                       UINT32 A,
                                       UINT32 mem_type,
                                       UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                (b_ptr->base_address + (b_ptr->A)*0x01000),
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg);
    return value;
}
static INLINE void c8_mdsp_reg_write( c8_mdsp_buffer_t *b_ptr,
                                      c8_handle_t *h_ptr,
                                      UINT32 A,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         (b_ptr->base_address + (b_ptr->A)*0x01000),
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                         value);
}

static INLINE void c8_mdsp_field_set( c8_mdsp_buffer_t *b_ptr,
                                      c8_handle_t *h_ptr,
                                      UINT32 A,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 mask,
                                      UINT32 unused_mask,
                                      UINT32 ofs,
                                      UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x01000),
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void c8_mdsp_action_on_write_field_set( c8_mdsp_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 mem_type,
                                                      UINT32 reg,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         (b_ptr->base_address + (b_ptr->A)*0x01000),
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                         value<<ofs);
}

static INLINE void c8_mdsp_burst_read( c8_mdsp_buffer_t *b_ptr,
                                       c8_handle_t *h_ptr,
                                       UINT32 A,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 len,
                                       UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x01000),
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                          len,
                          value);
}

static INLINE void c8_mdsp_burst_write( c8_mdsp_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 len,
                                        UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x01000),
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE c8_mdsp_poll( c8_mdsp_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 mem_type,
                                                 UINT32 reg,
                                                 UINT32 mask,
                                                 UINT32 value,
                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                 UINT32 max_count,
                                                 UINT32 *num_failed_polls,
                                                 UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x01000),
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for c8_mdsp
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_MDSP_C8_40N_REG_CENTAUR8_CDRU_CFG_1
 *
 * Register: Centaur8_CDRU Configuration 1
 * Offset: 0x00000400 CENTAUR8_CDRU_CFG_1
 *
 * bits 16 default 0 INV_REC_DATA
 */

#ifndef c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_write
#define c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_write( b_ptr, h_ptr, A, value ) \
       _c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_write( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_write( LOG_CALLER_DEFN
                                                           c8_mdsp_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_write", value );
    c8_mdsp_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MDSP_C8_40N_REG_CENTAUR8_CDRU_CFG_1,
                       value);
}


#ifndef c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_field_set
#define c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_field_set( b_ptr, h_ptr, A, mask, ofs, value ) \
       _c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_field_set( LOG_CALLER b_ptr, h_ptr, A, mask, ofs, value )
#endif
static INLINE void _c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_field_set( LOG_CALLER_DEFN
                                                               c8_mdsp_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_field_set", A, mask, ofs, value );
    c8_mdsp_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MDSP_C8_40N_REG_CENTAUR8_CDRU_CFG_1,
                       mask,
                       PMC_MDSP_C8_40N_REG_CENTAUR8_CDRU_CFG_1_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_read
#define c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_read( b_ptr, h_ptr, A ) \
       _c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_read( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_read( LOG_CALLER_DEFN
                                                            c8_mdsp_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_mdsp_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MDSP_C8_40N_REG_CENTAUR8_CDRU_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_read", reg_value, A);
    return reg_value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */

#ifndef c8_mdsp_field_INV_REC_DATA_set
#define c8_mdsp_field_INV_REC_DATA_set( b_ptr, h_ptr, A, value ) \
       _c8_mdsp_field_INV_REC_DATA_set( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _c8_mdsp_field_INV_REC_DATA_set( LOG_CALLER_DEFN
                                                    c8_mdsp_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_mdsp_field_INV_REC_DATA_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_mdsp_field_INV_REC_DATA_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_mdsp_field_INV_REC_DATA_set", A, value );

    /* (0x00000400 bits 16) field INV_REC_DATA of register PMC_MDSP_C8_40N_REG_CENTAUR8_CDRU_CFG_1 */
    _c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_field_set( LOG_CALLER_ARGS
                                                b_ptr,
                                                h_ptr,
                                                A,
                                                MDSP_C8_40N_REG_CENTAUR8_CDRU_CFG_1_BIT_INV_REC_DATA_MSK,
                                                MDSP_C8_40N_REG_CENTAUR8_CDRU_CFG_1_BIT_INV_REC_DATA_OFF,
                                                value);
}


#ifndef c8_mdsp_field_INV_REC_DATA_get
#define c8_mdsp_field_INV_REC_DATA_get( b_ptr, h_ptr, A ) \
       _c8_mdsp_field_INV_REC_DATA_get( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _c8_mdsp_field_INV_REC_DATA_get( LOG_CALLER_DEFN
                                                      c8_mdsp_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_mdsp_field_INV_REC_DATA_get", A, 7);
    /* (0x00000400 bits 16) field INV_REC_DATA of register PMC_MDSP_C8_40N_REG_CENTAUR8_CDRU_CFG_1 */
    reg_value = _c8_mdsp_reg_CENTAUR8_CDRU_CFG_1_read( LOG_CALLER_ARGS
                                                       b_ptr,
                                                       h_ptr,
                                                       A);
    value = (reg_value & MDSP_C8_40N_REG_CENTAUR8_CDRU_CFG_1_BIT_INV_REC_DATA_MSK) >> MDSP_C8_40N_REG_CENTAUR8_CDRU_CFG_1_BIT_INV_REC_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_mdsp_field_INV_REC_DATA_get", A, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _C8_MDSP_IO_INLINE_H */
