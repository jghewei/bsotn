/******************************************************************************
 *   COPYRIGHT (C) 2013 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the d8_rx_2x block
 *****************************************************************************/
#ifndef _D8_RX_2X_IO_INLINE_H
#define _D8_RX_2X_IO_INLINE_H

#include "d8_rx_2x.h"
#include "d8_rx_2x_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define D8_RX_2X_IO_VERSION 2

/*
 * ==================================================================================
 *  tsb level structure and access functions for d8_rx_2x
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) LOG( __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) LOG( "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) LOG_DATA( __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    d8_rx_2x_handle_t * h_ptr;
    pmc_sys_handle_t * sys_handle;
    PMC_VAR_CONST UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} d8_rx_2x_buffer_t;
static INLINE void d8_rx_2x_buffer_init( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_buffer_init( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = ((pmc_handle_t *)h_ptr)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s", "d8_rx_2x_buffer_init");
    
}

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void d8_rx_2x_buffer_flush( d8_rx_2x_buffer_t *b_ptr ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_buffer_flush( d8_rx_2x_buffer_t *b_ptr )
{
    IOLOG( "d8_rx_2x_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 d8_rx_2x_reg_read( d8_rx_2x_buffer_t *b_ptr,
                                        d8_rx_2x_handle_t *h_ptr,
                                        UINT32 mem_type,
                                        UINT32 reg ) ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_read( d8_rx_2x_buffer_t *b_ptr,
                                        d8_rx_2x_handle_t *h_ptr,
                                        UINT32 mem_type,
                                        UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                b_ptr->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h_ptr)->base_address + reg);
    return value;
}
static INLINE void d8_rx_2x_reg_write( d8_rx_2x_buffer_t *b_ptr,
                                       d8_rx_2x_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_write( d8_rx_2x_buffer_t *b_ptr,
                                       d8_rx_2x_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         b_ptr->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value);
}

static INLINE void d8_rx_2x_field_set( d8_rx_2x_buffer_t *b_ptr,
                                       d8_rx_2x_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 mask,
                                       UINT32 unused_mask,
                                       UINT32 ofs,
                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_set( d8_rx_2x_buffer_t *b_ptr,
                                       d8_rx_2x_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 mask,
                                       UINT32 unused_mask,
                                       UINT32 ofs,
                                       UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h_ptr)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void d8_rx_2x_action_on_write_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 mem_type,
                                                       UINT32 reg,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_action_on_write_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 mem_type,
                                                       UINT32 reg,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         b_ptr->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value<<ofs);
}

static INLINE void d8_rx_2x_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                        d8_rx_2x_handle_t *h_ptr,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 len,
                                        UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                        d8_rx_2x_handle_t *h_ptr,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 len,
                                        UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h_ptr)->base_address + reg,
                          len,
                          value);
}

static INLINE void d8_rx_2x_burst_write( d8_rx_2x_buffer_t *b_ptr,
                                         d8_rx_2x_handle_t *h_ptr,
                                         UINT32 mem_type,
                                         UINT32 reg,
                                         UINT32 len,
                                         UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_burst_write( d8_rx_2x_buffer_t *b_ptr,
                                         d8_rx_2x_handle_t *h_ptr,
                                         UINT32 mem_type,
                                         UINT32 reg,
                                         UINT32 len,
                                         UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_poll( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32 mem_type,
                                                  UINT32 reg,
                                                  UINT32 mask,
                                                  UINT32 value,
                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                  UINT32 max_count,
                                                  UINT32 *num_failed_polls,
                                                  UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_poll( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32 mem_type,
                                                  UINT32 reg,
                                                  UINT32 mask,
                                                  UINT32 value,
                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                  UINT32 max_count,
                                                  UINT32 *num_failed_polls,
                                                  UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for d8_rx_2x
 * ==================================================================================
 */

static INLINE void d8_rx_2x_reg_SW_RESET_CTRL_write( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_SW_RESET_CTRL_write( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_SW_RESET_CTRL_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL,
                        value);
}

static INLINE void d8_rx_2x_reg_SW_RESET_CTRL_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_SW_RESET_CTRL_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_SW_RESET_CTRL_field_set", mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL,
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_SW_RESET_CTRL_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_SW_RESET_CTRL_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL);

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_SW_RESET_CTRL_read", reg_value);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_ANALOG_TEST_CTRL_write( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_ANALOG_TEST_CTRL_write( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_ANALOG_TEST_CTRL_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL,
                        value);
}

static INLINE void d8_rx_2x_reg_ANALOG_TEST_CTRL_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_ANALOG_TEST_CTRL_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_ANALOG_TEST_CTRL_field_set", mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL,
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_ANALOG_TEST_CTRL_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_ANALOG_TEST_CTRL_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL);

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_ANALOG_TEST_CTRL_read", reg_value);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_write( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_write( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG,
                        value);
}

static INLINE void d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set", mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG,
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG);

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read", reg_value);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_burst_write( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 ofs,
                                                                              UINT32 len,
                                                                              UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_burst_write( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 ofs,
                                                                              UINT32 len,
                                                                              UINT32 *value )
{
    if (len + ofs > 2)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_burst_write", ofs, len, 2 );
    IOLOG( "%s of %d words ofs=%d len=%d", "d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_burst_write", 2, ofs, len);
    d8_rx_2x_burst_write( b_ptr,
                          h_ptr,
                          MEM_TYPE_CONFIG,
                          PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_1(ofs),
                          len,
                          value);

}

static INLINE void d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                            d8_rx_2x_handle_t *h_ptr,
                                                                            UINT32 N,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                            d8_rx_2x_handle_t *h_ptr,
                                                                            UINT32 N,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_field_set", mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_1(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_1_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE void d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                             d8_rx_2x_handle_t *h_ptr,
                                                                             UINT32 ofs,
                                                                             UINT32 len,
                                                                             UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                             d8_rx_2x_handle_t *h_ptr,
                                                                             UINT32 ofs,
                                                                             UINT32 len,
                                                                             UINT32 *value )
{
    if (len + ofs > 2)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_burst_read", ofs, len, 2 );
    d8_rx_2x_burst_read( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_1(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_burst_read", 2, ofs, len);
}

static INLINE UINT32 d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_1(N));

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_read", reg_value);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_burst_write( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 ofs,
                                                                              UINT32 len,
                                                                              UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_burst_write( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 ofs,
                                                                              UINT32 len,
                                                                              UINT32 *value )
{
    if (len + ofs > 2)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_burst_write", ofs, len, 2 );
    IOLOG( "%s of %d words ofs=%d len=%d", "d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_burst_write", 2, ofs, len);
    d8_rx_2x_burst_write( b_ptr,
                          h_ptr,
                          MEM_TYPE_CONFIG,
                          PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_1(ofs),
                          len,
                          value);

}

static INLINE void d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                            d8_rx_2x_handle_t *h_ptr,
                                                                            UINT32 N,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                            d8_rx_2x_handle_t *h_ptr,
                                                                            UINT32 N,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_field_set", mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_1(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_1_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE void d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                             d8_rx_2x_handle_t *h_ptr,
                                                                             UINT32 ofs,
                                                                             UINT32 len,
                                                                             UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                             d8_rx_2x_handle_t *h_ptr,
                                                                             UINT32 ofs,
                                                                             UINT32 len,
                                                                             UINT32 *value )
{
    if (len + ofs > 2)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_burst_read", ofs, len, 2 );
    d8_rx_2x_burst_read( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_1(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_burst_read", 2, ofs, len);
}

static INLINE UINT32 d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_1(N));

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_read", reg_value);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_burst_write( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 ofs,
                                                                         UINT32 len,
                                                                         UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_burst_write( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 ofs,
                                                                         UINT32 len,
                                                                         UINT32 *value )
{
    if (len + ofs > 2)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_burst_write", ofs, len, 2 );
    IOLOG( "%s of %d words ofs=%d len=%d", "d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_burst_write", 2, ofs, len);
    d8_rx_2x_burst_write( b_ptr,
                          h_ptr,
                          MEM_TYPE_CONFIG,
                          PMC_SFI51_RX_2X_SLICE_REG_DIAG_HHIST_CTRL_REG_2(ofs),
                          len,
                          value);

}

static INLINE void d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                       d8_rx_2x_handle_t *h_ptr,
                                                                       UINT32 N,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                       d8_rx_2x_handle_t *h_ptr,
                                                                       UINT32 N,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_field_set", mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_DIAG_HHIST_CTRL_REG_2(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_DIAG_HHIST_CTRL_REG_2_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE void d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 ofs,
                                                                        UINT32 len,
                                                                        UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 ofs,
                                                                        UINT32 len,
                                                                        UINT32 *value )
{
    if (len + ofs > 2)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_burst_read", ofs, len, 2 );
    d8_rx_2x_burst_read( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_SFI51_RX_2X_SLICE_REG_DIAG_HHIST_CTRL_REG_2(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_burst_read", 2, ofs, len);
}

static INLINE UINT32 d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                    d8_rx_2x_handle_t *h_ptr,
                                                                    UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                    d8_rx_2x_handle_t *h_ptr,
                                                                    UINT32 N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_DIAG_HHIST_CTRL_REG_2(N));

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_read", reg_value);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_burst_write( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 ofs,
                                                                          UINT32 len,
                                                                          UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_burst_write( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 ofs,
                                                                          UINT32 len,
                                                                          UINT32 *value )
{
    if (len + ofs > 2)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_burst_write", ofs, len, 2 );
    IOLOG( "%s of %d words ofs=%d len=%d", "d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_burst_write", 2, ofs, len);
    d8_rx_2x_burst_write( b_ptr,
                          h_ptr,
                          MEM_TYPE_CONFIG,
                          PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_DATA_REG(ofs),
                          len,
                          value);

}

static INLINE void d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_field_set", mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_DATA_REG(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_DATA_REG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE void d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 ofs,
                                                                         UINT32 len,
                                                                         UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 ofs,
                                                                         UINT32 len,
                                                                         UINT32 *value )
{
    if (len + ofs > 2)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_burst_read", ofs, len, 2 );
    d8_rx_2x_burst_read( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_DATA_REG(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_burst_read", 2, ofs, len);
}

static INLINE UINT32 d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_DATA_REG(N));

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_read", reg_value);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG(N),
                        value);
}

static INLINE void d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG(N),
                        value);
}

static INLINE void d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_ADC_OC_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_ADC_OC_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_ADC_OC_CFG_1_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1(N),
                        value);
}

static INLINE void d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_ADC_OC_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_ADC_OC_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_ADC_OC_CFG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_ADC_OC_CFG_2_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_ADC_OC_CFG_2_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_ADC_OC_CFG_2_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2(N),
                        value);
}

static INLINE void d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_ADC_OC_CFG_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_ADC_OC_CFG_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_ADC_OC_CFG_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_ADC_OC_CFG_3_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_ADC_OC_CFG_3_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_ADC_OC_CFG_3_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3(N),
                        value);
}

static INLINE void d8_rx_2x_reg_ADC_OC_CFG_3_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_ADC_OC_CFG_3_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_ADC_OC_CFG_3_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_ADC_OC_CFG_3_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_ADC_OC_CFG_3_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_ADC_OC_CFG_3_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_CDRU_CFG__array_write( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_CDRU_CFG__array_write( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_CDRU_CFG__array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_CDRU_CFG_(N),
                        value);
}

static INLINE void d8_rx_2x_reg_CDRU_CFG__array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_CDRU_CFG__array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_CDRU_CFG__array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_CDRU_CFG_(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_CDRU_CFG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_CDRU_CFG__array_read( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_CDRU_CFG__array_read( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_CDRU_CFG_(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_CDRU_CFG__array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1(N),
                        value);
}

static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                             d8_rx_2x_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 mask,
                                                                             UINT32 ofs,
                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                             d8_rx_2x_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 mask,
                                                                             UINT32 ofs,
                                                                             UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2(N),
                        value);
}

static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                             d8_rx_2x_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 mask,
                                                                             UINT32 ofs,
                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                             d8_rx_2x_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 mask,
                                                                             UINT32 ofs,
                                                                             UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG(N),
                        value);
}

static INLINE void d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_DATAPATH_CFG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_DATAPATH_CFG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_DATAPATH_CFG_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG(N),
                        value);
}

static INLINE void d8_rx_2x_reg_DATAPATH_CFG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_DATAPATH_CFG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_DATAPATH_CFG_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_DATAPATH_CFG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_DATAPATH_CFG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_DATAPATH_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1(N),
                        value);
}

static INLINE void d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2(N),
                        value);
}

static INLINE void d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                            d8_rx_2x_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                            d8_rx_2x_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_PATTERN_MON_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_MON_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_PATTERN_MON_CFG_1_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1(N),
                        value);
}

static INLINE void d8_rx_2x_reg_PATTERN_MON_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_MON_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_PATTERN_MON_CFG_1_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_PATTERN_MON_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_PATTERN_MON_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_PATTERN_MON_CFG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2(N),
                        value);
}

static INLINE void d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                            d8_rx_2x_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                            d8_rx_2x_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG(N),
                        value);
}

static INLINE void d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_HHIST_CTRL_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_HHIST_CTRL_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_HHIST_CTRL_REG_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG(N),
                        value);
}

static INLINE void d8_rx_2x_reg_HHIST_CTRL_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_HHIST_CTRL_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_HHIST_CTRL_REG_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_HHIST_CTRL_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_HHIST_CTRL_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_HHIST_CTRL_REG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                    d8_rx_2x_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                    d8_rx_2x_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG(N),
                        value);
}

static INLINE void d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1(N),
                        value);
}

static INLINE void d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                    d8_rx_2x_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                    d8_rx_2x_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG(N),
                        value);
}

static INLINE void d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_LOS_OC_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_LOS_OC_CFG_1_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_LOS_OC_CFG_1_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1(N),
                        value);
}

static INLINE void d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_LOS_OC_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_LOS_OC_CFG_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_LOS_OC_CFG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_LOS_OC_CFG_2_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_LOS_OC_CFG_2_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_LOS_OC_CFG_2_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2(N),
                        value);
}

static INLINE void d8_rx_2x_reg_LOS_OC_CFG_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_LOS_OC_CFG_2_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_LOS_OC_CFG_2_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_LOS_OC_CFG_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_LOS_OC_CFG_2_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_LOS_OC_CFG_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_LOS_CFG__array_write( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_LOS_CFG__array_write( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_LOS_CFG__array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_(N),
                        value);
}

static INLINE void d8_rx_2x_reg_LOS_CFG__array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_LOS_CFG__array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_LOS_CFG__array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_LOS_CFG__array_read( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_LOS_CFG__array_read( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_LOS_CFG__array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_LOS_FLT_CFG__array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_LOS_FLT_CFG__array_write( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_LOS_FLT_CFG__array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_(N),
                        value);
}

static INLINE void d8_rx_2x_reg_LOS_FLT_CFG__array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_LOS_FLT_CFG__array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_LOS_FLT_CFG__array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_LOS_FLT_CFG__array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_LOS_FLT_CFG__array_read( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_CONFIG,
                                   PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_LOS_FLT_CFG__array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_write( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3(N),
                        value);
}

static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                             d8_rx_2x_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 mask,
                                                                             UINT32 ofs,
                                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                             d8_rx_2x_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 mask,
                                                                             UINT32 ofs,
                                                                             UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_field_set", N, mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3(N),
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32  N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_STATUS,
                                   PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3(N));

    IOLOG( "%s -> 0x%08x; N=%d", "d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_read", reg_value, N);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_INT_REG_2_write( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_INT_REG_2_write( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_INT_REG_2_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2,
                        value);
}

static INLINE void d8_rx_2x_reg_INT_REG_2_action_on_write_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_INT_REG_2_action_on_write_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_INT_REG_2_action_on_write_field_set", mask, ofs, value );
    d8_rx_2x_action_on_write_field_set( b_ptr,
                                        h_ptr,
                                        MEM_TYPE_STATUS,
                                        PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2,
                                        mask,
                                        ofs,
                                        value);

}

static INLINE UINT32 d8_rx_2x_reg_INT_REG_2_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_INT_REG_2_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_STATUS,
                                   PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2);

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_INT_REG_2_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_reg_INT_REG_2_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_reg_INT_REG_2_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "d8_rx_2x_reg_INT_REG_2_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return d8_rx_2x_poll( b_ptr,
                          h_ptr,
                          MEM_TYPE_STATUS,
                          PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2,
                          mask,
                          value,
                          cmp,
                          max_count,
                          num_failed_polls,
                          delay_between_polls_in_microseconds);

}


static INLINE void d8_rx_2x_reg_INT_EN_REG_1_write( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_INT_EN_REG_1_write( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_INT_EN_REG_1_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1,
                        value);
}

static INLINE void d8_rx_2x_reg_INT_EN_REG_1_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_INT_EN_REG_1_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_INT_EN_REG_1_field_set", mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1,
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_INT_EN_REG_1_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_INT_EN_REG_1_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_STATUS,
                                   PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1);

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_INT_EN_REG_1_read", reg_value);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_INT_EN_REG_2_write( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_INT_EN_REG_2_write( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_INT_EN_REG_2_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2,
                        value);
}

static INLINE void d8_rx_2x_reg_INT_EN_REG_2_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_INT_EN_REG_2_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_INT_EN_REG_2_field_set", mask, ofs, value );
    d8_rx_2x_field_set( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2,
                        mask,
                        PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_UNUSED_MASK,
                        ofs,
                        value);

}

static INLINE UINT32 d8_rx_2x_reg_INT_EN_REG_2_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_INT_EN_REG_2_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_STATUS,
                                   PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2);

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_INT_EN_REG_2_read", reg_value);
    return reg_value;
}

static INLINE UINT32 d8_rx_2x_reg_INT_SUMMARY_REG_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_INT_SUMMARY_REG_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_STATUS,
                                   PMC_SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG);

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_INT_SUMMARY_REG_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_reg_INT_SUMMARY_REG_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 mask,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_reg_INT_SUMMARY_REG_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 mask,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "d8_rx_2x_reg_INT_SUMMARY_REG_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return d8_rx_2x_poll( b_ptr,
                          h_ptr,
                          MEM_TYPE_STATUS,
                          PMC_SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG,
                          mask,
                          value,
                          cmp,
                          max_count,
                          num_failed_polls,
                          delay_between_polls_in_microseconds);

}


static INLINE void d8_rx_2x_reg_INT_REG_1_write( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_INT_REG_1_write( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "d8_rx_2x_reg_INT_REG_1_write", value );
    d8_rx_2x_reg_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1,
                        value);
}

static INLINE void d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "d8_rx_2x_reg_INT_REG_1_action_on_write_field_set", mask, ofs, value );
    d8_rx_2x_action_on_write_field_set( b_ptr,
                                        h_ptr,
                                        MEM_TYPE_STATUS,
                                        PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1,
                                        mask,
                                        ofs,
                                        value);

}

static INLINE UINT32 d8_rx_2x_reg_INT_REG_1_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_INT_REG_1_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_STATUS,
                                   PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1);

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_INT_REG_1_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_reg_INT_REG_1_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_reg_INT_REG_1_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "d8_rx_2x_reg_INT_REG_1_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return d8_rx_2x_poll( b_ptr,
                          h_ptr,
                          MEM_TYPE_STATUS,
                          PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1,
                          mask,
                          value,
                          cmp,
                          max_count,
                          num_failed_polls,
                          delay_between_polls_in_microseconds);

}


static INLINE UINT32 d8_rx_2x_reg_INT_STAT_REG_1_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_INT_STAT_REG_1_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_STATUS,
                                   PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1);

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_INT_STAT_REG_1_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_reg_INT_STAT_REG_1_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_reg_INT_STAT_REG_1_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "d8_rx_2x_reg_INT_STAT_REG_1_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return d8_rx_2x_poll( b_ptr,
                          h_ptr,
                          MEM_TYPE_STATUS,
                          PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1,
                          mask,
                          value,
                          cmp,
                          max_count,
                          num_failed_polls,
                          delay_between_polls_in_microseconds);

}


static INLINE UINT32 d8_rx_2x_reg_INT_STAT_REG_2_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_INT_STAT_REG_2_read( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_STATUS,
                                   PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2);

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_INT_STAT_REG_2_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_reg_INT_STAT_REG_2_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_reg_INT_STAT_REG_2_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "d8_rx_2x_reg_INT_STAT_REG_2_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return d8_rx_2x_poll( b_ptr,
                          h_ptr,
                          MEM_TYPE_STATUS,
                          PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2,
                          mask,
                          value,
                          cmp,
                          max_count,
                          num_failed_polls,
                          delay_between_polls_in_microseconds);

}


static INLINE void d8_rx_2x_reg_PATTERN_MON_ERR_CNT_1_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 ofs,
                                                                        UINT32 len,
                                                                        UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_PATTERN_MON_ERR_CNT_1_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 ofs,
                                                                        UINT32 len,
                                                                        UINT32 *value )
{
    if (len + ofs > 2)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "d8_rx_2x_reg_PATTERN_MON_ERR_CNT_1_array_burst_read", ofs, len, 2 );
    d8_rx_2x_burst_read( b_ptr,
                         h_ptr,
                         MEM_TYPE_STATUS,
                         PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_ERR_CNT_1(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "d8_rx_2x_reg_PATTERN_MON_ERR_CNT_1_array_burst_read", 2, ofs, len);
}

static INLINE UINT32 d8_rx_2x_reg_PATTERN_MON_ERR_CNT_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                    d8_rx_2x_handle_t *h_ptr,
                                                                    UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_PATTERN_MON_ERR_CNT_1_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                    d8_rx_2x_handle_t *h_ptr,
                                                                    UINT32 N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_STATUS,
                                   PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_ERR_CNT_1(N));

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_PATTERN_MON_ERR_CNT_1_array_read", reg_value);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_RAM_CAPTURE_READ_DATA_REG_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                            d8_rx_2x_handle_t *h_ptr,
                                                                            UINT32 ofs,
                                                                            UINT32 len,
                                                                            UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_RAM_CAPTURE_READ_DATA_REG_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                            d8_rx_2x_handle_t *h_ptr,
                                                                            UINT32 ofs,
                                                                            UINT32 len,
                                                                            UINT32 *value )
{
    if (len + ofs > 2)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "d8_rx_2x_reg_RAM_CAPTURE_READ_DATA_REG_array_burst_read", ofs, len, 2 );
    d8_rx_2x_burst_read( b_ptr,
                         h_ptr,
                         MEM_TYPE_STATUS,
                         PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_READ_DATA_REG(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "d8_rx_2x_reg_RAM_CAPTURE_READ_DATA_REG_array_burst_read", 2, ofs, len);
}

static INLINE UINT32 d8_rx_2x_reg_RAM_CAPTURE_READ_DATA_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_RAM_CAPTURE_READ_DATA_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_STATUS,
                                   PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_READ_DATA_REG(N));

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_RAM_CAPTURE_READ_DATA_REG_array_read", reg_value);
    return reg_value;
}

static INLINE void d8_rx_2x_reg_DIAG_HHIST_VAL_REG_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 ofs,
                                                                     UINT32 len,
                                                                     UINT32 *value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_reg_DIAG_HHIST_VAL_REG_array_burst_read( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 ofs,
                                                                     UINT32 len,
                                                                     UINT32 *value )
{
    if (len + ofs > 2)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "d8_rx_2x_reg_DIAG_HHIST_VAL_REG_array_burst_read", ofs, len, 2 );
    d8_rx_2x_burst_read( b_ptr,
                         h_ptr,
                         MEM_TYPE_STATUS,
                         PMC_SFI51_RX_2X_SLICE_REG_DIAG_HHIST_VAL_REG(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "d8_rx_2x_reg_DIAG_HHIST_VAL_REG_array_burst_read", 2, ofs, len);
}

static INLINE UINT32 d8_rx_2x_reg_DIAG_HHIST_VAL_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_reg_DIAG_HHIST_VAL_REG_array_read( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32 N )
{
    UINT32 reg_value;

    reg_value = d8_rx_2x_reg_read( b_ptr,
                                   h_ptr,
                                   MEM_TYPE_STATUS,
                                   PMC_SFI51_RX_2X_SLICE_REG_DIAG_HHIST_VAL_REG(N));

    IOLOG( "%s -> 0x%08x;", "d8_rx_2x_reg_DIAG_HHIST_VAL_REG_array_read", reg_value);
    return reg_value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */
static INLINE void d8_rx_2x_field_LOS_FLT_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_FLT_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_FLT_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_FLT_B_RSTB_set", value );

    /* (0x00000000 bits 26) field LOS_FLT_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_FLT_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_FLT_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_FLT_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_FLT_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 26) field LOS_FLT_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_FLT_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_FLT_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_FLT_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_FLT_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_FLT_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_FLT_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_FLT_A_RSTB_set", value );

    /* (0x00000000 bits 25) field LOS_FLT_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_FLT_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_FLT_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_FLT_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_FLT_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 25) field LOS_FLT_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_FLT_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_FLT_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_FLT_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_OC_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OC_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OC_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_OC_B_RSTB_set", value );

    /* (0x00000000 bits 24) field LOS_OC_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_OC_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_OC_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 24) field LOS_OC_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_OC_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_OC_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_OC_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OC_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OC_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_OC_A_RSTB_set", value );

    /* (0x00000000 bits 23) field LOS_OC_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_OC_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_OC_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 23) field LOS_OC_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_OC_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LOS_OC_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_DIAGNOSTIC_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_DIAGNOSTIC_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_DIAGNOSTIC_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_DIAGNOSTIC_B_RSTB_set", value );

    /* (0x00000000 bits 22) field DIAGNOSTIC_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIAGNOSTIC_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIAGNOSTIC_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_DIAGNOSTIC_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DIAGNOSTIC_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 22) field DIAGNOSTIC_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIAGNOSTIC_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIAGNOSTIC_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_DIAGNOSTIC_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_DIAGNOSTIC_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_DIAGNOSTIC_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_DIAGNOSTIC_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_DIAGNOSTIC_A_RSTB_set", value );

    /* (0x00000000 bits 21) field DIAGNOSTIC_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIAGNOSTIC_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIAGNOSTIC_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_DIAGNOSTIC_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DIAGNOSTIC_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 21) field DIAGNOSTIC_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIAGNOSTIC_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIAGNOSTIC_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_DIAGNOSTIC_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_LB_CLK_DEGLITCH_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LB_CLK_DEGLITCH_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LB_CLK_DEGLITCH_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LB_CLK_DEGLITCH_B_RSTB_set", value );

    /* (0x00000000 bits 20) field LB_CLK_DEGLITCH_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LB_CLK_DEGLITCH_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LB_CLK_DEGLITCH_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_LB_CLK_DEGLITCH_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LB_CLK_DEGLITCH_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 20) field LB_CLK_DEGLITCH_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LB_CLK_DEGLITCH_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LB_CLK_DEGLITCH_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LB_CLK_DEGLITCH_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_LB_CLK_DEGLITCH_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LB_CLK_DEGLITCH_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LB_CLK_DEGLITCH_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LB_CLK_DEGLITCH_A_RSTB_set", value );

    /* (0x00000000 bits 19) field LB_CLK_DEGLITCH_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LB_CLK_DEGLITCH_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LB_CLK_DEGLITCH_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_LB_CLK_DEGLITCH_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LB_CLK_DEGLITCH_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 19) field LB_CLK_DEGLITCH_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LB_CLK_DEGLITCH_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_LB_CLK_DEGLITCH_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LB_CLK_DEGLITCH_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_EFUSE_INT_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_EFUSE_INT_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_EFUSE_INT_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_EFUSE_INT_B_RSTB_set", value );

    /* (0x00000000 bits 18) field EFUSE_INT_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_EFUSE_INT_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_EFUSE_INT_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_EFUSE_INT_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_EFUSE_INT_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 18) field EFUSE_INT_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_EFUSE_INT_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_EFUSE_INT_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_EFUSE_INT_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_EFUSE_INT_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_EFUSE_INT_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_EFUSE_INT_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_EFUSE_INT_A_RSTB_set", value );

    /* (0x00000000 bits 17) field EFUSE_INT_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_EFUSE_INT_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_EFUSE_INT_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_EFUSE_INT_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_EFUSE_INT_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 17) field EFUSE_INT_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_EFUSE_INT_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_EFUSE_INT_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_EFUSE_INT_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_GCOC_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GCOC_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GCOC_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_GCOC_B_RSTB_set", value );

    /* (0x00000000 bits 16) field GCOC_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GCOC_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GCOC_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_GCOC_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GCOC_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 16) field GCOC_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GCOC_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GCOC_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_GCOC_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_GCOC_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GCOC_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GCOC_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_GCOC_A_RSTB_set", value );

    /* (0x00000000 bits 15) field GCOC_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GCOC_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GCOC_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_GCOC_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GCOC_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 15) field GCOC_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GCOC_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GCOC_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_GCOC_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_SIPO_BIST_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_SIPO_BIST_B_RSTB_set", value );

    /* (0x00000000 bits 14) field SIPO_BIST_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_SIPO_BIST_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_SIPO_BIST_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 14) field SIPO_BIST_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_SIPO_BIST_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_SIPO_BIST_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_SIPO_BIST_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_SIPO_BIST_A_RSTB_set", value );

    /* (0x00000000 bits 13) field SIPO_BIST_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_SIPO_BIST_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_SIPO_BIST_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 13) field SIPO_BIST_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_SIPO_BIST_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_SIPO_BIST_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_BADJ_CLK_DEGLITCH_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_BADJ_CLK_DEGLITCH_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_BADJ_CLK_DEGLITCH_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_BADJ_CLK_DEGLITCH_B_RSTB_set", value );

    /* (0x00000000 bits 12) field BADJ_CLK_DEGLITCH_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_BADJ_CLK_DEGLITCH_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_BADJ_CLK_DEGLITCH_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_BADJ_CLK_DEGLITCH_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_BADJ_CLK_DEGLITCH_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 12) field BADJ_CLK_DEGLITCH_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_BADJ_CLK_DEGLITCH_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_BADJ_CLK_DEGLITCH_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_BADJ_CLK_DEGLITCH_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_BADJ_CLK_DEGLITCH_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_BADJ_CLK_DEGLITCH_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_BADJ_CLK_DEGLITCH_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_BADJ_CLK_DEGLITCH_A_RSTB_set", value );

    /* (0x00000000 bits 11) field BADJ_CLK_DEGLITCH_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_BADJ_CLK_DEGLITCH_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_BADJ_CLK_DEGLITCH_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_BADJ_CLK_DEGLITCH_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_BADJ_CLK_DEGLITCH_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 11) field BADJ_CLK_DEGLITCH_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_BADJ_CLK_DEGLITCH_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_BADJ_CLK_DEGLITCH_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_BADJ_CLK_DEGLITCH_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_CLK_DEGLITCH_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_CLK_DEGLITCH_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_CLK_DEGLITCH_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADC_CLK_DEGLITCH_B_RSTB_set", value );

    /* (0x00000000 bits 10) field ADC_CLK_DEGLITCH_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_ADC_CLK_DEGLITCH_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_ADC_CLK_DEGLITCH_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_CLK_DEGLITCH_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_CLK_DEGLITCH_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 10) field ADC_CLK_DEGLITCH_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_ADC_CLK_DEGLITCH_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_ADC_CLK_DEGLITCH_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_CLK_DEGLITCH_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_CLK_DEGLITCH_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_CLK_DEGLITCH_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_CLK_DEGLITCH_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADC_CLK_DEGLITCH_A_RSTB_set", value );

    /* (0x00000000 bits 9) field ADC_CLK_DEGLITCH_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_ADC_CLK_DEGLITCH_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_ADC_CLK_DEGLITCH_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_CLK_DEGLITCH_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_CLK_DEGLITCH_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 9) field ADC_CLK_DEGLITCH_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_ADC_CLK_DEGLITCH_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_ADC_CLK_DEGLITCH_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_CLK_DEGLITCH_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PATT_MON_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PATT_MON_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PATT_MON_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PATT_MON_B_RSTB_set", value );

    /* (0x00000000 bits 8) field PATT_MON_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_MON_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_MON_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_PATT_MON_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PATT_MON_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 8) field PATT_MON_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_MON_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_MON_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PATT_MON_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PATT_MON_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PATT_MON_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PATT_MON_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PATT_MON_A_RSTB_set", value );

    /* (0x00000000 bits 7) field PATT_MON_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_MON_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_MON_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_PATT_MON_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PATT_MON_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 7) field PATT_MON_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_MON_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_MON_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PATT_MON_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PATT_GEN_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PATT_GEN_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PATT_GEN_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PATT_GEN_B_RSTB_set", value );

    /* (0x00000000 bits 6) field PATT_GEN_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_GEN_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_GEN_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_PATT_GEN_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PATT_GEN_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 6) field PATT_GEN_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_GEN_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_GEN_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PATT_GEN_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PATT_GEN_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PATT_GEN_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PATT_GEN_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PATT_GEN_A_RSTB_set", value );

    /* (0x00000000 bits 5) field PATT_GEN_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_GEN_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_GEN_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_PATT_GEN_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PATT_GEN_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 5) field PATT_GEN_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_GEN_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_PATT_GEN_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PATT_GEN_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_GEN_SIPO_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GEN_SIPO_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GEN_SIPO_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_GEN_SIPO_B_RSTB_set", value );

    /* (0x00000000 bits 4) field GEN_SIPO_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GEN_SIPO_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GEN_SIPO_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_GEN_SIPO_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GEN_SIPO_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 4) field GEN_SIPO_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GEN_SIPO_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GEN_SIPO_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_GEN_SIPO_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_GEN_SIPO_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GEN_SIPO_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GEN_SIPO_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_GEN_SIPO_A_RSTB_set", value );

    /* (0x00000000 bits 3) field GEN_SIPO_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GEN_SIPO_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GEN_SIPO_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_GEN_SIPO_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GEN_SIPO_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 3) field GEN_SIPO_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GEN_SIPO_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_GEN_SIPO_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_GEN_SIPO_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_LOCKDET_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_LOCKDET_B_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_LOCKDET_B_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_LOCKDET_B_RSTB_set", value );

    /* (0x00000000 bits 2) field RXCPGEN_LOCKDET_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_RXCPGEN_LOCKDET_B_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_RXCPGEN_LOCKDET_B_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_LOCKDET_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_LOCKDET_B_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 2) field RXCPGEN_LOCKDET_B_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_RXCPGEN_LOCKDET_B_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_RXCPGEN_LOCKDET_B_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_LOCKDET_B_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_LOCKDET_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_LOCKDET_A_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_LOCKDET_A_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_LOCKDET_A_RSTB_set", value );

    /* (0x00000000 bits 1) field RXCPGEN_LOCKDET_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_RXCPGEN_LOCKDET_A_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_RXCPGEN_LOCKDET_A_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_LOCKDET_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_LOCKDET_A_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 1) field RXCPGEN_LOCKDET_A_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_RXCPGEN_LOCKDET_A_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_RXCPGEN_LOCKDET_A_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_LOCKDET_A_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_DIGITAL_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_DIGITAL_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_DIGITAL_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_DIGITAL_RSTB_set", value );

    /* (0x00000000 bits 0) field DIGITAL_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    d8_rx_2x_reg_SW_RESET_CTRL_field_set( b_ptr,
                                          h_ptr,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIGITAL_RSTB_MSK,
                                          SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIGITAL_RSTB_OFF,
                                          value);
}

static INLINE UINT32 d8_rx_2x_field_DIGITAL_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DIGITAL_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 0) field DIGITAL_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL */
    reg_value = d8_rx_2x_reg_SW_RESET_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIGITAL_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SW_RESET_CTRL_BIT_DIGITAL_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_DIGITAL_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_TEST_DIVMODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_TEST_DIVMODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_TEST_DIVMODE_set", value, 3);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_TEST_DIVMODE_set", value );

    /* (0x00000004 bits 13:12) field TEST_DIVMODE of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    d8_rx_2x_reg_ANALOG_TEST_CTRL_field_set( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_DIVMODE_MSK,
                                             SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_DIVMODE_OFF,
                                             value);
}

static INLINE UINT32 d8_rx_2x_field_TEST_DIVMODE_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_TEST_DIVMODE_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 13:12) field TEST_DIVMODE of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    reg_value = d8_rx_2x_reg_ANALOG_TEST_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_DIVMODE_MSK) >> SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_DIVMODE_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_TEST_DIVMODE_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_range_TEST_DIVMODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_TEST_DIVMODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_TEST_DIVMODE_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_TEST_DIVMODE_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_TEST_DIVMODE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000004 bits 13:12) field TEST_DIVMODE of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000004 bits 13:12) field TEST_DIVMODE of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
        d8_rx_2x_reg_ANALOG_TEST_CTRL_field_set( b_ptr,
                                                 h_ptr,
                                                 subfield_mask << (SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_DIVMODE_OFF + subfield_offset),
                                                 SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_DIVMODE_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_TEST_DIVMODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_TEST_DIVMODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_TEST_DIVMODE_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_TEST_DIVMODE_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000004 bits 13:12) field TEST_DIVMODE of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    reg_value = d8_rx_2x_reg_ANALOG_TEST_CTRL_read(  b_ptr, h_ptr);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_DIVMODE_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_DIVMODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_DIVMODE_MSK, SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_DIVMODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_TEST_DIVMODE_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_RX_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RX_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RX_MODE_set", value, 15);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RX_MODE_set", value );

    /* (0x00000004 bits 11:8) field RX_MODE of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    d8_rx_2x_reg_ANALOG_TEST_CTRL_field_set( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RX_MODE_MSK,
                                             SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RX_MODE_OFF,
                                             value);
}

static INLINE UINT32 d8_rx_2x_field_RX_MODE_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RX_MODE_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 11:8) field RX_MODE of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    reg_value = d8_rx_2x_reg_ANALOG_TEST_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RX_MODE_MSK) >> SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RX_MODE_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RX_MODE_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RX_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RX_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RX_MODE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RX_MODE_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RX_MODE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000004 bits 11:8) field RX_MODE of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000004 bits 11:8) field RX_MODE of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
        d8_rx_2x_reg_ANALOG_TEST_CTRL_field_set( b_ptr,
                                                 h_ptr,
                                                 subfield_mask << (SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RX_MODE_OFF + subfield_offset),
                                                 SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RX_MODE_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RX_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RX_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RX_MODE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RX_MODE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000004 bits 11:8) field RX_MODE of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    reg_value = d8_rx_2x_reg_ANALOG_TEST_CTRL_read(  b_ptr, h_ptr);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RX_MODE_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RX_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RX_MODE_MSK, SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RX_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RX_MODE_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_TEST_SLICE_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_TEST_SLICE_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_TEST_SLICE_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_TEST_SLICE_EN_set", value );

    /* (0x00000004 bits 7) field TEST_SLICE_EN of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    d8_rx_2x_reg_ANALOG_TEST_CTRL_field_set( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_SLICE_EN_MSK,
                                             SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_SLICE_EN_OFF,
                                             value);
}

static INLINE UINT32 d8_rx_2x_field_TEST_SLICE_EN_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_TEST_SLICE_EN_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 7) field TEST_SLICE_EN of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    reg_value = d8_rx_2x_reg_ANALOG_TEST_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_SLICE_EN_MSK) >> SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_TEST_SLICE_EN_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_TEST_SLICE_EN_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RS_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RS_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RS_ATMSB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RS_ATMSB_set", value );

    /* (0x00000004 bits 5) field RS_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    d8_rx_2x_reg_ANALOG_TEST_CTRL_field_set( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RS_ATMSB_MSK,
                                             SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RS_ATMSB_OFF,
                                             value);
}

static INLINE UINT32 d8_rx_2x_field_RS_ATMSB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RS_ATMSB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 5) field RS_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    reg_value = d8_rx_2x_reg_ANALOG_TEST_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RS_ATMSB_MSK) >> SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_RS_ATMSB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RS_ATMSB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_ATIN_set( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ATIN_set( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ATIN_set", value, 31);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ATIN_set", value );

    /* (0x00000004 bits 4:0) field ATIN of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    d8_rx_2x_reg_ANALOG_TEST_CTRL_field_set( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_ATIN_MSK,
                                             SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_ATIN_OFF,
                                             value);
}

static INLINE UINT32 d8_rx_2x_field_ATIN_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ATIN_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 4:0) field ATIN of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    reg_value = d8_rx_2x_reg_ANALOG_TEST_CTRL_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_ATIN_MSK) >> SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_ATIN_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ATIN_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_range_ATIN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_ATIN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_ATIN_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_ATIN_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_ATIN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000004 bits 4:0) field ATIN of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000004 bits 4:0) field ATIN of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
        d8_rx_2x_reg_ANALOG_TEST_CTRL_field_set( b_ptr,
                                                 h_ptr,
                                                 subfield_mask << (SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_ATIN_OFF + subfield_offset),
                                                 SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_ATIN_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_ATIN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_ATIN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_ATIN_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_ATIN_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000004 bits 4:0) field ATIN of register PMC_SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL */
    reg_value = d8_rx_2x_reg_ANALOG_TEST_CTRL_read(  b_ptr, h_ptr);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_ATIN_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_ATIN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_ATIN_MSK, SFI51_RX_2X_SLICE_REG_ANALOG_TEST_CTRL_BIT_ATIN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_ATIN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_15_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_15_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_15_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_15_set", value );

    /* (0x000000f4 bits 31) field RXCPGEN_CTRL_15 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_15_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_15_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_15_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_15_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 31) field RXCPGEN_CTRL_15 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_15_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_15_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_15_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_14_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_14_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_14_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_14_set", value );

    /* (0x000000f4 bits 30) field RXCPGEN_CTRL_14 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_14_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_14_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_14_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_14_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 30) field RXCPGEN_CTRL_14 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_14_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_14_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_14_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_13_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_13_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_13_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_13_set", value );

    /* (0x000000f4 bits 29) field RXCPGEN_CTRL_13 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_13_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_13_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_13_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_13_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 29) field RXCPGEN_CTRL_13 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_13_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_13_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_13_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_12_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_12_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_12_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_12_set", value );

    /* (0x000000f4 bits 28) field RXCPGEN_CTRL_12 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_12_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_12_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_12_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_12_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 28) field RXCPGEN_CTRL_12 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_12_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_12_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_12_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_11_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_11_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_11_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_11_set", value );

    /* (0x000000f4 bits 27) field RXCPGEN_CTRL_11 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_11_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_11_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_11_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_11_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 27) field RXCPGEN_CTRL_11 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_11_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_11_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_11_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_10_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_10_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_10_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_10_set", value );

    /* (0x000000f4 bits 26) field RXCPGEN_CTRL_10 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_10_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_10_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_10_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_10_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 26) field RXCPGEN_CTRL_10 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_10_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_10_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_10_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_9_8_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_9_8_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_9_8_set", value, 3);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_9_8_set", value );

    /* (0x000000f4 bits 25:24) field RXCPGEN_CTRL_9_8 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_9_8_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_9_8_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_9_8_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_9_8_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 25:24) field RXCPGEN_CTRL_9_8 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_9_8_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_9_8_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_9_8_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RXCPGEN_CTRL_9_8_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RXCPGEN_CTRL_9_8_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_CTRL_9_8_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_CTRL_9_8_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_CTRL_9_8_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000f4 bits 25:24) field RXCPGEN_CTRL_9_8 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000f4 bits 25:24) field RXCPGEN_CTRL_9_8 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
        d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_9_8_OFF + subfield_offset),
                                                    SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_9_8_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_CTRL_9_8_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_CTRL_9_8_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_CTRL_9_8_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_CTRL_9_8_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000f4 bits 25:24) field RXCPGEN_CTRL_9_8 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_9_8_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_9_8_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_9_8_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_9_8_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_CTRL_9_8_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_7_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_7_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_7_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_7_set", value );

    /* (0x000000f4 bits 23) field RXCPGEN_CTRL_7 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_7_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_7_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_7_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_7_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 23) field RXCPGEN_CTRL_7 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_7_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_7_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_7_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_6_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_6_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_6_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_6_set", value );

    /* (0x000000f4 bits 22) field RXCPGEN_CTRL_6 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_6_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_6_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_6_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_6_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 22) field RXCPGEN_CTRL_6 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_6_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_6_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_6_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_5_4_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_5_4_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_5_4_set", value, 3);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_5_4_set", value );

    /* (0x000000f4 bits 21:20) field RXCPGEN_CTRL_5_4 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_5_4_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_5_4_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_5_4_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_5_4_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 21:20) field RXCPGEN_CTRL_5_4 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_5_4_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_5_4_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_5_4_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RXCPGEN_CTRL_5_4_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RXCPGEN_CTRL_5_4_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_CTRL_5_4_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_CTRL_5_4_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_CTRL_5_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000f4 bits 21:20) field RXCPGEN_CTRL_5_4 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000f4 bits 21:20) field RXCPGEN_CTRL_5_4 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
        d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_5_4_OFF + subfield_offset),
                                                    SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_5_4_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_CTRL_5_4_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_CTRL_5_4_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_CTRL_5_4_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_CTRL_5_4_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000f4 bits 21:20) field RXCPGEN_CTRL_5_4 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_5_4_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_5_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_5_4_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_5_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_CTRL_5_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_3_1_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_3_1_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_3_1_set", value, 7);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_3_1_set", value );

    /* (0x000000f4 bits 19:17) field RXCPGEN_CTRL_3_1 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_3_1_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_3_1_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_3_1_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_3_1_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 19:17) field RXCPGEN_CTRL_3_1 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_3_1_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_3_1_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_3_1_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RXCPGEN_CTRL_3_1_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RXCPGEN_CTRL_3_1_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_CTRL_3_1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_CTRL_3_1_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_CTRL_3_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000f4 bits 19:17) field RXCPGEN_CTRL_3_1 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000f4 bits 19:17) field RXCPGEN_CTRL_3_1 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
        d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_3_1_OFF + subfield_offset),
                                                    SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_3_1_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_CTRL_3_1_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_CTRL_3_1_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_CTRL_3_1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_CTRL_3_1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000f4 bits 19:17) field RXCPGEN_CTRL_3_1 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_3_1_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_3_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_3_1_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_3_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_CTRL_3_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_0_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_CTRL_0_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_0_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_0_set", value );

    /* (0x000000f4 bits 16) field RXCPGEN_CTRL_0 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_0_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_0_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_0_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_CTRL_0_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 16) field RXCPGEN_CTRL_0 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_0_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_CTRL_0_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_CTRL_0_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_MODE_7_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_MODE_7_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_7_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_7_set", value );

    /* (0x000000f4 bits 15) field RXCPGEN_MODE_7 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_7_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_7_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_MODE_7_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_MODE_7_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 15) field RXCPGEN_MODE_7 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_7_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_7_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_7_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_MODE_6_5_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_MODE_6_5_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_6_5_set", value, 3);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_6_5_set", value );

    /* (0x000000f4 bits 14:13) field RXCPGEN_MODE_6_5 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_6_5_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_6_5_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_MODE_6_5_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_MODE_6_5_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 14:13) field RXCPGEN_MODE_6_5 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_6_5_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_6_5_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_6_5_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RXCPGEN_MODE_6_5_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RXCPGEN_MODE_6_5_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_MODE_6_5_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_MODE_6_5_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_MODE_6_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000f4 bits 14:13) field RXCPGEN_MODE_6_5 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000f4 bits 14:13) field RXCPGEN_MODE_6_5 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
        d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_6_5_OFF + subfield_offset),
                                                    SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_6_5_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_MODE_6_5_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_MODE_6_5_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_MODE_6_5_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_MODE_6_5_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000f4 bits 14:13) field RXCPGEN_MODE_6_5 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_6_5_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_6_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_6_5_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_6_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_MODE_6_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_MODE_4_3_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_MODE_4_3_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_4_3_set", value, 3);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_4_3_set", value );

    /* (0x000000f4 bits 12:11) field RXCPGEN_MODE_4_3 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_4_3_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_4_3_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_MODE_4_3_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_MODE_4_3_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 12:11) field RXCPGEN_MODE_4_3 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_4_3_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_4_3_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_4_3_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RXCPGEN_MODE_4_3_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RXCPGEN_MODE_4_3_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_MODE_4_3_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_MODE_4_3_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_MODE_4_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000f4 bits 12:11) field RXCPGEN_MODE_4_3 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000f4 bits 12:11) field RXCPGEN_MODE_4_3 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
        d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_4_3_OFF + subfield_offset),
                                                    SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_4_3_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_MODE_4_3_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_MODE_4_3_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_MODE_4_3_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_MODE_4_3_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000f4 bits 12:11) field RXCPGEN_MODE_4_3 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_4_3_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_4_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_4_3_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_4_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_MODE_4_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_MODE_2_0_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_MODE_2_0_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_2_0_set", value, 7);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_2_0_set", value );

    /* (0x000000f4 bits 10:8) field RXCPGEN_MODE_2_0 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_2_0_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_2_0_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_MODE_2_0_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_MODE_2_0_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 10:8) field RXCPGEN_MODE_2_0 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_2_0_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_2_0_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_MODE_2_0_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RXCPGEN_MODE_2_0_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RXCPGEN_MODE_2_0_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_MODE_2_0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_MODE_2_0_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_MODE_2_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000f4 bits 10:8) field RXCPGEN_MODE_2_0 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000f4 bits 10:8) field RXCPGEN_MODE_2_0 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
        d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_2_0_OFF + subfield_offset),
                                                    SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_2_0_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_MODE_2_0_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RXCPGEN_MODE_2_0_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RXCPGEN_MODE_2_0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RXCPGEN_MODE_2_0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000f4 bits 10:8) field RXCPGEN_MODE_2_0 of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_2_0_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_2_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_2_0_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_MODE_2_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RXCPGEN_MODE_2_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_VDDBIAS_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_VDDBIAS_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_VDDBIAS_MODE_set", value, 3);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_VDDBIAS_MODE_set", value );

    /* (0x000000f4 bits 7:6) field VDDBIAS_MODE of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_MODE_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_MODE_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_VDDBIAS_MODE_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_VDDBIAS_MODE_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 7:6) field VDDBIAS_MODE of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_MODE_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_MODE_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_VDDBIAS_MODE_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_range_VDDBIAS_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_VDDBIAS_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_VDDBIAS_MODE_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_VDDBIAS_MODE_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_VDDBIAS_MODE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000000f4 bits 7:6) field VDDBIAS_MODE of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000f4 bits 7:6) field VDDBIAS_MODE of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
        d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                    h_ptr,
                                                    subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_MODE_OFF + subfield_offset),
                                                    SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_MODE_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_VDDBIAS_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_VDDBIAS_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_VDDBIAS_MODE_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_VDDBIAS_MODE_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000f4 bits 7:6) field VDDBIAS_MODE of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_MODE_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_MODE_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_VDDBIAS_MODE_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_VDDBIAS_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_VDDBIAS_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_VDDBIAS_ATMSB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_VDDBIAS_ATMSB_set", value );

    /* (0x000000f4 bits 5) field VDDBIAS_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_ATMSB_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_ATMSB_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_VDDBIAS_ATMSB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_VDDBIAS_ATMSB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 5) field VDDBIAS_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_ATMSB_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_ATMSB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_VDDBIAS_ATMSB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_VDDBIAS_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_VDDBIAS_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_VDDBIAS_ENB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_VDDBIAS_ENB_set", value );

    /* (0x000000f4 bits 4) field VDDBIAS_ENB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_ENB_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_ENB_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_VDDBIAS_ENB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_VDDBIAS_ENB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 4) field VDDBIAS_ENB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_VDDBIAS_ENB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_VDDBIAS_ENB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_ATMSB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_ATMSB_set", value );

    /* (0x000000f4 bits 3) field RXCPGEN_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ATMSB_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ATMSB_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_ATMSB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_ATMSB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 3) field RXCPGEN_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ATMSB_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ATMSB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_ATMSB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_ARSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_ARSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_ARSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_ARSTB_set", value );

    /* (0x000000f4 bits 2) field RXCPGEN_ARSTB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ARSTB_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ARSTB_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_ARSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_ARSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 2) field RXCPGEN_ARSTB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ARSTB_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ARSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_ARSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_RSTB_set", value );

    /* (0x000000f4 bits 1) field RXCPGEN_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_RSTB_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_RSTB_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_RSTB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 1) field RXCPGEN_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_RSTB_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RXCPGEN_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RXCPGEN_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RXCPGEN_ENB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RXCPGEN_ENB_set", value );

    /* (0x000000f4 bits 0) field RXCPGEN_ENB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_field_set( b_ptr,
                                                h_ptr,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ENB_MSK,
                                                SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ENB_OFF,
                                                value);
}

static INLINE UINT32 d8_rx_2x_field_RXCPGEN_ENB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RXCPGEN_ENB_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f4 bits 0) field RXCPGEN_ENB of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG */
    reg_value = d8_rx_2x_reg_RXCPGEN_VDDBIAS_CFG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_VDDBIAS_CFG_BIT_RXCPGEN_ENB_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RXCPGEN_ENB_get", value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_burstsize2
 * ==================================================================================
 */
static INLINE void d8_rx_2x_lfield_GEN_USR_PAT_LSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_GEN_USR_PAT_LSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] )
{
    IOLOG( "%s ", "d8_rx_2x_lfield_GEN_USR_PAT_LSB_set");
    d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_burst_write( b_ptr,
                                                               h_ptr,
                                                               0,
                                                               2,
                                                               value);
}

static INLINE void d8_rx_2x_lfield_GEN_USR_PAT_LSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_GEN_USR_PAT_LSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] )
{
    IOLOG( "%s ", "d8_rx_2x_lfield_GEN_USR_PAT_LSB_get");
    d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_burst_read( b_ptr,
                                                              h_ptr,
                                                              0,
                                                              2,
                                                              (UINT32 *)value);
}

static INLINE void d8_rx_2x_lfield_range_GEN_USR_PAT_LSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_range_GEN_USR_PAT_LSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "d8_rx_2x_lfield_range_GEN_USR_PAT_LSB_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "d8_rx_2x_lfield_range_GEN_USR_PAT_LSB_set", start_bit, stop_bit, value);
    d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             word_number,
                                                             mask,
                                                             field_ofs,
                                                             value);
}

static INLINE UINT32 d8_rx_2x_lfield_range_GEN_USR_PAT_LSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_lfield_range_GEN_USR_PAT_LSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "d8_rx_2x_lfield_range_GEN_USR_PAT_LSB_get", start_bit, stop_bit );
    }
    reg_value = d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_1_array_read( b_ptr,
                                                                    h_ptr,
                                                                    word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "d8_rx_2x_lfield_range_GEN_USR_PAT_LSB_get", start_bit, stop_bit, value );
    return value;
}

static INLINE void d8_rx_2x_lfield_MON_USR_PAT_LSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_MON_USR_PAT_LSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] )
{
    IOLOG( "%s ", "d8_rx_2x_lfield_MON_USR_PAT_LSB_set");
    d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_burst_write( b_ptr,
                                                               h_ptr,
                                                               0,
                                                               2,
                                                               value);
}

static INLINE void d8_rx_2x_lfield_MON_USR_PAT_LSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_MON_USR_PAT_LSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] )
{
    IOLOG( "%s ", "d8_rx_2x_lfield_MON_USR_PAT_LSB_get");
    d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_burst_read( b_ptr,
                                                              h_ptr,
                                                              0,
                                                              2,
                                                              (UINT32 *)value);
}

static INLINE void d8_rx_2x_lfield_range_MON_USR_PAT_LSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_range_MON_USR_PAT_LSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "d8_rx_2x_lfield_range_MON_USR_PAT_LSB_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "d8_rx_2x_lfield_range_MON_USR_PAT_LSB_set", start_bit, stop_bit, value);
    d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             word_number,
                                                             mask,
                                                             field_ofs,
                                                             value);
}

static INLINE UINT32 d8_rx_2x_lfield_range_MON_USR_PAT_LSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_lfield_range_MON_USR_PAT_LSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "d8_rx_2x_lfield_range_MON_USR_PAT_LSB_get", start_bit, stop_bit );
    }
    reg_value = d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_1_array_read( b_ptr,
                                                                    h_ptr,
                                                                    word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "d8_rx_2x_lfield_range_MON_USR_PAT_LSB_get", start_bit, stop_bit, value );
    return value;
}

static INLINE void d8_rx_2x_lfield_HHIST_CNT_TIM_LIMIT_set( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 value[2] ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_HHIST_CNT_TIM_LIMIT_set( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 value[2] )
{
    IOLOG( "%s ", "d8_rx_2x_lfield_HHIST_CNT_TIM_LIMIT_set");
    d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_burst_write( b_ptr,
                                                          h_ptr,
                                                          0,
                                                          2,
                                                          value);
}

static INLINE void d8_rx_2x_lfield_HHIST_CNT_TIM_LIMIT_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 value[2] ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_HHIST_CNT_TIM_LIMIT_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 value[2] )
{
    IOLOG( "%s ", "d8_rx_2x_lfield_HHIST_CNT_TIM_LIMIT_get");
    d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_burst_read( b_ptr,
                                                         h_ptr,
                                                         0,
                                                         2,
                                                         (UINT32 *)value);
}

static INLINE void d8_rx_2x_lfield_range_HHIST_CNT_TIM_LIMIT_set( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_range_HHIST_CNT_TIM_LIMIT_set( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "d8_rx_2x_lfield_range_HHIST_CNT_TIM_LIMIT_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "d8_rx_2x_lfield_range_HHIST_CNT_TIM_LIMIT_set", start_bit, stop_bit, value);
    d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_field_set( b_ptr,
                                                        h_ptr,
                                                        word_number,
                                                        mask,
                                                        field_ofs,
                                                        value);
}

static INLINE UINT32 d8_rx_2x_lfield_range_HHIST_CNT_TIM_LIMIT_get( d8_rx_2x_buffer_t *b_ptr,
                                                                    d8_rx_2x_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_lfield_range_HHIST_CNT_TIM_LIMIT_get( d8_rx_2x_buffer_t *b_ptr,
                                                                    d8_rx_2x_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "d8_rx_2x_lfield_range_HHIST_CNT_TIM_LIMIT_get", start_bit, stop_bit );
    }
    reg_value = d8_rx_2x_reg_DIAG_HHIST_CTRL_REG_2_array_read( b_ptr,
                                                               h_ptr,
                                                               word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "d8_rx_2x_lfield_range_HHIST_CNT_TIM_LIMIT_get", start_bit, stop_bit, value );
    return value;
}

static INLINE void d8_rx_2x_lfield_RAMCAPT_WR_DATA_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_RAMCAPT_WR_DATA_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] )
{
    IOLOG( "%s ", "d8_rx_2x_lfield_RAMCAPT_WR_DATA_set");
    d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_burst_write( b_ptr,
                                                           h_ptr,
                                                           0,
                                                           2,
                                                           value);
}

static INLINE void d8_rx_2x_lfield_RAMCAPT_WR_DATA_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_RAMCAPT_WR_DATA_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] )
{
    IOLOG( "%s ", "d8_rx_2x_lfield_RAMCAPT_WR_DATA_get");
    d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_burst_read( b_ptr,
                                                          h_ptr,
                                                          0,
                                                          2,
                                                          (UINT32 *)value);
}

static INLINE void d8_rx_2x_lfield_range_RAMCAPT_WR_DATA_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_range_RAMCAPT_WR_DATA_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "d8_rx_2x_lfield_range_RAMCAPT_WR_DATA_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "d8_rx_2x_lfield_range_RAMCAPT_WR_DATA_set", start_bit, stop_bit, value);
    d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_field_set( b_ptr,
                                                         h_ptr,
                                                         word_number,
                                                         mask,
                                                         field_ofs,
                                                         value);
}

static INLINE UINT32 d8_rx_2x_lfield_range_RAMCAPT_WR_DATA_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_lfield_range_RAMCAPT_WR_DATA_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "d8_rx_2x_lfield_range_RAMCAPT_WR_DATA_get", start_bit, stop_bit );
    }
    reg_value = d8_rx_2x_reg_RAM_OVERWRITE_DATA_REG_array_read( b_ptr,
                                                                h_ptr,
                                                                word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "d8_rx_2x_lfield_range_RAMCAPT_WR_DATA_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_size2
 * ==================================================================================
 */
static INLINE void d8_rx_2x_field_RAMS_DATA_WR_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMS_DATA_WR_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMS_DATA_WR_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMS_DATA_WR_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMS_DATA_WR_set", N, value );

    /* ((0x00000024 + (N) * 0x4) bits 19:12) field RAMS_DATA_WR of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_WR_MSK,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_WR_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_RAMS_DATA_WR_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMS_DATA_WR_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMS_DATA_WR_get", N, 1);
    /* ((0x00000024 + (N) * 0x4) bits 19:12) field RAMS_DATA_WR of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_WR_MSK) >> SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_WR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMS_DATA_WR_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RAMS_DATA_WR_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RAMS_DATA_WR_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RAMS_DATA_WR_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RAMS_DATA_WR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RAMS_DATA_WR_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RAMS_DATA_WR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000024 + (N) * 0x4) bits 19:12) field RAMS_DATA_WR of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000024 + (N) * 0x4) bits 19:12) field RAMS_DATA_WR of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
        d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_WR_OFF + subfield_offset),
                                                        SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_WR_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RAMS_DATA_WR_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RAMS_DATA_WR_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RAMS_DATA_WR_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RAMS_DATA_WR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RAMS_DATA_WR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000024 + (N) * 0x4) bits 19:12) field RAMS_DATA_WR of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_WR_MSK)
                  >> SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_WR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_WR_MSK, SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_WR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RAMS_DATA_WR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMS_ADDR_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMS_ADDR_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMS_ADDR_set", N, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMS_ADDR_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMS_ADDR_set", N, value );

    /* ((0x00000024 + (N) * 0x4) bits 11:8) field RAMS_ADDR of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_ADDR_MSK,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_ADDR_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_RAMS_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMS_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMS_ADDR_get", N, 1);
    /* ((0x00000024 + (N) * 0x4) bits 11:8) field RAMS_ADDR of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_ADDR_MSK) >> SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMS_ADDR_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RAMS_ADDR_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RAMS_ADDR_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RAMS_ADDR_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RAMS_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RAMS_ADDR_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RAMS_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000024 + (N) * 0x4) bits 11:8) field RAMS_ADDR of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000024 + (N) * 0x4) bits 11:8) field RAMS_ADDR of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
        d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_ADDR_OFF + subfield_offset),
                                                        SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_ADDR_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RAMS_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RAMS_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RAMS_ADDR_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RAMS_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RAMS_ADDR_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000024 + (N) * 0x4) bits 11:8) field RAMS_ADDR of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_ADDR_MSK)
                  >> SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_ADDR_MSK, SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RAMS_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMS_RD_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMS_RD_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMS_RD_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMS_RD_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMS_RD_EN_set", N, value );

    /* ((0x00000024 + (N) * 0x4) bits 4) field RAMS_RD_EN of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_RD_EN_MSK,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_RD_EN_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_RAMS_RD_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMS_RD_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMS_RD_EN_get", N, 1);
    /* ((0x00000024 + (N) * 0x4) bits 4) field RAMS_RD_EN of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_RD_EN_MSK) >> SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_RD_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMS_RD_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMS_WR_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMS_WR_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMS_WR_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMS_WR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMS_WR_EN_set", N, value );

    /* ((0x00000024 + (N) * 0x4) bits 3) field RAMS_WR_EN of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_WR_EN_MSK,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_WR_EN_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_RAMS_WR_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMS_WR_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMS_WR_EN_get", N, 1);
    /* ((0x00000024 + (N) * 0x4) bits 3) field RAMS_WR_EN of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_WR_EN_MSK) >> SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_WR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMS_WR_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_PCLK_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PCLK_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PCLK_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PCLK_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_PCLK_EN_set", N, value );

    /* ((0x00000024 + (N) * 0x4) bits 2) field PCLK_EN of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_PCLK_EN_MSK,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_PCLK_EN_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_PCLK_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PCLK_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PCLK_EN_get", N, 1);
    /* ((0x00000024 + (N) * 0x4) bits 2) field PCLK_EN of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_PCLK_EN_MSK) >> SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_PCLK_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_PCLK_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAM_EXT_INT_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAM_EXT_INT_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAM_EXT_INT_SEL_set", N, 1);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAM_EXT_INT_SEL_set", value, 3);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAM_EXT_INT_SEL_set", N, value );

    /* ((0x00000024 + (N) * 0x4) bits 1:0) field RAM_EXT_INT_SEL of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAM_EXT_INT_SEL_MSK,
                                                    SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAM_EXT_INT_SEL_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_RAM_EXT_INT_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAM_EXT_INT_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAM_EXT_INT_SEL_get", N, 1);
    /* ((0x00000024 + (N) * 0x4) bits 1:0) field RAM_EXT_INT_SEL of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAM_EXT_INT_SEL_MSK) >> SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAM_EXT_INT_SEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAM_EXT_INT_SEL_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RAM_EXT_INT_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RAM_EXT_INT_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RAM_EXT_INT_SEL_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RAM_EXT_INT_SEL_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RAM_EXT_INT_SEL_set", stop_bit, 1 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RAM_EXT_INT_SEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000024 + (N) * 0x4) bits 1:0) field RAM_EXT_INT_SEL of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000024 + (N) * 0x4) bits 1:0) field RAM_EXT_INT_SEL of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
        d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAM_EXT_INT_SEL_OFF + subfield_offset),
                                                        SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAM_EXT_INT_SEL_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RAM_EXT_INT_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RAM_EXT_INT_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RAM_EXT_INT_SEL_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RAM_EXT_INT_SEL_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RAM_EXT_INT_SEL_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000024 + (N) * 0x4) bits 1:0) field RAM_EXT_INT_SEL of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAM_EXT_INT_SEL_MSK)
                  >> SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAM_EXT_INT_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAM_EXT_INT_SEL_MSK, SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAM_EXT_INT_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RAM_EXT_INT_SEL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_GCOC_MEM_DEGLITCH_DLY_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GCOC_MEM_DEGLITCH_DLY_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GCOC_MEM_DEGLITCH_DLY_set", N, 1);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GCOC_MEM_DEGLITCH_DLY_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_GCOC_MEM_DEGLITCH_DLY_set", N, value );

    /* ((0x0000002c + (N) * 0x4) bits 10:4) field GCOC_MEM_DEGLITCH_DLY of register PMC_SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG index N=0..1 */
    d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_DEGLITCH_DLY_MSK,
                                                      SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_DEGLITCH_DLY_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_GCOC_MEM_DEGLITCH_DLY_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GCOC_MEM_DEGLITCH_DLY_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GCOC_MEM_DEGLITCH_DLY_get", N, 1);
    /* ((0x0000002c + (N) * 0x4) bits 10:4) field GCOC_MEM_DEGLITCH_DLY of register PMC_SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_DEGLITCH_DLY_MSK) >> SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_DEGLITCH_DLY_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_GCOC_MEM_DEGLITCH_DLY_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_set( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_set( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000002c + (N) * 0x4) bits 10:4) field GCOC_MEM_DEGLITCH_DLY of register PMC_SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000002c + (N) * 0x4) bits 10:4) field GCOC_MEM_DEGLITCH_DLY of register PMC_SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG index N=0..1 */
        d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_DEGLITCH_DLY_OFF + subfield_offset),
                                                          SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_DEGLITCH_DLY_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_get( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_get( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000002c + (N) * 0x4) bits 10:4) field GCOC_MEM_DEGLITCH_DLY of register PMC_SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_DEGLITCH_DLY_MSK)
                  >> SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_DEGLITCH_DLY_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_DEGLITCH_DLY_MSK, SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_DEGLITCH_DLY_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_GCOC_MEM_DEGLITCH_DLY_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_GCOC_MEM_CLK_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GCOC_MEM_CLK_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GCOC_MEM_CLK_SEL_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GCOC_MEM_CLK_SEL_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_GCOC_MEM_CLK_SEL_set", N, value );

    /* ((0x0000002c + (N) * 0x4) bits 0) field GCOC_MEM_CLK_SEL of register PMC_SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG index N=0..1 */
    d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_CLK_SEL_MSK,
                                                      SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_CLK_SEL_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_GCOC_MEM_CLK_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GCOC_MEM_CLK_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GCOC_MEM_CLK_SEL_get", N, 1);
    /* ((0x0000002c + (N) * 0x4) bits 0) field GCOC_MEM_CLK_SEL of register PMC_SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_GCOC_MEMORY_CFG_REG_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_CLK_SEL_MSK) >> SFI51_RX_2X_SLICE_REG_GCOC_MEMORY_CFG_REG_BIT_GCOC_MEM_CLK_SEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_GCOC_MEM_CLK_SEL_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_BIST_START_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BIST_START_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_BIST_START_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BIST_START_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_BIST_START_set", N, value );

    /* ((0x00000034 + (N) * 0x4) bits 28) field ADC_BIST_START of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_ADC_BIST_START_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_ADC_BIST_START_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_START_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_START_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_BIST_START_get", N, 1);
    /* ((0x00000034 + (N) * 0x4) bits 28) field ADC_BIST_START of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_ADC_BIST_START_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_ADC_BIST_START_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_BIST_START_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_CALIB_PROG_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_CALIB_PROG_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_CALIB_PROG_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_CALIB_PROG_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_CALIB_PROG_EN_set", N, value );

    /* ((0x00000034 + (N) * 0x4) bits 27) field CALIB_PROG_EN of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_CALIB_PROG_EN_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_CALIB_PROG_EN_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_PROG_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_PROG_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_CALIB_PROG_EN_get", N, 1);
    /* ((0x00000034 + (N) * 0x4) bits 27) field CALIB_PROG_EN of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_CALIB_PROG_EN_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_CALIB_PROG_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_CALIB_PROG_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_N_ACCUM_CYCLES_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_N_ACCUM_CYCLES_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_N_ACCUM_CYCLES_set", N, 1);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_N_ACCUM_CYCLES_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_N_ACCUM_CYCLES_set", N, value );

    /* ((0x00000034 + (N) * 0x4) bits 26:11) field N_ACCUM_CYCLES of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_N_ACCUM_CYCLES_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_N_ACCUM_CYCLES_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_N_ACCUM_CYCLES_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_N_ACCUM_CYCLES_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_N_ACCUM_CYCLES_get", N, 1);
    /* ((0x00000034 + (N) * 0x4) bits 26:11) field N_ACCUM_CYCLES of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_N_ACCUM_CYCLES_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_N_ACCUM_CYCLES_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_N_ACCUM_CYCLES_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_N_ACCUM_CYCLES_set( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_N_ACCUM_CYCLES_set( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_N_ACCUM_CYCLES_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_N_ACCUM_CYCLES_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_N_ACCUM_CYCLES_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_N_ACCUM_CYCLES_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000034 + (N) * 0x4) bits 26:11) field N_ACCUM_CYCLES of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000034 + (N) * 0x4) bits 26:11) field N_ACCUM_CYCLES of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
        d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_N_ACCUM_CYCLES_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_N_ACCUM_CYCLES_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_N_ACCUM_CYCLES_get( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_N_ACCUM_CYCLES_get( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_N_ACCUM_CYCLES_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_N_ACCUM_CYCLES_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_N_ACCUM_CYCLES_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000034 + (N) * 0x4) bits 26:11) field N_ACCUM_CYCLES of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_N_ACCUM_CYCLES_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_N_ACCUM_CYCLES_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_N_ACCUM_CYCLES_MSK, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_N_ACCUM_CYCLES_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_N_ACCUM_CYCLES_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_AUX_OFFSET_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_AUX_OFFSET_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_AUX_OFFSET_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_AUX_OFFSET_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_AUX_OFFSET_set", N, value );

    /* ((0x00000034 + (N) * 0x4) bits 10:3) field AUX_OFFSET of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_AUX_OFFSET_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_AUX_OFFSET_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_AUX_OFFSET_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_AUX_OFFSET_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_AUX_OFFSET_get", N, 1);
    /* ((0x00000034 + (N) * 0x4) bits 10:3) field AUX_OFFSET of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_AUX_OFFSET_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_AUX_OFFSET_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_AUX_OFFSET_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_AUX_OFFSET_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_AUX_OFFSET_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_AUX_OFFSET_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_AUX_OFFSET_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_AUX_OFFSET_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_AUX_OFFSET_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000034 + (N) * 0x4) bits 10:3) field AUX_OFFSET of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000034 + (N) * 0x4) bits 10:3) field AUX_OFFSET of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
        d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_AUX_OFFSET_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_AUX_OFFSET_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_AUX_OFFSET_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_AUX_OFFSET_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_AUX_OFFSET_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_AUX_OFFSET_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_AUX_OFFSET_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000034 + (N) * 0x4) bits 10:3) field AUX_OFFSET of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_AUX_OFFSET_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_AUX_OFFSET_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_AUX_OFFSET_MSK, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_AUX_OFFSET_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_AUX_OFFSET_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_OFFSET_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_OFFSET_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_OFFSET_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_OFFSET_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_OFFSET_EN_set", N, value );

    /* ((0x00000034 + (N) * 0x4) bits 2) field OFFSET_EN of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_OFFSET_EN_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_OFFSET_EN_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_OFFSET_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_OFFSET_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_OFFSET_EN_get", N, 1);
    /* ((0x00000034 + (N) * 0x4) bits 2) field OFFSET_EN of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_OFFSET_EN_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_OFFSET_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_OFFSET_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_PROG_REF_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PROG_REF_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PROG_REF_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PROG_REF_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_PROG_REF_set", N, value );

    /* ((0x00000034 + (N) * 0x4) bits 1) field PROG_REF of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_PROG_REF_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_PROG_REF_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_PROG_REF_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PROG_REF_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PROG_REF_get", N, 1);
    /* ((0x00000034 + (N) * 0x4) bits 1) field PROG_REF of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_PROG_REF_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_PROG_REF_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_PROG_REF_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_CALIB_set( d8_rx_2x_buffer_t *b_ptr,
                                             d8_rx_2x_handle_t *h_ptr,
                                             UINT32  N,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_CALIB_set( d8_rx_2x_buffer_t *b_ptr,
                                             d8_rx_2x_handle_t *h_ptr,
                                             UINT32  N,
                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_CALIB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_CALIB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_CALIB_set", N, value );

    /* ((0x00000034 + (N) * 0x4) bits 0) field CALIB of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_CALIB_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_CALIB_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_get( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_get( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_CALIB_get", N, 1);
    /* ((0x00000034 + (N) * 0x4) bits 0) field CALIB of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_CALIB_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_1_BIT_CALIB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_CALIB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_MAX_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_MAX_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MAX_THRESHOLD_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_MAX_THRESHOLD_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_MAX_THRESHOLD_set", N, value );

    /* ((0x0000003c + (N) * 0x4) bits 31:24) field MAX_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MAX_THRESHOLD_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MAX_THRESHOLD_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_MAX_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_MAX_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MAX_THRESHOLD_get", N, 1);
    /* ((0x0000003c + (N) * 0x4) bits 31:24) field MAX_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MAX_THRESHOLD_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MAX_THRESHOLD_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_MAX_THRESHOLD_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_MAX_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_MAX_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_MAX_THRESHOLD_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_MAX_THRESHOLD_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_MAX_THRESHOLD_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_MAX_THRESHOLD_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000003c + (N) * 0x4) bits 31:24) field MAX_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000003c + (N) * 0x4) bits 31:24) field MAX_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
        d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MAX_THRESHOLD_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MAX_THRESHOLD_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_MAX_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_MAX_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_MAX_THRESHOLD_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_MAX_THRESHOLD_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_MAX_THRESHOLD_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000003c + (N) * 0x4) bits 31:24) field MAX_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MAX_THRESHOLD_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MAX_THRESHOLD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MAX_THRESHOLD_MSK, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MAX_THRESHOLD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_MAX_THRESHOLD_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_MIN_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_MIN_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MIN_THRESHOLD_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_MIN_THRESHOLD_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_MIN_THRESHOLD_set", N, value );

    /* ((0x0000003c + (N) * 0x4) bits 23:16) field MIN_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MIN_THRESHOLD_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MIN_THRESHOLD_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_MIN_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_MIN_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MIN_THRESHOLD_get", N, 1);
    /* ((0x0000003c + (N) * 0x4) bits 23:16) field MIN_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MIN_THRESHOLD_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MIN_THRESHOLD_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_MIN_THRESHOLD_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_MIN_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_MIN_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_MIN_THRESHOLD_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_MIN_THRESHOLD_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_MIN_THRESHOLD_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_MIN_THRESHOLD_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000003c + (N) * 0x4) bits 23:16) field MIN_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000003c + (N) * 0x4) bits 23:16) field MIN_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
        d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MIN_THRESHOLD_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MIN_THRESHOLD_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_MIN_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_MIN_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_MIN_THRESHOLD_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_MIN_THRESHOLD_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_MIN_THRESHOLD_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000003c + (N) * 0x4) bits 23:16) field MIN_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MIN_THRESHOLD_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MIN_THRESHOLD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MIN_THRESHOLD_MSK, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_MIN_THRESHOLD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_MIN_THRESHOLD_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_ACC_DELAY_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ACC_DELAY_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ACC_DELAY_set", N, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ACC_DELAY_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ACC_DELAY_set", N, value );

    /* ((0x0000003c + (N) * 0x4) bits 15:12) field ACC_DELAY of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_ACC_DELAY_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_ACC_DELAY_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_ACC_DELAY_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ACC_DELAY_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ACC_DELAY_get", N, 1);
    /* ((0x0000003c + (N) * 0x4) bits 15:12) field ACC_DELAY of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_ACC_DELAY_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_ACC_DELAY_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ACC_DELAY_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_ACC_DELAY_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_ACC_DELAY_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_ACC_DELAY_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_ACC_DELAY_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_ACC_DELAY_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_ACC_DELAY_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000003c + (N) * 0x4) bits 15:12) field ACC_DELAY of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000003c + (N) * 0x4) bits 15:12) field ACC_DELAY of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
        d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_ACC_DELAY_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_ACC_DELAY_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_ACC_DELAY_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_ACC_DELAY_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_ACC_DELAY_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_ACC_DELAY_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_ACC_DELAY_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000003c + (N) * 0x4) bits 15:12) field ACC_DELAY of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_ACC_DELAY_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_ACC_DELAY_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_ACC_DELAY_MSK, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_ACC_DELAY_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_ACC_DELAY_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LIN_STEP_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LIN_STEP_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LIN_STEP_set", N, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LIN_STEP_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LIN_STEP_set", N, value );

    /* ((0x0000003c + (N) * 0x4) bits 11:8) field LIN_STEP of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_LIN_STEP_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_LIN_STEP_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LIN_STEP_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LIN_STEP_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LIN_STEP_get", N, 1);
    /* ((0x0000003c + (N) * 0x4) bits 11:8) field LIN_STEP of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_LIN_STEP_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_LIN_STEP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LIN_STEP_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LIN_STEP_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LIN_STEP_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LIN_STEP_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LIN_STEP_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LIN_STEP_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LIN_STEP_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000003c + (N) * 0x4) bits 11:8) field LIN_STEP of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000003c + (N) * 0x4) bits 11:8) field LIN_STEP of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
        d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_LIN_STEP_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_LIN_STEP_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LIN_STEP_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LIN_STEP_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LIN_STEP_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LIN_STEP_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LIN_STEP_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000003c + (N) * 0x4) bits 11:8) field LIN_STEP of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_LIN_STEP_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_LIN_STEP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_LIN_STEP_MSK, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_LIN_STEP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LIN_STEP_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_DAC_DELAY_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_DAC_DELAY_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_DAC_DELAY_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_DAC_DELAY_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_DAC_DELAY_set", N, value );

    /* ((0x0000003c + (N) * 0x4) bits 7:0) field DAC_DELAY of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_DAC_DELAY_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_DAC_DELAY_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_DAC_DELAY_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DAC_DELAY_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_DAC_DELAY_get", N, 1);
    /* ((0x0000003c + (N) * 0x4) bits 7:0) field DAC_DELAY of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_DAC_DELAY_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_DAC_DELAY_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_DAC_DELAY_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_DAC_DELAY_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_DAC_DELAY_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_DAC_DELAY_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_DAC_DELAY_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_DAC_DELAY_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_DAC_DELAY_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000003c + (N) * 0x4) bits 7:0) field DAC_DELAY of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000003c + (N) * 0x4) bits 7:0) field DAC_DELAY of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
        d8_rx_2x_reg_ADC_OC_CFG_2_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_DAC_DELAY_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_DAC_DELAY_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_DAC_DELAY_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_DAC_DELAY_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_DAC_DELAY_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_DAC_DELAY_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_DAC_DELAY_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000003c + (N) * 0x4) bits 7:0) field DAC_DELAY of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_DAC_DELAY_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_DAC_DELAY_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_DAC_DELAY_MSK, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_2_BIT_DAC_DELAY_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_DAC_DELAY_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_A_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_A_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_A_OVR_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_A_OVR_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_A_OVR_set", N, value );

    /* ((0x00000044 + (N) * 0x4) bits 23:16) field ADC_A_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_3_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_A_OVR_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_A_OVR_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_A_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_A_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_A_OVR_get", N, 1);
    /* ((0x00000044 + (N) * 0x4) bits 23:16) field ADC_A_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_3_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_A_OVR_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_A_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_A_OVR_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_ADC_A_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_ADC_A_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_ADC_A_OVR_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_ADC_A_OVR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_ADC_A_OVR_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_ADC_A_OVR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000044 + (N) * 0x4) bits 23:16) field ADC_A_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000044 + (N) * 0x4) bits 23:16) field ADC_A_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
        d8_rx_2x_reg_ADC_OC_CFG_3_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_A_OVR_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_A_OVR_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_ADC_A_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_ADC_A_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_ADC_A_OVR_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_ADC_A_OVR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_ADC_A_OVR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000044 + (N) * 0x4) bits 23:16) field ADC_A_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_3_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_A_OVR_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_A_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_A_OVR_MSK, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_A_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_ADC_A_OVR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_D_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_D_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_D_OVR_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_D_OVR_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_D_OVR_set", N, value );

    /* ((0x00000044 + (N) * 0x4) bits 15:8) field ADC_D_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_3_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_D_OVR_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_D_OVR_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_D_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_D_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_D_OVR_get", N, 1);
    /* ((0x00000044 + (N) * 0x4) bits 15:8) field ADC_D_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_3_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_D_OVR_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_D_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_D_OVR_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_ADC_D_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_ADC_D_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_ADC_D_OVR_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_ADC_D_OVR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_ADC_D_OVR_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_ADC_D_OVR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000044 + (N) * 0x4) bits 15:8) field ADC_D_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000044 + (N) * 0x4) bits 15:8) field ADC_D_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
        d8_rx_2x_reg_ADC_OC_CFG_3_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_D_OVR_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_D_OVR_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_ADC_D_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_ADC_D_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_ADC_D_OVR_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_ADC_D_OVR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_ADC_D_OVR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000044 + (N) * 0x4) bits 15:8) field ADC_D_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_3_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_D_OVR_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_D_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_D_OVR_MSK, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_D_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_ADC_D_OVR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_RD_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_RD_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_RD_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_RD_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_RD_OVR_set", N, value );

    /* ((0x00000044 + (N) * 0x4) bits 2) field ADC_RD_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_3_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_RD_OVR_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_RD_OVR_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_RD_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_RD_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_RD_OVR_get", N, 1);
    /* ((0x00000044 + (N) * 0x4) bits 2) field ADC_RD_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_3_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_RD_OVR_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_RD_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_RD_OVR_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_WR_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_WR_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_WR_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_WR_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_WR_OVR_set", N, value );

    /* ((0x00000044 + (N) * 0x4) bits 1) field ADC_WR_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_3_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_WR_OVR_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_WR_OVR_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_WR_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_WR_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_WR_OVR_get", N, 1);
    /* ((0x00000044 + (N) * 0x4) bits 1) field ADC_WR_OVR of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_3_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_WR_OVR_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_WR_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_WR_OVR_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_MABC_INT_OVR_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_MABC_INT_OVR_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MABC_INT_OVR_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_MABC_INT_OVR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_MABC_INT_OVR_EN_set", N, value );

    /* ((0x00000044 + (N) * 0x4) bits 0) field MABC_INT_OVR_EN of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    d8_rx_2x_reg_ADC_OC_CFG_3_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_MABC_INT_OVR_EN_MSK,
                                               SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_MABC_INT_OVR_EN_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_MABC_INT_OVR_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_MABC_INT_OVR_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MABC_INT_OVR_EN_get", N, 1);
    /* ((0x00000044 + (N) * 0x4) bits 0) field MABC_INT_OVR_EN of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_3_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_MABC_INT_OVR_EN_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_MABC_INT_OVR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_MABC_INT_OVR_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_DECIM_FACT_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_DECIM_FACT_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_DECIM_FACT_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_DECIM_FACT_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_DECIM_FACT_set", N, value );

    /* ((0x0000004c + (N) * 0x4) bits 2:0) field DECIM_FACT of register PMC_SFI51_RX_2X_SLICE_REG_CDRU_CFG_ index N=0..1 */
    d8_rx_2x_reg_CDRU_CFG__array_field_set( b_ptr,
                                            h_ptr,
                                            N,
                                            SFI51_RX_2X_SLICE_REG_CDRU_CFG_BIT_DECIM_FACT_MSK,
                                            SFI51_RX_2X_SLICE_REG_CDRU_CFG_BIT_DECIM_FACT_OFF,
                                            value);
}

static INLINE UINT32 d8_rx_2x_field_DECIM_FACT_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DECIM_FACT_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_DECIM_FACT_get", N, 1);
    /* ((0x0000004c + (N) * 0x4) bits 2:0) field DECIM_FACT of register PMC_SFI51_RX_2X_SLICE_REG_CDRU_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_CDRU_CFG__array_read( b_ptr,
                                                   h_ptr,
                                                   N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_CDRU_CFG_BIT_DECIM_FACT_MSK) >> SFI51_RX_2X_SLICE_REG_CDRU_CFG_BIT_DECIM_FACT_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_DECIM_FACT_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_DECIM_FACT_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_DECIM_FACT_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_DECIM_FACT_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_DECIM_FACT_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_DECIM_FACT_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_DECIM_FACT_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000004c + (N) * 0x4) bits 2:0) field DECIM_FACT of register PMC_SFI51_RX_2X_SLICE_REG_CDRU_CFG_ index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000004c + (N) * 0x4) bits 2:0) field DECIM_FACT of register PMC_SFI51_RX_2X_SLICE_REG_CDRU_CFG_ index N=0..1 */
        d8_rx_2x_reg_CDRU_CFG__array_field_set( b_ptr,
                                                h_ptr,
                                                N,
                                                subfield_mask << (SFI51_RX_2X_SLICE_REG_CDRU_CFG_BIT_DECIM_FACT_OFF + subfield_offset),
                                                SFI51_RX_2X_SLICE_REG_CDRU_CFG_BIT_DECIM_FACT_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_DECIM_FACT_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_DECIM_FACT_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_DECIM_FACT_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_DECIM_FACT_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_DECIM_FACT_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000004c + (N) * 0x4) bits 2:0) field DECIM_FACT of register PMC_SFI51_RX_2X_SLICE_REG_CDRU_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_CDRU_CFG__array_read( b_ptr,
                                                   h_ptr,
                                                   N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_CDRU_CFG_BIT_DECIM_FACT_MSK)
                  >> SFI51_RX_2X_SLICE_REG_CDRU_CFG_BIT_DECIM_FACT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_CDRU_CFG_BIT_DECIM_FACT_MSK, SFI51_RX_2X_SLICE_REG_CDRU_CFG_BIT_DECIM_FACT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_DECIM_FACT_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOCK_PRECISION_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOCK_PRECISION_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOCK_PRECISION_set", N, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOCK_PRECISION_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOCK_PRECISION_set", N, value );

    /* ((0x00000054 + (N) * 0x4) bits 29:26) field LOCK_PRECISION of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_field_set( b_ptr,
                                                              h_ptr,
                                                              N,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_PRECISION_MSK,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_PRECISION_OFF,
                                                              value);
}

static INLINE UINT32 d8_rx_2x_field_LOCK_PRECISION_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOCK_PRECISION_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOCK_PRECISION_get", N, 1);
    /* ((0x00000054 + (N) * 0x4) bits 29:26) field LOCK_PRECISION of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_PRECISION_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_PRECISION_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOCK_PRECISION_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOCK_PRECISION_set( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOCK_PRECISION_set( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOCK_PRECISION_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOCK_PRECISION_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOCK_PRECISION_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOCK_PRECISION_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000054 + (N) * 0x4) bits 29:26) field LOCK_PRECISION of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000054 + (N) * 0x4) bits 29:26) field LOCK_PRECISION of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
        d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_field_set( b_ptr,
                                                                  h_ptr,
                                                                  N,
                                                                  subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_PRECISION_OFF + subfield_offset),
                                                                  SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_PRECISION_OFF + subfield_offset,
                                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOCK_PRECISION_get( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOCK_PRECISION_get( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOCK_PRECISION_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOCK_PRECISION_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOCK_PRECISION_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000054 + (N) * 0x4) bits 29:26) field LOCK_PRECISION of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_PRECISION_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_PRECISION_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_PRECISION_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_PRECISION_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOCK_PRECISION_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOCK_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOCK_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOCK_CNT_MAX_set", N, 1);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOCK_CNT_MAX_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOCK_CNT_MAX_set", N, value );

    /* ((0x00000054 + (N) * 0x4) bits 25:20) field LOCK_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_field_set( b_ptr,
                                                              h_ptr,
                                                              N,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_CNT_MAX_MSK,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_CNT_MAX_OFF,
                                                              value);
}

static INLINE UINT32 d8_rx_2x_field_LOCK_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOCK_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOCK_CNT_MAX_get", N, 1);
    /* ((0x00000054 + (N) * 0x4) bits 25:20) field LOCK_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_CNT_MAX_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_CNT_MAX_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOCK_CNT_MAX_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOCK_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOCK_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOCK_CNT_MAX_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOCK_CNT_MAX_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOCK_CNT_MAX_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOCK_CNT_MAX_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000054 + (N) * 0x4) bits 25:20) field LOCK_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000054 + (N) * 0x4) bits 25:20) field LOCK_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
        d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_field_set( b_ptr,
                                                                  h_ptr,
                                                                  N,
                                                                  subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_CNT_MAX_OFF + subfield_offset),
                                                                  SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_CNT_MAX_OFF + subfield_offset,
                                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOCK_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOCK_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOCK_CNT_MAX_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOCK_CNT_MAX_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOCK_CNT_MAX_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000054 + (N) * 0x4) bits 25:20) field LOCK_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_CNT_MAX_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_CNT_MAX_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_CNT_MAX_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOCK_CNT_MAX_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOCK_CNT_MAX_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_CLK_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_CLK_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_CLK_CNT_MAX_set", N, 1);
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_CLK_CNT_MAX_set", value, 262143);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_CLK_CNT_MAX_set", N, value );

    /* ((0x00000054 + (N) * 0x4) bits 19:2) field CLK_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_field_set( b_ptr,
                                                              h_ptr,
                                                              N,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_CLK_CNT_MAX_MSK,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_CLK_CNT_MAX_OFF,
                                                              value);
}

static INLINE UINT32 d8_rx_2x_field_CLK_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CLK_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_CLK_CNT_MAX_get", N, 1);
    /* ((0x00000054 + (N) * 0x4) bits 19:2) field CLK_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_CLK_CNT_MAX_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_CLK_CNT_MAX_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_CLK_CNT_MAX_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_CLK_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_CLK_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_CLK_CNT_MAX_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_CLK_CNT_MAX_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_CLK_CNT_MAX_set", stop_bit, 17 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_CLK_CNT_MAX_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000054 + (N) * 0x4) bits 19:2) field CLK_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000054 + (N) * 0x4) bits 19:2) field CLK_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
        d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_field_set( b_ptr,
                                                                  h_ptr,
                                                                  N,
                                                                  subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_CLK_CNT_MAX_OFF + subfield_offset),
                                                                  SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_CLK_CNT_MAX_OFF + subfield_offset,
                                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_CLK_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_CLK_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_CLK_CNT_MAX_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_CLK_CNT_MAX_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_CLK_CNT_MAX_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000054 + (N) * 0x4) bits 19:2) field CLK_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_CLK_CNT_MAX_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_CLK_CNT_MAX_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_CLK_CNT_MAX_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_CLK_CNT_MAX_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_CLK_CNT_MAX_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOAD_CLK_CNTRS_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOAD_CLK_CNTRS_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOAD_CLK_CNTRS_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOAD_CLK_CNTRS_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOAD_CLK_CNTRS_set", N, value );

    /* ((0x00000054 + (N) * 0x4) bits 1) field LOAD_CLK_CNTRS of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_field_set( b_ptr,
                                                              h_ptr,
                                                              N,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOAD_CLK_CNTRS_MSK,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOAD_CLK_CNTRS_OFF,
                                                              value);
}

static INLINE UINT32 d8_rx_2x_field_LOAD_CLK_CNTRS_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOAD_CLK_CNTRS_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOAD_CLK_CNTRS_get", N, 1);
    /* ((0x00000054 + (N) * 0x4) bits 1) field LOAD_CLK_CNTRS of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOAD_CLK_CNTRS_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_LOAD_CLK_CNTRS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOAD_CLK_CNTRS_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RESET_HISTORY_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RESET_HISTORY_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RESET_HISTORY_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RESET_HISTORY_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RESET_HISTORY_set", N, value );

    /* ((0x00000054 + (N) * 0x4) bits 0) field RESET_HISTORY of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_field_set( b_ptr,
                                                              h_ptr,
                                                              N,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_RESET_HISTORY_MSK,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_RESET_HISTORY_OFF,
                                                              value);
}

static INLINE UINT32 d8_rx_2x_field_RESET_HISTORY_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RESET_HISTORY_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RESET_HISTORY_get", N, 1);
    /* ((0x00000054 + (N) * 0x4) bits 0) field RESET_HISTORY of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_1_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_RESET_HISTORY_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_1_BIT_RESET_HISTORY_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RESET_HISTORY_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_FAIL_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_FAIL_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_FAIL_CNT_MAX_set", N, 1);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_FAIL_CNT_MAX_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_FAIL_CNT_MAX_set", N, value );

    /* ((0x0000005c + (N) * 0x4) bits 31:26) field FAIL_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2 index N=0..1 */
    d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_field_set( b_ptr,
                                                              h_ptr,
                                                              N,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_FAIL_CNT_MAX_MSK,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_FAIL_CNT_MAX_OFF,
                                                              value);
}

static INLINE UINT32 d8_rx_2x_field_FAIL_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_FAIL_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_FAIL_CNT_MAX_get", N, 1);
    /* ((0x0000005c + (N) * 0x4) bits 31:26) field FAIL_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_FAIL_CNT_MAX_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_FAIL_CNT_MAX_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_FAIL_CNT_MAX_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_FAIL_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_FAIL_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_FAIL_CNT_MAX_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_FAIL_CNT_MAX_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_FAIL_CNT_MAX_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_FAIL_CNT_MAX_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000005c + (N) * 0x4) bits 31:26) field FAIL_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000005c + (N) * 0x4) bits 31:26) field FAIL_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2 index N=0..1 */
        d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_field_set( b_ptr,
                                                                  h_ptr,
                                                                  N,
                                                                  subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_FAIL_CNT_MAX_OFF + subfield_offset),
                                                                  SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_FAIL_CNT_MAX_OFF + subfield_offset,
                                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_FAIL_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_FAIL_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_FAIL_CNT_MAX_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_FAIL_CNT_MAX_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_FAIL_CNT_MAX_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000005c + (N) * 0x4) bits 31:26) field FAIL_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_FAIL_CNT_MAX_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_FAIL_CNT_MAX_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_FAIL_CNT_MAX_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_FAIL_CNT_MAX_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_FAIL_CNT_MAX_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_PASS_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PASS_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PASS_CNT_MAX_set", N, 1);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PASS_CNT_MAX_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_PASS_CNT_MAX_set", N, value );

    /* ((0x0000005c + (N) * 0x4) bits 25:20) field PASS_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2 index N=0..1 */
    d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_field_set( b_ptr,
                                                              h_ptr,
                                                              N,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_PASS_CNT_MAX_MSK,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_PASS_CNT_MAX_OFF,
                                                              value);
}

static INLINE UINT32 d8_rx_2x_field_PASS_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PASS_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PASS_CNT_MAX_get", N, 1);
    /* ((0x0000005c + (N) * 0x4) bits 25:20) field PASS_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_PASS_CNT_MAX_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_PASS_CNT_MAX_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_PASS_CNT_MAX_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_PASS_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_PASS_CNT_MAX_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_PASS_CNT_MAX_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_PASS_CNT_MAX_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_PASS_CNT_MAX_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_PASS_CNT_MAX_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000005c + (N) * 0x4) bits 25:20) field PASS_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000005c + (N) * 0x4) bits 25:20) field PASS_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2 index N=0..1 */
        d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_field_set( b_ptr,
                                                                  h_ptr,
                                                                  N,
                                                                  subfield_mask << (SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_PASS_CNT_MAX_OFF + subfield_offset),
                                                                  SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_PASS_CNT_MAX_OFF + subfield_offset,
                                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_PASS_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_PASS_CNT_MAX_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_PASS_CNT_MAX_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_PASS_CNT_MAX_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_PASS_CNT_MAX_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000005c + (N) * 0x4) bits 25:20) field PASS_CNT_MAX of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_2_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_PASS_CNT_MAX_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_PASS_CNT_MAX_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_PASS_CNT_MAX_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_2_BIT_PASS_CNT_MAX_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_PASS_CNT_MAX_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_SIPO_BIST_SELECT_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_SELECT_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_SIPO_BIST_SELECT_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_SELECT_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_SIPO_BIST_SELECT_set", N, value );

    /* ((0x0000006c + (N) * 0x4) bits 6:2) field SIPO_BIST_SELECT of register PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG index N=0..1 */
    d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_SELECT_MSK,
                                                    SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_SELECT_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SELECT_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SELECT_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_SIPO_BIST_SELECT_get", N, 1);
    /* ((0x0000006c + (N) * 0x4) bits 6:2) field SIPO_BIST_SELECT of register PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_SELECT_MSK) >> SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_SELECT_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_SIPO_BIST_SELECT_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_SIPO_BIST_SELECT_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_SIPO_BIST_SELECT_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_SIPO_BIST_SELECT_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_SIPO_BIST_SELECT_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_SIPO_BIST_SELECT_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_SIPO_BIST_SELECT_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000006c + (N) * 0x4) bits 6:2) field SIPO_BIST_SELECT of register PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000006c + (N) * 0x4) bits 6:2) field SIPO_BIST_SELECT of register PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG index N=0..1 */
        d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_SELECT_OFF + subfield_offset),
                                                        SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_SELECT_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_SIPO_BIST_SELECT_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_SIPO_BIST_SELECT_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_SIPO_BIST_SELECT_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_SIPO_BIST_SELECT_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_SIPO_BIST_SELECT_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000006c + (N) * 0x4) bits 6:2) field SIPO_BIST_SELECT of register PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_SELECT_MSK)
                  >> SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_SELECT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_SELECT_MSK, SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_SELECT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_SIPO_BIST_SELECT_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_SIPO_BIST_TIME_REVERSE_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_TIME_REVERSE_set( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_SIPO_BIST_TIME_REVERSE_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_TIME_REVERSE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_SIPO_BIST_TIME_REVERSE_set", N, value );

    /* ((0x0000006c + (N) * 0x4) bits 1) field SIPO_BIST_TIME_REVERSE of register PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG index N=0..1 */
    d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_TIME_REVERSE_MSK,
                                                    SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_TIME_REVERSE_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_TIME_REVERSE_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_TIME_REVERSE_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_SIPO_BIST_TIME_REVERSE_get", N, 1);
    /* ((0x0000006c + (N) * 0x4) bits 1) field SIPO_BIST_TIME_REVERSE of register PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_TIME_REVERSE_MSK) >> SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_TIME_REVERSE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_SIPO_BIST_TIME_REVERSE_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_SIPO_BIST_ENABLE_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_ENABLE_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_SIPO_BIST_ENABLE_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_ENABLE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_SIPO_BIST_ENABLE_set", N, value );

    /* ((0x0000006c + (N) * 0x4) bits 0) field SIPO_BIST_ENABLE of register PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG index N=0..1 */
    d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_ENABLE_MSK,
                                                    SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_ENABLE_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ENABLE_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ENABLE_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_SIPO_BIST_ENABLE_get", N, 1);
    /* ((0x0000006c + (N) * 0x4) bits 0) field SIPO_BIST_ENABLE of register PMC_SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_SIPO_BIST_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_ENABLE_MSK) >> SFI51_RX_2X_SLICE_REG_SIPO_BIST_CFG_REG_BIT_SIPO_BIST_ENABLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_SIPO_BIST_ENABLE_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RCLKOUT_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RCLKOUT_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RCLKOUT_SEL_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RCLKOUT_SEL_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RCLKOUT_SEL_set", N, value );

    /* ((0x00000074 + (N) * 0x4) bits 12:10) field RCLKOUT_SEL of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    d8_rx_2x_reg_DATAPATH_CFG_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RCLKOUT_SEL_MSK,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RCLKOUT_SEL_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_RCLKOUT_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RCLKOUT_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RCLKOUT_SEL_get", N, 1);
    /* ((0x00000074 + (N) * 0x4) bits 12:10) field RCLKOUT_SEL of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_DATAPATH_CFG_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RCLKOUT_SEL_MSK) >> SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RCLKOUT_SEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RCLKOUT_SEL_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RCLKOUT_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RCLKOUT_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RCLKOUT_SEL_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RCLKOUT_SEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RCLKOUT_SEL_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RCLKOUT_SEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000074 + (N) * 0x4) bits 12:10) field RCLKOUT_SEL of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000074 + (N) * 0x4) bits 12:10) field RCLKOUT_SEL of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
        d8_rx_2x_reg_DATAPATH_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RCLKOUT_SEL_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RCLKOUT_SEL_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RCLKOUT_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RCLKOUT_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RCLKOUT_SEL_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RCLKOUT_SEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RCLKOUT_SEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000074 + (N) * 0x4) bits 12:10) field RCLKOUT_SEL of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_DATAPATH_CFG_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RCLKOUT_SEL_MSK)
                  >> SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RCLKOUT_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RCLKOUT_SEL_MSK, SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RCLKOUT_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RCLKOUT_SEL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LB_CLK_DEGLITCH_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LB_CLK_DEGLITCH_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LB_CLK_DEGLITCH_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LB_CLK_DEGLITCH_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LB_CLK_DEGLITCH_EN_set", N, value );

    /* ((0x00000074 + (N) * 0x4) bits 9) field LB_CLK_DEGLITCH_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    d8_rx_2x_reg_DATAPATH_CFG_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_LB_CLK_DEGLITCH_EN_MSK,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_LB_CLK_DEGLITCH_EN_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LB_CLK_DEGLITCH_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LB_CLK_DEGLITCH_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LB_CLK_DEGLITCH_EN_get", N, 1);
    /* ((0x00000074 + (N) * 0x4) bits 9) field LB_CLK_DEGLITCH_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_DATAPATH_CFG_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_LB_CLK_DEGLITCH_EN_MSK) >> SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_LB_CLK_DEGLITCH_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LB_CLK_DEGLITCH_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_BADJ_CLK_DEGLITCH_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_BADJ_CLK_DEGLITCH_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_BADJ_CLK_DEGLITCH_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_BADJ_CLK_DEGLITCH_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_BADJ_CLK_DEGLITCH_EN_set", N, value );

    /* ((0x00000074 + (N) * 0x4) bits 8) field BADJ_CLK_DEGLITCH_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    d8_rx_2x_reg_DATAPATH_CFG_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_BADJ_CLK_DEGLITCH_EN_MSK,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_BADJ_CLK_DEGLITCH_EN_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_BADJ_CLK_DEGLITCH_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_BADJ_CLK_DEGLITCH_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                              d8_rx_2x_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_BADJ_CLK_DEGLITCH_EN_get", N, 1);
    /* ((0x00000074 + (N) * 0x4) bits 8) field BADJ_CLK_DEGLITCH_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_DATAPATH_CFG_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_BADJ_CLK_DEGLITCH_EN_MSK) >> SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_BADJ_CLK_DEGLITCH_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_BADJ_CLK_DEGLITCH_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_CLK_DEGLITCH_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_CLK_DEGLITCH_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_CLK_DEGLITCH_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_CLK_DEGLITCH_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_CLK_DEGLITCH_EN_set", N, value );

    /* ((0x00000074 + (N) * 0x4) bits 7) field ADC_CLK_DEGLITCH_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    d8_rx_2x_reg_DATAPATH_CFG_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_ADC_CLK_DEGLITCH_EN_MSK,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_ADC_CLK_DEGLITCH_EN_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_CLK_DEGLITCH_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_CLK_DEGLITCH_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_CLK_DEGLITCH_EN_get", N, 1);
    /* ((0x00000074 + (N) * 0x4) bits 7) field ADC_CLK_DEGLITCH_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_DATAPATH_CFG_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_ADC_CLK_DEGLITCH_EN_MSK) >> SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_ADC_CLK_DEGLITCH_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_CLK_DEGLITCH_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_PATT_INSERT_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PATT_INSERT_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PATT_INSERT_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PATT_INSERT_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_PATT_INSERT_EN_set", N, value );

    /* ((0x00000074 + (N) * 0x4) bits 6) field PATT_INSERT_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    d8_rx_2x_reg_DATAPATH_CFG_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_PATT_INSERT_EN_MSK,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_PATT_INSERT_EN_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_PATT_INSERT_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PATT_INSERT_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PATT_INSERT_EN_get", N, 1);
    /* ((0x00000074 + (N) * 0x4) bits 6) field PATT_INSERT_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_DATAPATH_CFG_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_PATT_INSERT_EN_MSK) >> SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_PATT_INSERT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_PATT_INSERT_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_P2S_DLB_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_P2S_DLB_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_P2S_DLB_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_P2S_DLB_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_P2S_DLB_EN_set", N, value );

    /* ((0x00000074 + (N) * 0x4) bits 5) field P2S_DLB_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    d8_rx_2x_reg_DATAPATH_CFG_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_P2S_DLB_EN_MSK,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_P2S_DLB_EN_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_P2S_DLB_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_P2S_DLB_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_P2S_DLB_EN_get", N, 1);
    /* ((0x00000074 + (N) * 0x4) bits 5) field P2S_DLB_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_DATAPATH_CFG_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_P2S_DLB_EN_MSK) >> SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_P2S_DLB_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_P2S_DLB_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RX2TX_DLB_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RX2TX_DLB_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RX2TX_DLB_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RX2TX_DLB_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RX2TX_DLB_EN_set", N, value );

    /* ((0x00000074 + (N) * 0x4) bits 4) field RX2TX_DLB_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    d8_rx_2x_reg_DATAPATH_CFG_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RX2TX_DLB_EN_MSK,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RX2TX_DLB_EN_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_RX2TX_DLB_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RX2TX_DLB_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RX2TX_DLB_EN_get", N, 1);
    /* ((0x00000074 + (N) * 0x4) bits 4) field RX2TX_DLB_EN of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_DATAPATH_CFG_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RX2TX_DLB_EN_MSK) >> SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_RX2TX_DLB_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RX2TX_DLB_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_GEN_SIPO_BUS_WIDTH_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GEN_SIPO_BUS_WIDTH_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_SIPO_BUS_WIDTH_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GEN_SIPO_BUS_WIDTH_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_GEN_SIPO_BUS_WIDTH_set", N, value );

    /* ((0x00000074 + (N) * 0x4) bits 3) field GEN_SIPO_BUS_WIDTH of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    d8_rx_2x_reg_DATAPATH_CFG_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_BUS_WIDTH_MSK,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_BUS_WIDTH_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_GEN_SIPO_BUS_WIDTH_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GEN_SIPO_BUS_WIDTH_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_SIPO_BUS_WIDTH_get", N, 1);
    /* ((0x00000074 + (N) * 0x4) bits 3) field GEN_SIPO_BUS_WIDTH of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_DATAPATH_CFG_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_BUS_WIDTH_MSK) >> SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_BUS_WIDTH_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_GEN_SIPO_BUS_WIDTH_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_GEN_SIPO_DIV_RATIO_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GEN_SIPO_DIV_RATIO_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_SIPO_DIV_RATIO_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GEN_SIPO_DIV_RATIO_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_GEN_SIPO_DIV_RATIO_set", N, value );

    /* ((0x00000074 + (N) * 0x4) bits 2:0) field GEN_SIPO_DIV_RATIO of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    d8_rx_2x_reg_DATAPATH_CFG_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_DIV_RATIO_MSK,
                                               SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_DIV_RATIO_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_GEN_SIPO_DIV_RATIO_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GEN_SIPO_DIV_RATIO_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_SIPO_DIV_RATIO_get", N, 1);
    /* ((0x00000074 + (N) * 0x4) bits 2:0) field GEN_SIPO_DIV_RATIO of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_DATAPATH_CFG_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_DIV_RATIO_MSK) >> SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_DIV_RATIO_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_GEN_SIPO_DIV_RATIO_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000074 + (N) * 0x4) bits 2:0) field GEN_SIPO_DIV_RATIO of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000074 + (N) * 0x4) bits 2:0) field GEN_SIPO_DIV_RATIO of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
        d8_rx_2x_reg_DATAPATH_CFG_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_DIV_RATIO_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_DIV_RATIO_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_get( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_get( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000074 + (N) * 0x4) bits 2:0) field GEN_SIPO_DIV_RATIO of register PMC_SFI51_RX_2X_SLICE_REG_DATAPATH_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_DATAPATH_CFG_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_DIV_RATIO_MSK)
                  >> SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_DIV_RATIO_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_DIV_RATIO_MSK, SFI51_RX_2X_SLICE_REG_DATAPATH_CFG_BIT_GEN_SIPO_DIV_RATIO_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_GEN_SIPO_DIV_RATIO_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_GEN_MON_BUS_WIDTH_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GEN_MON_BUS_WIDTH_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_MON_BUS_WIDTH_set", N, 1);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GEN_MON_BUS_WIDTH_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_GEN_MON_BUS_WIDTH_set", N, value );

    /* ((0x0000007c + (N) * 0x4) bits 13:8) field GEN_MON_BUS_WIDTH of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MON_BUS_WIDTH_MSK,
                                                          SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MON_BUS_WIDTH_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_GEN_MON_BUS_WIDTH_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GEN_MON_BUS_WIDTH_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_MON_BUS_WIDTH_get", N, 1);
    /* ((0x0000007c + (N) * 0x4) bits 13:8) field GEN_MON_BUS_WIDTH of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MON_BUS_WIDTH_MSK) >> SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MON_BUS_WIDTH_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_GEN_MON_BUS_WIDTH_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000007c + (N) * 0x4) bits 13:8) field GEN_MON_BUS_WIDTH of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000007c + (N) * 0x4) bits 13:8) field GEN_MON_BUS_WIDTH of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
        d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_field_set( b_ptr,
                                                              h_ptr,
                                                              N,
                                                              subfield_mask << (SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MON_BUS_WIDTH_OFF + subfield_offset),
                                                              SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MON_BUS_WIDTH_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_get( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_get( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000007c + (N) * 0x4) bits 13:8) field GEN_MON_BUS_WIDTH of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MON_BUS_WIDTH_MSK)
                  >> SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MON_BUS_WIDTH_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MON_BUS_WIDTH_MSK, SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MON_BUS_WIDTH_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_GEN_MON_BUS_WIDTH_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_GEN_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GEN_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_MODE_set", N, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GEN_MODE_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_GEN_MODE_set", N, value );

    /* ((0x0000007c + (N) * 0x4) bits 7:4) field GEN_MODE of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MODE_MSK,
                                                          SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MODE_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_GEN_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GEN_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_MODE_get", N, 1);
    /* ((0x0000007c + (N) * 0x4) bits 7:4) field GEN_MODE of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MODE_MSK) >> SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MODE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_GEN_MODE_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_GEN_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_GEN_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_GEN_MODE_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_GEN_MODE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_GEN_MODE_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_GEN_MODE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000007c + (N) * 0x4) bits 7:4) field GEN_MODE of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000007c + (N) * 0x4) bits 7:4) field GEN_MODE of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
        d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_field_set( b_ptr,
                                                              h_ptr,
                                                              N,
                                                              subfield_mask << (SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MODE_OFF + subfield_offset),
                                                              SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MODE_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_GEN_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_GEN_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_GEN_MODE_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_GEN_MODE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_GEN_MODE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000007c + (N) * 0x4) bits 7:4) field GEN_MODE of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MODE_MSK)
                  >> SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MODE_MSK, SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_GEN_MODE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_GEN_ERR_INJ_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GEN_ERR_INJ_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_ERR_INJ_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GEN_ERR_INJ_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_GEN_ERR_INJ_set", N, value );

    /* ((0x0000007c + (N) * 0x4) bits 2) field GEN_ERR_INJ of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_ERR_INJ_MSK,
                                                          SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_ERR_INJ_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_GEN_ERR_INJ_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GEN_ERR_INJ_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_ERR_INJ_get", N, 1);
    /* ((0x0000007c + (N) * 0x4) bits 2) field GEN_ERR_INJ of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_ERR_INJ_MSK) >> SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_ERR_INJ_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_GEN_ERR_INJ_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_GEN_INV_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GEN_INV_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_INV_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GEN_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_GEN_INV_set", N, value );

    /* ((0x0000007c + (N) * 0x4) bits 1) field GEN_INV of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_INV_MSK,
                                                          SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_INV_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_GEN_INV_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GEN_INV_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_INV_get", N, 1);
    /* ((0x0000007c + (N) * 0x4) bits 1) field GEN_INV of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_INV_MSK) >> SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_GEN_INV_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_GEN_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                              d8_rx_2x_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GEN_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                              d8_rx_2x_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GEN_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_GEN_EN_set", N, value );

    /* ((0x0000007c + (N) * 0x4) bits 0) field GEN_EN of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_EN_MSK,
                                                          SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_EN_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_GEN_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GEN_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_EN_get", N, 1);
    /* ((0x0000007c + (N) * 0x4) bits 0) field GEN_EN of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_GENERATOR_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_EN_MSK) >> SFI51_RX_2X_SLICE_REG_PATTERN_GENERATOR_CFG_1_BIT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_GEN_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_GEN_USR_PAT_MSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_GEN_USR_PAT_MSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_USR_PAT_MSB_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_GEN_USR_PAT_MSB_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_GEN_USR_PAT_MSB_set", N, value );

    /* ((0x0000008c + (N) * 0x4) bits 7:0) field GEN_USR_PAT_MSB of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2 index N=0..1 */
    d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2_BIT_GEN_USR_PAT_MSB_MSK,
                                                             SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2_BIT_GEN_USR_PAT_MSB_OFF,
                                                             value);
}

static INLINE UINT32 d8_rx_2x_field_GEN_USR_PAT_MSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_GEN_USR_PAT_MSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_GEN_USR_PAT_MSB_get", N, 1);
    /* ((0x0000008c + (N) * 0x4) bits 7:0) field GEN_USR_PAT_MSB of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_read( b_ptr,
                                                                    h_ptr,
                                                                    N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2_BIT_GEN_USR_PAT_MSB_MSK) >> SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2_BIT_GEN_USR_PAT_MSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_GEN_USR_PAT_MSB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_GEN_USR_PAT_MSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_GEN_USR_PAT_MSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_GEN_USR_PAT_MSB_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_GEN_USR_PAT_MSB_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_GEN_USR_PAT_MSB_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_GEN_USR_PAT_MSB_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000008c + (N) * 0x4) bits 7:0) field GEN_USR_PAT_MSB of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000008c + (N) * 0x4) bits 7:0) field GEN_USR_PAT_MSB of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2 index N=0..1 */
        d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_field_set( b_ptr,
                                                                 h_ptr,
                                                                 N,
                                                                 subfield_mask << (SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2_BIT_GEN_USR_PAT_MSB_OFF + subfield_offset),
                                                                 SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2_BIT_GEN_USR_PAT_MSB_OFF + subfield_offset,
                                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_GEN_USR_PAT_MSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_GEN_USR_PAT_MSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_GEN_USR_PAT_MSB_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_GEN_USR_PAT_MSB_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_GEN_USR_PAT_MSB_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000008c + (N) * 0x4) bits 7:0) field GEN_USR_PAT_MSB of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_GEN_USER_PATTERN_2_array_read( b_ptr,
                                                                    h_ptr,
                                                                    N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2_BIT_GEN_USR_PAT_MSB_MSK)
                  >> SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2_BIT_GEN_USR_PAT_MSB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2_BIT_GEN_USR_PAT_MSB_MSK, SFI51_RX_2X_SLICE_REG_PATTERN_GEN_USER_PATTERN_2_BIT_GEN_USR_PAT_MSB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_GEN_USR_PAT_MSB_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_MON_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_MON_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MON_MODE_set", N, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_MON_MODE_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_MON_MODE_set", N, value );

    /* ((0x00000094 + (N) * 0x4) bits 7:4) field MON_MODE of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1 index N=0..1 */
    d8_rx_2x_reg_PATTERN_MON_CFG_1_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_MODE_MSK,
                                                    SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_MODE_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_MON_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_MON_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MON_MODE_get", N, 1);
    /* ((0x00000094 + (N) * 0x4) bits 7:4) field MON_MODE of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_MON_CFG_1_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_MODE_MSK) >> SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_MODE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_MON_MODE_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_MON_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_MON_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_MON_MODE_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_MON_MODE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_MON_MODE_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_MON_MODE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000094 + (N) * 0x4) bits 7:4) field MON_MODE of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000094 + (N) * 0x4) bits 7:4) field MON_MODE of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1 index N=0..1 */
        d8_rx_2x_reg_PATTERN_MON_CFG_1_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_MODE_OFF + subfield_offset),
                                                        SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_MODE_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_MON_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_MON_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_MON_MODE_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_MON_MODE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_MON_MODE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000094 + (N) * 0x4) bits 7:4) field MON_MODE of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_MON_CFG_1_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_MODE_MSK)
                  >> SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_MODE_MSK, SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_MON_MODE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_MON_READ_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_MON_READ_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MON_READ_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_MON_READ_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_MON_READ_set", N, value );

    /* ((0x00000094 + (N) * 0x4) bits 2) field MON_READ of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1 index N=0..1 */
    d8_rx_2x_reg_PATTERN_MON_CFG_1_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_READ_MSK,
                                                    SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_READ_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_MON_READ_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_MON_READ_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MON_READ_get", N, 1);
    /* ((0x00000094 + (N) * 0x4) bits 2) field MON_READ of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_MON_CFG_1_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_READ_MSK) >> SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_READ_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_MON_READ_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_MON_INV_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_MON_INV_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MON_INV_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_MON_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_MON_INV_set", N, value );

    /* ((0x00000094 + (N) * 0x4) bits 1) field MON_INV of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1 index N=0..1 */
    d8_rx_2x_reg_PATTERN_MON_CFG_1_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_INV_MSK,
                                                    SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_INV_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_MON_INV_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_MON_INV_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MON_INV_get", N, 1);
    /* ((0x00000094 + (N) * 0x4) bits 1) field MON_INV of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_MON_CFG_1_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_INV_MSK) >> SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_MON_INV_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_MON_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                              d8_rx_2x_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_MON_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                              d8_rx_2x_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MON_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_MON_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_MON_EN_set", N, value );

    /* ((0x00000094 + (N) * 0x4) bits 0) field MON_EN of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1 index N=0..1 */
    d8_rx_2x_reg_PATTERN_MON_CFG_1_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_EN_MSK,
                                                    SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_EN_OFF,
                                                    value);
}

static INLINE UINT32 d8_rx_2x_field_MON_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_MON_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MON_EN_get", N, 1);
    /* ((0x00000094 + (N) * 0x4) bits 0) field MON_EN of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_MON_CFG_1_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_EN_MSK) >> SFI51_RX_2X_SLICE_REG_PATTERN_MON_CFG_1_BIT_MON_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_MON_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_MON_USR_PAT_MSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_MON_USR_PAT_MSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MON_USR_PAT_MSB_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_MON_USR_PAT_MSB_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_MON_USR_PAT_MSB_set", N, value );

    /* ((0x000000a4 + (N) * 0x4) bits 7:0) field MON_USR_PAT_MSB of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2 index N=0..1 */
    d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2_BIT_MON_USR_PAT_MSB_MSK,
                                                             SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2_BIT_MON_USR_PAT_MSB_OFF,
                                                             value);
}

static INLINE UINT32 d8_rx_2x_field_MON_USR_PAT_MSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_MON_USR_PAT_MSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_MON_USR_PAT_MSB_get", N, 1);
    /* ((0x000000a4 + (N) * 0x4) bits 7:0) field MON_USR_PAT_MSB of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_read( b_ptr,
                                                                    h_ptr,
                                                                    N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2_BIT_MON_USR_PAT_MSB_MSK) >> SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2_BIT_MON_USR_PAT_MSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_MON_USR_PAT_MSB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_MON_USR_PAT_MSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_MON_USR_PAT_MSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_MON_USR_PAT_MSB_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_MON_USR_PAT_MSB_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_MON_USR_PAT_MSB_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_MON_USR_PAT_MSB_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000a4 + (N) * 0x4) bits 7:0) field MON_USR_PAT_MSB of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000a4 + (N) * 0x4) bits 7:0) field MON_USR_PAT_MSB of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2 index N=0..1 */
        d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_field_set( b_ptr,
                                                                 h_ptr,
                                                                 N,
                                                                 subfield_mask << (SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2_BIT_MON_USR_PAT_MSB_OFF + subfield_offset),
                                                                 SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2_BIT_MON_USR_PAT_MSB_OFF + subfield_offset,
                                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_MON_USR_PAT_MSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_MON_USR_PAT_MSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_MON_USR_PAT_MSB_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_MON_USR_PAT_MSB_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_MON_USR_PAT_MSB_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000a4 + (N) * 0x4) bits 7:0) field MON_USR_PAT_MSB of register PMC_SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_PATTERN_MON_USER_PATTERN_2_array_read( b_ptr,
                                                                    h_ptr,
                                                                    N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2_BIT_MON_USR_PAT_MSB_MSK)
                  >> SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2_BIT_MON_USR_PAT_MSB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2_BIT_MON_USR_PAT_MSB_MSK, SFI51_RX_2X_SLICE_REG_PATTERN_MON_USER_PATTERN_2_BIT_MON_USR_PAT_MSB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_MON_USR_PAT_MSB_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAM_PARITY_ERR_INJECT_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAM_PARITY_ERR_INJECT_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAM_PARITY_ERR_INJECT_set", N, 1);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_INJECT_set", value, 3);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_INJECT_set", N, value );

    /* ((0x000000b4 + (N) * 0x4) bits 10:9) field RAM_PARITY_ERR_INJECT of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_PARITY_ERR_INJECT_MSK,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_PARITY_ERR_INJECT_OFF,
                                                       value);
}

static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_INJECT_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_INJECT_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAM_PARITY_ERR_INJECT_get", N, 1);
    /* ((0x000000b4 + (N) * 0x4) bits 10:9) field RAM_PARITY_ERR_INJECT of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_PARITY_ERR_INJECT_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_PARITY_ERR_INJECT_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_INJECT_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_set( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_set( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_set", stop_bit, 1 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000b4 + (N) * 0x4) bits 10:9) field RAM_PARITY_ERR_INJECT of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000b4 + (N) * 0x4) bits 10:9) field RAM_PARITY_ERR_INJECT of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
        d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_PARITY_ERR_INJECT_OFF + subfield_offset),
                                                           SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_PARITY_ERR_INJECT_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_get( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_get( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000b4 + (N) * 0x4) bits 10:9) field RAM_PARITY_ERR_INJECT of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_PARITY_ERR_INJECT_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_PARITY_ERR_INJECT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_PARITY_ERR_INJECT_MSK, SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_PARITY_ERR_INJECT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RAM_PARITY_ERR_INJECT_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAM_SHUT_DOWN_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAM_SHUT_DOWN_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAM_SHUT_DOWN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAM_SHUT_DOWN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAM_SHUT_DOWN_set", N, value );

    /* ((0x000000b4 + (N) * 0x4) bits 7) field RAM_SHUT_DOWN of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_SHUT_DOWN_MSK,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_SHUT_DOWN_OFF,
                                                       value);
}

static INLINE UINT32 d8_rx_2x_field_RAM_SHUT_DOWN_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAM_SHUT_DOWN_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAM_SHUT_DOWN_get", N, 1);
    /* ((0x000000b4 + (N) * 0x4) bits 7) field RAM_SHUT_DOWN of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_SHUT_DOWN_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_SHUT_DOWN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAM_SHUT_DOWN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAM_LIGHT_SLEEP_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAM_LIGHT_SLEEP_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAM_LIGHT_SLEEP_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAM_LIGHT_SLEEP_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAM_LIGHT_SLEEP_set", N, value );

    /* ((0x000000b4 + (N) * 0x4) bits 6) field RAM_LIGHT_SLEEP of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_LIGHT_SLEEP_MSK,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_LIGHT_SLEEP_OFF,
                                                       value);
}

static INLINE UINT32 d8_rx_2x_field_RAM_LIGHT_SLEEP_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAM_LIGHT_SLEEP_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAM_LIGHT_SLEEP_get", N, 1);
    /* ((0x000000b4 + (N) * 0x4) bits 6) field RAM_LIGHT_SLEEP of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_LIGHT_SLEEP_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAM_LIGHT_SLEEP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAM_LIGHT_SLEEP_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMCAPT_DATA_RD_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMCAPT_DATA_RD_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_DATA_RD_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMCAPT_DATA_RD_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_DATA_RD_EN_set", N, value );

    /* ((0x000000b4 + (N) * 0x4) bits 5) field RAMCAPT_DATA_RD_EN of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_DATA_RD_EN_MSK,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_DATA_RD_EN_OFF,
                                                       value);
}

static INLINE UINT32 d8_rx_2x_field_RAMCAPT_DATA_RD_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMCAPT_DATA_RD_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_DATA_RD_EN_get", N, 1);
    /* ((0x000000b4 + (N) * 0x4) bits 5) field RAMCAPT_DATA_RD_EN of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_DATA_RD_EN_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_DATA_RD_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_DATA_RD_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMCAPT_RST_RD_ADDR_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMCAPT_RST_RD_ADDR_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_RST_RD_ADDR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMCAPT_RST_RD_ADDR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_RST_RD_ADDR_set", N, value );

    /* ((0x000000b4 + (N) * 0x4) bits 4) field RAMCAPT_RST_RD_ADDR of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_RST_RD_ADDR_MSK,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_RST_RD_ADDR_OFF,
                                                       value);
}

static INLINE UINT32 d8_rx_2x_field_RAMCAPT_RST_RD_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMCAPT_RST_RD_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_RST_RD_ADDR_get", N, 1);
    /* ((0x000000b4 + (N) * 0x4) bits 4) field RAMCAPT_RST_RD_ADDR of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_RST_RD_ADDR_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_RST_RD_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_RST_RD_ADDR_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMCAPT_STOP_EVENT_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMCAPT_STOP_EVENT_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_STOP_EVENT_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMCAPT_STOP_EVENT_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_STOP_EVENT_set", N, value );

    /* ((0x000000b4 + (N) * 0x4) bits 3) field RAMCAPT_STOP_EVENT of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_STOP_EVENT_MSK,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_STOP_EVENT_OFF,
                                                       value);
}

static INLINE UINT32 d8_rx_2x_field_RAMCAPT_STOP_EVENT_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMCAPT_STOP_EVENT_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_STOP_EVENT_get", N, 1);
    /* ((0x000000b4 + (N) * 0x4) bits 3) field RAMCAPT_STOP_EVENT of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_STOP_EVENT_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_STOP_EVENT_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_STOP_EVENT_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMCAPT_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMCAPT_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_MODE_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMCAPT_MODE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_MODE_set", N, value );

    /* ((0x000000b4 + (N) * 0x4) bits 2) field RAMCAPT_MODE of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_MODE_MSK,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_MODE_OFF,
                                                       value);
}

static INLINE UINT32 d8_rx_2x_field_RAMCAPT_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMCAPT_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_MODE_get", N, 1);
    /* ((0x000000b4 + (N) * 0x4) bits 2) field RAMCAPT_MODE of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_MODE_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_MODE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_MODE_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMCAPT_START_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMCAPT_START_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_START_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMCAPT_START_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_START_set", N, value );

    /* ((0x000000b4 + (N) * 0x4) bits 1) field RAMCAPT_START of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_START_MSK,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_START_OFF,
                                                       value);
}

static INLINE UINT32 d8_rx_2x_field_RAMCAPT_START_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMCAPT_START_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_START_get", N, 1);
    /* ((0x000000b4 + (N) * 0x4) bits 1) field RAMCAPT_START of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_START_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_START_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_START_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMCAPT_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMCAPT_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_ENB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMCAPT_ENB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_ENB_set", N, value );

    /* ((0x000000b4 + (N) * 0x4) bits 0) field RAMCAPT_ENB of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_ENB_MSK,
                                                       SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_ENB_OFF,
                                                       value);
}

static INLINE UINT32 d8_rx_2x_field_RAMCAPT_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMCAPT_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_ENB_get", N, 1);
    /* ((0x000000b4 + (N) * 0x4) bits 0) field RAMCAPT_ENB of register PMC_SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_CAPTURE_CTRL_REG_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_CAPTURE_CTRL_REG_BIT_RAMCAPT_ENB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_ENB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_HHIST_PERBIN_VALUE_RD_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_HHIST_PERBIN_VALUE_RD_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_HHIST_PERBIN_VALUE_RD_ENB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_HHIST_PERBIN_VALUE_RD_ENB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_HHIST_PERBIN_VALUE_RD_ENB_set", N, value );

    /* ((0x000000c4 + (N) * 0x4) bits 2) field HHIST_PERBIN_VALUE_RD_ENB of register PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_HHIST_CTRL_REG_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_PERBIN_VALUE_RD_ENB_MSK,
                                                 SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_PERBIN_VALUE_RD_ENB_OFF,
                                                 value);
}

static INLINE UINT32 d8_rx_2x_field_HHIST_PERBIN_VALUE_RD_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_HHIST_PERBIN_VALUE_RD_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_HHIST_PERBIN_VALUE_RD_ENB_get", N, 1);
    /* ((0x000000c4 + (N) * 0x4) bits 2) field HHIST_PERBIN_VALUE_RD_ENB of register PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_HHIST_CTRL_REG_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_PERBIN_VALUE_RD_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_PERBIN_VALUE_RD_ENB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_HHIST_PERBIN_VALUE_RD_ENB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_HHIST_CAPT_START_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_HHIST_CAPT_START_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_HHIST_CAPT_START_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_HHIST_CAPT_START_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_HHIST_CAPT_START_set", N, value );

    /* ((0x000000c4 + (N) * 0x4) bits 1) field HHIST_CAPT_START of register PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_HHIST_CTRL_REG_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_CAPT_START_MSK,
                                                 SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_CAPT_START_OFF,
                                                 value);
}

static INLINE UINT32 d8_rx_2x_field_HHIST_CAPT_START_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_HHIST_CAPT_START_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_HHIST_CAPT_START_get", N, 1);
    /* ((0x000000c4 + (N) * 0x4) bits 1) field HHIST_CAPT_START of register PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_HHIST_CTRL_REG_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_CAPT_START_MSK) >> SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_CAPT_START_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_HHIST_CAPT_START_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_HHIST_CAPT_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_HHIST_CAPT_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_HHIST_CAPT_ENB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_HHIST_CAPT_ENB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_HHIST_CAPT_ENB_set", N, value );

    /* ((0x000000c4 + (N) * 0x4) bits 0) field HHIST_CAPT_ENB of register PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_HHIST_CTRL_REG_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_CAPT_ENB_MSK,
                                                 SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_CAPT_ENB_OFF,
                                                 value);
}

static INLINE UINT32 d8_rx_2x_field_HHIST_CAPT_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_HHIST_CAPT_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_HHIST_CAPT_ENB_get", N, 1);
    /* ((0x000000c4 + (N) * 0x4) bits 0) field HHIST_CAPT_ENB of register PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_HHIST_CTRL_REG_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_CAPT_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_CAPT_ENB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_HHIST_CAPT_ENB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMCAPT_DATA_WR_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMCAPT_DATA_WR_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_DATA_WR_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMCAPT_DATA_WR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_DATA_WR_EN_set", N, value );

    /* ((0x000000dc + (N) * 0x4) bits 2) field RAMCAPT_DATA_WR_EN of register PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_DATA_WR_EN_MSK,
                                                         SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_DATA_WR_EN_OFF,
                                                         value);
}

static INLINE UINT32 d8_rx_2x_field_RAMCAPT_DATA_WR_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMCAPT_DATA_WR_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_DATA_WR_EN_get", N, 1);
    /* ((0x000000dc + (N) * 0x4) bits 2) field RAMCAPT_DATA_WR_EN of register PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_DATA_WR_EN_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_DATA_WR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_DATA_WR_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMCAPT_RST_WR_ADDR_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMCAPT_RST_WR_ADDR_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_RST_WR_ADDR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMCAPT_RST_WR_ADDR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_RST_WR_ADDR_set", N, value );

    /* ((0x000000dc + (N) * 0x4) bits 1) field RAMCAPT_RST_WR_ADDR of register PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_RST_WR_ADDR_MSK,
                                                         SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_RST_WR_ADDR_OFF,
                                                         value);
}

static INLINE UINT32 d8_rx_2x_field_RAMCAPT_RST_WR_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMCAPT_RST_WR_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_RST_WR_ADDR_get", N, 1);
    /* ((0x000000dc + (N) * 0x4) bits 1) field RAMCAPT_RST_WR_ADDR of register PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_RST_WR_ADDR_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_RST_WR_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_RST_WR_ADDR_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RAMCAPT_PCBI_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAMCAPT_PCBI_SEL_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_PCBI_SEL_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAMCAPT_PCBI_SEL_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_PCBI_SEL_set", N, value );

    /* ((0x000000dc + (N) * 0x4) bits 0) field RAMCAPT_PCBI_SEL of register PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG index N=0..1 */
    d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_PCBI_SEL_MSK,
                                                         SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_PCBI_SEL_OFF,
                                                         value);
}

static INLINE UINT32 d8_rx_2x_field_RAMCAPT_PCBI_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMCAPT_PCBI_SEL_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMCAPT_PCBI_SEL_get", N, 1);
    /* ((0x000000dc + (N) * 0x4) bits 0) field RAMCAPT_PCBI_SEL of register PMC_SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_RAM_OVERWRITE_CTRL_REG_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_PCBI_SEL_MSK) >> SFI51_RX_2X_SLICE_REG_RAM_OVERWRITE_CTRL_REG_BIT_RAMCAPT_PCBI_SEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMCAPT_PCBI_SEL_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RX_LS_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RX_LS_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RX_LS_ENB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RX_LS_ENB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RX_LS_ENB_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 31) field RX_LS_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_LS_ENB_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_LS_ENB_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_RX_LS_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RX_LS_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RX_LS_ENB_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 31) field RX_LS_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_LS_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_LS_ENB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RX_LS_ENB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_BADJ_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_BADJ_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_BADJ_ENB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_BADJ_ENB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_BADJ_ENB_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 30) field BADJ_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_BADJ_ENB_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_BADJ_ENB_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_BADJ_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_BADJ_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_BADJ_ENB_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 30) field BADJ_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_BADJ_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_BADJ_ENB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_BADJ_ENB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_CLK8_TEST_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_CLK8_TEST_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_CLK8_TEST_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_CLK8_TEST_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_CLK8_TEST_EN_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 29) field ADC_CLK8_TEST_EN of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_CLK8_TEST_EN_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_CLK8_TEST_EN_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_CLK8_TEST_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_CLK8_TEST_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_CLK8_TEST_EN_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 29) field ADC_CLK8_TEST_EN of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_CLK8_TEST_EN_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_CLK8_TEST_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_CLK8_TEST_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_BYPASS_DIV8_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BYPASS_DIV8_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_BYPASS_DIV8_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BYPASS_DIV8_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_BYPASS_DIV8_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 23) field ADC_BYPASS_DIV8 of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BYPASS_DIV8_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BYPASS_DIV8_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BYPASS_DIV8_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BYPASS_DIV8_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_BYPASS_DIV8_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 23) field ADC_BYPASS_DIV8 of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BYPASS_DIV8_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BYPASS_DIV8_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_BYPASS_DIV8_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_BYPASS_DIV4_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BYPASS_DIV4_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_BYPASS_DIV4_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BYPASS_DIV4_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_BYPASS_DIV4_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 22) field ADC_BYPASS_DIV4 of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BYPASS_DIV4_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BYPASS_DIV4_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BYPASS_DIV4_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BYPASS_DIV4_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_BYPASS_DIV4_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 22) field ADC_BYPASS_DIV4 of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BYPASS_DIV4_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BYPASS_DIV4_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_BYPASS_DIV4_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_ATMSB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_ATMSB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_ATMSB_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 21) field ADC_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_ATMSB_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_ATMSB_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_ATMSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_ATMSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_ATMSB_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 21) field ADC_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_ATMSB_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_ATMSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_ATMSB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_DAC_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_DAC_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_DAC_ENB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_DAC_ENB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_DAC_ENB_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 20) field ADC_DAC_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DAC_ENB_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DAC_ENB_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_DAC_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_DAC_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_DAC_ENB_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 20) field ADC_DAC_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DAC_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DAC_ENB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_DAC_ENB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_DAC_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_DAC_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_DAC_RSTB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_DAC_RSTB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_DAC_RSTB_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 19) field ADC_DAC_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DAC_RSTB_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DAC_RSTB_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_DAC_RSTB_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_DAC_RSTB_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_DAC_RSTB_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 19) field ADC_DAC_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DAC_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DAC_RSTB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_DAC_RSTB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_DLB_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_DLB_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_DLB_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_DLB_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_DLB_EN_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 18) field ADC_DLB_EN of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DLB_EN_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DLB_EN_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_DLB_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_DLB_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_DLB_EN_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 18) field ADC_DLB_EN of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DLB_EN_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_DLB_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_DLB_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_BIST_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BIST_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_BIST_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BIST_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_BIST_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 17) field ADC_BIST of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BIST_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BIST_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_BIST_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 17) field ADC_BIST of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BIST_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_BIST_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_BIST_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_RSTB_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_RSTB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_RSTB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_RSTB_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 16) field ADC_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_RSTB_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_RSTB_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_RSTB_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_RSTB_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_RSTB_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 16) field ADC_RSTB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_RSTB_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_RSTB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_RSTB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_ENB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_ENB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_ENB_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 15) field ADC_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_ENB_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_ENB_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_ENB_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 15) field ADC_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_ENB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_ENB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RX_ADCCM_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RX_ADCCM_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RX_ADCCM_ENB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RX_ADCCM_ENB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RX_ADCCM_ENB_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 14) field RX_ADCCM_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_ADCCM_ENB_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_ADCCM_ENB_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_RX_ADCCM_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RX_ADCCM_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RX_ADCCM_ENB_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 14) field RX_ADCCM_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_ADCCM_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_ADCCM_ENB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RX_ADCCM_ENB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_MODE_set", N, 1);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_MODE_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_ADC_MODE_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 13:8) field ADC_MODE of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_MODE_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_MODE_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_MODE_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 13:8) field ADC_MODE of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_MODE_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_MODE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_MODE_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_ADC_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_ADC_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_ADC_MODE_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_ADC_MODE_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_ADC_MODE_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_ADC_MODE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000ec + (N) * 0x4) bits 13:8) field ADC_MODE of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000ec + (N) * 0x4) bits 13:8) field ADC_MODE of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
        d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                              h_ptr,
                                                              N,
                                                              subfield_mask << (SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_MODE_OFF + subfield_offset),
                                                              SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_MODE_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_ADC_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_ADC_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_ADC_MODE_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_ADC_MODE_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_ADC_MODE_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000ec + (N) * 0x4) bits 13:8) field ADC_MODE of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_MODE_MSK)
                  >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_MODE_MSK, SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_ADC_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_ADC_MODE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_JTAG_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_JTAG_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_JTAG_ENB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_JTAG_ENB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_JTAG_ENB_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 7) field JTAG_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ENB_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ENB_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_JTAG_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_JTAG_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_JTAG_ENB_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 7) field JTAG_ENB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ENB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_JTAG_ENB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_JTAG_ACINIT_N_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_JTAG_ACINIT_N_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_JTAG_ACINIT_N_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_JTAG_ACINIT_N_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_JTAG_ACINIT_N_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 6) field JTAG_ACINIT_N of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACINIT_N_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACINIT_N_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_JTAG_ACINIT_N_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_JTAG_ACINIT_N_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_JTAG_ACINIT_N_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 6) field JTAG_ACINIT_N of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACINIT_N_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACINIT_N_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_JTAG_ACINIT_N_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_JTAG_ACINIT_P_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_JTAG_ACINIT_P_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_JTAG_ACINIT_P_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_JTAG_ACINIT_P_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_JTAG_ACINIT_P_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 5) field JTAG_ACINIT_P of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACINIT_P_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACINIT_P_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_JTAG_ACINIT_P_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_JTAG_ACINIT_P_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_JTAG_ACINIT_P_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 5) field JTAG_ACINIT_P of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACINIT_P_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACINIT_P_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_JTAG_ACINIT_P_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_JTAG_ACFORCE_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_JTAG_ACFORCE_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_JTAG_ACFORCE_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_JTAG_ACFORCE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_JTAG_ACFORCE_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 4) field JTAG_ACFORCE of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACFORCE_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACFORCE_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_JTAG_ACFORCE_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_JTAG_ACFORCE_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_JTAG_ACFORCE_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 4) field JTAG_ACFORCE of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACFORCE_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_ACFORCE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_JTAG_ACFORCE_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_JTAG_AC_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_JTAG_AC_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_JTAG_AC_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_JTAG_AC_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_JTAG_AC_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 3) field JTAG_AC of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_AC_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_AC_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_JTAG_AC_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_JTAG_AC_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_JTAG_AC_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 3) field JTAG_AC of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_AC_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_JTAG_AC_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_JTAG_AC_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RX_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RX_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RX_ATMSB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RX_ATMSB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RX_ATMSB_set", N, value );

    /* ((0x000000ec + (N) * 0x4) bits 0) field RX_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_ATMSB_MSK,
                                                          SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_ATMSB_OFF,
                                                          value);
}

static INLINE UINT32 d8_rx_2x_field_RX_ATMSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RX_ATMSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RX_ATMSB_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 0) field RX_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_ATMSB_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_RX_ATMSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RX_ATMSB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_SD_set( d8_rx_2x_buffer_t *b_ptr,
                                          d8_rx_2x_handle_t *h_ptr,
                                          UINT32  N,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SD_set( d8_rx_2x_buffer_t *b_ptr,
                                          d8_rx_2x_handle_t *h_ptr,
                                          UINT32  N,
                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_SD_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SD_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_SD_set", N, value );

    /* ((0x000000f8 + (N) * 0x4) bits 8) field SD of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_SD_MSK,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_SD_OFF,
                                                         value);
}

static INLINE UINT32 d8_rx_2x_field_SD_get( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SD_get( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_SD_get", N, 1);
    /* ((0x000000f8 + (N) * 0x4) bits 8) field SD of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_SD_MSK) >> SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_SD_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_SD_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RM_set( d8_rx_2x_buffer_t *b_ptr,
                                          d8_rx_2x_handle_t *h_ptr,
                                          UINT32  N,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RM_set( d8_rx_2x_buffer_t *b_ptr,
                                          d8_rx_2x_handle_t *h_ptr,
                                          UINT32  N,
                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RM_set", N, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RM_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RM_set", N, value );

    /* ((0x000000f8 + (N) * 0x4) bits 7:4) field RM of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RM_MSK,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RM_OFF,
                                                         value);
}

static INLINE UINT32 d8_rx_2x_field_RM_get( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RM_get( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RM_get", N, 1);
    /* ((0x000000f8 + (N) * 0x4) bits 7:4) field RM of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RM_MSK) >> SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RM_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RM_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_RM_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_RM_set( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RM_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RM_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RM_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RM_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000f8 + (N) * 0x4) bits 7:4) field RM of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000f8 + (N) * 0x4) bits 7:4) field RM of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
        d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RM_OFF + subfield_offset),
                                                             SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RM_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_RM_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RM_get( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RM_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RM_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RM_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000f8 + (N) * 0x4) bits 7:4) field RM of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RM_MSK)
                  >> SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RM_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RM_MSK, SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RM_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RM_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_DS_set( d8_rx_2x_buffer_t *b_ptr,
                                          d8_rx_2x_handle_t *h_ptr,
                                          UINT32  N,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_DS_set( d8_rx_2x_buffer_t *b_ptr,
                                          d8_rx_2x_handle_t *h_ptr,
                                          UINT32  N,
                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_DS_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_DS_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_DS_set", N, value );

    /* ((0x000000f8 + (N) * 0x4) bits 3) field DS of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_DS_MSK,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_DS_OFF,
                                                         value);
}

static INLINE UINT32 d8_rx_2x_field_DS_get( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DS_get( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_DS_get", N, 1);
    /* ((0x000000f8 + (N) * 0x4) bits 3) field DS of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_DS_MSK) >> SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_DS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_DS_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LS_set( d8_rx_2x_buffer_t *b_ptr,
                                          d8_rx_2x_handle_t *h_ptr,
                                          UINT32  N,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LS_set( d8_rx_2x_buffer_t *b_ptr,
                                          d8_rx_2x_handle_t *h_ptr,
                                          UINT32  N,
                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LS_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LS_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LS_set", N, value );

    /* ((0x000000f8 + (N) * 0x4) bits 2) field LS of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_LS_MSK,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_LS_OFF,
                                                         value);
}

static INLINE UINT32 d8_rx_2x_field_LS_get( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LS_get( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LS_get", N, 1);
    /* ((0x000000f8 + (N) * 0x4) bits 2) field LS of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_LS_MSK) >> SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_LS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LS_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_RMEN_set( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32  N,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RMEN_set( d8_rx_2x_buffer_t *b_ptr,
                                            d8_rx_2x_handle_t *h_ptr,
                                            UINT32  N,
                                            UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RMEN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RMEN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_RMEN_set", N, value );

    /* ((0x000000f8 + (N) * 0x4) bits 1) field RMEN of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RMEN_MSK,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RMEN_OFF,
                                                         value);
}

static INLINE UINT32 d8_rx_2x_field_RMEN_get( d8_rx_2x_buffer_t *b_ptr,
                                              d8_rx_2x_handle_t *h_ptr,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RMEN_get( d8_rx_2x_buffer_t *b_ptr,
                                              d8_rx_2x_handle_t *h_ptr,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RMEN_get", N, 1);
    /* ((0x000000f8 + (N) * 0x4) bits 1) field RMEN of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RMEN_MSK) >> SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_RMEN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RMEN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_TEST1_set( d8_rx_2x_buffer_t *b_ptr,
                                             d8_rx_2x_handle_t *h_ptr,
                                             UINT32  N,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_TEST1_set( d8_rx_2x_buffer_t *b_ptr,
                                             d8_rx_2x_handle_t *h_ptr,
                                             UINT32  N,
                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_TEST1_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_TEST1_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_TEST1_set", N, value );

    /* ((0x000000f8 + (N) * 0x4) bits 0) field TEST1 of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_TEST1_MSK,
                                                         SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_TEST1_OFF,
                                                         value);
}

static INLINE UINT32 d8_rx_2x_field_TEST1_get( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_TEST1_get( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_TEST1_get", N, 1);
    /* ((0x000000f8 + (N) * 0x4) bits 0) field TEST1 of register PMC_SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG index N=0..1 */
    reg_value = d8_rx_2x_reg_SAMPLE_CAPTURE_RAM_CFG_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_TEST1_MSK) >> SFI51_RX_2X_SLICE_REG_SAMPLE_CAPTURE_RAM_CFG_BIT_TEST1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_TEST1_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_DAC_MAX_VAL_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_DAC_MAX_VAL_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_DAC_MAX_VAL_set", N, 1);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_DAC_MAX_VAL_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_DAC_MAX_VAL_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 23:18) field LOS_DAC_MAX_VAL of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MAX_VAL_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MAX_VAL_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_DAC_MAX_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_DAC_MAX_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_DAC_MAX_VAL_get", N, 1);
    /* ((0x00000100 + (N) * 0x4) bits 23:18) field LOS_DAC_MAX_VAL of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MAX_VAL_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MAX_VAL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_DAC_MAX_VAL_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOS_DAC_MAX_VAL_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOS_DAC_MAX_VAL_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_DAC_MAX_VAL_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_DAC_MAX_VAL_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_DAC_MAX_VAL_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_DAC_MAX_VAL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000100 + (N) * 0x4) bits 23:18) field LOS_DAC_MAX_VAL of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000100 + (N) * 0x4) bits 23:18) field LOS_DAC_MAX_VAL of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
        d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MAX_VAL_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MAX_VAL_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOS_DAC_MAX_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOS_DAC_MAX_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_DAC_MAX_VAL_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_DAC_MAX_VAL_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_DAC_MAX_VAL_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 0x4) bits 23:18) field LOS_DAC_MAX_VAL of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MAX_VAL_MSK)
                  >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MAX_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MAX_VAL_MSK, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MAX_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_DAC_MAX_VAL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_DAC_MIN_VAL_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_DAC_MIN_VAL_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_DAC_MIN_VAL_set", N, 1);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_DAC_MIN_VAL_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_DAC_MIN_VAL_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 17:12) field LOS_DAC_MIN_VAL of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MIN_VAL_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MIN_VAL_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_DAC_MIN_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_DAC_MIN_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_DAC_MIN_VAL_get", N, 1);
    /* ((0x00000100 + (N) * 0x4) bits 17:12) field LOS_DAC_MIN_VAL of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MIN_VAL_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MIN_VAL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_DAC_MIN_VAL_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOS_DAC_MIN_VAL_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOS_DAC_MIN_VAL_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_DAC_MIN_VAL_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_DAC_MIN_VAL_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_DAC_MIN_VAL_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_DAC_MIN_VAL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000100 + (N) * 0x4) bits 17:12) field LOS_DAC_MIN_VAL of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000100 + (N) * 0x4) bits 17:12) field LOS_DAC_MIN_VAL of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
        d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MIN_VAL_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MIN_VAL_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOS_DAC_MIN_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOS_DAC_MIN_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_DAC_MIN_VAL_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_DAC_MIN_VAL_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_DAC_MIN_VAL_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 0x4) bits 17:12) field LOS_DAC_MIN_VAL of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MIN_VAL_MSK)
                  >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MIN_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MIN_VAL_MSK, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MIN_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_DAC_MIN_VAL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_NUM_CYCLE_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_NUM_CYCLE_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_NUM_CYCLE_set", N, 1);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_NUM_CYCLE_set", value, 3);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_NUM_CYCLE_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 10:9) field LOS_NUM_CYCLE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_NUM_CYCLE_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_NUM_CYCLE_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_NUM_CYCLE_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_NUM_CYCLE_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_NUM_CYCLE_get", N, 1);
    /* ((0x00000100 + (N) * 0x4) bits 10:9) field LOS_NUM_CYCLE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_NUM_CYCLE_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_NUM_CYCLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_NUM_CYCLE_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOS_NUM_CYCLE_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOS_NUM_CYCLE_set( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_NUM_CYCLE_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_NUM_CYCLE_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_NUM_CYCLE_set", stop_bit, 1 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_NUM_CYCLE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000100 + (N) * 0x4) bits 10:9) field LOS_NUM_CYCLE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000100 + (N) * 0x4) bits 10:9) field LOS_NUM_CYCLE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
        d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_NUM_CYCLE_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_NUM_CYCLE_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOS_NUM_CYCLE_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOS_NUM_CYCLE_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_NUM_CYCLE_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_NUM_CYCLE_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_NUM_CYCLE_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 0x4) bits 10:9) field LOS_NUM_CYCLE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_NUM_CYCLE_MSK)
                  >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_NUM_CYCLE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_NUM_CYCLE_MSK, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_NUM_CYCLE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_NUM_CYCLE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_CALIBRATE_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_CALIBRATE_set( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CALIBRATE_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_CALIBRATE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_CALIBRATE_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 8) field LOS_CALIBRATE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_CALIBRATE_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_CALIBRATE_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_CALIBRATE_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_CALIBRATE_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CALIBRATE_get", N, 1);
    /* ((0x00000100 + (N) * 0x4) bits 8) field LOS_CALIBRATE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_CALIBRATE_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_CALIBRATE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_CALIBRATE_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_DAC_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_DAC_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_DAC_OVR_set", N, 1);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_DAC_OVR_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_DAC_OVR_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 7:2) field LOS_DAC_OVR of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_DAC_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_DAC_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_DAC_OVR_get", N, 1);
    /* ((0x00000100 + (N) * 0x4) bits 7:2) field LOS_DAC_OVR of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_DAC_OVR_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOS_DAC_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOS_DAC_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_DAC_OVR_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_DAC_OVR_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_DAC_OVR_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_DAC_OVR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000100 + (N) * 0x4) bits 7:2) field LOS_DAC_OVR of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000100 + (N) * 0x4) bits 7:2) field LOS_DAC_OVR of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
        d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOS_DAC_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOS_DAC_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_DAC_OVR_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_DAC_OVR_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_DAC_OVR_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 0x4) bits 7:2) field LOS_DAC_OVR of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_MSK)
                  >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_MSK, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_DAC_OVR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_DAC_OVR_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_DAC_OVR_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_DAC_OVR_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_DAC_OVR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_DAC_OVR_EN_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 1) field LOS_DAC_OVR_EN of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_EN_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_EN_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_DAC_OVR_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_DAC_OVR_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_DAC_OVR_EN_get", N, 1);
    /* ((0x00000100 + (N) * 0x4) bits 1) field LOS_DAC_OVR_EN of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_EN_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OVR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_DAC_OVR_EN_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_CAL_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_CAL_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CAL_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_CAL_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_CAL_OVR_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 0) field LOS_CAL_OVR of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    d8_rx_2x_reg_LOS_OC_CFG_1_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_CAL_OVR_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_CAL_OVR_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_CAL_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_CAL_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CAL_OVR_get", N, 1);
    /* ((0x00000100 + (N) * 0x4) bits 0) field LOS_CAL_OVR of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_CAL_OVR_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_CAL_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_CAL_OVR_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_SET_TIME_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_SET_TIME_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_SET_TIME_set", N, 1);
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_SET_TIME_set", value, 1023);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_SET_TIME_set", N, value );

    /* ((0x00000108 + (N) * 0x4) bits 9:0) field LOS_SET_TIME of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2 index N=0..1 */
    d8_rx_2x_reg_LOS_OC_CFG_2_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2_BIT_LOS_SET_TIME_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2_BIT_LOS_SET_TIME_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_SET_TIME_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_SET_TIME_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_SET_TIME_get", N, 1);
    /* ((0x00000108 + (N) * 0x4) bits 9:0) field LOS_SET_TIME of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2_BIT_LOS_SET_TIME_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2_BIT_LOS_SET_TIME_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_SET_TIME_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOS_SET_TIME_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOS_SET_TIME_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_SET_TIME_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_SET_TIME_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_SET_TIME_set", stop_bit, 9 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_SET_TIME_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000108 + (N) * 0x4) bits 9:0) field LOS_SET_TIME of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000108 + (N) * 0x4) bits 9:0) field LOS_SET_TIME of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2 index N=0..1 */
        d8_rx_2x_reg_LOS_OC_CFG_2_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2_BIT_LOS_SET_TIME_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2_BIT_LOS_SET_TIME_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOS_SET_TIME_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOS_SET_TIME_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_SET_TIME_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_SET_TIME_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_SET_TIME_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000108 + (N) * 0x4) bits 9:0) field LOS_SET_TIME of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_2_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2_BIT_LOS_SET_TIME_MSK)
                  >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2_BIT_LOS_SET_TIME_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2_BIT_LOS_SET_TIME_MSK, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_2_BIT_LOS_SET_TIME_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_SET_TIME_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_ATMSB_set( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_ATMSB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_ATMSB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_ATMSB_set", N, value );

    /* ((0x00000110 + (N) * 0x4) bits 22) field LOS_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                           h_ptr,
                                           N,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_ATMSB_MSK,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_ATMSB_OFF,
                                           value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_ATMSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_ATMSB_get( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_ATMSB_get", N, 1);
    /* ((0x00000110 + (N) * 0x4) bits 22) field LOS_ATMSB of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_ATMSB_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_ATMSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_ATMSB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_ENB_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_ENB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_ENB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_ENB_set", N, value );

    /* ((0x00000110 + (N) * 0x4) bits 21) field LOS_ENB of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                           h_ptr,
                                           N,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_ENB_MSK,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_ENB_OFF,
                                           value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_ENB_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_ENB_get", N, 1);
    /* ((0x00000110 + (N) * 0x4) bits 21) field LOS_ENB of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_ENB_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_ENB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_ENB_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_REFAMP_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_REFAMP_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_REFAMP_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_REFAMP_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_REFAMP_set", N, value );

    /* ((0x00000110 + (N) * 0x4) bits 20:16) field LOS_REFAMP of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                           h_ptr,
                                           N,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_REFAMP_MSK,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_REFAMP_OFF,
                                           value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_REFAMP_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_REFAMP_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_REFAMP_get", N, 1);
    /* ((0x00000110 + (N) * 0x4) bits 20:16) field LOS_REFAMP of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_REFAMP_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_REFAMP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_REFAMP_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOS_REFAMP_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOS_REFAMP_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_REFAMP_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_REFAMP_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_REFAMP_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_REFAMP_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000110 + (N) * 0x4) bits 20:16) field LOS_REFAMP of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000110 + (N) * 0x4) bits 20:16) field LOS_REFAMP of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
        d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               subfield_mask << (SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_REFAMP_OFF + subfield_offset),
                                               SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_REFAMP_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOS_REFAMP_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOS_REFAMP_get( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_REFAMP_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_REFAMP_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_REFAMP_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000110 + (N) * 0x4) bits 20:16) field LOS_REFAMP of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_REFAMP_MSK)
                  >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_REFAMP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_REFAMP_MSK, SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_REFAMP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_REFAMP_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_MODE_7_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_MODE_7_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_MODE_7_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_MODE_7_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_MODE_7_set", N, value );

    /* ((0x00000110 + (N) * 0x4) bits 15) field LOS_MODE_7 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                           h_ptr,
                                           N,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_MODE_7_MSK,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_MODE_7_OFF,
                                           value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_MODE_7_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_MODE_7_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_MODE_7_get", N, 1);
    /* ((0x00000110 + (N) * 0x4) bits 15) field LOS_MODE_7 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_MODE_7_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_MODE_7_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_MODE_7_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_MODE_6_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_MODE_6_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_MODE_6_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_MODE_6_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_MODE_6_set", N, value );

    /* ((0x00000110 + (N) * 0x4) bits 14) field LOS_MODE_6 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                           h_ptr,
                                           N,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_MODE_6_MSK,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_MODE_6_OFF,
                                           value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_MODE_6_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_MODE_6_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_MODE_6_get", N, 1);
    /* ((0x00000110 + (N) * 0x4) bits 14) field LOS_MODE_6 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_MODE_6_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_MODE_6_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_MODE_6_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_CTRL_6_5_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_CTRL_6_5_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_6_5_set", N, 1);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_CTRL_6_5_set", value, 3);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_6_5_set", N, value );

    /* ((0x00000110 + (N) * 0x4) bits 6:5) field LOS_CTRL_6_5 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                           h_ptr,
                                           N,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_6_5_MSK,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_6_5_OFF,
                                           value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_6_5_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_6_5_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_6_5_get", N, 1);
    /* ((0x00000110 + (N) * 0x4) bits 6:5) field LOS_CTRL_6_5 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_6_5_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_6_5_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_6_5_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOS_CTRL_6_5_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOS_CTRL_6_5_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_CTRL_6_5_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_CTRL_6_5_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_CTRL_6_5_set", stop_bit, 1 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_CTRL_6_5_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000110 + (N) * 0x4) bits 6:5) field LOS_CTRL_6_5 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000110 + (N) * 0x4) bits 6:5) field LOS_CTRL_6_5 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
        d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               subfield_mask << (SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_6_5_OFF + subfield_offset),
                                               SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_6_5_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOS_CTRL_6_5_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOS_CTRL_6_5_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_CTRL_6_5_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_CTRL_6_5_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_CTRL_6_5_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000110 + (N) * 0x4) bits 6:5) field LOS_CTRL_6_5 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_6_5_MSK)
                  >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_6_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_6_5_MSK, SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_6_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_CTRL_6_5_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_CTRL_4_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_CTRL_4_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_4_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_CTRL_4_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_4_set", N, value );

    /* ((0x00000110 + (N) * 0x4) bits 4) field LOS_CTRL_4 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                           h_ptr,
                                           N,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_4_MSK,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_4_OFF,
                                           value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_4_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_4_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_4_get", N, 1);
    /* ((0x00000110 + (N) * 0x4) bits 4) field LOS_CTRL_4 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_4_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_4_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_4_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_CTRL_3_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_CTRL_3_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_3_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_CTRL_3_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_3_set", N, value );

    /* ((0x00000110 + (N) * 0x4) bits 3) field LOS_CTRL_3 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                           h_ptr,
                                           N,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_3_MSK,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_3_OFF,
                                           value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_3_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_3_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_3_get", N, 1);
    /* ((0x00000110 + (N) * 0x4) bits 3) field LOS_CTRL_3 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_3_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_3_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_3_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_CTRL_2_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_CTRL_2_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_2_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_CTRL_2_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_2_set", N, value );

    /* ((0x00000110 + (N) * 0x4) bits 2) field LOS_CTRL_2 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                           h_ptr,
                                           N,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_2_MSK,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_2_OFF,
                                           value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_2_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_2_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_2_get", N, 1);
    /* ((0x00000110 + (N) * 0x4) bits 2) field LOS_CTRL_2 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_2_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_2_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_2_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_CTRL_1_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_CTRL_1_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_1_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_CTRL_1_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_1_set", N, value );

    /* ((0x00000110 + (N) * 0x4) bits 1) field LOS_CTRL_1 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                           h_ptr,
                                           N,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_1_MSK,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_1_OFF,
                                           value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_1_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_1_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_1_get", N, 1);
    /* ((0x00000110 + (N) * 0x4) bits 1) field LOS_CTRL_1 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_1_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_1_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_CTRL_0_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_CTRL_0_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_0_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_CTRL_0_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_0_set", N, value );

    /* ((0x00000110 + (N) * 0x4) bits 0) field LOS_CTRL_0 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_CFG__array_field_set( b_ptr,
                                           h_ptr,
                                           N,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_0_MSK,
                                           SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_0_OFF,
                                           value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_0_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_CTRL_0_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CTRL_0_get", N, 1);
    /* ((0x00000110 + (N) * 0x4) bits 0) field LOS_CTRL_0 of register PMC_SFI51_RX_2X_SLICE_REG_LOS_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_CFG__array_read(  b_ptr, h_ptr, N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_0_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_CFG_BIT_LOS_CTRL_0_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_CTRL_0_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_FLT_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_FLT_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_FLT_THRESHOLD_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_FLT_THRESHOLD_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_FLT_THRESHOLD_set", N, value );

    /* ((0x00000118 + (N) * 0x4) bits 23:16) field LOS_FLT_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_FLT_CFG__array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_THRESHOLD_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_THRESHOLD_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_FLT_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_FLT_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_FLT_THRESHOLD_get", N, 1);
    /* ((0x00000118 + (N) * 0x4) bits 23:16) field LOS_FLT_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_FLT_CFG__array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_THRESHOLD_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_THRESHOLD_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_FLT_THRESHOLD_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOS_FLT_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOS_FLT_THRESHOLD_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_FLT_THRESHOLD_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_FLT_THRESHOLD_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_FLT_THRESHOLD_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_FLT_THRESHOLD_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000118 + (N) * 0x4) bits 23:16) field LOS_FLT_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000118 + (N) * 0x4) bits 23:16) field LOS_FLT_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
        d8_rx_2x_reg_LOS_FLT_CFG__array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_THRESHOLD_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_THRESHOLD_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOS_FLT_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOS_FLT_THRESHOLD_get( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_FLT_THRESHOLD_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_FLT_THRESHOLD_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_FLT_THRESHOLD_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000118 + (N) * 0x4) bits 23:16) field LOS_FLT_THRESHOLD of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_FLT_CFG__array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_THRESHOLD_MSK)
                  >> SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_THRESHOLD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_THRESHOLD_MSK, SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_THRESHOLD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_FLT_THRESHOLD_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_FLT_CNT_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_FLT_CNT_set( d8_rx_2x_buffer_t *b_ptr,
                                                   d8_rx_2x_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_FLT_CNT_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_FLT_CNT_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_FLT_CNT_set", N, value );

    /* ((0x00000118 + (N) * 0x4) bits 15:8) field LOS_FLT_CNT of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_FLT_CFG__array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_CNT_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_CNT_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_FLT_CNT_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_FLT_CNT_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_FLT_CNT_get", N, 1);
    /* ((0x00000118 + (N) * 0x4) bits 15:8) field LOS_FLT_CNT of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_FLT_CFG__array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_CNT_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_CNT_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_FLT_CNT_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOS_FLT_CNT_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOS_FLT_CNT_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_FLT_CNT_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_FLT_CNT_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_FLT_CNT_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_FLT_CNT_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000118 + (N) * 0x4) bits 15:8) field LOS_FLT_CNT of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000118 + (N) * 0x4) bits 15:8) field LOS_FLT_CNT of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
        d8_rx_2x_reg_LOS_FLT_CFG__array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_CNT_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_CNT_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOS_FLT_CNT_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOS_FLT_CNT_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_FLT_CNT_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_FLT_CNT_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_FLT_CNT_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000118 + (N) * 0x4) bits 15:8) field LOS_FLT_CNT of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_FLT_CFG__array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_CNT_MSK)
                  >> SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_CNT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_CNT_MSK, SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_CNT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_FLT_CNT_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_OVR_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OVR_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_OVR_MODE_set", N, 1);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OVR_MODE_set", value, 3);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_OVR_MODE_set", N, value );

    /* ((0x00000118 + (N) * 0x4) bits 3:2) field LOS_OVR_MODE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_FLT_CFG__array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MODE_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MODE_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OVR_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OVR_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_OVR_MODE_get", N, 1);
    /* ((0x00000118 + (N) * 0x4) bits 3:2) field LOS_OVR_MODE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_FLT_CFG__array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MODE_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MODE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_OVR_MODE_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_range_LOS_OVR_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_range_LOS_OVR_MODE_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_OVR_MODE_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_OVR_MODE_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_OVR_MODE_set", stop_bit, 1 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_OVR_MODE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000118 + (N) * 0x4) bits 3:2) field LOS_OVR_MODE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000118 + (N) * 0x4) bits 3:2) field LOS_OVR_MODE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
        d8_rx_2x_reg_LOS_FLT_CFG__array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MODE_OFF + subfield_offset),
                                                   SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MODE_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 d8_rx_2x_field_range_LOS_OVR_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOS_OVR_MODE_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_OVR_MODE_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_OVR_MODE_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_OVR_MODE_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000118 + (N) * 0x4) bits 3:2) field LOS_OVR_MODE of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_FLT_CFG__array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MODE_MSK)
                  >> SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MODE_MSK, SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_OVR_MODE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OVR_set( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_OVR_set", N, value );

    /* ((0x00000118 + (N) * 0x4) bits 1) field LOS_OVR of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_FLT_CFG__array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OVR_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_OVR_get", N, 1);
    /* ((0x00000118 + (N) * 0x4) bits 1) field LOS_OVR of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_FLT_CFG__array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_OVR_get", N, value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_FLT_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_FLT_EN_set( d8_rx_2x_buffer_t *b_ptr,
                                                  d8_rx_2x_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_FLT_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_FLT_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_LOS_FLT_EN_set", N, value );

    /* ((0x00000118 + (N) * 0x4) bits 0) field LOS_FLT_EN of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    d8_rx_2x_reg_LOS_FLT_CFG__array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_EN_MSK,
                                               SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_EN_OFF,
                                               value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_FLT_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_FLT_EN_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_FLT_EN_get", N, 1);
    /* ((0x00000118 + (N) * 0x4) bits 0) field LOS_FLT_EN of register PMC_SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_ index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_FLT_CFG__array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_EN_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_FLT_CFG_BIT_LOS_FLT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_FLT_EN_get", N, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_edge_N_size2
 * ==================================================================================
 */
static INLINE void d8_rx_2x_field_PLL_RD_set( d8_rx_2x_buffer_t *b_ptr,
                                              d8_rx_2x_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PLL_RD_set( d8_rx_2x_buffer_t *b_ptr,
                                              d8_rx_2x_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PLL_RD_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PLL_RD_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "d8_rx_2x_field_PLL_RD_set", N, value );

    /* ((0x00000064 + (N) * 0x4) bits 0) field PLL_RD of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3 index N=0..1 */
    d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_field_set( b_ptr,
                                                              h_ptr,
                                                              N,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PLL_RD_MSK,
                                                              SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PLL_RD_OFF,
                                                              value);
}

static INLINE UINT32 d8_rx_2x_field_PLL_RD_get( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_RD_get( d8_rx_2x_buffer_t *b_ptr,
                                                d8_rx_2x_handle_t *h_ptr,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PLL_RD_get", N, 1);
    /* ((0x00000064 + (N) * 0x4) bits 0) field PLL_RD of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PLL_RD_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PLL_RD_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_PLL_RD_get", N, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_active_rising
 * ==================================================================================
 */
static INLINE void d8_rx_2x_field_LOS_OC_FAIL_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OC_FAIL_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_B_I_set_to_clear", value );

    /* (0x00000014 bits 3) field LOS_OC_FAIL_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    d8_rx_2x_reg_INT_REG_2_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000014 bits 3) field LOS_OC_FAIL_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    reg_value = d8_rx_2x_reg_INT_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_FAIL_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_FAIL_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_B_I_poll", value );

    /* (0x00000014 bits 3) field LOS_OC_FAIL_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    return d8_rx_2x_reg_INT_REG_2_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_LOS_OC_FAIL_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OC_FAIL_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_A_I_set_to_clear", value );

    /* (0x00000014 bits 2) field LOS_OC_FAIL_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    d8_rx_2x_reg_INT_REG_2_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000014 bits 2) field LOS_OC_FAIL_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    reg_value = d8_rx_2x_reg_INT_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_FAIL_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_FAIL_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_A_I_poll", value );

    /* (0x00000014 bits 2) field LOS_OC_FAIL_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    return d8_rx_2x_reg_INT_REG_2_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_FAIL_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_LOS_OC_PASS_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OC_PASS_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_B_I_set_to_clear", value );

    /* (0x00000014 bits 1) field LOS_OC_PASS_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    d8_rx_2x_reg_INT_REG_2_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000014 bits 1) field LOS_OC_PASS_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    reg_value = d8_rx_2x_reg_INT_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_PASS_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_PASS_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_LOS_OC_PASS_B_I_poll", value );

    /* (0x00000014 bits 1) field LOS_OC_PASS_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    return d8_rx_2x_reg_INT_REG_2_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_LOS_OC_PASS_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OC_PASS_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_A_I_set_to_clear", value );

    /* (0x00000014 bits 0) field LOS_OC_PASS_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    d8_rx_2x_reg_INT_REG_2_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000014 bits 0) field LOS_OC_PASS_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    reg_value = d8_rx_2x_reg_INT_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_PASS_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_PASS_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_LOS_OC_PASS_A_I_poll", value );

    /* (0x00000014 bits 0) field LOS_OC_PASS_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_2 */
    return d8_rx_2x_reg_INT_REG_2_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_2_BIT_LOS_OC_PASS_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */
static INLINE void d8_rx_2x_field_CALIB_PASS_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_CALIB_PASS_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_B_E_set", value );

    /* (0x0000000c bits 29) field CALIB_PASS_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_PASS_INT_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_PASS_INT_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 29) field CALIB_PASS_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_PASS_INT_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_PASS_INT_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_CALIB_PASS_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_CALIB_PASS_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_A_E_set", value );

    /* (0x0000000c bits 28) field CALIB_PASS_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_PASS_INT_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_PASS_INT_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 28) field CALIB_PASS_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_PASS_INT_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_PASS_INT_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_BIST_ERR_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BIST_ERR_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_B_E_set", value );

    /* (0x0000000c bits 27) field ADC_BIST_ERR_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_ERR_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_ERR_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 27) field ADC_BIST_ERR_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_ERR_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_ERR_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_BIST_ERR_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BIST_ERR_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_A_E_set", value );

    /* (0x0000000c bits 26) field ADC_BIST_ERR_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_ERR_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_ERR_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 26) field ADC_BIST_ERR_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_ERR_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_ERR_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_BIST_DONE_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BIST_DONE_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_B_E_set", value );

    /* (0x0000000c bits 25) field ADC_BIST_DONE_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_DONE_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_DONE_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 25) field ADC_BIST_DONE_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_DONE_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_DONE_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_ADC_BIST_DONE_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BIST_DONE_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_A_E_set", value );

    /* (0x0000000c bits 24) field ADC_BIST_DONE_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_DONE_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_DONE_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 24) field ADC_BIST_DONE_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_DONE_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADC_BIST_DONE_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RAM_PARITY_ERR_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAM_PARITY_ERR_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_B_E_set", value );

    /* (0x0000000c bits 23) field RAM_PARITY_ERR_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_RAM_PARITY_ERR_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_RAM_PARITY_ERR_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 23) field RAM_PARITY_ERR_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_RAM_PARITY_ERR_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_RAM_PARITY_ERR_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_RAM_PARITY_ERR_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAM_PARITY_ERR_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_A_E_set", value );

    /* (0x0000000c bits 22) field RAM_PARITY_ERR_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_RAM_PARITY_ERR_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_RAM_PARITY_ERR_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 22) field RAM_PARITY_ERR_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_RAM_PARITY_ERR_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_RAM_PARITY_ERR_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_SIPO_BIST_SYNC_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_SYNC_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_B_E_set", value );

    /* (0x0000000c bits 21) field SIPO_BIST_SYNC_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_SYNC_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_SYNC_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 21) field SIPO_BIST_SYNC_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_SYNC_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_SYNC_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_SIPO_BIST_SYNC_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_SYNC_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_A_E_set", value );

    /* (0x0000000c bits 20) field SIPO_BIST_SYNC_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_SYNC_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_SYNC_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 20) field SIPO_BIST_SYNC_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_SYNC_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_SYNC_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_SIPO_BIST_ERR_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_ERR_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_B_E_set", value );

    /* (0x0000000c bits 19) field SIPO_BIST_ERR_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_ERR_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_ERR_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 19) field SIPO_BIST_ERR_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_ERR_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_ERR_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_SIPO_BIST_ERR_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_ERR_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                         d8_rx_2x_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_A_E_set", value );

    /* (0x0000000c bits 18) field SIPO_BIST_ERR_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_ERR_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_ERR_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 18) field SIPO_BIST_ERR_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_ERR_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_SIPO_BIST_ERR_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_DIVCLK_DEAD_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_DIVCLK_DEAD_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_B_E_set", value );

    /* (0x0000000c bits 17) field DIVCLK_DEAD_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_DIVCLK_DEAD_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_DIVCLK_DEAD_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 17) field DIVCLK_DEAD_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_DIVCLK_DEAD_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_DIVCLK_DEAD_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_DIVCLK_DEAD_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_DIVCLK_DEAD_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_A_E_set", value );

    /* (0x0000000c bits 16) field DIVCLK_DEAD_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_DIVCLK_DEAD_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_DIVCLK_DEAD_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 16) field DIVCLK_DEAD_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_DIVCLK_DEAD_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_DIVCLK_DEAD_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_E_set", value );

    /* (0x0000000c bits 15) field IN_RANGEN_FAILS_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_FAILS_INT_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_FAILS_INT_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 15) field IN_RANGEN_FAILS_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_FAILS_INT_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_FAILS_INT_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                               d8_rx_2x_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_E_set", value );

    /* (0x0000000c bits 14) field IN_RANGEN_FAILS_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_FAILS_INT_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_FAILS_INT_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 14) field IN_RANGEN_FAILS_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_FAILS_INT_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_FAILS_INT_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_E_set", value );

    /* (0x0000000c bits 13) field IN_RANGEN_PASSES_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_PASSES_INT_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_PASSES_INT_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 13) field IN_RANGEN_PASSES_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_PASSES_INT_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_PASSES_INT_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_E_set", value );

    /* (0x0000000c bits 12) field IN_RANGEN_PASSES_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_PASSES_INT_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_PASSES_INT_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 12) field IN_RANGEN_PASSES_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_PASSES_INT_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_IN_RANGEN_PASSES_INT_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_E_set", value );

    /* (0x0000000c bits 11) field PLL_LOCK_LOSS_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_LOSS_INT_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_LOSS_INT_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 11) field PLL_LOCK_LOSS_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_LOSS_INT_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_LOSS_INT_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_E_set", value );

    /* (0x0000000c bits 10) field PLL_LOCK_LOSS_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_LOSS_INT_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_LOSS_INT_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 10) field PLL_LOCK_LOSS_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_LOSS_INT_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_LOSS_INT_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_E_set", value );

    /* (0x0000000c bits 9) field PLL_LOCK_GAIN_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_GAIN_INT_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_GAIN_INT_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 9) field PLL_LOCK_GAIN_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_GAIN_INT_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_GAIN_INT_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_E_set", value );

    /* (0x0000000c bits 8) field PLL_LOCK_GAIN_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_GAIN_INT_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_GAIN_INT_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 8) field PLL_LOCK_GAIN_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_GAIN_INT_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PLL_LOCK_GAIN_INT_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_E_set", value );

    /* (0x0000000c bits 7) field ADCOC_FSM_ERR_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADCOC_FSM_ERR_INT_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADCOC_FSM_ERR_INT_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 7) field ADCOC_FSM_ERR_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADCOC_FSM_ERR_INT_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADCOC_FSM_ERR_INT_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_E_set", value );

    /* (0x0000000c bits 6) field ADCOC_FSM_ERR_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADCOC_FSM_ERR_INT_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADCOC_FSM_ERR_INT_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 6) field ADCOC_FSM_ERR_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADCOC_FSM_ERR_INT_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_ADCOC_FSM_ERR_INT_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PROG_REF_DONE_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PROG_REF_DONE_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_B_E_set", value );

    /* (0x0000000c bits 5) field PROG_REF_DONE_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PROG_REF_DONE_INT_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PROG_REF_DONE_INT_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 5) field PROG_REF_DONE_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PROG_REF_DONE_INT_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PROG_REF_DONE_INT_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PROG_REF_DONE_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PROG_REF_DONE_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_A_E_set", value );

    /* (0x0000000c bits 4) field PROG_REF_DONE_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PROG_REF_DONE_INT_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PROG_REF_DONE_INT_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 4) field PROG_REF_DONE_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PROG_REF_DONE_INT_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PROG_REF_DONE_INT_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_CALIB_DONE_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_CALIB_DONE_INT_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_B_E_set", value );

    /* (0x0000000c bits 3) field CALIB_DONE_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_DONE_INT_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_DONE_INT_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 3) field CALIB_DONE_INT_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_DONE_INT_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_DONE_INT_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_CALIB_DONE_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_CALIB_DONE_INT_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                          d8_rx_2x_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_A_E_set", value );

    /* (0x0000000c bits 2) field CALIB_DONE_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_DONE_INT_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_DONE_INT_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 2) field CALIB_DONE_INT_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_DONE_INT_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_CALIB_DONE_INT_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PATT_MON_ERR_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PATT_MON_ERR_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_B_E_set", value );

    /* (0x0000000c bits 1) field PATT_MON_ERR_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PATT_MON_ERR_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PATT_MON_ERR_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 1) field PATT_MON_ERR_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PATT_MON_ERR_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PATT_MON_ERR_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_PATT_MON_ERR_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PATT_MON_ERR_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_A_E_set", value );

    /* (0x0000000c bits 0) field PATT_MON_ERR_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    d8_rx_2x_reg_INT_EN_REG_1_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PATT_MON_ERR_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PATT_MON_ERR_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 0) field PATT_MON_ERR_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_1 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PATT_MON_ERR_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_1_BIT_PATT_MON_ERR_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_OC_FAIL_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OC_FAIL_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_B_E_set", value );

    /* (0x00000018 bits 3) field LOS_OC_FAIL_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2 */
    d8_rx_2x_reg_INT_EN_REG_2_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_FAIL_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_FAIL_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000018 bits 3) field LOS_OC_FAIL_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_FAIL_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_FAIL_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_OC_FAIL_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OC_FAIL_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_A_E_set", value );

    /* (0x00000018 bits 2) field LOS_OC_FAIL_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2 */
    d8_rx_2x_reg_INT_EN_REG_2_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_FAIL_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_FAIL_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000018 bits 2) field LOS_OC_FAIL_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_FAIL_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_FAIL_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_A_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_OC_PASS_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OC_PASS_B_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_B_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_B_E_set", value );

    /* (0x00000018 bits 1) field LOS_OC_PASS_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2 */
    d8_rx_2x_reg_INT_EN_REG_2_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_PASS_B_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_PASS_B_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_B_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000018 bits 1) field LOS_OC_PASS_B_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_PASS_B_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_PASS_B_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_B_E_get", value );

    return value;
}
static INLINE void d8_rx_2x_field_LOS_OC_PASS_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_LOS_OC_PASS_A_E_set( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_A_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_A_E_set", value );

    /* (0x00000018 bits 0) field LOS_OC_PASS_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2 */
    d8_rx_2x_reg_INT_EN_REG_2_field_set( b_ptr,
                                         h_ptr,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_PASS_A_E_MSK,
                                         SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_PASS_A_E_OFF,
                                         value);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_A_E_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000018 bits 0) field LOS_OC_PASS_A_E of register PMC_SFI51_RX_2X_SLICE_REG_INT_EN_REG_2 */
    reg_value = d8_rx_2x_reg_INT_EN_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_PASS_A_E_MSK) >> SFI51_RX_2X_SLICE_REG_INT_EN_REG_2_BIT_LOS_OC_PASS_A_E_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_A_E_get", value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_summary
 * ==================================================================================
 */
static INLINE UINT32 d8_rx_2x_field_INT1_SUMMARY_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_INT1_SUMMARY_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000020 bits 1) field INT1_SUMMARY of register PMC_SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG */
    reg_value = d8_rx_2x_reg_INT_SUMMARY_REG_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG_BIT_INT1_SUMMARY_MSK) >> SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG_BIT_INT1_SUMMARY_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_INT1_SUMMARY_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_INT1_SUMMARY_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_INT1_SUMMARY_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_INT1_SUMMARY_poll", value );

    /* (0x00000020 bits 1) field INT1_SUMMARY of register PMC_SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG */
    return d8_rx_2x_reg_INT_SUMMARY_REG_poll( b_ptr,
                                              h_ptr,
                                              SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG_BIT_INT1_SUMMARY_MSK,
                                              (value<<SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG_BIT_INT1_SUMMARY_OFF),
                                              cmp,
                                              max_count,
                                              num_failed_polls,
                                              delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_INT0_SUMMARY_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_INT0_SUMMARY_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000020 bits 0) field INT0_SUMMARY of register PMC_SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG */
    reg_value = d8_rx_2x_reg_INT_SUMMARY_REG_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG_BIT_INT0_SUMMARY_MSK) >> SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG_BIT_INT0_SUMMARY_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_INT0_SUMMARY_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_INT0_SUMMARY_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_INT0_SUMMARY_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                     d8_rx_2x_handle_t *h_ptr,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_INT0_SUMMARY_poll", value );

    /* (0x00000020 bits 0) field INT0_SUMMARY of register PMC_SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG */
    return d8_rx_2x_reg_INT_SUMMARY_REG_poll( b_ptr,
                                              h_ptr,
                                              SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG_BIT_INT0_SUMMARY_MSK,
                                              (value<<SFI51_RX_2X_SLICE_REG_INT_SUMMARY_REG_BIT_INT0_SUMMARY_OFF),
                                              cmp,
                                              max_count,
                                              num_failed_polls,
                                              delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_sync
 * ==================================================================================
 */
static INLINE void d8_rx_2x_field_CALIB_PASS_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_CALIB_PASS_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_B_I_set_to_clear", value );

    /* (0x00000008 bits 29) field CALIB_PASS_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 29) field CALIB_PASS_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_PASS_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_PASS_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_B_I_poll", value );

    /* (0x00000008 bits 29) field CALIB_PASS_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_CALIB_PASS_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_CALIB_PASS_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_A_I_set_to_clear", value );

    /* (0x00000008 bits 28) field CALIB_PASS_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 28) field CALIB_PASS_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_PASS_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_PASS_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_A_I_poll", value );

    /* (0x00000008 bits 28) field CALIB_PASS_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_PASS_INT_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_ADC_BIST_ERR_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BIST_ERR_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_B_I_set_to_clear", value );

    /* (0x00000008 bits 27) field ADC_BIST_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 27) field ADC_BIST_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_ERR_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_ERR_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_B_I_poll", value );

    /* (0x00000008 bits 27) field ADC_BIST_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_ADC_BIST_ERR_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BIST_ERR_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_A_I_set_to_clear", value );

    /* (0x00000008 bits 26) field ADC_BIST_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 26) field ADC_BIST_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_ERR_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_ERR_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_A_I_poll", value );

    /* (0x00000008 bits 26) field ADC_BIST_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_ERR_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_ADC_BIST_DONE_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BIST_DONE_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_B_I_set_to_clear", value );

    /* (0x00000008 bits 25) field ADC_BIST_DONE_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 25) field ADC_BIST_DONE_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_DONE_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_DONE_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_B_I_poll", value );

    /* (0x00000008 bits 25) field ADC_BIST_DONE_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_ADC_BIST_DONE_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADC_BIST_DONE_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_A_I_set_to_clear", value );

    /* (0x00000008 bits 24) field ADC_BIST_DONE_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 24) field ADC_BIST_DONE_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_DONE_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_DONE_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_A_I_poll", value );

    /* (0x00000008 bits 24) field ADC_BIST_DONE_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADC_BIST_DONE_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_RAM_PARITY_ERR_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAM_PARITY_ERR_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_B_I_set_to_clear", value );

    /* (0x00000008 bits 23) field RAM_PARITY_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 23) field RAM_PARITY_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_RAM_PARITY_ERR_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_RAM_PARITY_ERR_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_B_I_poll", value );

    /* (0x00000008 bits 23) field RAM_PARITY_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_RAM_PARITY_ERR_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_RAM_PARITY_ERR_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_A_I_set_to_clear", value );

    /* (0x00000008 bits 22) field RAM_PARITY_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 22) field RAM_PARITY_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_RAM_PARITY_ERR_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_RAM_PARITY_ERR_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_A_I_poll", value );

    /* (0x00000008 bits 22) field RAM_PARITY_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_RAM_PARITY_ERR_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_SIPO_BIST_SYNC_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_SYNC_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_B_I_set_to_clear", value );

    /* (0x00000008 bits 21) field SIPO_BIST_SYNC_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 21) field SIPO_BIST_SYNC_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_SYNC_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_SYNC_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_B_I_poll", value );

    /* (0x00000008 bits 21) field SIPO_BIST_SYNC_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_SIPO_BIST_SYNC_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_SYNC_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_A_I_set_to_clear", value );

    /* (0x00000008 bits 20) field SIPO_BIST_SYNC_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 20) field SIPO_BIST_SYNC_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_SYNC_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_SYNC_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_A_I_poll", value );

    /* (0x00000008 bits 20) field SIPO_BIST_SYNC_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_SYNC_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_SIPO_BIST_ERR_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_ERR_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_B_I_set_to_clear", value );

    /* (0x00000008 bits 19) field SIPO_BIST_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 19) field SIPO_BIST_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_ERR_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_ERR_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_B_I_poll", value );

    /* (0x00000008 bits 19) field SIPO_BIST_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_SIPO_BIST_ERR_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_SIPO_BIST_ERR_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                  d8_rx_2x_handle_t *h_ptr,
                                                                  UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_A_I_set_to_clear", value );

    /* (0x00000008 bits 18) field SIPO_BIST_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 18) field SIPO_BIST_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_ERR_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_ERR_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_A_I_poll", value );

    /* (0x00000008 bits 18) field SIPO_BIST_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_SIPO_BIST_ERR_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_DIVCLK_DEAD_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_DIVCLK_DEAD_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_B_I_set_to_clear", value );

    /* (0x00000008 bits 17) field DIVCLK_DEAD_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 17) field DIVCLK_DEAD_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_DIVCLK_DEAD_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_DIVCLK_DEAD_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_B_I_poll", value );

    /* (0x00000008 bits 17) field DIVCLK_DEAD_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_DIVCLK_DEAD_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_DIVCLK_DEAD_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_A_I_set_to_clear", value );

    /* (0x00000008 bits 16) field DIVCLK_DEAD_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 16) field DIVCLK_DEAD_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_DIVCLK_DEAD_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_DIVCLK_DEAD_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_A_I_poll", value );

    /* (0x00000008 bits 16) field DIVCLK_DEAD_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_DIVCLK_DEAD_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_I_set_to_clear", value );

    /* (0x00000008 bits 15) field IN_RANGEN_FAILS_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 15) field IN_RANGEN_FAILS_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                d8_rx_2x_handle_t *h_ptr,
                                                                                UINT32 value,
                                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                                UINT32 max_count,
                                                                                UINT32 *num_failed_polls,
                                                                                UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                d8_rx_2x_handle_t *h_ptr,
                                                                                UINT32 value,
                                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                                UINT32 max_count,
                                                                                UINT32 *num_failed_polls,
                                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_I_poll", value );

    /* (0x00000008 bits 15) field IN_RANGEN_FAILS_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_I_set_to_clear", value );

    /* (0x00000008 bits 14) field IN_RANGEN_FAILS_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 14) field IN_RANGEN_FAILS_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                d8_rx_2x_handle_t *h_ptr,
                                                                                UINT32 value,
                                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                                UINT32 max_count,
                                                                                UINT32 *num_failed_polls,
                                                                                UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                d8_rx_2x_handle_t *h_ptr,
                                                                                UINT32 value,
                                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                                UINT32 max_count,
                                                                                UINT32 *num_failed_polls,
                                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_I_poll", value );

    /* (0x00000008 bits 14) field IN_RANGEN_FAILS_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_FAILS_INT_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_I_set_to_clear", value );

    /* (0x00000008 bits 13) field IN_RANGEN_PASSES_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 13) field IN_RANGEN_PASSES_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                                 UINT32 value,
                                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                                 UINT32 max_count,
                                                                                 UINT32 *num_failed_polls,
                                                                                 UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                                 UINT32 value,
                                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                                 UINT32 max_count,
                                                                                 UINT32 *num_failed_polls,
                                                                                 UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_I_poll", value );

    /* (0x00000008 bits 13) field IN_RANGEN_PASSES_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_I_set_to_clear", value );

    /* (0x00000008 bits 12) field IN_RANGEN_PASSES_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 12) field IN_RANGEN_PASSES_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                                 UINT32 value,
                                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                                 UINT32 max_count,
                                                                                 UINT32 *num_failed_polls,
                                                                                 UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                                 UINT32 value,
                                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                                 UINT32 max_count,
                                                                                 UINT32 *num_failed_polls,
                                                                                 UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_I_poll", value );

    /* (0x00000008 bits 12) field IN_RANGEN_PASSES_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_IN_RANGEN_PASSES_INT_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_I_set_to_clear", value );

    /* (0x00000008 bits 11) field PLL_LOCK_LOSS_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 11) field PLL_LOCK_LOSS_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_I_poll", value );

    /* (0x00000008 bits 11) field PLL_LOCK_LOSS_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_I_set_to_clear", value );

    /* (0x00000008 bits 10) field PLL_LOCK_LOSS_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 10) field PLL_LOCK_LOSS_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_I_poll", value );

    /* (0x00000008 bits 10) field PLL_LOCK_LOSS_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_LOSS_INT_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_I_set_to_clear", value );

    /* (0x00000008 bits 9) field PLL_LOCK_GAIN_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 9) field PLL_LOCK_GAIN_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_I_poll", value );

    /* (0x00000008 bits 9) field PLL_LOCK_GAIN_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_I_set_to_clear", value );

    /* (0x00000008 bits 8) field PLL_LOCK_GAIN_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 8) field PLL_LOCK_GAIN_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_I_poll", value );

    /* (0x00000008 bits 8) field PLL_LOCK_GAIN_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PLL_LOCK_GAIN_INT_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_I_set_to_clear", value );

    /* (0x00000008 bits 7) field ADCOC_FSM_ERR_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 7) field ADCOC_FSM_ERR_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_I_poll", value );

    /* (0x00000008 bits 7) field ADCOC_FSM_ERR_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_I_set_to_clear", value );

    /* (0x00000008 bits 6) field ADCOC_FSM_ERR_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 6) field ADCOC_FSM_ERR_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_I_poll", value );

    /* (0x00000008 bits 6) field ADCOC_FSM_ERR_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_ADCOC_FSM_ERR_INT_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_PROG_REF_DONE_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PROG_REF_DONE_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_B_I_set_to_clear", value );

    /* (0x00000008 bits 5) field PROG_REF_DONE_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 5) field PROG_REF_DONE_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PROG_REF_DONE_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PROG_REF_DONE_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_B_I_poll", value );

    /* (0x00000008 bits 5) field PROG_REF_DONE_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_PROG_REF_DONE_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PROG_REF_DONE_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                      d8_rx_2x_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_A_I_set_to_clear", value );

    /* (0x00000008 bits 4) field PROG_REF_DONE_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 4) field PROG_REF_DONE_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PROG_REF_DONE_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PROG_REF_DONE_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_A_I_poll", value );

    /* (0x00000008 bits 4) field PROG_REF_DONE_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PROG_REF_DONE_INT_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_CALIB_DONE_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_CALIB_DONE_INT_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_B_I_set_to_clear", value );

    /* (0x00000008 bits 3) field CALIB_DONE_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 3) field CALIB_DONE_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_DONE_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_DONE_INT_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_B_I_poll", value );

    /* (0x00000008 bits 3) field CALIB_DONE_INT_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_CALIB_DONE_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_CALIB_DONE_INT_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_A_I_set_to_clear", value );

    /* (0x00000008 bits 2) field CALIB_DONE_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 2) field CALIB_DONE_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_DONE_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_DONE_INT_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_A_I_poll", value );

    /* (0x00000008 bits 2) field CALIB_DONE_INT_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_CALIB_DONE_INT_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_PATT_MON_ERR_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PATT_MON_ERR_B_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_B_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_B_I_set_to_clear", value );

    /* (0x00000008 bits 1) field PATT_MON_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_B_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_B_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_B_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 1) field PATT_MON_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_B_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_B_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_B_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PATT_MON_ERR_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PATT_MON_ERR_B_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PATT_MON_ERR_B_I_poll", value );

    /* (0x00000008 bits 1) field PATT_MON_ERR_B_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_B_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_B_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}

static INLINE void d8_rx_2x_field_PATT_MON_ERR_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_field_PATT_MON_ERR_A_I_set_to_clear( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_A_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_A_I_set_to_clear", value );

    /* (0x00000008 bits 0) field PATT_MON_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    d8_rx_2x_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                      h_ptr,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_A_I_MSK,
                                                      SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_A_I_OFF,
                                                      value);
}

static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_A_I_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 0) field PATT_MON_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_A_I_MSK) >> SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_A_I_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_A_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PATT_MON_ERR_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PATT_MON_ERR_A_I_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PATT_MON_ERR_A_I_poll", value );

    /* (0x00000008 bits 0) field PATT_MON_ERR_A_I of register PMC_SFI51_RX_2X_SLICE_REG_INT_REG_1 */
    return d8_rx_2x_reg_INT_REG_1_poll( b_ptr,
                                        h_ptr,
                                        SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_A_I_MSK,
                                        (value<<SFI51_RX_2X_SLICE_REG_INT_REG_1_BIT_PATT_MON_ERR_A_I_OFF),
                                        cmp,
                                        max_count,
                                        num_failed_polls,
                                        delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_value
 * ==================================================================================
 */
static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 29) field CALIB_PASS_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_PASS_INT_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_PASS_INT_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_PASS_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_PASS_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_B_V_poll", value );

    /* (0x00000010 bits 29) field CALIB_PASS_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_PASS_INT_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_PASS_INT_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_PASS_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 28) field CALIB_PASS_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_PASS_INT_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_PASS_INT_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_PASS_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_PASS_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_CALIB_PASS_INT_A_V_poll", value );

    /* (0x00000010 bits 28) field CALIB_PASS_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_PASS_INT_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_PASS_INT_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 27) field ADC_BIST_ERR_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_ERR_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_ERR_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_ERR_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_ERR_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_B_V_poll", value );

    /* (0x00000010 bits 27) field ADC_BIST_ERR_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_ERR_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_ERR_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_ERR_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 26) field ADC_BIST_ERR_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_ERR_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_ERR_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_ERR_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_ERR_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADC_BIST_ERR_A_V_poll", value );

    /* (0x00000010 bits 26) field ADC_BIST_ERR_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_ERR_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_ERR_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 25) field ADC_BIST_DONE_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_DONE_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_DONE_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_DONE_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_DONE_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_B_V_poll", value );

    /* (0x00000010 bits 25) field ADC_BIST_DONE_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_DONE_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_DONE_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_BIST_DONE_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 24) field ADC_BIST_DONE_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_DONE_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_DONE_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_DONE_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADC_BIST_DONE_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADC_BIST_DONE_A_V_poll", value );

    /* (0x00000010 bits 24) field ADC_BIST_DONE_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_DONE_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADC_BIST_DONE_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 23) field RAM_PARITY_ERR_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_RAM_PARITY_ERR_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_RAM_PARITY_ERR_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_RAM_PARITY_ERR_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_RAM_PARITY_ERR_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_B_V_poll", value );

    /* (0x00000010 bits 23) field RAM_PARITY_ERR_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_RAM_PARITY_ERR_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_RAM_PARITY_ERR_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAM_PARITY_ERR_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 22) field RAM_PARITY_ERR_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_RAM_PARITY_ERR_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_RAM_PARITY_ERR_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_RAM_PARITY_ERR_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_RAM_PARITY_ERR_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_RAM_PARITY_ERR_A_V_poll", value );

    /* (0x00000010 bits 22) field RAM_PARITY_ERR_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_RAM_PARITY_ERR_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_RAM_PARITY_ERR_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 21) field SIPO_BIST_SYNC_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_SYNC_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_SYNC_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_SYNC_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_SYNC_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_B_V_poll", value );

    /* (0x00000010 bits 21) field SIPO_BIST_SYNC_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_SYNC_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_SYNC_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_SYNC_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 20) field SIPO_BIST_SYNC_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_SYNC_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_SYNC_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_SYNC_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_SYNC_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_SIPO_BIST_SYNC_A_V_poll", value );

    /* (0x00000010 bits 20) field SIPO_BIST_SYNC_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_SYNC_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_SYNC_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 19) field SIPO_BIST_ERR_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_ERR_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_ERR_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_ERR_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_ERR_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_B_V_poll", value );

    /* (0x00000010 bits 19) field SIPO_BIST_ERR_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_ERR_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_ERR_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_SIPO_BIST_ERR_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 18) field SIPO_BIST_ERR_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_ERR_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_ERR_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_ERR_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_SIPO_BIST_ERR_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                          d8_rx_2x_handle_t *h_ptr,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_SIPO_BIST_ERR_A_V_poll", value );

    /* (0x00000010 bits 18) field SIPO_BIST_ERR_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_ERR_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_SIPO_BIST_ERR_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 17) field DIVCLK_DEAD_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_DIVCLK_DEAD_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_DIVCLK_DEAD_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_DIVCLK_DEAD_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_DIVCLK_DEAD_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_B_V_poll", value );

    /* (0x00000010 bits 17) field DIVCLK_DEAD_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_DIVCLK_DEAD_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_DIVCLK_DEAD_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DIVCLK_DEAD_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 16) field DIVCLK_DEAD_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_DIVCLK_DEAD_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_DIVCLK_DEAD_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_DIVCLK_DEAD_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_DIVCLK_DEAD_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_DIVCLK_DEAD_A_V_poll", value );

    /* (0x00000010 bits 16) field DIVCLK_DEAD_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_DIVCLK_DEAD_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_DIVCLK_DEAD_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 15) field IN_RANGEN_FAILS_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_FAILS_INT_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_FAILS_INT_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                d8_rx_2x_handle_t *h_ptr,
                                                                                UINT32 value,
                                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                                UINT32 max_count,
                                                                                UINT32 *num_failed_polls,
                                                                                UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                d8_rx_2x_handle_t *h_ptr,
                                                                                UINT32 value,
                                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                                UINT32 max_count,
                                                                                UINT32 *num_failed_polls,
                                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_B_V_poll", value );

    /* (0x00000010 bits 15) field IN_RANGEN_FAILS_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_FAILS_INT_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_FAILS_INT_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 14) field IN_RANGEN_FAILS_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_FAILS_INT_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_FAILS_INT_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                d8_rx_2x_handle_t *h_ptr,
                                                                                UINT32 value,
                                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                                UINT32 max_count,
                                                                                UINT32 *num_failed_polls,
                                                                                UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                d8_rx_2x_handle_t *h_ptr,
                                                                                UINT32 value,
                                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                                UINT32 max_count,
                                                                                UINT32 *num_failed_polls,
                                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_IN_RANGEN_FAILS_INT_A_V_poll", value );

    /* (0x00000010 bits 14) field IN_RANGEN_FAILS_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_FAILS_INT_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_FAILS_INT_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 13) field IN_RANGEN_PASSES_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_PASSES_INT_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_PASSES_INT_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                                 UINT32 value,
                                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                                 UINT32 max_count,
                                                                                 UINT32 *num_failed_polls,
                                                                                 UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                                 UINT32 value,
                                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                                 UINT32 max_count,
                                                                                 UINT32 *num_failed_polls,
                                                                                 UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_B_V_poll", value );

    /* (0x00000010 bits 13) field IN_RANGEN_PASSES_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_PASSES_INT_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_PASSES_INT_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 12) field IN_RANGEN_PASSES_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_PASSES_INT_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_PASSES_INT_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                                 UINT32 value,
                                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                                 UINT32 max_count,
                                                                                 UINT32 *num_failed_polls,
                                                                                 UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                                 UINT32 value,
                                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                                 UINT32 max_count,
                                                                                 UINT32 *num_failed_polls,
                                                                                 UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_IN_RANGEN_PASSES_INT_A_V_poll", value );

    /* (0x00000010 bits 12) field IN_RANGEN_PASSES_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_PASSES_INT_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_IN_RANGEN_PASSES_INT_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 11) field PLL_LOCK_LOSS_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_LOSS_INT_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_LOSS_INT_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_B_V_poll", value );

    /* (0x00000010 bits 11) field PLL_LOCK_LOSS_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_LOSS_INT_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_LOSS_INT_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 10) field PLL_LOCK_LOSS_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_LOSS_INT_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_LOSS_INT_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PLL_LOCK_LOSS_INT_A_V_poll", value );

    /* (0x00000010 bits 10) field PLL_LOCK_LOSS_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_LOSS_INT_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_LOSS_INT_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 9) field PLL_LOCK_GAIN_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_GAIN_INT_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_GAIN_INT_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_B_V_poll", value );

    /* (0x00000010 bits 9) field PLL_LOCK_GAIN_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_GAIN_INT_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_GAIN_INT_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 8) field PLL_LOCK_GAIN_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_GAIN_INT_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_GAIN_INT_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PLL_LOCK_GAIN_INT_A_V_poll", value );

    /* (0x00000010 bits 8) field PLL_LOCK_GAIN_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_GAIN_INT_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PLL_LOCK_GAIN_INT_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 7) field ADCOC_FSM_ERR_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADCOC_FSM_ERR_INT_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADCOC_FSM_ERR_INT_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_B_V_poll", value );

    /* (0x00000010 bits 7) field ADCOC_FSM_ERR_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADCOC_FSM_ERR_INT_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADCOC_FSM_ERR_INT_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 6) field ADCOC_FSM_ERR_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADCOC_FSM_ERR_INT_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADCOC_FSM_ERR_INT_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_ADCOC_FSM_ERR_INT_A_V_poll", value );

    /* (0x00000010 bits 6) field ADCOC_FSM_ERR_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADCOC_FSM_ERR_INT_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_ADCOC_FSM_ERR_INT_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 5) field PROG_REF_DONE_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PROG_REF_DONE_INT_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PROG_REF_DONE_INT_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PROG_REF_DONE_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PROG_REF_DONE_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_B_V_poll", value );

    /* (0x00000010 bits 5) field PROG_REF_DONE_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PROG_REF_DONE_INT_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PROG_REF_DONE_INT_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PROG_REF_DONE_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 4) field PROG_REF_DONE_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PROG_REF_DONE_INT_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PROG_REF_DONE_INT_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PROG_REF_DONE_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PROG_REF_DONE_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                              d8_rx_2x_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PROG_REF_DONE_INT_A_V_poll", value );

    /* (0x00000010 bits 4) field PROG_REF_DONE_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PROG_REF_DONE_INT_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PROG_REF_DONE_INT_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 3) field CALIB_DONE_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_DONE_INT_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_DONE_INT_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_DONE_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_DONE_INT_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_B_V_poll", value );

    /* (0x00000010 bits 3) field CALIB_DONE_INT_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_DONE_INT_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_DONE_INT_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_CALIB_DONE_INT_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 2) field CALIB_DONE_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_DONE_INT_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_DONE_INT_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_DONE_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_CALIB_DONE_INT_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                           d8_rx_2x_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_CALIB_DONE_INT_A_V_poll", value );

    /* (0x00000010 bits 2) field CALIB_DONE_INT_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_DONE_INT_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_CALIB_DONE_INT_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 1) field PATT_MON_ERR_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PATT_MON_ERR_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PATT_MON_ERR_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PATT_MON_ERR_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PATT_MON_ERR_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PATT_MON_ERR_B_V_poll", value );

    /* (0x00000010 bits 1) field PATT_MON_ERR_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PATT_MON_ERR_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PATT_MON_ERR_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PATT_MON_ERR_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 0) field PATT_MON_ERR_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PATT_MON_ERR_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PATT_MON_ERR_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_PATT_MON_ERR_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PATT_MON_ERR_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_PATT_MON_ERR_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                         d8_rx_2x_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_PATT_MON_ERR_A_V_poll", value );

    /* (0x00000010 bits 0) field PATT_MON_ERR_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1 */
    return d8_rx_2x_reg_INT_STAT_REG_1_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PATT_MON_ERR_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_1_BIT_PATT_MON_ERR_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 3) field LOS_OC_FAIL_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_FAIL_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_FAIL_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_FAIL_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_FAIL_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_B_V_poll", value );

    /* (0x0000001c bits 3) field LOS_OC_FAIL_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2 */
    return d8_rx_2x_reg_INT_STAT_REG_2_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_FAIL_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_FAIL_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_FAIL_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 2) field LOS_OC_FAIL_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_FAIL_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_FAIL_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_FAIL_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_FAIL_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_LOS_OC_FAIL_A_V_poll", value );

    /* (0x0000001c bits 2) field LOS_OC_FAIL_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2 */
    return d8_rx_2x_reg_INT_STAT_REG_2_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_FAIL_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_FAIL_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_B_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 1) field LOS_OC_PASS_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_PASS_B_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_PASS_B_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_B_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_PASS_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_PASS_B_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_LOS_OC_PASS_B_V_poll", value );

    /* (0x0000001c bits 1) field LOS_OC_PASS_B_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2 */
    return d8_rx_2x_reg_INT_STAT_REG_2_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_PASS_B_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_PASS_B_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}

static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_OC_PASS_A_V_get( d8_rx_2x_buffer_t *b_ptr, d8_rx_2x_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 0) field LOS_OC_PASS_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2 */
    reg_value = d8_rx_2x_reg_INT_STAT_REG_2_read(  b_ptr, h_ptr);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_PASS_A_V_MSK) >> SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_PASS_A_V_OFF;
    IOLOG( "%s -> 0x%08x", "d8_rx_2x_field_LOS_OC_PASS_A_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_PASS_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE d8_rx_2x_field_LOS_OC_PASS_A_V_poll( d8_rx_2x_buffer_t *b_ptr,
                                                                        d8_rx_2x_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "d8_rx_2x_field_LOS_OC_PASS_A_V_poll", value );

    /* (0x0000001c bits 0) field LOS_OC_PASS_A_V of register PMC_SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2 */
    return d8_rx_2x_reg_INT_STAT_REG_2_poll( b_ptr,
                                             h_ptr,
                                             SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_PASS_A_V_MSK,
                                             (value<<SFI51_RX_2X_SLICE_REG_INT_STAT_REG_2_BIT_LOS_OC_PASS_A_V_OFF),
                                             cmp,
                                             max_count,
                                             num_failed_polls,
                                             delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status_N_burstsize2
 * ==================================================================================
 */
static INLINE void d8_rx_2x_lfield_MON_ERR_CNT_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value[2] ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_MON_ERR_CNT_get( d8_rx_2x_buffer_t *b_ptr,
                                                    d8_rx_2x_handle_t *h_ptr,
                                                    UINT32 value[2] )
{
    IOLOG( "%s ", "d8_rx_2x_lfield_MON_ERR_CNT_get");
    d8_rx_2x_reg_PATTERN_MON_ERR_CNT_1_array_burst_read( b_ptr,
                                                         h_ptr,
                                                         0,
                                                         2,
                                                         (UINT32 *)value);
}

static INLINE UINT32 d8_rx_2x_lfield_range_MON_ERR_CNT_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_lfield_range_MON_ERR_CNT_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "d8_rx_2x_lfield_range_MON_ERR_CNT_get", start_bit, stop_bit );
    }
    reg_value = d8_rx_2x_reg_PATTERN_MON_ERR_CNT_1_array_read( b_ptr,
                                                               h_ptr,
                                                               word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "d8_rx_2x_lfield_range_MON_ERR_CNT_get", start_bit, stop_bit, value );
    return value;
}

static INLINE void d8_rx_2x_lfield_RAMCAPT_RD_DATA_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_RAMCAPT_RD_DATA_get( d8_rx_2x_buffer_t *b_ptr,
                                                        d8_rx_2x_handle_t *h_ptr,
                                                        UINT32 value[2] )
{
    IOLOG( "%s ", "d8_rx_2x_lfield_RAMCAPT_RD_DATA_get");
    d8_rx_2x_reg_RAM_CAPTURE_READ_DATA_REG_array_burst_read( b_ptr,
                                                             h_ptr,
                                                             0,
                                                             2,
                                                             (UINT32 *)value);
}

static INLINE UINT32 d8_rx_2x_lfield_range_RAMCAPT_RD_DATA_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_lfield_range_RAMCAPT_RD_DATA_get( d8_rx_2x_buffer_t *b_ptr,
                                                                d8_rx_2x_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "d8_rx_2x_lfield_range_RAMCAPT_RD_DATA_get", start_bit, stop_bit );
    }
    reg_value = d8_rx_2x_reg_RAM_CAPTURE_READ_DATA_REG_array_read( b_ptr,
                                                                   h_ptr,
                                                                   word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "d8_rx_2x_lfield_range_RAMCAPT_RD_DATA_get", start_bit, stop_bit, value );
    return value;
}

static INLINE void d8_rx_2x_lfield_HHIST_PERBIN_VALUE_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32 value[2] ) ALWAYS_INLINE;
static INLINE void d8_rx_2x_lfield_HHIST_PERBIN_VALUE_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32 value[2] )
{
    IOLOG( "%s ", "d8_rx_2x_lfield_HHIST_PERBIN_VALUE_get");
    d8_rx_2x_reg_DIAG_HHIST_VAL_REG_array_burst_read( b_ptr,
                                                      h_ptr,
                                                      0,
                                                      2,
                                                      (UINT32 *)value);
}

static INLINE UINT32 d8_rx_2x_lfield_range_HHIST_PERBIN_VALUE_get( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_lfield_range_HHIST_PERBIN_VALUE_get( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "d8_rx_2x_lfield_range_HHIST_PERBIN_VALUE_get", start_bit, stop_bit );
    }
    reg_value = d8_rx_2x_reg_DIAG_HHIST_VAL_REG_array_read( b_ptr,
                                                            h_ptr,
                                                            word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "d8_rx_2x_lfield_range_HHIST_PERBIN_VALUE_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status_N_size2
 * ==================================================================================
 */
static INLINE UINT32 d8_rx_2x_field_RAMS_DATA_RD_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_RAMS_DATA_RD_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_RAMS_DATA_RD_get", N, 1);
    /* ((0x00000024 + (N) * 0x4) bits 27:20) field RAMS_DATA_RD of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_RD_MSK) >> SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_RD_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_RAMS_DATA_RD_get", N, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_range_RAMS_DATA_RD_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_RAMS_DATA_RD_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_RAMS_DATA_RD_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_RAMS_DATA_RD_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_RAMS_DATA_RD_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000024 + (N) * 0x4) bits 27:20) field RAMS_DATA_RD of register PMC_SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_EFUSE_INT_CFG_REG_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_RD_MSK)
                  >> SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_RD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_RD_MSK, SFI51_RX_2X_SLICE_REG_EFUSE_INT_CFG_REG_BIT_RAMS_DATA_RD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_RAMS_DATA_RD_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_ADC_Q_get( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_ADC_Q_get( d8_rx_2x_buffer_t *b_ptr,
                                               d8_rx_2x_handle_t *h_ptr,
                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_ADC_Q_get", N, 1);
    /* ((0x00000044 + (N) * 0x4) bits 31:24) field ADC_Q of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_3_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_Q_MSK) >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_Q_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_ADC_Q_get", N, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_range_ADC_Q_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_ADC_Q_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_ADC_Q_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_ADC_Q_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_ADC_Q_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000044 + (N) * 0x4) bits 31:24) field ADC_Q of register PMC_SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_ADC_OC_CFG_3_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_Q_MSK)
                  >> SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_Q_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_Q_MSK, SFI51_RX_2X_SLICE_REG_ADC_OC_CFG_3_BIT_ADC_Q_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_ADC_Q_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_PPM_OFF_SIGN_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PPM_OFF_SIGN_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PPM_OFF_SIGN_get", N, 1);
    /* ((0x00000064 + (N) * 0x4) bits 20) field PPM_OFF_SIGN of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PPM_OFF_SIGN_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PPM_OFF_SIGN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_PPM_OFF_SIGN_get", N, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_PPM_OFF_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_PPM_OFF_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                     d8_rx_2x_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_PPM_OFF_VAL_get", N, 1);
    /* ((0x00000064 + (N) * 0x4) bits 19:1) field PPM_OFF_VAL of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PPM_OFF_VAL_MSK) >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PPM_OFF_VAL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_PPM_OFF_VAL_get", N, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_range_PPM_OFF_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_PPM_OFF_VAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                           d8_rx_2x_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_PPM_OFF_VAL_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_PPM_OFF_VAL_get", stop_bit, start_bit );
    if (stop_bit > 18) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_PPM_OFF_VAL_get", stop_bit, 18 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 18) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 18;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000064 + (N) * 0x4) bits 19:1) field PPM_OFF_VAL of register PMC_SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3 index N=0..1 */
    reg_value = d8_rx_2x_reg_RXCPGEN_LOCK_DETECTOR_CFG_3_array_read( b_ptr,
                                                                     h_ptr,
                                                                     N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PPM_OFF_VAL_MSK)
                  >> SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PPM_OFF_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PPM_OFF_VAL_MSK, SFI51_RX_2X_SLICE_REG_RXCPGEN_LOCK_DETECTOR_CFG_3_BIT_PPM_OFF_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_PPM_OFF_VAL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_HHIST_READBACK_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_HHIST_READBACK_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                             d8_rx_2x_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_HHIST_READBACK_ADDR_get", N, 1);
    /* ((0x000000c4 + (N) * 0x4) bits 11:8) field HHIST_READBACK_ADDR of register PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_HHIST_CTRL_REG_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_READBACK_ADDR_MSK) >> SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_READBACK_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_HHIST_READBACK_ADDR_get", N, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_range_HHIST_READBACK_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_HHIST_READBACK_ADDR_get( d8_rx_2x_buffer_t *b_ptr,
                                                                   d8_rx_2x_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_HHIST_READBACK_ADDR_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_HHIST_READBACK_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_HHIST_READBACK_ADDR_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000c4 + (N) * 0x4) bits 11:8) field HHIST_READBACK_ADDR of register PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_HHIST_CTRL_REG_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_READBACK_ADDR_MSK)
                  >> SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_READBACK_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_READBACK_ADDR_MSK, SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_READBACK_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_HHIST_READBACK_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_HHIST_PERBIN_VALUE_OVFL_get( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_HHIST_PERBIN_VALUE_OVFL_get( d8_rx_2x_buffer_t *b_ptr,
                                                                 d8_rx_2x_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_HHIST_PERBIN_VALUE_OVFL_get", N, 1);
    /* ((0x000000c4 + (N) * 0x4) bits 7) field HHIST_PERBIN_VALUE_OVFL of register PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_HHIST_CTRL_REG_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_PERBIN_VALUE_OVFL_MSK) >> SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_PERBIN_VALUE_OVFL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_HHIST_PERBIN_VALUE_OVFL_get", N, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_HHIST_CAPT_RUNNING_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_HHIST_CAPT_RUNNING_get( d8_rx_2x_buffer_t *b_ptr,
                                                            d8_rx_2x_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_HHIST_CAPT_RUNNING_get", N, 1);
    /* ((0x000000c4 + (N) * 0x4) bits 3) field HHIST_CAPT_RUNNING of register PMC_SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG index N=0..1 */
    reg_value = d8_rx_2x_reg_HHIST_CTRL_REG_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_CAPT_RUNNING_MSK) >> SFI51_RX_2X_SLICE_REG_HHIST_CTRL_REG_BIT_HHIST_CAPT_RUNNING_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_HHIST_CAPT_RUNNING_get", N, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_DC_JTAG_OUTN_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DC_JTAG_OUTN_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_DC_JTAG_OUTN_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 2) field DC_JTAG_OUTN of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_DC_JTAG_OUTN_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_DC_JTAG_OUTN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_DC_JTAG_OUTN_get", N, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_DC_JTAG_OUTP_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_DC_JTAG_OUTP_get( d8_rx_2x_buffer_t *b_ptr,
                                                      d8_rx_2x_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_DC_JTAG_OUTP_get", N, 1);
    /* ((0x000000ec + (N) * 0x4) bits 1) field DC_JTAG_OUTP of register PMC_SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_SFI5_1_RX_2X_MABC_CFG_1_array_read( b_ptr,
                                                                 h_ptr,
                                                                 N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_DC_JTAG_OUTP_MSK) >> SFI51_RX_2X_SLICE_REG_SFI5_1_RX_2X_MABC_CFG_1_BIT_DC_JTAG_OUTP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_DC_JTAG_OUTP_get", N, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_LOS_DAC_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_DAC_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_DAC_get", N, 1);
    /* ((0x00000100 + (N) * 0x4) bits 30:25) field LOS_DAC of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_DAC_get", N, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_range_LOS_DAC_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_range_LOS_DAC_get( d8_rx_2x_buffer_t *b_ptr,
                                                       d8_rx_2x_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_range_LOS_DAC_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "d8_rx_2x_field_range_LOS_DAC_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "d8_rx_2x_field_range_LOS_DAC_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 0x4) bits 30:25) field LOS_DAC of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MSK)
                  >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_MSK, SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_DAC_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "d8_rx_2x_field_range_LOS_DAC_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 d8_rx_2x_field_LOS_CAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 d8_rx_2x_field_LOS_CAL_get( d8_rx_2x_buffer_t *b_ptr,
                                                 d8_rx_2x_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "d8_rx_2x_field_LOS_CAL_get", N, 1);
    /* ((0x00000100 + (N) * 0x4) bits 24) field LOS_CAL of register PMC_SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1 index N=0..1 */
    reg_value = d8_rx_2x_reg_LOS_OC_CFG_1_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_CAL_MSK) >> SFI51_RX_2X_SLICE_REG_LOS_OC_CFG_1_BIT_LOS_CAL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "d8_rx_2x_field_LOS_CAL_get", N, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _D8_RX_2X_IO_INLINE_H */
