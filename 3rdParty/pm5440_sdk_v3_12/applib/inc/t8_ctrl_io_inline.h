/******************************************************************************
 *   COPYRIGHT (C) 2013 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the t8_ctrl block
 *****************************************************************************/
#ifndef _T8_CTRL_IO_INLINE_H
#define _T8_CTRL_IO_INLINE_H

#include "t8.h"
#include "t8_ctrl_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define T8_CTRL_IO_VERSION 2

/*
 * ==================================================================================
 *  tsb level structure and access functions for t8_ctrl
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) LOG( __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) LOG( "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) LOG_DATA( __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    t8_handle_t * h_ptr;
    pmc_sys_handle_t * sys_handle;
    PMC_VAR_CONST UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} t8_ctrl_buffer_t;
static INLINE void t8_ctrl_buffer_init( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ALWAYS_INLINE;
static INLINE void t8_ctrl_buffer_init( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = ((pmc_handle_t *)h_ptr)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s", "t8_ctrl_buffer_init");
    
}

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void t8_ctrl_buffer_flush( t8_ctrl_buffer_t *b_ptr ) ALWAYS_INLINE;
static INLINE void t8_ctrl_buffer_flush( t8_ctrl_buffer_t *b_ptr )
{
    IOLOG( "t8_ctrl_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 t8_ctrl_reg_read( t8_ctrl_buffer_t *b_ptr,
                                       t8_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg ) ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_read( t8_ctrl_buffer_t *b_ptr,
                                       t8_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                b_ptr->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h_ptr)->base_address + reg);
    return value;
}
static INLINE void t8_ctrl_reg_write( t8_ctrl_buffer_t *b_ptr,
                                      t8_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_write( t8_ctrl_buffer_t *b_ptr,
                                      t8_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         b_ptr->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value);
}

static INLINE void t8_ctrl_field_set( t8_ctrl_buffer_t *b_ptr,
                                      t8_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 mask,
                                      UINT32 unused_mask,
                                      UINT32 ofs,
                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_set( t8_ctrl_buffer_t *b_ptr,
                                      t8_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 mask,
                                      UINT32 unused_mask,
                                      UINT32 ofs,
                                      UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h_ptr)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void t8_ctrl_action_on_write_field_set( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32 mem_type,
                                                      UINT32 reg,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_action_on_write_field_set( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32 mem_type,
                                                      UINT32 reg,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         b_ptr->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value<<ofs);
}

static INLINE void t8_ctrl_burst_read( t8_ctrl_buffer_t *b_ptr,
                                       t8_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 len,
                                       UINT32 *value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_burst_read( t8_ctrl_buffer_t *b_ptr,
                                       t8_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 len,
                                       UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h_ptr)->base_address + reg,
                          len,
                          value);
}

static INLINE void t8_ctrl_burst_write( t8_ctrl_buffer_t *b_ptr,
                                        t8_handle_t *h_ptr,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 len,
                                        UINT32 *value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_burst_write( t8_ctrl_buffer_t *b_ptr,
                                        t8_handle_t *h_ptr,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 len,
                                        UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_poll( t8_ctrl_buffer_t *b_ptr,
                                                 t8_handle_t *h_ptr,
                                                 UINT32 mem_type,
                                                 UINT32 reg,
                                                 UINT32 mask,
                                                 UINT32 value,
                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                 UINT32 max_count,
                                                 UINT32 *num_failed_polls,
                                                 UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_poll( t8_ctrl_buffer_t *b_ptr,
                                                 t8_handle_t *h_ptr,
                                                 UINT32 mem_type,
                                                 UINT32 reg,
                                                 UINT32 mask,
                                                 UINT32 value,
                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                 UINT32 max_count,
                                                 UINT32 *num_failed_polls,
                                                 UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for t8_ctrl
 * ==================================================================================
 */

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_write( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_write( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40,
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_field_set", mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40,
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_read( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40);

    IOLOG( "%s -> 0x%08x;", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_read", reg_value);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_write( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_write( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1(N),
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                               t8_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                               t8_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set", N, mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1(N),
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( t8_ctrl_buffer_t *b_ptr,
                                                                            t8_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( t8_ctrl_buffer_t *b_ptr,
                                                                            t8_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_write( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_write( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2(N),
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                               t8_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                               t8_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set", N, mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2(N),
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( t8_ctrl_buffer_t *b_ptr,
                                                                            t8_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( t8_ctrl_buffer_t *b_ptr,
                                                                            t8_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_write( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_write( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3(N),
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                               t8_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                               t8_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set", N, mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3(N),
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( t8_ctrl_buffer_t *b_ptr,
                                                                            t8_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( t8_ctrl_buffer_t *b_ptr,
                                                                            t8_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_CONFIG,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3(N));

    IOLOG( "%s -> 0x%08x; N=%d", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read", reg_value, N);
    return reg_value;
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_write( t8_ctrl_buffer_t *b_ptr,
                                                                                    t8_handle_t *h_ptr,
                                                                                    UINT32  N,
                                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_write( t8_ctrl_buffer_t *b_ptr,
                                                                                    t8_handle_t *h_ptr,
                                                                                    UINT32  N,
                                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_STATUS,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_(N),
                       value);
}

static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                                        t8_handle_t *h_ptr,
                                                                                        UINT32  N,
                                                                                        UINT32 mask,
                                                                                        UINT32 ofs,
                                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                                        t8_handle_t *h_ptr,
                                                                                        UINT32  N,
                                                                                        UINT32 mask,
                                                                                        UINT32 ofs,
                                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_field_set", N, mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_STATUS,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_(N),
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( t8_ctrl_buffer_t *b_ptr,
                                                                                     t8_handle_t *h_ptr,
                                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( t8_ctrl_buffer_t *b_ptr,
                                                                                     t8_handle_t *h_ptr,
                                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_STATUS,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_(N));

    IOLOG( "%s -> 0x%08x; N=%d", "t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read", reg_value, N);
    return reg_value;
}

static INLINE void t8_ctrl_reg_STAT_INT_EVENT_array_write( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_STAT_INT_EVENT_array_write( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_STAT_INT_EVENT_array_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_STATUS,
                       PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT(N),
                       value);
}

static INLINE void t8_ctrl_reg_STAT_INT_EVENT_array_action_on_write_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                               t8_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_STAT_INT_EVENT_array_action_on_write_field_set( t8_ctrl_buffer_t *b_ptr,
                                                                               t8_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_STAT_INT_EVENT_array_action_on_write_field_set", N, mask, ofs, value );
    t8_ctrl_action_on_write_field_set( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_STATUS,
                                       PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT(N),
                                       mask,
                                       ofs,
                                       value);

}

static INLINE UINT32 t8_ctrl_reg_STAT_INT_EVENT_array_read( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_STAT_INT_EVENT_array_read( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_STATUS,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "t8_ctrl_reg_STAT_INT_EVENT_array_read", reg_value, N);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_reg_STAT_INT_EVENT_array_poll( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 mask,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_reg_STAT_INT_EVENT_array_poll( t8_ctrl_buffer_t *b_ptr,
                                                                          t8_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 mask,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "t8_ctrl_reg_STAT_INT_EVENT_array_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return t8_ctrl_poll( b_ptr,
                         h_ptr,
                         MEM_TYPE_STATUS,
                         PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT(N),
                         mask,
                         value,
                         cmp,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


static INLINE void t8_ctrl_reg_STAT_INT_EN_array_write( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_STAT_INT_EN_array_write( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_ctrl_reg_STAT_INT_EN_array_write", value );
    t8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       MEM_TYPE_STATUS,
                       PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN(N),
                       value);
}

static INLINE void t8_ctrl_reg_STAT_INT_EN_array_field_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_reg_STAT_INT_EN_array_field_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "t8_ctrl_reg_STAT_INT_EN_array_field_set", N, mask, ofs, value );
    t8_ctrl_field_set( b_ptr,
                       h_ptr,
                       MEM_TYPE_STATUS,
                       PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN(N),
                       mask,
                       PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 t8_ctrl_reg_STAT_INT_EN_array_read( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_STAT_INT_EN_array_read( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_STATUS,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN(N));

    IOLOG( "%s -> 0x%08x; N=%d", "t8_ctrl_reg_STAT_INT_EN_array_read", reg_value, N);
    return reg_value;
}

static INLINE UINT32 t8_ctrl_reg_STAT_INT_array_read( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_reg_STAT_INT_array_read( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 reg_value;

    reg_value = t8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  MEM_TYPE_STATUS,
                                  PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "t8_ctrl_reg_STAT_INT_array_read", reg_value, N);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_reg_STAT_INT_array_poll( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_reg_STAT_INT_array_poll( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "t8_ctrl_reg_STAT_INT_array_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return t8_ctrl_poll( b_ptr,
                         h_ptr,
                         MEM_TYPE_STATUS,
                         PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT(N),
                         mask,
                         value,
                         cmp,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */
static INLINE void t8_ctrl_field_FFE_CONSTRAINED_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_FFE_CONSTRAINED_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_FFE_CONSTRAINED_MODE3_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_FFE_CONSTRAINED_MODE3_set", value );

    /* (0x00000740 bits 15) field FFE_CONSTRAINED_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_FFE_CONSTRAINED_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_FFE_CONSTRAINED_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 15) field FFE_CONSTRAINED_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_FFE_CONSTRAINED_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_FFE_CONSTRAINED_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_FFE_CONSTRAINED_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_FFE_CONSTRAINED_MODE2_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_FFE_CONSTRAINED_MODE2_set", value );

    /* (0x00000740 bits 14) field FFE_CONSTRAINED_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_FFE_CONSTRAINED_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_FFE_CONSTRAINED_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 14) field FFE_CONSTRAINED_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_FFE_CONSTRAINED_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_FFE_CONSTRAINED_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_FFE_CONSTRAINED_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_FFE_CONSTRAINED_MODE1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_FFE_CONSTRAINED_MODE1_set", value );

    /* (0x00000740 bits 13) field FFE_CONSTRAINED_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_FFE_CONSTRAINED_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_FFE_CONSTRAINED_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 13) field FFE_CONSTRAINED_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_FFE_CONSTRAINED_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_FFE_CONSTRAINED_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_DP_ADAPT_ORDER_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_ADAPT_ORDER_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_ADAPT_ORDER_MODE3_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_ADAPT_ORDER_MODE3_set", value );

    /* (0x00000740 bits 12) field DP_ADAPT_ORDER_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_DP_ADAPT_ORDER_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_ADAPT_ORDER_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 12) field DP_ADAPT_ORDER_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_ADAPT_ORDER_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_DP_ADAPT_ORDER_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_ADAPT_ORDER_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_ADAPT_ORDER_MODE2_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_ADAPT_ORDER_MODE2_set", value );

    /* (0x00000740 bits 11) field DP_ADAPT_ORDER_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_DP_ADAPT_ORDER_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_ADAPT_ORDER_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 11) field DP_ADAPT_ORDER_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_ADAPT_ORDER_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_DP_ADAPT_ORDER_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_ADAPT_ORDER_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_ADAPT_ORDER_MODE1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_ADAPT_ORDER_MODE1_set", value );

    /* (0x00000740 bits 10) field DP_ADAPT_ORDER_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_DP_ADAPT_ORDER_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_ADAPT_ORDER_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 10) field DP_ADAPT_ORDER_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DP_ADAPT_ORDER_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_ADAPT_ORDER_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_L0_ENB_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_L0_ENB_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_L0_ENB_MODE3_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_L0_ENB_MODE3_set", value );

    /* (0x00000740 bits 9) field ADAPT_L0_ENB_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_L0_ENB_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_L0_ENB_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 9) field ADAPT_L0_ENB_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_L0_ENB_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_L0_ENB_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_L0_ENB_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_L0_ENB_MODE2_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_L0_ENB_MODE2_set", value );

    /* (0x00000740 bits 8) field ADAPT_L0_ENB_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_L0_ENB_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_L0_ENB_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 8) field ADAPT_L0_ENB_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_L0_ENB_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_L0_ENB_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_L0_ENB_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_L0_ENB_MODE1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_L0_ENB_MODE1_set", value );

    /* (0x00000740 bits 7) field ADAPT_L0_ENB_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_L0_ENB_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_L0_ENB_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 7) field ADAPT_L0_ENB_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_ENB_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_L0_ENB_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_DSS_ENB_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DSS_ENB_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DSS_ENB_MODE3_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DSS_ENB_MODE3_set", value );

    /* (0x00000740 bits 6) field DSS_ENB_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_DSS_ENB_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DSS_ENB_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 6) field DSS_ENB_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DSS_ENB_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_DSS_ENB_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DSS_ENB_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DSS_ENB_MODE2_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DSS_ENB_MODE2_set", value );

    /* (0x00000740 bits 5) field DSS_ENB_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_DSS_ENB_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DSS_ENB_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 5) field DSS_ENB_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DSS_ENB_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_DSS_ENB_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DSS_ENB_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DSS_ENB_MODE1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DSS_ENB_MODE1_set", value );

    /* (0x00000740 bits 4) field DSS_ENB_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_DSS_ENB_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DSS_ENB_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 4) field DSS_ENB_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_DSS_ENB_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DSS_ENB_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_L0_CNTR_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_L0_CNTR_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_L0_CNTR_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_L0_CNTR_set", value );

    /* (0x00000740 bits 3:0) field ADAPT_L0_CNTR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_L0_CNTR_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_L0_CNTR_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000740 bits 3:0) field ADAPT_L0_CNTR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_L0_CNTR_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_L0_CNTR_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_L0_CNTR_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_L0_CNTR_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_L0_CNTR_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_L0_CNTR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000740 bits 3:0) field ADAPT_L0_CNTR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000740 bits 3:0) field ADAPT_L0_CNTR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_L0_CNTR_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_L0_CNTR_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_L0_CNTR_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_L0_CNTR_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000740 bits 3:0) field ADAPT_L0_CNTR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_L0_CNTR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS5_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS5_set", value );

    /* (0x00000744 bits 17:15) field MU_STEP_GAIN_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS5_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS5_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000744 bits 17:15) field MU_STEP_GAIN_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS5_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS5_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000744 bits 17:15) field MU_STEP_GAIN_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000744 bits 17:15) field MU_STEP_GAIN_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS5_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS5_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS5_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS5_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000744 bits 17:15) field MU_STEP_GAIN_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS4_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS4_set", value );

    /* (0x00000744 bits 14:12) field MU_STEP_GAIN_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS4_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS4_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000744 bits 14:12) field MU_STEP_GAIN_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS4_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS4_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000744 bits 14:12) field MU_STEP_GAIN_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000744 bits 14:12) field MU_STEP_GAIN_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS4_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS4_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS4_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS4_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000744 bits 14:12) field MU_STEP_GAIN_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS3_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS3_set", value );

    /* (0x00000744 bits 11:9) field MU_STEP_GAIN_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000744 bits 11:9) field MU_STEP_GAIN_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS3_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000744 bits 11:9) field MU_STEP_GAIN_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000744 bits 11:9) field MU_STEP_GAIN_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS3_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS3_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000744 bits 11:9) field MU_STEP_GAIN_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS2_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS2_set", value );

    /* (0x00000744 bits 8:6) field MU_STEP_GAIN_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000744 bits 8:6) field MU_STEP_GAIN_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS2_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000744 bits 8:6) field MU_STEP_GAIN_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000744 bits 8:6) field MU_STEP_GAIN_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS2_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS2_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000744 bits 8:6) field MU_STEP_GAIN_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS1_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS1_set", value );

    /* (0x00000744 bits 5:3) field MU_STEP_GAIN_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000744 bits 5:3) field MU_STEP_GAIN_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS1_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000744 bits 5:3) field MU_STEP_GAIN_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000744 bits 5:3) field MU_STEP_GAIN_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS1_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS1_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000744 bits 5:3) field MU_STEP_GAIN_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_GAIN_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS0_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS0_set", value );

    /* (0x00000744 bits 2:0) field MU_STEP_GAIN_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS0_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS0_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_GAIN_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000744 bits 2:0) field MU_STEP_GAIN_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_GAIN_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_GAIN_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000744 bits 2:0) field MU_STEP_GAIN_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000744 bits 2:0) field MU_STEP_GAIN_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS0_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS0_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_GAIN_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_GAIN_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000744 bits 2:0) field MU_STEP_GAIN_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_GAIN_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_GAIN_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS5_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS5_set", value );

    /* (0x00000748 bits 17:15) field MU_STEP_OFFSET_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS5_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS5_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000748 bits 17:15) field MU_STEP_OFFSET_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS5_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS5_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000748 bits 17:15) field MU_STEP_OFFSET_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000748 bits 17:15) field MU_STEP_OFFSET_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS5_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS5_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS5_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS5_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000748 bits 17:15) field MU_STEP_OFFSET_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS4_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS4_set", value );

    /* (0x00000748 bits 14:12) field MU_STEP_OFFSET_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS4_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS4_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000748 bits 14:12) field MU_STEP_OFFSET_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS4_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS4_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000748 bits 14:12) field MU_STEP_OFFSET_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000748 bits 14:12) field MU_STEP_OFFSET_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS4_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS4_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS4_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS4_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000748 bits 14:12) field MU_STEP_OFFSET_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS3_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS3_set", value );

    /* (0x00000748 bits 11:9) field MU_STEP_OFFSET_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000748 bits 11:9) field MU_STEP_OFFSET_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS3_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000748 bits 11:9) field MU_STEP_OFFSET_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000748 bits 11:9) field MU_STEP_OFFSET_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS3_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS3_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000748 bits 11:9) field MU_STEP_OFFSET_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS2_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS2_set", value );

    /* (0x00000748 bits 8:6) field MU_STEP_OFFSET_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000748 bits 8:6) field MU_STEP_OFFSET_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS2_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000748 bits 8:6) field MU_STEP_OFFSET_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000748 bits 8:6) field MU_STEP_OFFSET_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS2_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS2_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000748 bits 8:6) field MU_STEP_OFFSET_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS1_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS1_set", value );

    /* (0x00000748 bits 5:3) field MU_STEP_OFFSET_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000748 bits 5:3) field MU_STEP_OFFSET_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS1_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000748 bits 5:3) field MU_STEP_OFFSET_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000748 bits 5:3) field MU_STEP_OFFSET_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS1_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS1_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000748 bits 5:3) field MU_STEP_OFFSET_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_OFFSET_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS0_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS0_set", value );

    /* (0x00000748 bits 2:0) field MU_STEP_OFFSET_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS0_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS0_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_OFFSET_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000748 bits 2:0) field MU_STEP_OFFSET_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_OFFSET_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_OFFSET_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000748 bits 2:0) field MU_STEP_OFFSET_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000748 bits 2:0) field MU_STEP_OFFSET_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS0_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS0_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_OFFSET_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000748 bits 2:0) field MU_STEP_OFFSET_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_3_BIT_MU_STEP_OFFSET_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_OFFSET_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS5_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS5_set", value );

    /* (0x0000074c bits 17:15) field MU_STEP_COEF_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS5_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS5_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000074c bits 17:15) field MU_STEP_COEF_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS5_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS5_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000074c bits 17:15) field MU_STEP_COEF_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000074c bits 17:15) field MU_STEP_COEF_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS5_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS5_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS5_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS5_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000074c bits 17:15) field MU_STEP_COEF_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS4_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS4_set", value );

    /* (0x0000074c bits 14:12) field MU_STEP_COEF_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS4_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS4_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000074c bits 14:12) field MU_STEP_COEF_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS4_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS4_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000074c bits 14:12) field MU_STEP_COEF_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000074c bits 14:12) field MU_STEP_COEF_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS4_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS4_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS4_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS4_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000074c bits 14:12) field MU_STEP_COEF_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS3_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS3_set", value );

    /* (0x0000074c bits 11:9) field MU_STEP_COEF_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000074c bits 11:9) field MU_STEP_COEF_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS3_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000074c bits 11:9) field MU_STEP_COEF_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000074c bits 11:9) field MU_STEP_COEF_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS3_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS3_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000074c bits 11:9) field MU_STEP_COEF_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS2_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS2_set", value );

    /* (0x0000074c bits 8:6) field MU_STEP_COEF_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000074c bits 8:6) field MU_STEP_COEF_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS2_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000074c bits 8:6) field MU_STEP_COEF_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000074c bits 8:6) field MU_STEP_COEF_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS2_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS2_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000074c bits 8:6) field MU_STEP_COEF_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS1_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS1_set", value );

    /* (0x0000074c bits 5:3) field MU_STEP_COEF_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000074c bits 5:3) field MU_STEP_COEF_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS1_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000074c bits 5:3) field MU_STEP_COEF_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000074c bits 5:3) field MU_STEP_COEF_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS1_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS1_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000074c bits 5:3) field MU_STEP_COEF_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_COEF_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS0_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS0_set", value );

    /* (0x0000074c bits 2:0) field MU_STEP_COEF_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS0_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS0_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_COEF_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000074c bits 2:0) field MU_STEP_COEF_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_COEF_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_COEF_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000074c bits 2:0) field MU_STEP_COEF_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000074c bits 2:0) field MU_STEP_COEF_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS0_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS0_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_COEF_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_COEF_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_COEF_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000074c bits 2:0) field MU_STEP_COEF_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_4_BIT_MU_STEP_COEF_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_COEF_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS5_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS5_set", value );

    /* (0x00000750 bits 17:15) field MU_STEP_ADC_MAP_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS5_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS5_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000750 bits 17:15) field MU_STEP_ADC_MAP_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS5_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS5_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000750 bits 17:15) field MU_STEP_ADC_MAP_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000750 bits 17:15) field MU_STEP_ADC_MAP_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS5_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS5_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS5_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS5_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000750 bits 17:15) field MU_STEP_ADC_MAP_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS4_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS4_set", value );

    /* (0x00000750 bits 14:12) field MU_STEP_ADC_MAP_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS4_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS4_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000750 bits 14:12) field MU_STEP_ADC_MAP_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS4_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS4_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000750 bits 14:12) field MU_STEP_ADC_MAP_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000750 bits 14:12) field MU_STEP_ADC_MAP_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS4_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS4_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS4_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS4_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000750 bits 14:12) field MU_STEP_ADC_MAP_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS3_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS3_set", value );

    /* (0x00000750 bits 11:9) field MU_STEP_ADC_MAP_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000750 bits 11:9) field MU_STEP_ADC_MAP_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000750 bits 11:9) field MU_STEP_ADC_MAP_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000750 bits 11:9) field MU_STEP_ADC_MAP_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS3_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS3_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000750 bits 11:9) field MU_STEP_ADC_MAP_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS2_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS2_set", value );

    /* (0x00000750 bits 8:6) field MU_STEP_ADC_MAP_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000750 bits 8:6) field MU_STEP_ADC_MAP_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000750 bits 8:6) field MU_STEP_ADC_MAP_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000750 bits 8:6) field MU_STEP_ADC_MAP_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS2_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS2_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000750 bits 8:6) field MU_STEP_ADC_MAP_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS1_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS1_set", value );

    /* (0x00000750 bits 5:3) field MU_STEP_ADC_MAP_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000750 bits 5:3) field MU_STEP_ADC_MAP_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000750 bits 5:3) field MU_STEP_ADC_MAP_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000750 bits 5:3) field MU_STEP_ADC_MAP_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS1_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS1_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000750 bits 5:3) field MU_STEP_ADC_MAP_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_MU_STEP_ADC_MAP_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS0_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS0_set", value );

    /* (0x00000750 bits 2:0) field MU_STEP_ADC_MAP_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS0_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS0_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_MU_STEP_ADC_MAP_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000750 bits 2:0) field MU_STEP_ADC_MAP_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_MU_STEP_ADC_MAP_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000750 bits 2:0) field MU_STEP_ADC_MAP_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000750 bits 2:0) field MU_STEP_ADC_MAP_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS0_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS0_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000750 bits 2:0) field MU_STEP_ADC_MAP_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_5_BIT_MU_STEP_ADC_MAP_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_COEF_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_COEF_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_COEF_MODE3_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_COEF_MODE3_set", value );

    /* (0x00000754 bits 29:26) field RR_PERIOD_COEF_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_COEF_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_COEF_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000754 bits 29:26) field RR_PERIOD_COEF_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_COEF_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_COEF_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_COEF_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE3_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000754 bits 29:26) field RR_PERIOD_COEF_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000754 bits 29:26) field RR_PERIOD_COEF_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE3_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE3_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_COEF_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_COEF_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000754 bits 29:26) field RR_PERIOD_COEF_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_COEF_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_COEF_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_COEF_MODE2_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_COEF_MODE2_set", value );

    /* (0x00000754 bits 25:22) field RR_PERIOD_COEF_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_COEF_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_COEF_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000754 bits 25:22) field RR_PERIOD_COEF_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_COEF_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_COEF_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_COEF_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE2_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000754 bits 25:22) field RR_PERIOD_COEF_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000754 bits 25:22) field RR_PERIOD_COEF_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE2_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE2_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_COEF_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_COEF_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000754 bits 25:22) field RR_PERIOD_COEF_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_COEF_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_COEF_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_COEF_MODE1_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_COEF_MODE1_set", value );

    /* (0x00000754 bits 21:18) field RR_PERIOD_COEF_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_COEF_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_COEF_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000754 bits 21:18) field RR_PERIOD_COEF_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_COEF_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_COEF_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_COEF_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE1_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000754 bits 21:18) field RR_PERIOD_COEF_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000754 bits 21:18) field RR_PERIOD_COEF_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE1_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE1_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_COEF_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_COEF_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000754 bits 21:18) field RR_PERIOD_COEF_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_RR_PERIOD_COEF_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_COEF_MODE1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE3_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE3_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE3_PASS1TO5_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE3_PASS1TO5_set", value );

    /* (0x00000754 bits 17:15) field ADAPT_DELAY_MODE3_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS1TO5_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS1TO5_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE3_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE3_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000754 bits 17:15) field ADAPT_DELAY_MODE3_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS1TO5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS1TO5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE3_PASS1TO5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS1TO5_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS1TO5_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS1TO5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000754 bits 17:15) field ADAPT_DELAY_MODE3_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000754 bits 17:15) field ADAPT_DELAY_MODE3_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS1TO5_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS1TO5_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS1TO5_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS1TO5_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000754 bits 17:15) field ADAPT_DELAY_MODE3_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS1TO5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS1TO5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS1TO5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS1TO5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS1TO5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE3_PASS0_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE3_PASS0_set", value );

    /* (0x00000754 bits 14:12) field ADAPT_DELAY_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS0_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS0_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000754 bits 14:12) field ADAPT_DELAY_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE3_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000754 bits 14:12) field ADAPT_DELAY_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000754 bits 14:12) field ADAPT_DELAY_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS0_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS0_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000754 bits 14:12) field ADAPT_DELAY_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE3_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE3_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE2_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE2_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE2_PASS1TO5_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE2_PASS1TO5_set", value );

    /* (0x00000754 bits 11:9) field ADAPT_DELAY_MODE2_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS1TO5_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS1TO5_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE2_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE2_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000754 bits 11:9) field ADAPT_DELAY_MODE2_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS1TO5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS1TO5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE2_PASS1TO5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS1TO5_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS1TO5_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS1TO5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000754 bits 11:9) field ADAPT_DELAY_MODE2_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000754 bits 11:9) field ADAPT_DELAY_MODE2_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS1TO5_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS1TO5_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS1TO5_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS1TO5_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000754 bits 11:9) field ADAPT_DELAY_MODE2_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS1TO5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS1TO5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS1TO5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS1TO5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS1TO5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE2_PASS0_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE2_PASS0_set", value );

    /* (0x00000754 bits 8:6) field ADAPT_DELAY_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS0_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS0_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000754 bits 8:6) field ADAPT_DELAY_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE2_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000754 bits 8:6) field ADAPT_DELAY_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000754 bits 8:6) field ADAPT_DELAY_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS0_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS0_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000754 bits 8:6) field ADAPT_DELAY_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE2_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE2_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE1_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE1_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE1_PASS1TO5_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE1_PASS1TO5_set", value );

    /* (0x00000754 bits 5:3) field ADAPT_DELAY_MODE1_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS1TO5_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS1TO5_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE1_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE1_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000754 bits 5:3) field ADAPT_DELAY_MODE1_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS1TO5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS1TO5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE1_PASS1TO5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS1TO5_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS1TO5_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS1TO5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000754 bits 5:3) field ADAPT_DELAY_MODE1_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000754 bits 5:3) field ADAPT_DELAY_MODE1_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS1TO5_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS1TO5_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS1TO5_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS1TO5_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000754 bits 5:3) field ADAPT_DELAY_MODE1_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS1TO5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS1TO5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS1TO5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS1TO5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS1TO5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_DELAY_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE1_PASS0_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE1_PASS0_set", value );

    /* (0x00000754 bits 2:0) field ADAPT_DELAY_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS0_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS0_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_DELAY_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000754 bits 2:0) field ADAPT_DELAY_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_DELAY_MODE1_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000754 bits 2:0) field ADAPT_DELAY_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000754 bits 2:0) field ADAPT_DELAY_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS0_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS0_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000754 bits 2:0) field ADAPT_DELAY_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_6_BIT_ADAPT_DELAY_MODE1_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_DELAY_MODE1_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_DSS_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_DSS_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_DSS_MODE3_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_DSS_MODE3_set", value );

    /* (0x00000758 bits 23:20) field RR_PERIOD_DSS_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_DSS_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_DSS_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000758 bits 23:20) field RR_PERIOD_DSS_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_DSS_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_DSS_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_DSS_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE3_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000758 bits 23:20) field RR_PERIOD_DSS_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000758 bits 23:20) field RR_PERIOD_DSS_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE3_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE3_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_DSS_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_DSS_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000758 bits 23:20) field RR_PERIOD_DSS_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_DSS_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_DSS_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_DSS_MODE2_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_DSS_MODE2_set", value );

    /* (0x00000758 bits 19:16) field RR_PERIOD_DSS_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_DSS_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_DSS_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000758 bits 19:16) field RR_PERIOD_DSS_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_DSS_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_DSS_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_DSS_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE2_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000758 bits 19:16) field RR_PERIOD_DSS_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000758 bits 19:16) field RR_PERIOD_DSS_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE2_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE2_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_DSS_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_DSS_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000758 bits 19:16) field RR_PERIOD_DSS_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_DSS_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_DSS_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_DSS_MODE1_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_DSS_MODE1_set", value );

    /* (0x00000758 bits 15:12) field RR_PERIOD_DSS_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_DSS_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_DSS_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000758 bits 15:12) field RR_PERIOD_DSS_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_DSS_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_DSS_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_DSS_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE1_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000758 bits 15:12) field RR_PERIOD_DSS_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000758 bits 15:12) field RR_PERIOD_DSS_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE1_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE1_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_DSS_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_DSS_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000758 bits 15:12) field RR_PERIOD_DSS_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_DSS_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_DSS_MODE1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE3_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE3_set", value );

    /* (0x00000758 bits 11:8) field RR_PERIOD_ADC_MAP_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000758 bits 11:8) field RR_PERIOD_ADC_MAP_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE3_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000758 bits 11:8) field RR_PERIOD_ADC_MAP_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000758 bits 11:8) field RR_PERIOD_ADC_MAP_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE3_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE3_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000758 bits 11:8) field RR_PERIOD_ADC_MAP_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE2_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE2_set", value );

    /* (0x00000758 bits 7:4) field RR_PERIOD_ADC_MAP_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000758 bits 7:4) field RR_PERIOD_ADC_MAP_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE2_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000758 bits 7:4) field RR_PERIOD_ADC_MAP_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000758 bits 7:4) field RR_PERIOD_ADC_MAP_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE2_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE2_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000758 bits 7:4) field RR_PERIOD_ADC_MAP_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE1_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE1_set", value );

    /* (0x00000758 bits 3:0) field RR_PERIOD_ADC_MAP_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000758 bits 3:0) field RR_PERIOD_ADC_MAP_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_ADC_MAP_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE1_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000758 bits 3:0) field RR_PERIOD_ADC_MAP_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000758 bits 3:0) field RR_PERIOD_ADC_MAP_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE1_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE1_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000758 bits 3:0) field RR_PERIOD_ADC_MAP_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_7_BIT_RR_PERIOD_ADC_MAP_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_ADC_MAP_MODE1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_GAIN_MODE3_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_GAIN_MODE3_set", value );

    /* (0x0000075c bits 23:20) field RR_PERIOD_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000075c bits 23:20) field RR_PERIOD_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_GAIN_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE3_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000075c bits 23:20) field RR_PERIOD_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000075c bits 23:20) field RR_PERIOD_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE3_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE3_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000075c bits 23:20) field RR_PERIOD_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_GAIN_MODE2_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_GAIN_MODE2_set", value );

    /* (0x0000075c bits 19:16) field RR_PERIOD_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000075c bits 19:16) field RR_PERIOD_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_GAIN_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE2_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000075c bits 19:16) field RR_PERIOD_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000075c bits 19:16) field RR_PERIOD_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE2_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE2_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000075c bits 19:16) field RR_PERIOD_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_GAIN_MODE1_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_GAIN_MODE1_set", value );

    /* (0x0000075c bits 15:12) field RR_PERIOD_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000075c bits 15:12) field RR_PERIOD_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_GAIN_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE1_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000075c bits 15:12) field RR_PERIOD_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000075c bits 15:12) field RR_PERIOD_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE1_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE1_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000075c bits 15:12) field RR_PERIOD_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_GAIN_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_GAIN_MODE1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_OFFSET_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_OFFSET_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_OFFSET_MODE3_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_OFFSET_MODE3_set", value );

    /* (0x0000075c bits 11:8) field RR_PERIOD_OFFSET_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE3_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE3_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_OFFSET_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_OFFSET_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000075c bits 11:8) field RR_PERIOD_OFFSET_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_OFFSET_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE3_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000075c bits 11:8) field RR_PERIOD_OFFSET_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000075c bits 11:8) field RR_PERIOD_OFFSET_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE3_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE3_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000075c bits 11:8) field RR_PERIOD_OFFSET_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_OFFSET_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_OFFSET_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_OFFSET_MODE2_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_OFFSET_MODE2_set", value );

    /* (0x0000075c bits 7:4) field RR_PERIOD_OFFSET_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE2_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE2_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_OFFSET_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_OFFSET_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000075c bits 7:4) field RR_PERIOD_OFFSET_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_OFFSET_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE2_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000075c bits 7:4) field RR_PERIOD_OFFSET_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000075c bits 7:4) field RR_PERIOD_OFFSET_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE2_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE2_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000075c bits 7:4) field RR_PERIOD_OFFSET_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RR_PERIOD_OFFSET_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RR_PERIOD_OFFSET_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RR_PERIOD_OFFSET_MODE1_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RR_PERIOD_OFFSET_MODE1_set", value );

    /* (0x0000075c bits 3:0) field RR_PERIOD_OFFSET_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE1_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE1_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_RR_PERIOD_OFFSET_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RR_PERIOD_OFFSET_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000075c bits 3:0) field RR_PERIOD_OFFSET_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RR_PERIOD_OFFSET_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE1_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000075c bits 3:0) field RR_PERIOD_OFFSET_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000075c bits 3:0) field RR_PERIOD_OFFSET_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE1_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE1_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000075c bits 3:0) field RR_PERIOD_OFFSET_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_8_BIT_RR_PERIOD_OFFSET_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RR_PERIOD_OFFSET_MODE1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DFE_COEF3_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DFE_COEF3_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DFE_COEF3_PRELOAD_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DFE_COEF3_PRELOAD_set", value );

    /* (0x00000760 bits 27:21) field DFE_COEF3_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF3_PRELOAD_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF3_PRELOAD_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_DFE_COEF3_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DFE_COEF3_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000760 bits 27:21) field DFE_COEF3_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF3_PRELOAD_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF3_PRELOAD_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DFE_COEF3_PRELOAD_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DFE_COEF3_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DFE_COEF3_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF3_PRELOAD_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF3_PRELOAD_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF3_PRELOAD_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000760 bits 27:21) field DFE_COEF3_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000760 bits 27:21) field DFE_COEF3_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF3_PRELOAD_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF3_PRELOAD_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DFE_COEF3_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DFE_COEF3_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF3_PRELOAD_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF3_PRELOAD_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000760 bits 27:21) field DFE_COEF3_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF3_PRELOAD_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF3_PRELOAD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF3_PRELOAD_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF3_PRELOAD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF3_PRELOAD_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DFE_COEF2_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DFE_COEF2_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DFE_COEF2_PRELOAD_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DFE_COEF2_PRELOAD_set", value );

    /* (0x00000760 bits 20:14) field DFE_COEF2_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF2_PRELOAD_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF2_PRELOAD_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_DFE_COEF2_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DFE_COEF2_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000760 bits 20:14) field DFE_COEF2_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF2_PRELOAD_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF2_PRELOAD_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DFE_COEF2_PRELOAD_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DFE_COEF2_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DFE_COEF2_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF2_PRELOAD_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF2_PRELOAD_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF2_PRELOAD_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000760 bits 20:14) field DFE_COEF2_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000760 bits 20:14) field DFE_COEF2_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF2_PRELOAD_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF2_PRELOAD_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DFE_COEF2_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DFE_COEF2_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF2_PRELOAD_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF2_PRELOAD_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000760 bits 20:14) field DFE_COEF2_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF2_PRELOAD_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF2_PRELOAD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF2_PRELOAD_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF2_PRELOAD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF2_PRELOAD_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DFE_COEF1_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DFE_COEF1_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DFE_COEF1_PRELOAD_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DFE_COEF1_PRELOAD_set", value );

    /* (0x00000760 bits 13:7) field DFE_COEF1_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF1_PRELOAD_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF1_PRELOAD_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_DFE_COEF1_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DFE_COEF1_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000760 bits 13:7) field DFE_COEF1_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF1_PRELOAD_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF1_PRELOAD_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DFE_COEF1_PRELOAD_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DFE_COEF1_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DFE_COEF1_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF1_PRELOAD_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF1_PRELOAD_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF1_PRELOAD_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000760 bits 13:7) field DFE_COEF1_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000760 bits 13:7) field DFE_COEF1_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF1_PRELOAD_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF1_PRELOAD_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DFE_COEF1_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DFE_COEF1_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF1_PRELOAD_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF1_PRELOAD_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000760 bits 13:7) field DFE_COEF1_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF1_PRELOAD_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF1_PRELOAD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF1_PRELOAD_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF1_PRELOAD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF1_PRELOAD_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DFE_COEF0_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DFE_COEF0_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DFE_COEF0_PRELOAD_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DFE_COEF0_PRELOAD_set", value );

    /* (0x00000760 bits 6:0) field DFE_COEF0_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                          h_ptr,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF0_PRELOAD_MSK,
                                                          T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF0_PRELOAD_OFF,
                                                          value);
}

static INLINE UINT32 t8_ctrl_field_DFE_COEF0_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DFE_COEF0_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000760 bits 6:0) field DFE_COEF0_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                                 h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF0_PRELOAD_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF0_PRELOAD_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DFE_COEF0_PRELOAD_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DFE_COEF0_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DFE_COEF0_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF0_PRELOAD_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF0_PRELOAD_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF0_PRELOAD_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000760 bits 6:0) field DFE_COEF0_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000760 bits 6:0) field DFE_COEF0_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                              h_ptr,
                                                              subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF0_PRELOAD_OFF + subfield_offset),
                                                              T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF0_PRELOAD_OFF + subfield_offset,
                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DFE_COEF0_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DFE_COEF0_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF0_PRELOAD_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF0_PRELOAD_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000760 bits 6:0) field DFE_COEF0_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                                 h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF0_PRELOAD_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF0_PRELOAD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF0_PRELOAD_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_9_BIT_DFE_COEF0_PRELOAD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF0_PRELOAD_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_PGA_OFFSET_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PGA_OFFSET_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PGA_OFFSET_PRELOAD_set", value, 255);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_PGA_OFFSET_PRELOAD_set", value );

    /* (0x00000764 bits 21:14) field PGA_OFFSET_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_PGA_OFFSET_PRELOAD_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_PGA_OFFSET_PRELOAD_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_PGA_OFFSET_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PGA_OFFSET_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000764 bits 21:14) field PGA_OFFSET_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_PGA_OFFSET_PRELOAD_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_PGA_OFFSET_PRELOAD_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_PGA_OFFSET_PRELOAD_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_PGA_OFFSET_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_PGA_OFFSET_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PGA_OFFSET_PRELOAD_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PGA_OFFSET_PRELOAD_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PGA_OFFSET_PRELOAD_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000764 bits 21:14) field PGA_OFFSET_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000764 bits 21:14) field PGA_OFFSET_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_PGA_OFFSET_PRELOAD_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_PGA_OFFSET_PRELOAD_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_PGA_OFFSET_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_PGA_OFFSET_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PGA_OFFSET_PRELOAD_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PGA_OFFSET_PRELOAD_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000764 bits 21:14) field PGA_OFFSET_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_PGA_OFFSET_PRELOAD_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_PGA_OFFSET_PRELOAD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_PGA_OFFSET_PRELOAD_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_PGA_OFFSET_PRELOAD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PGA_OFFSET_PRELOAD_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DFE_COEF5_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DFE_COEF5_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DFE_COEF5_PRELOAD_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DFE_COEF5_PRELOAD_set", value );

    /* (0x00000764 bits 13:7) field DFE_COEF5_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF5_PRELOAD_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF5_PRELOAD_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DFE_COEF5_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DFE_COEF5_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000764 bits 13:7) field DFE_COEF5_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF5_PRELOAD_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF5_PRELOAD_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DFE_COEF5_PRELOAD_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DFE_COEF5_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DFE_COEF5_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF5_PRELOAD_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF5_PRELOAD_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF5_PRELOAD_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000764 bits 13:7) field DFE_COEF5_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000764 bits 13:7) field DFE_COEF5_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF5_PRELOAD_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF5_PRELOAD_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DFE_COEF5_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DFE_COEF5_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF5_PRELOAD_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF5_PRELOAD_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000764 bits 13:7) field DFE_COEF5_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF5_PRELOAD_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF5_PRELOAD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF5_PRELOAD_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF5_PRELOAD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF5_PRELOAD_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DFE_COEF4_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DFE_COEF4_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DFE_COEF4_PRELOAD_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DFE_COEF4_PRELOAD_set", value );

    /* (0x00000764 bits 6:0) field DFE_COEF4_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF4_PRELOAD_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF4_PRELOAD_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DFE_COEF4_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DFE_COEF4_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000764 bits 6:0) field DFE_COEF4_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF4_PRELOAD_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF4_PRELOAD_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DFE_COEF4_PRELOAD_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DFE_COEF4_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DFE_COEF4_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF4_PRELOAD_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF4_PRELOAD_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF4_PRELOAD_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000764 bits 6:0) field DFE_COEF4_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000764 bits 6:0) field DFE_COEF4_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF4_PRELOAD_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF4_PRELOAD_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DFE_COEF4_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DFE_COEF4_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DFE_COEF4_PRELOAD_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DFE_COEF4_PRELOAD_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000764 bits 6:0) field DFE_COEF4_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF4_PRELOAD_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF4_PRELOAD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF4_PRELOAD_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_10_BIT_DFE_COEF4_PRELOAD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DFE_COEF4_PRELOAD_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_B_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_B_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_B_PRELOAD_PCBI_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_B_PRELOAD_PCBI_set", value );

    /* (0x00000768 bits 30:26) field TR_FFE_B_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_B_PRELOAD_PCBI_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_B_PRELOAD_PCBI_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_B_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_B_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000768 bits 30:26) field TR_FFE_B_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_B_PRELOAD_PCBI_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_B_PRELOAD_PCBI_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_B_PRELOAD_PCBI_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_B_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_B_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_PRELOAD_PCBI_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_PRELOAD_PCBI_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_PRELOAD_PCBI_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000768 bits 30:26) field TR_FFE_B_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000768 bits 30:26) field TR_FFE_B_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_B_PRELOAD_PCBI_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_B_PRELOAD_PCBI_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_PRELOAD_PCBI_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_PRELOAD_PCBI_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000768 bits 30:26) field TR_FFE_B_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_B_PRELOAD_PCBI_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_B_PRELOAD_PCBI_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_B_PRELOAD_PCBI_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_B_PRELOAD_PCBI_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_PRELOAD_PCBI_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_A_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_A_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_A_PRELOAD_PCBI_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_A_PRELOAD_PCBI_set", value );

    /* (0x00000768 bits 25:21) field TR_FFE_A_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_A_PRELOAD_PCBI_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_A_PRELOAD_PCBI_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_A_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_A_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000768 bits 25:21) field TR_FFE_A_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_A_PRELOAD_PCBI_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_A_PRELOAD_PCBI_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_A_PRELOAD_PCBI_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_A_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_A_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_PRELOAD_PCBI_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_PRELOAD_PCBI_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_PRELOAD_PCBI_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000768 bits 25:21) field TR_FFE_A_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000768 bits 25:21) field TR_FFE_A_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_A_PRELOAD_PCBI_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_A_PRELOAD_PCBI_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_PRELOAD_PCBI_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_PRELOAD_PCBI_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000768 bits 25:21) field TR_FFE_A_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_A_PRELOAD_PCBI_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_A_PRELOAD_PCBI_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_A_PRELOAD_PCBI_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_TR_FFE_A_PRELOAD_PCBI_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_PRELOAD_PCBI_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_C_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_C_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_C_PRELOAD_PCBI_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_C_PRELOAD_PCBI_set", value );

    /* (0x00000768 bits 20:14) field DP_FFE_C_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_C_PRELOAD_PCBI_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_C_PRELOAD_PCBI_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_C_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_C_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000768 bits 20:14) field DP_FFE_C_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_C_PRELOAD_PCBI_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_C_PRELOAD_PCBI_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_C_PRELOAD_PCBI_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_C_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_C_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_PRELOAD_PCBI_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_PRELOAD_PCBI_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_PRELOAD_PCBI_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000768 bits 20:14) field DP_FFE_C_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000768 bits 20:14) field DP_FFE_C_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_C_PRELOAD_PCBI_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_C_PRELOAD_PCBI_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_PRELOAD_PCBI_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_PRELOAD_PCBI_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000768 bits 20:14) field DP_FFE_C_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_C_PRELOAD_PCBI_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_C_PRELOAD_PCBI_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_C_PRELOAD_PCBI_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_C_PRELOAD_PCBI_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_PRELOAD_PCBI_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_B_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_B_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_B_PRELOAD_PCBI_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_B_PRELOAD_PCBI_set", value );

    /* (0x00000768 bits 13:7) field DP_FFE_B_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_B_PRELOAD_PCBI_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_B_PRELOAD_PCBI_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_B_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_B_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000768 bits 13:7) field DP_FFE_B_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_B_PRELOAD_PCBI_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_B_PRELOAD_PCBI_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_B_PRELOAD_PCBI_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_B_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_B_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_PRELOAD_PCBI_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_PRELOAD_PCBI_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_PRELOAD_PCBI_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000768 bits 13:7) field DP_FFE_B_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000768 bits 13:7) field DP_FFE_B_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_B_PRELOAD_PCBI_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_B_PRELOAD_PCBI_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_PRELOAD_PCBI_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_PRELOAD_PCBI_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000768 bits 13:7) field DP_FFE_B_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_B_PRELOAD_PCBI_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_B_PRELOAD_PCBI_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_B_PRELOAD_PCBI_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_B_PRELOAD_PCBI_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_PRELOAD_PCBI_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_set", value );

    /* (0x00000768 bits 6:0) field DP_FFE_A_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_A_PRELOAD_PCBI_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_A_PRELOAD_PCBI_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000768 bits 6:0) field DP_FFE_A_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_A_PRELOAD_PCBI_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_A_PRELOAD_PCBI_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000768 bits 6:0) field DP_FFE_A_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000768 bits 6:0) field DP_FFE_A_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_A_PRELOAD_PCBI_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_A_PRELOAD_PCBI_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000768 bits 6:0) field DP_FFE_A_PRELOAD_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_A_PRELOAD_PCBI_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_A_PRELOAD_PCBI_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_A_PRELOAD_PCBI_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_11_BIT_DP_FFE_A_PRELOAD_PCBI_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_LF_INTEG_OUT_MODE_NORMAL_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_INTEG_OUT_MODE_NORMAL_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_INTEG_OUT_MODE_NORMAL_set", value, 3);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_INTEG_OUT_MODE_NORMAL_set", value );

    /* (0x0000076c bits 15:14) field LF_INTEG_OUT_MODE_NORMAL of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_NORMAL_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_NORMAL_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_INTEG_OUT_MODE_NORMAL_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_INTEG_OUT_MODE_NORMAL_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000076c bits 15:14) field LF_INTEG_OUT_MODE_NORMAL of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_NORMAL_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_NORMAL_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_INTEG_OUT_MODE_NORMAL_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_LF_INTEG_OUT_MODE_NORMAL_set( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_LF_INTEG_OUT_MODE_NORMAL_set( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_NORMAL_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_NORMAL_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_NORMAL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000076c bits 15:14) field LF_INTEG_OUT_MODE_NORMAL of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000076c bits 15:14) field LF_INTEG_OUT_MODE_NORMAL of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_NORMAL_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_NORMAL_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_OUT_MODE_NORMAL_get( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_OUT_MODE_NORMAL_get( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_NORMAL_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_NORMAL_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000076c bits 15:14) field LF_INTEG_OUT_MODE_NORMAL of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_NORMAL_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_NORMAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_NORMAL_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_NORMAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_NORMAL_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_LF_INTEG_OUT_MODE_LOS_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_INTEG_OUT_MODE_LOS_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_INTEG_OUT_MODE_LOS_set", value, 3);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_INTEG_OUT_MODE_LOS_set", value );

    /* (0x0000076c bits 13:12) field LF_INTEG_OUT_MODE_LOS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_LOS_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_LOS_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_INTEG_OUT_MODE_LOS_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_INTEG_OUT_MODE_LOS_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000076c bits 13:12) field LF_INTEG_OUT_MODE_LOS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_LOS_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_LOS_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_INTEG_OUT_MODE_LOS_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_LF_INTEG_OUT_MODE_LOS_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_LF_INTEG_OUT_MODE_LOS_set( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_LOS_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_LOS_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_LOS_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000076c bits 13:12) field LF_INTEG_OUT_MODE_LOS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000076c bits 13:12) field LF_INTEG_OUT_MODE_LOS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_LOS_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_LOS_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_OUT_MODE_LOS_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_OUT_MODE_LOS_get( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_LOS_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_LOS_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000076c bits 13:12) field LF_INTEG_OUT_MODE_LOS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_LOS_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_LOS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_LOS_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_MODE_LOS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_OUT_MODE_LOS_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_LF_INTEG_OUT_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_INTEG_OUT_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_INTEG_OUT_OVR_set", value, 255);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_INTEG_OUT_OVR_set", value );

    /* (0x0000076c bits 11:4) field LF_INTEG_OUT_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_OVR_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_OVR_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_INTEG_OUT_OVR_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_INTEG_OUT_OVR_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000076c bits 11:4) field LF_INTEG_OUT_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_OVR_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_INTEG_OUT_OVR_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_LF_INTEG_OUT_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_LF_INTEG_OUT_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_OUT_OVR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_OUT_OVR_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_OUT_OVR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000076c bits 11:4) field LF_INTEG_OUT_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000076c bits 11:4) field LF_INTEG_OUT_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_OVR_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_OVR_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_OUT_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_OUT_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_OUT_OVR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_OUT_OVR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000076c bits 11:4) field LF_INTEG_OUT_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_OVR_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_OVR_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_LF_INTEG_OUT_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_OUT_OVR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADC_MAP_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADC_MAP_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADC_MAP_PRELOAD_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADC_MAP_PRELOAD_set", value );

    /* (0x0000076c bits 3:0) field ADC_MAP_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_ADC_MAP_PRELOAD_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_ADC_MAP_PRELOAD_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADC_MAP_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_MAP_PRELOAD_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000076c bits 3:0) field ADC_MAP_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_ADC_MAP_PRELOAD_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_ADC_MAP_PRELOAD_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADC_MAP_PRELOAD_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADC_MAP_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADC_MAP_PRELOAD_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADC_MAP_PRELOAD_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADC_MAP_PRELOAD_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADC_MAP_PRELOAD_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000076c bits 3:0) field ADC_MAP_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000076c bits 3:0) field ADC_MAP_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_ADC_MAP_PRELOAD_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_ADC_MAP_PRELOAD_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADC_MAP_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADC_MAP_PRELOAD_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADC_MAP_PRELOAD_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADC_MAP_PRELOAD_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000076c bits 3:0) field ADC_MAP_PRELOAD of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_ADC_MAP_PRELOAD_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_ADC_MAP_PRELOAD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_ADC_MAP_PRELOAD_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_12_BIT_ADC_MAP_PRELOAD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADC_MAP_PRELOAD_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_CLIP_RATE_THRESH_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_CLIP_RATE_THRESH_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_CLIP_RATE_THRESH_MODE3_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_CLIP_RATE_THRESH_MODE3_set", value );

    /* (0x00000770 bits 26:24) field CLIP_RATE_THRESH_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_CLIP_RATE_THRESH_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_CLIP_RATE_THRESH_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000770 bits 26:24) field CLIP_RATE_THRESH_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_CLIP_RATE_THRESH_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_CLIP_RATE_THRESH_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_CLIP_RATE_THRESH_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE3_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000770 bits 26:24) field CLIP_RATE_THRESH_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000770 bits 26:24) field CLIP_RATE_THRESH_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_THRESH_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_THRESH_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000770 bits 26:24) field CLIP_RATE_THRESH_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_CLIP_RATE_THRESH_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_CLIP_RATE_THRESH_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_CLIP_RATE_THRESH_MODE2_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_CLIP_RATE_THRESH_MODE2_set", value );

    /* (0x00000770 bits 23:21) field CLIP_RATE_THRESH_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_CLIP_RATE_THRESH_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_CLIP_RATE_THRESH_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000770 bits 23:21) field CLIP_RATE_THRESH_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_CLIP_RATE_THRESH_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_CLIP_RATE_THRESH_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_CLIP_RATE_THRESH_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE2_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000770 bits 23:21) field CLIP_RATE_THRESH_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000770 bits 23:21) field CLIP_RATE_THRESH_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_THRESH_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_THRESH_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000770 bits 23:21) field CLIP_RATE_THRESH_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_CLIP_RATE_THRESH_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_CLIP_RATE_THRESH_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_CLIP_RATE_THRESH_MODE1_set", value, 7);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_CLIP_RATE_THRESH_MODE1_set", value );

    /* (0x00000770 bits 20:18) field CLIP_RATE_THRESH_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_CLIP_RATE_THRESH_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_CLIP_RATE_THRESH_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000770 bits 20:18) field CLIP_RATE_THRESH_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_CLIP_RATE_THRESH_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_CLIP_RATE_THRESH_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_CLIP_RATE_THRESH_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE1_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000770 bits 20:18) field CLIP_RATE_THRESH_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000770 bits 20:18) field CLIP_RATE_THRESH_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_THRESH_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_THRESH_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000770 bits 20:18) field CLIP_RATE_THRESH_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_THRESH_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_THRESH_MODE1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_CLIP_RATE_AMP_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_CLIP_RATE_AMP_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_CLIP_RATE_AMP_MODE3_set", value, 63);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_CLIP_RATE_AMP_MODE3_set", value );

    /* (0x00000770 bits 17:12) field CLIP_RATE_AMP_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_CLIP_RATE_AMP_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_CLIP_RATE_AMP_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000770 bits 17:12) field CLIP_RATE_AMP_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_CLIP_RATE_AMP_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_CLIP_RATE_AMP_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_CLIP_RATE_AMP_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE3_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000770 bits 17:12) field CLIP_RATE_AMP_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000770 bits 17:12) field CLIP_RATE_AMP_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_AMP_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_AMP_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE3_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000770 bits 17:12) field CLIP_RATE_AMP_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_CLIP_RATE_AMP_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_CLIP_RATE_AMP_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_CLIP_RATE_AMP_MODE2_set", value, 63);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_CLIP_RATE_AMP_MODE2_set", value );

    /* (0x00000770 bits 11:6) field CLIP_RATE_AMP_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_CLIP_RATE_AMP_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_CLIP_RATE_AMP_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000770 bits 11:6) field CLIP_RATE_AMP_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_CLIP_RATE_AMP_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_CLIP_RATE_AMP_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_CLIP_RATE_AMP_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE2_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000770 bits 11:6) field CLIP_RATE_AMP_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000770 bits 11:6) field CLIP_RATE_AMP_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_AMP_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_AMP_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE2_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000770 bits 11:6) field CLIP_RATE_AMP_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_CLIP_RATE_AMP_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_CLIP_RATE_AMP_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_CLIP_RATE_AMP_MODE1_set", value, 63);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_CLIP_RATE_AMP_MODE1_set", value );

    /* (0x00000770 bits 5:0) field CLIP_RATE_AMP_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_CLIP_RATE_AMP_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_CLIP_RATE_AMP_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000770 bits 5:0) field CLIP_RATE_AMP_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_CLIP_RATE_AMP_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_CLIP_RATE_AMP_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_CLIP_RATE_AMP_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE1_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000770 bits 5:0) field CLIP_RATE_AMP_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000770 bits 5:0) field CLIP_RATE_AMP_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_AMP_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_CLIP_RATE_AMP_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE1_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000770 bits 5:0) field CLIP_RATE_AMP_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_13_BIT_CLIP_RATE_AMP_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLIP_RATE_AMP_MODE1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS5_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS5_set", value );

    /* (0x00000774 bits 5) field PATH_PATTERN_ENB_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE3_PASS5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE3_PASS5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000774 bits 5) field PATH_PATTERN_ENB_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE3_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE3_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS0TO4_set( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS0TO4_set( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS0TO4_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS0TO4_set", value );

    /* (0x00000774 bits 4) field PATH_PATTERN_ENB_MODE3_PASS0TO4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE3_PASS0TO4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE3_PASS0TO4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS0TO4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS0TO4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000774 bits 4) field PATH_PATTERN_ENB_MODE3_PASS0TO4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE3_PASS0TO4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE3_PASS0TO4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE3_PASS0TO4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS5_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS5_set", value );

    /* (0x00000774 bits 3) field PATH_PATTERN_ENB_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE2_PASS5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE2_PASS5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000774 bits 3) field PATH_PATTERN_ENB_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE2_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE2_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS0TO4_set( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS0TO4_set( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS0TO4_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS0TO4_set", value );

    /* (0x00000774 bits 2) field PATH_PATTERN_ENB_MODE2_PASS0TO4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE2_PASS0TO4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE2_PASS0TO4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS0TO4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS0TO4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000774 bits 2) field PATH_PATTERN_ENB_MODE2_PASS0TO4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE2_PASS0TO4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE2_PASS0TO4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE2_PASS0TO4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS5_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS5_set", value );

    /* (0x00000774 bits 1) field PATH_PATTERN_ENB_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE1_PASS5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE1_PASS5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000774 bits 1) field PATH_PATTERN_ENB_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE1_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE1_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS0TO4_set( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS0TO4_set( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS0TO4_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS0TO4_set", value );

    /* (0x00000774 bits 0) field PATH_PATTERN_ENB_MODE1_PASS0TO4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE1_PASS0TO4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE1_PASS0TO4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS0TO4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS0TO4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000774 bits 0) field PATH_PATTERN_ENB_MODE1_PASS0TO4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE1_PASS0TO4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_14_BIT_PATH_PATTERN_ENB_MODE1_PASS0TO4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_PATH_PATTERN_ENB_MODE1_PASS0TO4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS5_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS5_set", value );

    /* (0x00000778 bits 23:20) field ADAPT_LOOPS_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000778 bits 23:20) field ADAPT_LOOPS_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS5_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS5_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000778 bits 23:20) field ADAPT_LOOPS_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000778 bits 23:20) field ADAPT_LOOPS_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS5_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS5_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS5_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000778 bits 23:20) field ADAPT_LOOPS_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS4_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS4_set", value );

    /* (0x00000778 bits 19:16) field ADAPT_LOOPS_MODE1_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000778 bits 19:16) field ADAPT_LOOPS_MODE1_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS4_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS4_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000778 bits 19:16) field ADAPT_LOOPS_MODE1_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000778 bits 19:16) field ADAPT_LOOPS_MODE1_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS4_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS4_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS4_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000778 bits 19:16) field ADAPT_LOOPS_MODE1_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS3_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS3_set", value );

    /* (0x00000778 bits 15:12) field ADAPT_LOOPS_MODE1_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000778 bits 15:12) field ADAPT_LOOPS_MODE1_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS3_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000778 bits 15:12) field ADAPT_LOOPS_MODE1_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000778 bits 15:12) field ADAPT_LOOPS_MODE1_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000778 bits 15:12) field ADAPT_LOOPS_MODE1_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS2_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS2_set", value );

    /* (0x00000778 bits 11:8) field ADAPT_LOOPS_MODE1_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000778 bits 11:8) field ADAPT_LOOPS_MODE1_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS2_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000778 bits 11:8) field ADAPT_LOOPS_MODE1_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000778 bits 11:8) field ADAPT_LOOPS_MODE1_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000778 bits 11:8) field ADAPT_LOOPS_MODE1_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS1_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS1_set", value );

    /* (0x00000778 bits 7:4) field ADAPT_LOOPS_MODE1_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000778 bits 7:4) field ADAPT_LOOPS_MODE1_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS1_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000778 bits 7:4) field ADAPT_LOOPS_MODE1_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000778 bits 7:4) field ADAPT_LOOPS_MODE1_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000778 bits 7:4) field ADAPT_LOOPS_MODE1_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS0_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS0_set", value );

    /* (0x00000778 bits 3:0) field ADAPT_LOOPS_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000778 bits 3:0) field ADAPT_LOOPS_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE1_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS0_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000778 bits 3:0) field ADAPT_LOOPS_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000778 bits 3:0) field ADAPT_LOOPS_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS0_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS0_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000778 bits 3:0) field ADAPT_LOOPS_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_15_BIT_ADAPT_LOOPS_MODE1_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE1_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS5_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS5_set", value );

    /* (0x0000077c bits 23:20) field ADAPT_LOOPS_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000077c bits 23:20) field ADAPT_LOOPS_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS5_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS5_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000077c bits 23:20) field ADAPT_LOOPS_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000077c bits 23:20) field ADAPT_LOOPS_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS5_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS5_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS5_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000077c bits 23:20) field ADAPT_LOOPS_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS4_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS4_set", value );

    /* (0x0000077c bits 19:16) field ADAPT_LOOPS_MODE2_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000077c bits 19:16) field ADAPT_LOOPS_MODE2_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS4_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS4_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000077c bits 19:16) field ADAPT_LOOPS_MODE2_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000077c bits 19:16) field ADAPT_LOOPS_MODE2_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS4_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS4_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS4_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000077c bits 19:16) field ADAPT_LOOPS_MODE2_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS3_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS3_set", value );

    /* (0x0000077c bits 15:12) field ADAPT_LOOPS_MODE2_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000077c bits 15:12) field ADAPT_LOOPS_MODE2_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS3_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000077c bits 15:12) field ADAPT_LOOPS_MODE2_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000077c bits 15:12) field ADAPT_LOOPS_MODE2_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000077c bits 15:12) field ADAPT_LOOPS_MODE2_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS2_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS2_set", value );

    /* (0x0000077c bits 11:8) field ADAPT_LOOPS_MODE2_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000077c bits 11:8) field ADAPT_LOOPS_MODE2_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS2_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000077c bits 11:8) field ADAPT_LOOPS_MODE2_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000077c bits 11:8) field ADAPT_LOOPS_MODE2_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000077c bits 11:8) field ADAPT_LOOPS_MODE2_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS1_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS1_set", value );

    /* (0x0000077c bits 7:4) field ADAPT_LOOPS_MODE2_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000077c bits 7:4) field ADAPT_LOOPS_MODE2_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS1_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000077c bits 7:4) field ADAPT_LOOPS_MODE2_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000077c bits 7:4) field ADAPT_LOOPS_MODE2_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000077c bits 7:4) field ADAPT_LOOPS_MODE2_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS0_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS0_set", value );

    /* (0x0000077c bits 3:0) field ADAPT_LOOPS_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000077c bits 3:0) field ADAPT_LOOPS_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE2_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS0_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000077c bits 3:0) field ADAPT_LOOPS_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000077c bits 3:0) field ADAPT_LOOPS_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS0_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS0_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000077c bits 3:0) field ADAPT_LOOPS_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_16_BIT_ADAPT_LOOPS_MODE2_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE2_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS5_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS5_set", value );

    /* (0x00000780 bits 23:20) field ADAPT_LOOPS_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000780 bits 23:20) field ADAPT_LOOPS_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS5_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS5_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000780 bits 23:20) field ADAPT_LOOPS_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000780 bits 23:20) field ADAPT_LOOPS_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS5_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS5_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS5_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000780 bits 23:20) field ADAPT_LOOPS_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS4_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS4_set", value );

    /* (0x00000780 bits 19:16) field ADAPT_LOOPS_MODE3_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000780 bits 19:16) field ADAPT_LOOPS_MODE3_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS4_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS4_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000780 bits 19:16) field ADAPT_LOOPS_MODE3_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000780 bits 19:16) field ADAPT_LOOPS_MODE3_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS4_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS4_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS4_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000780 bits 19:16) field ADAPT_LOOPS_MODE3_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS3_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS3_set", value );

    /* (0x00000780 bits 15:12) field ADAPT_LOOPS_MODE3_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000780 bits 15:12) field ADAPT_LOOPS_MODE3_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS3_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000780 bits 15:12) field ADAPT_LOOPS_MODE3_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000780 bits 15:12) field ADAPT_LOOPS_MODE3_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000780 bits 15:12) field ADAPT_LOOPS_MODE3_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS2_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS2_set", value );

    /* (0x00000780 bits 11:8) field ADAPT_LOOPS_MODE3_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000780 bits 11:8) field ADAPT_LOOPS_MODE3_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS2_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000780 bits 11:8) field ADAPT_LOOPS_MODE3_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000780 bits 11:8) field ADAPT_LOOPS_MODE3_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000780 bits 11:8) field ADAPT_LOOPS_MODE3_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS1_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS1_set", value );

    /* (0x00000780 bits 7:4) field ADAPT_LOOPS_MODE3_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000780 bits 7:4) field ADAPT_LOOPS_MODE3_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS1_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000780 bits 7:4) field ADAPT_LOOPS_MODE3_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000780 bits 7:4) field ADAPT_LOOPS_MODE3_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000780 bits 7:4) field ADAPT_LOOPS_MODE3_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS0_set", value, 15);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS0_set", value );

    /* (0x00000780 bits 3:0) field ADAPT_LOOPS_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000780 bits 3:0) field ADAPT_LOOPS_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_LOOPS_MODE3_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS0_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000780 bits 3:0) field ADAPT_LOOPS_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000780 bits 3:0) field ADAPT_LOOPS_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS0_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS0_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000780 bits 3:0) field ADAPT_LOOPS_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_17_BIT_ADAPT_LOOPS_MODE3_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_LOOPS_MODE3_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS1_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS1_set", value );

    /* (0x00000784 bits 29:15) field OBJECTS_EN_MODE1_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000784 bits 29:15) field OBJECTS_EN_MODE1_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS1_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000784 bits 29:15) field OBJECTS_EN_MODE1_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000784 bits 29:15) field OBJECTS_EN_MODE1_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS1_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000784 bits 29:15) field OBJECTS_EN_MODE1_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS0_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS0_set", value );

    /* (0x00000784 bits 14:0) field OBJECTS_EN_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000784 bits 14:0) field OBJECTS_EN_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS0_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000784 bits 14:0) field OBJECTS_EN_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000784 bits 14:0) field OBJECTS_EN_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS0_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS0_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000784 bits 14:0) field OBJECTS_EN_MODE1_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_18_BIT_OBJECTS_EN_MODE1_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS3_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS3_set", value );

    /* (0x00000788 bits 29:15) field OBJECTS_EN_MODE1_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000788 bits 29:15) field OBJECTS_EN_MODE1_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS3_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000788 bits 29:15) field OBJECTS_EN_MODE1_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000788 bits 29:15) field OBJECTS_EN_MODE1_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS3_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000788 bits 29:15) field OBJECTS_EN_MODE1_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS2_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS2_set", value );

    /* (0x00000788 bits 14:0) field OBJECTS_EN_MODE1_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000788 bits 14:0) field OBJECTS_EN_MODE1_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS2_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000788 bits 14:0) field OBJECTS_EN_MODE1_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000788 bits 14:0) field OBJECTS_EN_MODE1_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS2_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000788 bits 14:0) field OBJECTS_EN_MODE1_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_19_BIT_OBJECTS_EN_MODE1_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS5_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS5_set", value );

    /* (0x0000078c bits 29:15) field OBJECTS_EN_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000078c bits 29:15) field OBJECTS_EN_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS5_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS5_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000078c bits 29:15) field OBJECTS_EN_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000078c bits 29:15) field OBJECTS_EN_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS5_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS5_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS5_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000078c bits 29:15) field OBJECTS_EN_MODE1_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE1_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS4_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS4_set", value );

    /* (0x0000078c bits 14:0) field OBJECTS_EN_MODE1_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE1_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000078c bits 14:0) field OBJECTS_EN_MODE1_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE1_PASS4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS4_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS4_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000078c bits 14:0) field OBJECTS_EN_MODE1_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000078c bits 14:0) field OBJECTS_EN_MODE1_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS4_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS4_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS4_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000078c bits 14:0) field OBJECTS_EN_MODE1_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_20_BIT_OBJECTS_EN_MODE1_PASS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE1_PASS4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS1_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS1_set", value );

    /* (0x00000790 bits 29:15) field OBJECTS_EN_MODE2_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000790 bits 29:15) field OBJECTS_EN_MODE2_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS1_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000790 bits 29:15) field OBJECTS_EN_MODE2_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000790 bits 29:15) field OBJECTS_EN_MODE2_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS1_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000790 bits 29:15) field OBJECTS_EN_MODE2_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS0_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS0_set", value );

    /* (0x00000790 bits 14:0) field OBJECTS_EN_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000790 bits 14:0) field OBJECTS_EN_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS0_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000790 bits 14:0) field OBJECTS_EN_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000790 bits 14:0) field OBJECTS_EN_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS0_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS0_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000790 bits 14:0) field OBJECTS_EN_MODE2_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_21_BIT_OBJECTS_EN_MODE2_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS3_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS3_set", value );

    /* (0x00000794 bits 29:15) field OBJECTS_EN_MODE2_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000794 bits 29:15) field OBJECTS_EN_MODE2_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS3_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000794 bits 29:15) field OBJECTS_EN_MODE2_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000794 bits 29:15) field OBJECTS_EN_MODE2_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS3_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000794 bits 29:15) field OBJECTS_EN_MODE2_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS2_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS2_set", value );

    /* (0x00000794 bits 14:0) field OBJECTS_EN_MODE2_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000794 bits 14:0) field OBJECTS_EN_MODE2_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS2_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000794 bits 14:0) field OBJECTS_EN_MODE2_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000794 bits 14:0) field OBJECTS_EN_MODE2_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS2_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000794 bits 14:0) field OBJECTS_EN_MODE2_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_22_BIT_OBJECTS_EN_MODE2_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS5_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS5_set", value );

    /* (0x00000798 bits 29:15) field OBJECTS_EN_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000798 bits 29:15) field OBJECTS_EN_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS5_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS5_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000798 bits 29:15) field OBJECTS_EN_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000798 bits 29:15) field OBJECTS_EN_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS5_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS5_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS5_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000798 bits 29:15) field OBJECTS_EN_MODE2_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE2_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS4_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS4_set", value );

    /* (0x00000798 bits 14:0) field OBJECTS_EN_MODE2_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE2_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000798 bits 14:0) field OBJECTS_EN_MODE2_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE2_PASS4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS4_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS4_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000798 bits 14:0) field OBJECTS_EN_MODE2_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000798 bits 14:0) field OBJECTS_EN_MODE2_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS4_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS4_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS4_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000798 bits 14:0) field OBJECTS_EN_MODE2_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_23_BIT_OBJECTS_EN_MODE2_PASS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE2_PASS4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS1_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS1_set", value );

    /* (0x0000079c bits 29:15) field OBJECTS_EN_MODE3_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000079c bits 29:15) field OBJECTS_EN_MODE3_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS1_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000079c bits 29:15) field OBJECTS_EN_MODE3_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000079c bits 29:15) field OBJECTS_EN_MODE3_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS1_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000079c bits 29:15) field OBJECTS_EN_MODE3_PASS1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS0_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS0_set", value );

    /* (0x0000079c bits 14:0) field OBJECTS_EN_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000079c bits 14:0) field OBJECTS_EN_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS0_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000079c bits 14:0) field OBJECTS_EN_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000079c bits 14:0) field OBJECTS_EN_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS0_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS0_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS0_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000079c bits 14:0) field OBJECTS_EN_MODE3_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_24_BIT_OBJECTS_EN_MODE3_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS3_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS3_set", value );

    /* (0x000007a0 bits 29:15) field OBJECTS_EN_MODE3_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007a0 bits 29:15) field OBJECTS_EN_MODE3_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS3_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007a0 bits 29:15) field OBJECTS_EN_MODE3_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007a0 bits 29:15) field OBJECTS_EN_MODE3_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS3_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007a0 bits 29:15) field OBJECTS_EN_MODE3_PASS3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS2_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS2_set", value );

    /* (0x000007a0 bits 14:0) field OBJECTS_EN_MODE3_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007a0 bits 14:0) field OBJECTS_EN_MODE3_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS2_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007a0 bits 14:0) field OBJECTS_EN_MODE3_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007a0 bits 14:0) field OBJECTS_EN_MODE3_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS2_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007a0 bits 14:0) field OBJECTS_EN_MODE3_PASS2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_25_BIT_OBJECTS_EN_MODE3_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS5_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS5_set", value );

    /* (0x000007a4 bits 29:15) field OBJECTS_EN_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007a4 bits 29:15) field OBJECTS_EN_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS5_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS5_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS5_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007a4 bits 29:15) field OBJECTS_EN_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007a4 bits 29:15) field OBJECTS_EN_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS5_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS5_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS5_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS5_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007a4 bits 29:15) field OBJECTS_EN_MODE3_PASS5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OBJECTS_EN_MODE3_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS4_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS4_set", value );

    /* (0x000007a4 bits 14:0) field OBJECTS_EN_MODE3_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OBJECTS_EN_MODE3_PASS4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007a4 bits 14:0) field OBJECTS_EN_MODE3_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OBJECTS_EN_MODE3_PASS4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS4_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS4_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS4_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007a4 bits 14:0) field OBJECTS_EN_MODE3_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007a4 bits 14:0) field OBJECTS_EN_MODE3_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS4_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS4_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS4_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS4_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007a4 bits 14:0) field OBJECTS_EN_MODE3_PASS4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_26_BIT_OBJECTS_EN_MODE3_PASS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OBJECTS_EN_MODE3_PASS4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_OFL_DECAY_set( t8_ctrl_buffer_t *b_ptr,
                                                t8_handle_t *h_ptr,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_OFL_DECAY_set( t8_ctrl_buffer_t *b_ptr,
                                                t8_handle_t *h_ptr,
                                                UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_OFL_DECAY_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_OFL_DECAY_set", value );

    /* (0x000007a8 bits 23:19) field OFL_DECAY of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_OFL_DECAY_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_OFL_DECAY_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_OFL_DECAY_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_OFL_DECAY_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007a8 bits 23:19) field OFL_DECAY of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_OFL_DECAY_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_OFL_DECAY_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_OFL_DECAY_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_OFL_DECAY_set( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_OFL_DECAY_set( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OFL_DECAY_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OFL_DECAY_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OFL_DECAY_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007a8 bits 23:19) field OFL_DECAY of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007a8 bits 23:19) field OFL_DECAY of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_OFL_DECAY_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_OFL_DECAY_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_OFL_DECAY_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_OFL_DECAY_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_OFL_DECAY_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_OFL_DECAY_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007a8 bits 23:19) field OFL_DECAY of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_OFL_DECAY_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_OFL_DECAY_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_OFL_DECAY_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_OFL_DECAY_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_OFL_DECAY_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_LMS_DATA_SEL_set( t8_ctrl_buffer_t *b_ptr,
                                                   t8_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LMS_DATA_SEL_set( t8_ctrl_buffer_t *b_ptr,
                                                   t8_handle_t *h_ptr,
                                                   UINT32 value )
{
    if (value > 32767)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LMS_DATA_SEL_set", value, 32767);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LMS_DATA_SEL_set", value );

    /* (0x000007a8 bits 18:4) field LMS_DATA_SEL of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_LMS_DATA_SEL_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_LMS_DATA_SEL_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LMS_DATA_SEL_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LMS_DATA_SEL_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007a8 bits 18:4) field LMS_DATA_SEL of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_LMS_DATA_SEL_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_LMS_DATA_SEL_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LMS_DATA_SEL_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_LMS_DATA_SEL_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_LMS_DATA_SEL_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LMS_DATA_SEL_set", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LMS_DATA_SEL_set", stop_bit, 14 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LMS_DATA_SEL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007a8 bits 18:4) field LMS_DATA_SEL of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007a8 bits 18:4) field LMS_DATA_SEL of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_LMS_DATA_SEL_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_LMS_DATA_SEL_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_LMS_DATA_SEL_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_LMS_DATA_SEL_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LMS_DATA_SEL_get", stop_bit, start_bit );
    if (stop_bit > 14) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LMS_DATA_SEL_get", stop_bit, 14 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007a8 bits 18:4) field LMS_DATA_SEL of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_LMS_DATA_SEL_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_LMS_DATA_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_LMS_DATA_SEL_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_LMS_DATA_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LMS_DATA_SEL_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_SEL_LMS_CLIP_set( t8_ctrl_buffer_t *b_ptr,
                                                   t8_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_SEL_LMS_CLIP_set( t8_ctrl_buffer_t *b_ptr,
                                                   t8_handle_t *h_ptr,
                                                   UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_SEL_LMS_CLIP_set", value, 3);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_SEL_LMS_CLIP_set", value );

    /* (0x000007a8 bits 3:2) field SEL_LMS_CLIP of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_SEL_LMS_CLIP_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_SEL_LMS_CLIP_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_SEL_LMS_CLIP_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_SEL_LMS_CLIP_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007a8 bits 3:2) field SEL_LMS_CLIP of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_SEL_LMS_CLIP_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_SEL_LMS_CLIP_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_SEL_LMS_CLIP_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_SEL_LMS_CLIP_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_SEL_LMS_CLIP_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_SEL_LMS_CLIP_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_SEL_LMS_CLIP_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_SEL_LMS_CLIP_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007a8 bits 3:2) field SEL_LMS_CLIP of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007a8 bits 3:2) field SEL_LMS_CLIP of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_SEL_LMS_CLIP_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_SEL_LMS_CLIP_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_SEL_LMS_CLIP_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_SEL_LMS_CLIP_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_SEL_LMS_CLIP_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_SEL_LMS_CLIP_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007a8 bits 3:2) field SEL_LMS_CLIP of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_SEL_LMS_CLIP_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_SEL_LMS_CLIP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_SEL_LMS_CLIP_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_SEL_LMS_CLIP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_SEL_LMS_CLIP_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_PRELOAD_ENB_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PRELOAD_ENB_PASS1TO5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PRELOAD_ENB_PASS1TO5_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_PRELOAD_ENB_PASS1TO5_set", value );

    /* (0x000007a8 bits 1) field PRELOAD_ENB_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_PRELOAD_ENB_PASS1TO5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_PRELOAD_ENB_PASS1TO5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_PRELOAD_ENB_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PRELOAD_ENB_PASS1TO5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007a8 bits 1) field PRELOAD_ENB_PASS1TO5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_PRELOAD_ENB_PASS1TO5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_PRELOAD_ENB_PASS1TO5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_PRELOAD_ENB_PASS1TO5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_PRELOAD_ENB_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PRELOAD_ENB_PASS0_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PRELOAD_ENB_PASS0_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_PRELOAD_ENB_PASS0_set", value );

    /* (0x000007a8 bits 0) field PRELOAD_ENB_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_PRELOAD_ENB_PASS0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_PRELOAD_ENB_PASS0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_PRELOAD_ENB_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PRELOAD_ENB_PASS0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007a8 bits 0) field PRELOAD_ENB_PASS0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_PRELOAD_ENB_PASS0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_27_BIT_PRELOAD_ENB_PASS0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_PRELOAD_ENB_PASS0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_3_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_3_set", value );

    /* (0x000007ac bits 27:21) field DP_FFE_A_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007ac bits 27:21) field DP_FFE_A_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_3_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_3_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007ac bits 27:21) field DP_FFE_A_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007ac bits 27:21) field DP_FFE_A_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_3_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_3_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007ac bits 27:21) field DP_FFE_A_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_2_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_2_set", value );

    /* (0x000007ac bits 20:14) field DP_FFE_A_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007ac bits 20:14) field DP_FFE_A_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_2_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_2_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007ac bits 20:14) field DP_FFE_A_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007ac bits 20:14) field DP_FFE_A_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_2_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_2_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007ac bits 20:14) field DP_FFE_A_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_1_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_1_set", value );

    /* (0x000007ac bits 13:7) field DP_FFE_A_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007ac bits 13:7) field DP_FFE_A_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_1_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_1_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007ac bits 13:7) field DP_FFE_A_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007ac bits 13:7) field DP_FFE_A_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_1_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_1_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007ac bits 13:7) field DP_FFE_A_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_0_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_0_set", value );

    /* (0x000007ac bits 6:0) field DP_FFE_A_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007ac bits 6:0) field DP_FFE_A_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_0_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_0_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007ac bits 6:0) field DP_FFE_A_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007ac bits 6:0) field DP_FFE_A_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_0_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_0_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_0_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_0_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_0_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007ac bits 6:0) field DP_FFE_A_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_28_BIT_DP_FFE_A_LUT_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_7_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_7_set", value );

    /* (0x000007b0 bits 27:21) field DP_FFE_A_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_7_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_7_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_7_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_7_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b0 bits 27:21) field DP_FFE_A_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_7_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_7_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_7_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_7_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_7_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b0 bits 27:21) field DP_FFE_A_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b0 bits 27:21) field DP_FFE_A_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_7_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_7_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_7_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_7_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_7_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_7_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b0 bits 27:21) field DP_FFE_A_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_7_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_7_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_6_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_6_set", value );

    /* (0x000007b0 bits 20:14) field DP_FFE_A_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_6_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_6_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_6_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_6_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b0 bits 20:14) field DP_FFE_A_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_6_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_6_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_6_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_6_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_6_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b0 bits 20:14) field DP_FFE_A_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b0 bits 20:14) field DP_FFE_A_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_6_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_6_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_6_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_6_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_6_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_6_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b0 bits 20:14) field DP_FFE_A_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_6_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_6_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_5_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_5_set", value );

    /* (0x000007b0 bits 13:7) field DP_FFE_A_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b0 bits 13:7) field DP_FFE_A_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_5_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_5_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b0 bits 13:7) field DP_FFE_A_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b0 bits 13:7) field DP_FFE_A_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_5_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_5_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_5_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_5_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_5_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b0 bits 13:7) field DP_FFE_A_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_A_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_4_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_4_set", value );

    /* (0x000007b0 bits 6:0) field DP_FFE_A_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_A_LUT_4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b0 bits 6:0) field DP_FFE_A_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_A_LUT_4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_A_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_4_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_4_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b0 bits 6:0) field DP_FFE_A_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b0 bits 6:0) field DP_FFE_A_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_4_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_4_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_A_LUT_4_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_A_LUT_4_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_A_LUT_4_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b0 bits 6:0) field DP_FFE_A_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_29_BIT_DP_FFE_A_LUT_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_A_LUT_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_3_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_3_set", value );

    /* (0x000007b4 bits 27:21) field DP_FFE_B_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b4 bits 27:21) field DP_FFE_B_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_3_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_3_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b4 bits 27:21) field DP_FFE_B_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b4 bits 27:21) field DP_FFE_B_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_3_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_3_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b4 bits 27:21) field DP_FFE_B_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_2_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_2_set", value );

    /* (0x000007b4 bits 20:14) field DP_FFE_B_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b4 bits 20:14) field DP_FFE_B_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_2_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_2_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b4 bits 20:14) field DP_FFE_B_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b4 bits 20:14) field DP_FFE_B_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_2_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_2_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b4 bits 20:14) field DP_FFE_B_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_1_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_1_set", value );

    /* (0x000007b4 bits 13:7) field DP_FFE_B_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b4 bits 13:7) field DP_FFE_B_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_1_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_1_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b4 bits 13:7) field DP_FFE_B_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b4 bits 13:7) field DP_FFE_B_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_1_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_1_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b4 bits 13:7) field DP_FFE_B_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_0_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_0_set", value );

    /* (0x000007b4 bits 6:0) field DP_FFE_B_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b4 bits 6:0) field DP_FFE_B_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_0_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_0_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b4 bits 6:0) field DP_FFE_B_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b4 bits 6:0) field DP_FFE_B_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_0_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_0_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_0_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_0_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_0_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b4 bits 6:0) field DP_FFE_B_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_30_BIT_DP_FFE_B_LUT_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_7_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_7_set", value );

    /* (0x000007b8 bits 27:21) field DP_FFE_B_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_7_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_7_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_7_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_7_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b8 bits 27:21) field DP_FFE_B_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_7_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_7_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_7_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_7_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_7_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b8 bits 27:21) field DP_FFE_B_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b8 bits 27:21) field DP_FFE_B_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_7_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_7_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_7_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_7_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_7_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_7_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b8 bits 27:21) field DP_FFE_B_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_7_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_7_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_6_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_6_set", value );

    /* (0x000007b8 bits 20:14) field DP_FFE_B_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_6_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_6_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_6_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_6_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b8 bits 20:14) field DP_FFE_B_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_6_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_6_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_6_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_6_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_6_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b8 bits 20:14) field DP_FFE_B_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b8 bits 20:14) field DP_FFE_B_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_6_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_6_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_6_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_6_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_6_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_6_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b8 bits 20:14) field DP_FFE_B_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_6_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_6_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_5_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_5_set", value );

    /* (0x000007b8 bits 13:7) field DP_FFE_B_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b8 bits 13:7) field DP_FFE_B_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_5_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_5_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b8 bits 13:7) field DP_FFE_B_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b8 bits 13:7) field DP_FFE_B_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_5_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_5_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_5_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_5_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_5_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b8 bits 13:7) field DP_FFE_B_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_B_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_4_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_4_set", value );

    /* (0x000007b8 bits 6:0) field DP_FFE_B_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_B_LUT_4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007b8 bits 6:0) field DP_FFE_B_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_B_LUT_4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_B_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_4_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_4_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007b8 bits 6:0) field DP_FFE_B_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007b8 bits 6:0) field DP_FFE_B_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_4_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_4_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_B_LUT_4_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_B_LUT_4_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_B_LUT_4_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007b8 bits 6:0) field DP_FFE_B_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_31_BIT_DP_FFE_B_LUT_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_B_LUT_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_3_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_3_set", value );

    /* (0x000007bc bits 27:21) field DP_FFE_C_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007bc bits 27:21) field DP_FFE_C_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_3_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_3_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007bc bits 27:21) field DP_FFE_C_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007bc bits 27:21) field DP_FFE_C_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_3_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_3_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007bc bits 27:21) field DP_FFE_C_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_2_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_2_set", value );

    /* (0x000007bc bits 20:14) field DP_FFE_C_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007bc bits 20:14) field DP_FFE_C_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_2_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_2_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007bc bits 20:14) field DP_FFE_C_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007bc bits 20:14) field DP_FFE_C_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_2_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_2_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007bc bits 20:14) field DP_FFE_C_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_1_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_1_set", value );

    /* (0x000007bc bits 13:7) field DP_FFE_C_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007bc bits 13:7) field DP_FFE_C_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_1_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_1_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007bc bits 13:7) field DP_FFE_C_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007bc bits 13:7) field DP_FFE_C_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_1_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_1_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007bc bits 13:7) field DP_FFE_C_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_0_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_0_set", value );

    /* (0x000007bc bits 6:0) field DP_FFE_C_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007bc bits 6:0) field DP_FFE_C_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_0_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_0_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007bc bits 6:0) field DP_FFE_C_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007bc bits 6:0) field DP_FFE_C_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_0_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_0_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_0_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_0_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_0_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007bc bits 6:0) field DP_FFE_C_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_32_BIT_DP_FFE_C_LUT_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_7_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_7_set", value );

    /* (0x000007c0 bits 27:21) field DP_FFE_C_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_7_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_7_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_7_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_7_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c0 bits 27:21) field DP_FFE_C_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_7_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_7_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_7_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_7_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_7_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c0 bits 27:21) field DP_FFE_C_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c0 bits 27:21) field DP_FFE_C_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_7_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_7_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_7_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_7_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_7_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_7_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c0 bits 27:21) field DP_FFE_C_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_7_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_7_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_6_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_6_set", value );

    /* (0x000007c0 bits 20:14) field DP_FFE_C_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_6_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_6_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_6_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_6_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c0 bits 20:14) field DP_FFE_C_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_6_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_6_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_6_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_6_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_6_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c0 bits 20:14) field DP_FFE_C_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c0 bits 20:14) field DP_FFE_C_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_6_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_6_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_6_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_6_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_6_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_6_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c0 bits 20:14) field DP_FFE_C_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_6_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_6_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_5_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_5_set", value );

    /* (0x000007c0 bits 13:7) field DP_FFE_C_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c0 bits 13:7) field DP_FFE_C_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_5_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_5_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c0 bits 13:7) field DP_FFE_C_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c0 bits 13:7) field DP_FFE_C_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_5_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_5_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_5_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_5_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_5_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c0 bits 13:7) field DP_FFE_C_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_C_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_4_set", value, 127);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_4_set", value );

    /* (0x000007c0 bits 6:0) field DP_FFE_C_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_C_LUT_4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c0 bits 6:0) field DP_FFE_C_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_DP_FFE_C_LUT_4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_C_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_4_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_4_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c0 bits 6:0) field DP_FFE_C_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c0 bits 6:0) field DP_FFE_C_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_4_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_4_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_C_LUT_4_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_C_LUT_4_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_C_LUT_4_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c0 bits 6:0) field DP_FFE_C_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_33_BIT_DP_FFE_C_LUT_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_C_LUT_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_5_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_5_set", value );

    /* (0x000007c4 bits 29:25) field TR_FFE_A_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c4 bits 29:25) field TR_FFE_A_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_5_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_5_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c4 bits 29:25) field TR_FFE_A_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c4 bits 29:25) field TR_FFE_A_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_5_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_5_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_5_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_5_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_5_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c4 bits 29:25) field TR_FFE_A_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_4_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_4_set", value );

    /* (0x000007c4 bits 24:20) field TR_FFE_A_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c4 bits 24:20) field TR_FFE_A_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_4_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_4_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c4 bits 24:20) field TR_FFE_A_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c4 bits 24:20) field TR_FFE_A_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_4_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_4_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_4_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_4_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_4_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c4 bits 24:20) field TR_FFE_A_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_3_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_3_set", value );

    /* (0x000007c4 bits 19:15) field TR_FFE_A_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c4 bits 19:15) field TR_FFE_A_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_3_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_3_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c4 bits 19:15) field TR_FFE_A_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c4 bits 19:15) field TR_FFE_A_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_3_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_3_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c4 bits 19:15) field TR_FFE_A_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_2_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_2_set", value );

    /* (0x000007c4 bits 14:10) field TR_FFE_A_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c4 bits 14:10) field TR_FFE_A_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_2_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c4 bits 14:10) field TR_FFE_A_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c4 bits 14:10) field TR_FFE_A_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c4 bits 14:10) field TR_FFE_A_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_1_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_1_set", value );

    /* (0x000007c4 bits 9:5) field TR_FFE_A_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c4 bits 9:5) field TR_FFE_A_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_1_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c4 bits 9:5) field TR_FFE_A_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c4 bits 9:5) field TR_FFE_A_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c4 bits 9:5) field TR_FFE_A_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_0_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_0_set", value );

    /* (0x000007c4 bits 4:0) field TR_FFE_A_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c4 bits 4:0) field TR_FFE_A_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_0_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_0_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c4 bits 4:0) field TR_FFE_A_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c4 bits 4:0) field TR_FFE_A_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_0_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_0_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_0_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_0_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_0_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c4 bits 4:0) field TR_FFE_A_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_34_BIT_TR_FFE_A_LUT_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_7_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_7_set", value );

    /* (0x000007c8 bits 9:5) field TR_FFE_A_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_7_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_7_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_7_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_7_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c8 bits 9:5) field TR_FFE_A_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_7_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_7_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_7_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_7_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_7_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c8 bits 9:5) field TR_FFE_A_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c8 bits 9:5) field TR_FFE_A_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_7_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_7_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_7_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_7_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_7_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_7_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c8 bits 9:5) field TR_FFE_A_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_7_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_7_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_A_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_6_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_6_set", value );

    /* (0x000007c8 bits 4:0) field TR_FFE_A_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_6_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_6_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_6_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_A_LUT_6_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007c8 bits 4:0) field TR_FFE_A_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_6_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_6_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_A_LUT_6_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_A_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_6_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_6_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007c8 bits 4:0) field TR_FFE_A_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007c8 bits 4:0) field TR_FFE_A_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_6_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_6_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_6_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_A_LUT_6_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_A_LUT_6_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_A_LUT_6_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007c8 bits 4:0) field TR_FFE_A_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_6_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_6_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_35_BIT_TR_FFE_A_LUT_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_A_LUT_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_5_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_5_set", value );

    /* (0x000007cc bits 29:25) field TR_FFE_B_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_5_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_5_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_5_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007cc bits 29:25) field TR_FFE_B_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_5_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_5_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_5_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_5_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_5_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007cc bits 29:25) field TR_FFE_B_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007cc bits 29:25) field TR_FFE_B_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_5_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_5_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_5_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_5_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_5_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007cc bits 29:25) field TR_FFE_B_LUT_5 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_5_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_5_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_4_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_4_set", value );

    /* (0x000007cc bits 24:20) field TR_FFE_B_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_4_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_4_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_4_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007cc bits 24:20) field TR_FFE_B_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_4_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_4_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_4_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_4_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_4_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007cc bits 24:20) field TR_FFE_B_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007cc bits 24:20) field TR_FFE_B_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_4_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_4_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_4_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_4_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_4_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007cc bits 24:20) field TR_FFE_B_LUT_4 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_4_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_4_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_3_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_3_set", value );

    /* (0x000007cc bits 19:15) field TR_FFE_B_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007cc bits 19:15) field TR_FFE_B_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_3_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_3_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007cc bits 19:15) field TR_FFE_B_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007cc bits 19:15) field TR_FFE_B_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_3_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_3_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007cc bits 19:15) field TR_FFE_B_LUT_3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_2_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_2_set", value );

    /* (0x000007cc bits 14:10) field TR_FFE_B_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007cc bits 14:10) field TR_FFE_B_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_2_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007cc bits 14:10) field TR_FFE_B_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007cc bits 14:10) field TR_FFE_B_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007cc bits 14:10) field TR_FFE_B_LUT_2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_1_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_1_set", value );

    /* (0x000007cc bits 9:5) field TR_FFE_B_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007cc bits 9:5) field TR_FFE_B_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_1_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007cc bits 9:5) field TR_FFE_B_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007cc bits 9:5) field TR_FFE_B_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007cc bits 9:5) field TR_FFE_B_LUT_1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_0_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_0_set", value );

    /* (0x000007cc bits 4:0) field TR_FFE_B_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_0_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_0_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_0_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007cc bits 4:0) field TR_FFE_B_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_0_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_0_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_0_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_0_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_0_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007cc bits 4:0) field TR_FFE_B_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007cc bits 4:0) field TR_FFE_B_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_0_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_0_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_0_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_0_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_0_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007cc bits 4:0) field TR_FFE_B_LUT_0 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_0_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_0_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_36_BIT_TR_FFE_B_LUT_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_7_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_7_set", value );

    /* (0x000007d0 bits 9:5) field TR_FFE_B_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_7_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_7_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_7_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_7_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d0 bits 9:5) field TR_FFE_B_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_7_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_7_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_7_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_7_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_7_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_7_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007d0 bits 9:5) field TR_FFE_B_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007d0 bits 9:5) field TR_FFE_B_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_7_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_7_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_7_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_7_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_7_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_7_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007d0 bits 9:5) field TR_FFE_B_LUT_7 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_7_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_7_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TR_FFE_B_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_6_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_6_set", value );

    /* (0x000007d0 bits 4:0) field TR_FFE_B_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_6_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_6_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_6_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TR_FFE_B_LUT_6_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d0 bits 4:0) field TR_FFE_B_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_6_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_6_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_TR_FFE_B_LUT_6_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_TR_FFE_B_LUT_6_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_6_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_6_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007d0 bits 4:0) field TR_FFE_B_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007d0 bits 4:0) field TR_FFE_B_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_6_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_6_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_6_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_TR_FFE_B_LUT_6_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_TR_FFE_B_LUT_6_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_TR_FFE_B_LUT_6_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007d0 bits 4:0) field TR_FFE_B_LUT_6 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_6_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_6_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_37_BIT_TR_FFE_B_LUT_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_TR_FFE_B_LUT_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE3_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE3_set", value );

    /* (0x000007d4 bits 17) field LF_PROP_LEFT_SHIFT_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d4 bits 17) field LF_PROP_LEFT_SHIFT_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE2_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE2_set", value );

    /* (0x000007d4 bits 16) field LF_PROP_LEFT_SHIFT_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d4 bits 16) field LF_PROP_LEFT_SHIFT_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE1_set", value );

    /* (0x000007d4 bits 15) field LF_PROP_LEFT_SHIFT_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d4 bits 15) field LF_PROP_LEFT_SHIFT_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_LEFT_SHIFT_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_PROP_LEFT_SHIFT_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE3_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE3_set", value );

    /* (0x000007d4 bits 14:10) field LF_PROP_CTRL_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d4 bits 14:10) field LF_PROP_CTRL_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE3_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007d4 bits 14:10) field LF_PROP_CTRL_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007d4 bits 14:10) field LF_PROP_CTRL_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE3_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007d4 bits 14:10) field LF_PROP_CTRL_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE2_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE2_set", value );

    /* (0x000007d4 bits 9:5) field LF_PROP_CTRL_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d4 bits 9:5) field LF_PROP_CTRL_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE2_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007d4 bits 9:5) field LF_PROP_CTRL_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007d4 bits 9:5) field LF_PROP_CTRL_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007d4 bits 9:5) field LF_PROP_CTRL_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE1_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE1_set", value );

    /* (0x000007d4 bits 4:0) field LF_PROP_CTRL_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d4 bits 4:0) field LF_PROP_CTRL_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_PROP_CTRL_GAIN_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE1_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007d4 bits 4:0) field LF_PROP_CTRL_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007d4 bits 4:0) field LF_PROP_CTRL_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007d4 bits 4:0) field LF_PROP_CTRL_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_38_BIT_LF_PROP_CTRL_GAIN_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_PROP_CTRL_GAIN_MODE1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE3_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE3_set", value );

    /* (0x000007d8 bits 17) field LF_INTEG_LEFT_SHIFT_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d8 bits 17) field LF_INTEG_LEFT_SHIFT_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE2_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE2_set", value );

    /* (0x000007d8 bits 16) field LF_INTEG_LEFT_SHIFT_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d8 bits 16) field LF_INTEG_LEFT_SHIFT_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE1_set", value );

    /* (0x000007d8 bits 15) field LF_INTEG_LEFT_SHIFT_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d8 bits 15) field LF_INTEG_LEFT_SHIFT_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_LEFT_SHIFT_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_INTEG_LEFT_SHIFT_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE3_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE3_set", value );

    /* (0x000007d8 bits 14:10) field LF_INTEG_CTRL_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE3_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE3_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d8 bits 14:10) field LF_INTEG_CTRL_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE3_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE3_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007d8 bits 14:10) field LF_INTEG_CTRL_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007d8 bits 14:10) field LF_INTEG_CTRL_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE3_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE3_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007d8 bits 14:10) field LF_INTEG_CTRL_GAIN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE2_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE2_set", value );

    /* (0x000007d8 bits 9:5) field LF_INTEG_CTRL_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE2_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE2_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d8 bits 9:5) field LF_INTEG_CTRL_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE2_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE2_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007d8 bits 9:5) field LF_INTEG_CTRL_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007d8 bits 9:5) field LF_INTEG_CTRL_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE2_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007d8 bits 9:5) field LF_INTEG_CTRL_GAIN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE1_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE1_set", value );

    /* (0x000007d8 bits 4:0) field LF_INTEG_CTRL_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE1_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE1_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007d8 bits 4:0) field LF_INTEG_CTRL_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_LF_INTEG_CTRL_GAIN_MODE1_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE1_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007d8 bits 4:0) field LF_INTEG_CTRL_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007d8 bits 4:0) field LF_INTEG_CTRL_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE1_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007d8 bits 4:0) field LF_INTEG_CTRL_GAIN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_39_BIT_LF_INTEG_CTRL_GAIN_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_LF_INTEG_CTRL_GAIN_MODE1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RX_ADAPT_DONE_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_ADAPT_DONE_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_OVR_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_OVR_set", value );

    /* (0x000007dc bits 3) field RX_ADAPT_DONE_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_RX_ADAPT_DONE_OVR_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_RX_ADAPT_DONE_OVR_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_RX_ADAPT_DONE_OVR_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_DONE_OVR_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007dc bits 3) field RX_ADAPT_DONE_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_RX_ADAPT_DONE_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_RX_ADAPT_DONE_OVR_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_OVR_get", value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_MODE_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_MODE_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_MODE_OVR_set", value, 3);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_ADAPT_MODE_OVR_set", value );

    /* (0x000007dc bits 2:1) field ADAPT_MODE_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_ADAPT_MODE_OVR_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_ADAPT_MODE_OVR_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_OVR_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_OVR_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007dc bits 2:1) field ADAPT_MODE_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_ADAPT_MODE_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_ADAPT_MODE_OVR_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_ADAPT_MODE_OVR_get", value );

    return value;
}
static INLINE void t8_ctrl_field_range_ADAPT_MODE_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_ADAPT_MODE_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_MODE_OVR_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_MODE_OVR_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_MODE_OVR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000007dc bits 2:1) field ADAPT_MODE_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000007dc bits 2:1) field ADAPT_MODE_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_ADAPT_MODE_OVR_OFF + subfield_offset),
                                                               T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_ADAPT_MODE_OVR_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_ADAPT_MODE_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_MODE_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_MODE_OVR_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_MODE_OVR_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000007dc bits 2:1) field ADAPT_MODE_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_ADAPT_MODE_OVR_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_ADAPT_MODE_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_ADAPT_MODE_OVR_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_ADAPT_MODE_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_MODE_OVR_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RX_ADAPT_START_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_ADAPT_START_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_ADAPT_START_OVR_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_ctrl_field_RX_ADAPT_START_OVR_set", value );

    /* (0x000007dc bits 0) field RX_ADAPT_START_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_field_set( b_ptr,
                                                           h_ptr,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_RX_ADAPT_START_OVR_MSK,
                                                           T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_RX_ADAPT_START_OVR_OFF,
                                                           value);
}

static INLINE UINT32 t8_ctrl_field_RX_ADAPT_START_OVR_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_START_OVR_get( t8_ctrl_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000007dc bits 0) field RX_ADAPT_START_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_RX_ADAPT_START_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_GLOBAL_CFG_40_BIT_RX_ADAPT_START_OVR_OFF;
    IOLOG( "%s -> 0x%08x", "t8_ctrl_field_RX_ADAPT_START_OVR_get", value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_size2
 * ==================================================================================
 */
static INLINE void t8_ctrl_field_LOS_ENB_set( t8_ctrl_buffer_t *b_ptr,
                                              t8_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_LOS_ENB_set( t8_ctrl_buffer_t *b_ptr,
                                              t8_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_LOS_ENB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_LOS_ENB_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_LOS_ENB_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 21) field LOS_ENB of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_LOS_ENB_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_LOS_ENB_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_LOS_ENB_get( t8_ctrl_buffer_t *b_ptr,
                                                t8_handle_t *h_ptr,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_LOS_ENB_get( t8_ctrl_buffer_t *b_ptr,
                                                t8_handle_t *h_ptr,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_LOS_ENB_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 21) field LOS_ENB of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_LOS_ENB_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_LOS_ENB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_LOS_ENB_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADC_CALIB_DONE_OUT_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADC_CALIB_DONE_OUT_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_DONE_OUT_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_OUT_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_OUT_OVR_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 20) field ADC_CALIB_DONE_OUT_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_DONE_OUT_OVR_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_DONE_OUT_OVR_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADC_CALIB_DONE_OUT_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_DONE_OUT_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_DONE_OUT_OVR_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 20) field ADC_CALIB_DONE_OUT_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_DONE_OUT_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_DONE_OUT_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_OUT_OVR_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADC_CALIB_REQUEST_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADC_CALIB_REQUEST_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_REQUEST_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADC_CALIB_REQUEST_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_REQUEST_OVR_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 19) field ADC_CALIB_REQUEST_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_REQUEST_OVR_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_REQUEST_OVR_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADC_CALIB_REQUEST_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_REQUEST_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_REQUEST_OVR_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 19) field ADC_CALIB_REQUEST_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_REQUEST_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_REQUEST_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_REQUEST_OVR_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADC_CAL_DAC_ENB_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADC_CAL_DAC_ENB_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CAL_DAC_ENB_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADC_CAL_DAC_ENB_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADC_CAL_DAC_ENB_OVR_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 18) field ADC_CAL_DAC_ENB_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CAL_DAC_ENB_OVR_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CAL_DAC_ENB_OVR_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADC_CAL_DAC_ENB_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CAL_DAC_ENB_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CAL_DAC_ENB_OVR_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 18) field ADC_CAL_DAC_ENB_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CAL_DAC_ENB_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CAL_DAC_ENB_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CAL_DAC_ENB_OVR_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_PGA_ENB_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                  t8_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PGA_ENB_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                  t8_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PGA_ENB_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PGA_ENB_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_PGA_ENB_OVR_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 17) field PGA_ENB_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_PGA_ENB_OVR_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_PGA_ENB_OVR_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_PGA_ENB_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PGA_ENB_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PGA_ENB_OVR_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 17) field PGA_ENB_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_PGA_ENB_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_PGA_ENB_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_PGA_ENB_OVR_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_CALIB_FSM_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_CALIB_FSM_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_CALIB_FSM_OVR_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_CALIB_FSM_OVR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_CALIB_FSM_OVR_EN_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 16) field CALIB_FSM_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_CALIB_FSM_OVR_EN_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_CALIB_FSM_OVR_EN_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_CALIB_FSM_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_CALIB_FSM_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_CALIB_FSM_OVR_EN_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 16) field CALIB_FSM_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_CALIB_FSM_OVR_EN_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_CALIB_FSM_OVR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_CALIB_FSM_OVR_EN_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADC_CALIB_FORCE_set( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADC_CALIB_FORCE_set( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_FORCE_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADC_CALIB_FORCE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_FORCE_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 15) field ADC_CALIB_FORCE of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_FORCE_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_FORCE_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADC_CALIB_FORCE_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_FORCE_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_FORCE_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 15) field ADC_CALIB_FORCE of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_FORCE_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_FORCE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_FORCE_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADC_CALIB_START_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADC_CALIB_START_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_START_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADC_CALIB_START_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_START_EN_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 14) field ADC_CALIB_START_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_START_EN_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_START_EN_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADC_CALIB_START_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_START_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_START_EN_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 14) field ADC_CALIB_START_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_START_EN_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADC_CALIB_START_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_START_EN_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_SYNC_RESET_CLBRT_FSM_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_SYNC_RESET_CLBRT_FSM_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_SYNC_RESET_CLBRT_FSM_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_SYNC_RESET_CLBRT_FSM_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_SYNC_RESET_CLBRT_FSM_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 13) field SYNC_RESET_CLBRT_FSM of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_SYNC_RESET_CLBRT_FSM_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_SYNC_RESET_CLBRT_FSM_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_SYNC_RESET_CLBRT_FSM_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_SYNC_RESET_CLBRT_FSM_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_SYNC_RESET_CLBRT_FSM_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 13) field SYNC_RESET_CLBRT_FSM of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_SYNC_RESET_CLBRT_FSM_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_SYNC_RESET_CLBRT_FSM_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_SYNC_RESET_CLBRT_FSM_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_UPDATE_VALUES_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_UPDATE_VALUES_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_UPDATE_VALUES_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_UPDATE_VALUES_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_UPDATE_VALUES_OVR_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 12) field UPDATE_VALUES_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_UPDATE_VALUES_OVR_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_UPDATE_VALUES_OVR_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_UPDATE_VALUES_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_UPDATE_VALUES_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_UPDATE_VALUES_OVR_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 12) field UPDATE_VALUES_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_UPDATE_VALUES_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_UPDATE_VALUES_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_UPDATE_VALUES_OVR_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_UPDATE_VALUES_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_UPDATE_VALUES_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_UPDATE_VALUES_OVR_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_UPDATE_VALUES_OVR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_UPDATE_VALUES_OVR_EN_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 11) field UPDATE_VALUES_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_UPDATE_VALUES_OVR_EN_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_UPDATE_VALUES_OVR_EN_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_UPDATE_VALUES_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_UPDATE_VALUES_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_UPDATE_VALUES_OVR_EN_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 11) field UPDATE_VALUES_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_UPDATE_VALUES_OVR_EN_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_UPDATE_VALUES_OVR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_UPDATE_VALUES_OVR_EN_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_CLK_ENB_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_CLK_ENB_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_CLK_ENB_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_CLK_ENB_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_CLK_ENB_OVR_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 10) field ADAPT_CLK_ENB_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_CLK_ENB_OVR_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_CLK_ENB_OVR_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_CLK_ENB_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_CLK_ENB_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_CLK_ENB_OVR_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 10) field ADAPT_CLK_ENB_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_CLK_ENB_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_CLK_ENB_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_CLK_ENB_OVR_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 9) field ADAPT_CLK_ENB_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_CLK_ENB_OVR_EN_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_CLK_ENB_OVR_EN_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 9) field ADAPT_CLK_ENB_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_CLK_ENB_OVR_EN_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_CLK_ENB_OVR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_ENB_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_ENB_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_ENB_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_ENB_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_ENB_OVR_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 8) field ADAPT_ENB_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_ENB_OVR_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_ENB_OVR_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_ENB_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_ENB_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_ENB_OVR_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 8) field ADAPT_ENB_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_ENB_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_ENB_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_ENB_OVR_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_ENB_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_ENB_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_ENB_OVR_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_ENB_OVR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_ENB_OVR_EN_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 7) field ADAPT_ENB_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_ENB_OVR_EN_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_ENB_OVR_EN_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_ENB_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_ENB_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_ENB_OVR_EN_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 7) field ADAPT_ENB_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_ENB_OVR_EN_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_ENB_OVR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_ENB_OVR_EN_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_set( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 6) field FORCE_ENABLE_COUNTER_TRIG of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_FORCE_ENABLE_COUNTER_TRIG_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_FORCE_ENABLE_COUNTER_TRIG_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_get( t8_ctrl_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 6) field FORCE_ENABLE_COUNTER_TRIG of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_FORCE_ENABLE_COUNTER_TRIG_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_FORCE_ENABLE_COUNTER_TRIG_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_STATUS_0_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_STATUS_0_OVR_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_STATUS_0_OVR_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_OVR_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_OVR_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 5) field ADAPT_STATUS_0_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_STATUS_0_OVR_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_STATUS_0_OVR_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_STATUS_0_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_STATUS_0_OVR_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_STATUS_0_OVR_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 5) field ADAPT_STATUS_0_OVR of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_STATUS_0_OVR_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_STATUS_0_OVR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_OVR_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_STATUS_0_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_STATUS_0_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_STATUS_0_OVR_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_OVR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_OVR_EN_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 4) field ADAPT_STATUS_0_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_STATUS_0_OVR_EN_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_STATUS_0_OVR_EN_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_STATUS_0_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_STATUS_0_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_STATUS_0_OVR_EN_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 4) field ADAPT_STATUS_0_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_STATUS_0_OVR_EN_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_STATUS_0_OVR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_OVR_EN_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_INIT_FORCE_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_INIT_FORCE_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_INIT_FORCE_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_INIT_FORCE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_INIT_FORCE_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 3) field ADAPT_INIT_FORCE of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_INIT_FORCE_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_INIT_FORCE_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_INIT_FORCE_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_INIT_FORCE_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_INIT_FORCE_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 3) field ADAPT_INIT_FORCE of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_INIT_FORCE_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_ADAPT_INIT_FORCE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_INIT_FORCE_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_TO_CMN_PCBI_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_TO_CMN_PCBI_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_TO_CMN_PCBI_OVR_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_TO_CMN_PCBI_OVR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_TO_CMN_PCBI_OVR_EN_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 2) field TO_CMN_PCBI_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_TO_CMN_PCBI_OVR_EN_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_TO_CMN_PCBI_OVR_EN_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_TO_CMN_PCBI_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_TO_CMN_PCBI_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_TO_CMN_PCBI_OVR_EN_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 2) field TO_CMN_PCBI_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_TO_CMN_PCBI_OVR_EN_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_TO_CMN_PCBI_OVR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_TO_CMN_PCBI_OVR_EN_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_FROM_CMN_PCBI_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_FROM_CMN_PCBI_OVR_EN_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_FROM_CMN_PCBI_OVR_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_FROM_CMN_PCBI_OVR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_FROM_CMN_PCBI_OVR_EN_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 1) field FROM_CMN_PCBI_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_FROM_CMN_PCBI_OVR_EN_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_FROM_CMN_PCBI_OVR_EN_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_FROM_CMN_PCBI_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_FROM_CMN_PCBI_OVR_EN_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_FROM_CMN_PCBI_OVR_EN_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 1) field FROM_CMN_PCBI_OVR_EN of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_FROM_CMN_PCBI_OVR_EN_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_FROM_CMN_PCBI_OVR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_FROM_CMN_PCBI_OVR_EN_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_RESET_ADPT_FSM_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RESET_ADPT_FSM_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RESET_ADPT_FSM_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RESET_ADPT_FSM_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_RESET_ADPT_FSM_set", N, value );

    /* ((0x00000700 + (N) * 0x4) bits 0) field RESET_ADPT_FSM of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_RESET_ADPT_FSM_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_RESET_ADPT_FSM_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_RESET_ADPT_FSM_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RESET_ADPT_FSM_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RESET_ADPT_FSM_get", N, 1);
    /* ((0x00000700 + (N) * 0x4) bits 0) field RESET_ADPT_FSM of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_RESET_ADPT_FSM_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_1_BIT_RESET_ADPT_FSM_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RESET_ADPT_FSM_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_M_PRELOAD_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_M_PRELOAD_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE3_set", N, 1);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE3_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE3_set", N, value );

    /* ((0x00000708 + (N) * 0x4) bits 29:24) field DP_FFE_M_PRELOAD_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE3_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE3_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_M_PRELOAD_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_M_PRELOAD_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE3_get", N, 1);
    /* ((0x00000708 + (N) * 0x4) bits 29:24) field DP_FFE_M_PRELOAD_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE3_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE3_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000708 + (N) * 0x4) bits 29:24) field DP_FFE_M_PRELOAD_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000708 + (N) * 0x4) bits 29:24) field DP_FFE_M_PRELOAD_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE3_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE3_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000708 + (N) * 0x4) bits 29:24) field DP_FFE_M_PRELOAD_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE3_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_M_PRELOAD_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_M_PRELOAD_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE2_set", N, 1);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE2_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE2_set", N, value );

    /* ((0x00000708 + (N) * 0x4) bits 23:18) field DP_FFE_M_PRELOAD_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE2_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE2_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_M_PRELOAD_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_M_PRELOAD_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE2_get", N, 1);
    /* ((0x00000708 + (N) * 0x4) bits 23:18) field DP_FFE_M_PRELOAD_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE2_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE2_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000708 + (N) * 0x4) bits 23:18) field DP_FFE_M_PRELOAD_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000708 + (N) * 0x4) bits 23:18) field DP_FFE_M_PRELOAD_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE2_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE2_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000708 + (N) * 0x4) bits 23:18) field DP_FFE_M_PRELOAD_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE2_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_DP_FFE_M_PRELOAD_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_DP_FFE_M_PRELOAD_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE1_set", N, 1);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE1_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE1_set", N, value );

    /* ((0x00000708 + (N) * 0x4) bits 17:12) field DP_FFE_M_PRELOAD_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE1_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE1_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_DP_FFE_M_PRELOAD_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_DP_FFE_M_PRELOAD_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE1_get", N, 1);
    /* ((0x00000708 + (N) * 0x4) bits 17:12) field DP_FFE_M_PRELOAD_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_DP_FFE_M_PRELOAD_MODE1_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000708 + (N) * 0x4) bits 17:12) field DP_FFE_M_PRELOAD_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000708 + (N) * 0x4) bits 17:12) field DP_FFE_M_PRELOAD_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE1_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE1_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000708 + (N) * 0x4) bits 17:12) field DP_FFE_M_PRELOAD_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_DP_FFE_M_PRELOAD_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_DP_FFE_M_PRELOAD_MODE1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_PRELOAD_LUT_INDEX_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PRELOAD_LUT_INDEX_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE3_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE3_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE3_set", N, value );

    /* ((0x00000708 + (N) * 0x4) bits 11:9) field PRELOAD_LUT_INDEX_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE3_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE3_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_INDEX_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_INDEX_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE3_get", N, 1);
    /* ((0x00000708 + (N) * 0x4) bits 11:9) field PRELOAD_LUT_INDEX_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE3_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE3_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000708 + (N) * 0x4) bits 11:9) field PRELOAD_LUT_INDEX_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000708 + (N) * 0x4) bits 11:9) field PRELOAD_LUT_INDEX_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE3_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE3_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000708 + (N) * 0x4) bits 11:9) field PRELOAD_LUT_INDEX_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE3_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_PRELOAD_LUT_INDEX_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PRELOAD_LUT_INDEX_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE2_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE2_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE2_set", N, value );

    /* ((0x00000708 + (N) * 0x4) bits 8:6) field PRELOAD_LUT_INDEX_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE2_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE2_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_INDEX_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_INDEX_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE2_get", N, 1);
    /* ((0x00000708 + (N) * 0x4) bits 8:6) field PRELOAD_LUT_INDEX_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE2_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE2_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000708 + (N) * 0x4) bits 8:6) field PRELOAD_LUT_INDEX_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000708 + (N) * 0x4) bits 8:6) field PRELOAD_LUT_INDEX_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE2_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE2_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000708 + (N) * 0x4) bits 8:6) field PRELOAD_LUT_INDEX_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE2_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_PRELOAD_LUT_INDEX_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PRELOAD_LUT_INDEX_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE1_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE1_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE1_set", N, value );

    /* ((0x00000708 + (N) * 0x4) bits 5:3) field PRELOAD_LUT_INDEX_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE1_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE1_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_INDEX_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_INDEX_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE1_get", N, 1);
    /* ((0x00000708 + (N) * 0x4) bits 5:3) field PRELOAD_LUT_INDEX_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_INDEX_MODE1_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000708 + (N) * 0x4) bits 5:3) field PRELOAD_LUT_INDEX_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000708 + (N) * 0x4) bits 5:3) field PRELOAD_LUT_INDEX_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE1_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE1_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000708 + (N) * 0x4) bits 5:3) field PRELOAD_LUT_INDEX_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_INDEX_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PRELOAD_LUT_INDEX_MODE1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_PRELOAD_LUT_EN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PRELOAD_LUT_EN_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_EN_MODE3_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PRELOAD_LUT_EN_MODE3_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_EN_MODE3_set", N, value );

    /* ((0x00000708 + (N) * 0x4) bits 2) field PRELOAD_LUT_EN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE3_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE3_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_EN_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_EN_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_EN_MODE3_get", N, 1);
    /* ((0x00000708 + (N) * 0x4) bits 2) field PRELOAD_LUT_EN_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE3_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_EN_MODE3_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_PRELOAD_LUT_EN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PRELOAD_LUT_EN_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_EN_MODE2_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PRELOAD_LUT_EN_MODE2_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_EN_MODE2_set", N, value );

    /* ((0x00000708 + (N) * 0x4) bits 1) field PRELOAD_LUT_EN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE2_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE2_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_EN_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_EN_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_EN_MODE2_get", N, 1);
    /* ((0x00000708 + (N) * 0x4) bits 1) field PRELOAD_LUT_EN_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE2_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_EN_MODE2_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_PRELOAD_LUT_EN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PRELOAD_LUT_EN_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_EN_MODE1_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PRELOAD_LUT_EN_MODE1_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_EN_MODE1_set", N, value );

    /* ((0x00000708 + (N) * 0x4) bits 0) field PRELOAD_LUT_EN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE1_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE1_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_EN_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PRELOAD_LUT_EN_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PRELOAD_LUT_EN_MODE1_get", N, 1);
    /* ((0x00000708 + (N) * 0x4) bits 0) field PRELOAD_LUT_EN_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_2_BIT_PRELOAD_LUT_EN_MODE1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_PRELOAD_LUT_EN_MODE1_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_RX_PEAK_ENB_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_PEAK_ENB_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_ENB_MODE3_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_PEAK_ENB_MODE3_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_ENB_MODE3_set", N, value );

    /* ((0x00000710 + (N) * 0x4) bits 26) field RX_PEAK_ENB_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE3_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE3_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_RX_PEAK_ENB_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_PEAK_ENB_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_ENB_MODE3_get", N, 1);
    /* ((0x00000710 + (N) * 0x4) bits 26) field RX_PEAK_ENB_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE3_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_ENB_MODE3_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_RX_PEAK_ENB_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_PEAK_ENB_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_ENB_MODE2_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_PEAK_ENB_MODE2_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_ENB_MODE2_set", N, value );

    /* ((0x00000710 + (N) * 0x4) bits 25) field RX_PEAK_ENB_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE2_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE2_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_RX_PEAK_ENB_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_PEAK_ENB_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_ENB_MODE2_get", N, 1);
    /* ((0x00000710 + (N) * 0x4) bits 25) field RX_PEAK_ENB_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE2_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_ENB_MODE2_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_RX_PEAK_ENB_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_PEAK_ENB_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_ENB_MODE1_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_PEAK_ENB_MODE1_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_ENB_MODE1_set", N, value );

    /* ((0x00000710 + (N) * 0x4) bits 24) field RX_PEAK_ENB_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE1_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE1_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_RX_PEAK_ENB_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_PEAK_ENB_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_ENB_MODE1_get", N, 1);
    /* ((0x00000710 + (N) * 0x4) bits 24) field RX_PEAK_ENB_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_ENB_MODE1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_ENB_MODE1_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_RX_PEAK_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_PEAK_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_MODE3_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_PEAK_MODE3_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_MODE3_set", N, value );

    /* ((0x00000710 + (N) * 0x4) bits 23:21) field RX_PEAK_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE3_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE3_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_RX_PEAK_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_PEAK_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_MODE3_get", N, 1);
    /* ((0x00000710 + (N) * 0x4) bits 23:21) field RX_PEAK_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE3_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_MODE3_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_RX_PEAK_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RX_PEAK_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_RX_PEAK_MODE3_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RX_PEAK_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RX_PEAK_MODE3_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RX_PEAK_MODE3_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000710 + (N) * 0x4) bits 23:21) field RX_PEAK_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000710 + (N) * 0x4) bits 23:21) field RX_PEAK_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE3_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE3_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RX_PEAK_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RX_PEAK_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_RX_PEAK_MODE3_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RX_PEAK_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RX_PEAK_MODE3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000710 + (N) * 0x4) bits 23:21) field RX_PEAK_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RX_PEAK_MODE3_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RX_PEAK_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_PEAK_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_MODE2_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_PEAK_MODE2_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_MODE2_set", N, value );

    /* ((0x00000710 + (N) * 0x4) bits 20:18) field RX_PEAK_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE2_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE2_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_RX_PEAK_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_PEAK_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_MODE2_get", N, 1);
    /* ((0x00000710 + (N) * 0x4) bits 20:18) field RX_PEAK_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE2_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_MODE2_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_RX_PEAK_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RX_PEAK_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_RX_PEAK_MODE2_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RX_PEAK_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RX_PEAK_MODE2_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RX_PEAK_MODE2_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000710 + (N) * 0x4) bits 20:18) field RX_PEAK_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000710 + (N) * 0x4) bits 20:18) field RX_PEAK_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE2_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE2_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RX_PEAK_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RX_PEAK_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_RX_PEAK_MODE2_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RX_PEAK_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RX_PEAK_MODE2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000710 + (N) * 0x4) bits 20:18) field RX_PEAK_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RX_PEAK_MODE2_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_RX_PEAK_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_PEAK_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_MODE1_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_PEAK_MODE1_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_MODE1_set", N, value );

    /* ((0x00000710 + (N) * 0x4) bits 17:15) field RX_PEAK_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE1_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE1_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_RX_PEAK_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_PEAK_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_PEAK_MODE1_get", N, 1);
    /* ((0x00000710 + (N) * 0x4) bits 17:15) field RX_PEAK_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_PEAK_MODE1_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_RX_PEAK_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_RX_PEAK_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_RX_PEAK_MODE1_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RX_PEAK_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RX_PEAK_MODE1_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RX_PEAK_MODE1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000710 + (N) * 0x4) bits 17:15) field RX_PEAK_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000710 + (N) * 0x4) bits 17:15) field RX_PEAK_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE1_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE1_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_RX_PEAK_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_RX_PEAK_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_RX_PEAK_MODE1_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_RX_PEAK_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_RX_PEAK_MODE1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000710 + (N) * 0x4) bits 17:15) field RX_PEAK_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_RX_PEAK_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_RX_PEAK_MODE1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_PGA_GAIN_PRELOAD_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PGA_GAIN_PRELOAD_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE3_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE3_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE3_set", N, value );

    /* ((0x00000710 + (N) * 0x4) bits 14:10) field PGA_GAIN_PRELOAD_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE3_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE3_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_PGA_GAIN_PRELOAD_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PGA_GAIN_PRELOAD_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE3_get", N, 1);
    /* ((0x00000710 + (N) * 0x4) bits 14:10) field PGA_GAIN_PRELOAD_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE3_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE3_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE3_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000710 + (N) * 0x4) bits 14:10) field PGA_GAIN_PRELOAD_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000710 + (N) * 0x4) bits 14:10) field PGA_GAIN_PRELOAD_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE3_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE3_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000710 + (N) * 0x4) bits 14:10) field PGA_GAIN_PRELOAD_MODE3 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE3_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE3_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE3_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_PGA_GAIN_PRELOAD_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PGA_GAIN_PRELOAD_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE2_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE2_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE2_set", N, value );

    /* ((0x00000710 + (N) * 0x4) bits 9:5) field PGA_GAIN_PRELOAD_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE2_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE2_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_PGA_GAIN_PRELOAD_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PGA_GAIN_PRELOAD_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE2_get", N, 1);
    /* ((0x00000710 + (N) * 0x4) bits 9:5) field PGA_GAIN_PRELOAD_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE2_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE2_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE2_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000710 + (N) * 0x4) bits 9:5) field PGA_GAIN_PRELOAD_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000710 + (N) * 0x4) bits 9:5) field PGA_GAIN_PRELOAD_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE2_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE2_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000710 + (N) * 0x4) bits 9:5) field PGA_GAIN_PRELOAD_MODE2 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE2_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE2_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE2_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_ctrl_field_PGA_GAIN_PRELOAD_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_PGA_GAIN_PRELOAD_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE1_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE1_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE1_set", N, value );

    /* ((0x00000710 + (N) * 0x4) bits 4:0) field PGA_GAIN_PRELOAD_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE1_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE1_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_PGA_GAIN_PRELOAD_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_PGA_GAIN_PRELOAD_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE1_get", N, 1);
    /* ((0x00000710 + (N) * 0x4) bits 4:0) field PGA_GAIN_PRELOAD_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE1_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_PGA_GAIN_PRELOAD_MODE1_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_set( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000710 + (N) * 0x4) bits 4:0) field PGA_GAIN_PRELOAD_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000710 + (N) * 0x4) bits 4:0) field PGA_GAIN_PRELOAD_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
        t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE1_OFF + subfield_offset),
                                                                    T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE1_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_get( t8_ctrl_buffer_t *b_ptr,
                                                                     t8_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000710 + (N) * 0x4) bits 4:0) field PGA_GAIN_PRELOAD_MODE1 of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3 index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE1_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE1_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_CFG_3_BIT_PGA_GAIN_PRELOAD_MODE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_PGA_GAIN_PRELOAD_MODE1_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_edge_N_size2
 * ==================================================================================
 */
static INLINE void t8_ctrl_field_CAPTURE_REQ_ALL_STATES_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_CAPTURE_REQ_ALL_STATES_set( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_CAPTURE_REQ_ALL_STATES_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_CAPTURE_REQ_ALL_STATES_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_CAPTURE_REQ_ALL_STATES_set", N, value );

    /* ((0x00000738 + (N) * 0x4) bits 5) field CAPTURE_REQ_ALL_STATES of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_field_set( b_ptr,
                                                                         h_ptr,
                                                                         N,
                                                                         T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CAPTURE_REQ_ALL_STATES_MSK,
                                                                         T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CAPTURE_REQ_ALL_STATES_OFF,
                                                                         value);
}

static INLINE UINT32 t8_ctrl_field_CAPTURE_REQ_ALL_STATES_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_CAPTURE_REQ_ALL_STATES_get( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_CAPTURE_REQ_ALL_STATES_get", N, 1);
    /* ((0x00000738 + (N) * 0x4) bits 5) field CAPTURE_REQ_ALL_STATES of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CAPTURE_REQ_ALL_STATES_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CAPTURE_REQ_ALL_STATES_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_CAPTURE_REQ_ALL_STATES_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_CAPTURE_REQ_CMN_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_CAPTURE_REQ_CMN_PCBI_set( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_CAPTURE_REQ_CMN_PCBI_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_CAPTURE_REQ_CMN_PCBI_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_CAPTURE_REQ_CMN_PCBI_set", N, value );

    /* ((0x00000738 + (N) * 0x4) bits 0) field CAPTURE_REQ_CMN_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_field_set( b_ptr,
                                                                         h_ptr,
                                                                         N,
                                                                         T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CAPTURE_REQ_CMN_PCBI_MSK,
                                                                         T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CAPTURE_REQ_CMN_PCBI_OFF,
                                                                         value);
}

static INLINE UINT32 t8_ctrl_field_CAPTURE_REQ_CMN_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_CAPTURE_REQ_CMN_PCBI_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_CAPTURE_REQ_CMN_PCBI_get", N, 1);
    /* ((0x00000738 + (N) * 0x4) bits 0) field CAPTURE_REQ_CMN_PCBI of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CAPTURE_REQ_CMN_PCBI_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CAPTURE_REQ_CMN_PCBI_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_CAPTURE_REQ_CMN_PCBI_get", N, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_active_both_N_size2
 * ==================================================================================
 */
static INLINE void t8_ctrl_field_ADAPT_MODE_1_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_MODE_1_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_MODE_1_I_set_to_clear", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_MODE_1_I_set_to_clear", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_1_I_set_to_clear", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 2) field ADAPT_MODE_1_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    t8_ctrl_reg_STAT_INT_EVENT_array_action_on_write_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_1_I_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_1_I_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_1_I_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_1_I_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_MODE_1_I_get", N, 1);
    /* ((0x00000728 + (N) * 0x4) bits 2) field ADAPT_MODE_1_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EVENT_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_1_I_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_1_I_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_1_I_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_MODE_1_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_MODE_1_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_1_I_poll", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 2) field ADAPT_MODE_1_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_EVENT_array_poll( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_1_I_MSK,
                                                  (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_1_I_OFF),
                                                  cmp,
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}

static INLINE void t8_ctrl_field_ADAPT_MODE_0_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_MODE_0_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_MODE_0_I_set_to_clear", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_MODE_0_I_set_to_clear", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_0_I_set_to_clear", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 1) field ADAPT_MODE_0_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    t8_ctrl_reg_STAT_INT_EVENT_array_action_on_write_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_0_I_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_0_I_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_0_I_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_0_I_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_MODE_0_I_get", N, 1);
    /* ((0x00000728 + (N) * 0x4) bits 1) field ADAPT_MODE_0_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EVENT_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_0_I_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_0_I_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_0_I_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_MODE_0_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_MODE_0_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_0_I_poll", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 1) field ADAPT_MODE_0_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_EVENT_array_poll( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_0_I_MSK,
                                                  (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_MODE_0_I_OFF),
                                                  cmp,
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_active_rising_N_size2
 * ==================================================================================
 */
static INLINE void t8_ctrl_field_START_ADAPT_ERROR_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_START_ADAPT_ERROR_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_START_ADAPT_ERROR_I_set_to_clear", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_START_ADAPT_ERROR_I_set_to_clear", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_START_ADAPT_ERROR_I_set_to_clear", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 7) field START_ADAPT_ERROR_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    t8_ctrl_reg_STAT_INT_EVENT_array_action_on_write_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_START_ADAPT_ERROR_I_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_START_ADAPT_ERROR_I_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_START_ADAPT_ERROR_I_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_START_ADAPT_ERROR_I_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_START_ADAPT_ERROR_I_get", N, 1);
    /* ((0x00000728 + (N) * 0x4) bits 7) field START_ADAPT_ERROR_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EVENT_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_START_ADAPT_ERROR_I_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_START_ADAPT_ERROR_I_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_START_ADAPT_ERROR_I_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_START_ADAPT_ERROR_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_START_ADAPT_ERROR_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_START_ADAPT_ERROR_I_poll", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 7) field START_ADAPT_ERROR_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_EVENT_array_poll( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_START_ADAPT_ERROR_I_MSK,
                                                  (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_START_ADAPT_ERROR_I_OFF),
                                                  cmp,
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}

static INLINE void t8_ctrl_field_ADC_CALIB_DONE_IN_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADC_CALIB_DONE_IN_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_DONE_IN_I_set_to_clear", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_IN_I_set_to_clear", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_IN_I_set_to_clear", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 6) field ADC_CALIB_DONE_IN_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    t8_ctrl_reg_STAT_INT_EVENT_array_action_on_write_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_DONE_IN_I_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_DONE_IN_I_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADC_CALIB_DONE_IN_I_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_DONE_IN_I_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_DONE_IN_I_get", N, 1);
    /* ((0x00000728 + (N) * 0x4) bits 6) field ADC_CALIB_DONE_IN_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EVENT_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_DONE_IN_I_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_DONE_IN_I_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_IN_I_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADC_CALIB_DONE_IN_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADC_CALIB_DONE_IN_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_IN_I_poll", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 6) field ADC_CALIB_DONE_IN_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_EVENT_array_poll( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_DONE_IN_I_MSK,
                                                  (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_DONE_IN_I_OFF),
                                                  cmp,
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}

static INLINE void t8_ctrl_field_ADC_CALIB_START_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADC_CALIB_START_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_START_I_set_to_clear", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADC_CALIB_START_I_set_to_clear", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_START_I_set_to_clear", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 5) field ADC_CALIB_START_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    t8_ctrl_reg_STAT_INT_EVENT_array_action_on_write_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_START_I_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_START_I_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADC_CALIB_START_I_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_START_I_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_START_I_get", N, 1);
    /* ((0x00000728 + (N) * 0x4) bits 5) field ADC_CALIB_START_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EVENT_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_START_I_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_START_I_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_START_I_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADC_CALIB_START_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADC_CALIB_START_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_START_I_poll", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 5) field ADC_CALIB_START_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_EVENT_array_poll( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_START_I_MSK,
                                                  (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADC_CALIB_START_I_OFF),
                                                  cmp,
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}

static INLINE void t8_ctrl_field_ADAPT_STATUS_0_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_STATUS_0_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_STATUS_0_I_set_to_clear", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_I_set_to_clear", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_I_set_to_clear", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 4) field ADAPT_STATUS_0_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    t8_ctrl_reg_STAT_INT_EVENT_array_action_on_write_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_STATUS_0_I_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_STATUS_0_I_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_STATUS_0_I_get", N, 1);
    /* ((0x00000728 + (N) * 0x4) bits 4) field ADAPT_STATUS_0_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EVENT_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_I_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_STATUS_0_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_STATUS_0_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_I_poll", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 4) field ADAPT_STATUS_0_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_EVENT_array_poll( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_MSK,
                                                  (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_OFF),
                                                  cmp,
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}

static INLINE void t8_ctrl_field_RX_ADAPT_DONE_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_ADAPT_DONE_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_DONE_I_set_to_clear", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_I_set_to_clear", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_I_set_to_clear", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 3) field RX_ADAPT_DONE_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    t8_ctrl_reg_STAT_INT_EVENT_array_action_on_write_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_RX_ADAPT_DONE_I_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_DONE_I_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_DONE_I_get", N, 1);
    /* ((0x00000728 + (N) * 0x4) bits 3) field RX_ADAPT_DONE_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EVENT_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_I_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_RX_ADAPT_DONE_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_RX_ADAPT_DONE_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_I_poll", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 3) field RX_ADAPT_DONE_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_EVENT_array_poll( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_MSK,
                                                  (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_OFF),
                                                  cmp,
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}

static INLINE void t8_ctrl_field_RX_ADAPT_START_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_ADAPT_START_I_set_to_clear( t8_ctrl_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_START_I_set_to_clear", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_ADAPT_START_I_set_to_clear", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_START_I_set_to_clear", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 0) field RX_ADAPT_START_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    t8_ctrl_reg_STAT_INT_EVENT_array_action_on_write_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_MSK,
                                                                T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_OFF,
                                                                value);
}

static INLINE UINT32 t8_ctrl_field_RX_ADAPT_START_I_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_START_I_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_START_I_get", N, 1);
    /* ((0x00000728 + (N) * 0x4) bits 0) field RX_ADAPT_START_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EVENT_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_START_I_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_RX_ADAPT_START_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_RX_ADAPT_START_I_poll( t8_ctrl_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_START_I_poll", N, value );

    /* ((0x00000728 + (N) * 0x4) bits 0) field RX_ADAPT_START_I of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_EVENT_array_poll( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_MSK,
                                                  (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_OFF),
                                                  cmp,
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_enable_N_size2
 * ==================================================================================
 */
static INLINE void t8_ctrl_field_START_ADAPT_ERROR_E_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_START_ADAPT_ERROR_E_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_START_ADAPT_ERROR_E_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_START_ADAPT_ERROR_E_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_START_ADAPT_ERROR_E_set", N, value );

    /* ((0x00000720 + (N) * 0x4) bits 7) field START_ADAPT_ERROR_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    t8_ctrl_reg_STAT_INT_EN_array_field_set( b_ptr,
                                             h_ptr,
                                             N,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_START_ADAPT_ERROR_E_MSK,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_START_ADAPT_ERROR_E_OFF,
                                             value);
}

static INLINE UINT32 t8_ctrl_field_START_ADAPT_ERROR_E_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_START_ADAPT_ERROR_E_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_START_ADAPT_ERROR_E_get", N, 1);
    /* ((0x00000720 + (N) * 0x4) bits 7) field START_ADAPT_ERROR_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EN_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_START_ADAPT_ERROR_E_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_START_ADAPT_ERROR_E_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_START_ADAPT_ERROR_E_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADC_CALIB_DONE_IN_E_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADC_CALIB_DONE_IN_E_set( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_DONE_IN_E_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_IN_E_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_IN_E_set", N, value );

    /* ((0x00000720 + (N) * 0x4) bits 6) field ADC_CALIB_DONE_IN_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    t8_ctrl_reg_STAT_INT_EN_array_field_set( b_ptr,
                                             h_ptr,
                                             N,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADC_CALIB_DONE_IN_E_MSK,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADC_CALIB_DONE_IN_E_OFF,
                                             value);
}

static INLINE UINT32 t8_ctrl_field_ADC_CALIB_DONE_IN_E_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_DONE_IN_E_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_DONE_IN_E_get", N, 1);
    /* ((0x00000720 + (N) * 0x4) bits 6) field ADC_CALIB_DONE_IN_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EN_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADC_CALIB_DONE_IN_E_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADC_CALIB_DONE_IN_E_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_IN_E_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADC_CALIB_START_E_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADC_CALIB_START_E_set( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_START_E_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADC_CALIB_START_E_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_START_E_set", N, value );

    /* ((0x00000720 + (N) * 0x4) bits 5) field ADC_CALIB_START_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    t8_ctrl_reg_STAT_INT_EN_array_field_set( b_ptr,
                                             h_ptr,
                                             N,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADC_CALIB_START_E_MSK,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADC_CALIB_START_E_OFF,
                                             value);
}

static INLINE UINT32 t8_ctrl_field_ADC_CALIB_START_E_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_START_E_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_START_E_get", N, 1);
    /* ((0x00000720 + (N) * 0x4) bits 5) field ADC_CALIB_START_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EN_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADC_CALIB_START_E_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADC_CALIB_START_E_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_START_E_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_STATUS_0_E_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_STATUS_0_E_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_STATUS_0_E_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_E_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_E_set", N, value );

    /* ((0x00000720 + (N) * 0x4) bits 4) field ADAPT_STATUS_0_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    t8_ctrl_reg_STAT_INT_EN_array_field_set( b_ptr,
                                             h_ptr,
                                             N,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_STATUS_0_E_MSK,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_STATUS_0_E_OFF,
                                             value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_STATUS_0_E_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_STATUS_0_E_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_STATUS_0_E_get", N, 1);
    /* ((0x00000720 + (N) * 0x4) bits 4) field ADAPT_STATUS_0_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EN_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_STATUS_0_E_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_STATUS_0_E_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_E_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_RX_ADAPT_DONE_E_set( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_ADAPT_DONE_E_set( t8_ctrl_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_DONE_E_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_E_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_E_set", N, value );

    /* ((0x00000720 + (N) * 0x4) bits 3) field RX_ADAPT_DONE_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    t8_ctrl_reg_STAT_INT_EN_array_field_set( b_ptr,
                                             h_ptr,
                                             N,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_DONE_E_MSK,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_DONE_E_OFF,
                                             value);
}

static INLINE UINT32 t8_ctrl_field_RX_ADAPT_DONE_E_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_DONE_E_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_DONE_E_get", N, 1);
    /* ((0x00000720 + (N) * 0x4) bits 3) field RX_ADAPT_DONE_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EN_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_DONE_E_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_DONE_E_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_E_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_MODE_1_E_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_MODE_1_E_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_MODE_1_E_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_MODE_1_E_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_1_E_set", N, value );

    /* ((0x00000720 + (N) * 0x4) bits 2) field ADAPT_MODE_1_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    t8_ctrl_reg_STAT_INT_EN_array_field_set( b_ptr,
                                             h_ptr,
                                             N,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_MODE_1_E_MSK,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_MODE_1_E_OFF,
                                             value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_1_E_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_1_E_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_MODE_1_E_get", N, 1);
    /* ((0x00000720 + (N) * 0x4) bits 2) field ADAPT_MODE_1_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EN_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_MODE_1_E_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_MODE_1_E_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_1_E_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_ADAPT_MODE_0_E_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_ADAPT_MODE_0_E_set( t8_ctrl_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_MODE_0_E_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_ADAPT_MODE_0_E_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_0_E_set", N, value );

    /* ((0x00000720 + (N) * 0x4) bits 1) field ADAPT_MODE_0_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    t8_ctrl_reg_STAT_INT_EN_array_field_set( b_ptr,
                                             h_ptr,
                                             N,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_MODE_0_E_MSK,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_MODE_0_E_OFF,
                                             value);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_0_E_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_0_E_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_MODE_0_E_get", N, 1);
    /* ((0x00000720 + (N) * 0x4) bits 1) field ADAPT_MODE_0_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EN_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_MODE_0_E_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_MODE_0_E_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_0_E_get", N, value );

    return value;
}
static INLINE void t8_ctrl_field_RX_ADAPT_START_E_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_ctrl_field_RX_ADAPT_START_E_set( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_START_E_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_ctrl_field_RX_ADAPT_START_E_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_START_E_set", N, value );

    /* ((0x00000720 + (N) * 0x4) bits 0) field RX_ADAPT_START_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    t8_ctrl_reg_STAT_INT_EN_array_field_set( b_ptr,
                                             h_ptr,
                                             N,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_START_E_MSK,
                                             T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_START_E_OFF,
                                             value);
}

static INLINE UINT32 t8_ctrl_field_RX_ADAPT_START_E_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_START_E_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_START_E_get", N, 1);
    /* ((0x00000720 + (N) * 0x4) bits 0) field RX_ADAPT_START_E of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_EN_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_START_E_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_START_E_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_START_E_get", N, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_value_N_size2
 * ==================================================================================
 */
static INLINE UINT32 t8_ctrl_field_START_ADAPT_ERROR_V_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_START_ADAPT_ERROR_V_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_START_ADAPT_ERROR_V_get", N, 1);
    /* ((0x00000730 + (N) * 0x4) bits 7) field START_ADAPT_ERROR_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_array_read(  b_ptr, h_ptr, N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_START_ADAPT_ERROR_V_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_START_ADAPT_ERROR_V_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_START_ADAPT_ERROR_V_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_START_ADAPT_ERROR_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_START_ADAPT_ERROR_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_START_ADAPT_ERROR_V_poll", N, value );

    /* ((0x00000730 + (N) * 0x4) bits 7) field START_ADAPT_ERROR_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_array_poll( b_ptr,
                                            h_ptr,
                                            N,
                                            T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_START_ADAPT_ERROR_V_MSK,
                                            (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_START_ADAPT_ERROR_V_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE UINT32 t8_ctrl_field_ADC_CALIB_DONE_IN_V_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_DONE_IN_V_get( t8_ctrl_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_DONE_IN_V_get", N, 1);
    /* ((0x00000730 + (N) * 0x4) bits 6) field ADC_CALIB_DONE_IN_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_array_read(  b_ptr, h_ptr, N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADC_CALIB_DONE_IN_V_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADC_CALIB_DONE_IN_V_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_IN_V_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADC_CALIB_DONE_IN_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADC_CALIB_DONE_IN_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                           t8_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_IN_V_poll", N, value );

    /* ((0x00000730 + (N) * 0x4) bits 6) field ADC_CALIB_DONE_IN_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_array_poll( b_ptr,
                                            h_ptr,
                                            N,
                                            T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADC_CALIB_DONE_IN_V_MSK,
                                            (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADC_CALIB_DONE_IN_V_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE UINT32 t8_ctrl_field_ADC_CALIB_START_V_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_START_V_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_START_V_get", N, 1);
    /* ((0x00000730 + (N) * 0x4) bits 5) field ADC_CALIB_START_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_array_read(  b_ptr, h_ptr, N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADC_CALIB_START_V_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADC_CALIB_START_V_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_START_V_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADC_CALIB_START_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADC_CALIB_START_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                         t8_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_START_V_poll", N, value );

    /* ((0x00000730 + (N) * 0x4) bits 5) field ADC_CALIB_START_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_array_poll( b_ptr,
                                            h_ptr,
                                            N,
                                            T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADC_CALIB_START_V_MSK,
                                            (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADC_CALIB_START_V_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_STATUS_0_V_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_STATUS_0_V_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_STATUS_0_V_get", N, 1);
    /* ((0x00000730 + (N) * 0x4) bits 4) field ADAPT_STATUS_0_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_array_read(  b_ptr, h_ptr, N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_STATUS_0_V_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_STATUS_0_V_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_V_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_STATUS_0_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_STATUS_0_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_ADAPT_STATUS_0_V_poll", N, value );

    /* ((0x00000730 + (N) * 0x4) bits 4) field ADAPT_STATUS_0_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_array_poll( b_ptr,
                                            h_ptr,
                                            N,
                                            T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_STATUS_0_V_MSK,
                                            (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_STATUS_0_V_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE UINT32 t8_ctrl_field_RX_ADAPT_DONE_V_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_DONE_V_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_DONE_V_get", N, 1);
    /* ((0x00000730 + (N) * 0x4) bits 3) field RX_ADAPT_DONE_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_array_read(  b_ptr, h_ptr, N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_DONE_V_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_DONE_V_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_V_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_RX_ADAPT_DONE_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_RX_ADAPT_DONE_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_V_poll", N, value );

    /* ((0x00000730 + (N) * 0x4) bits 3) field RX_ADAPT_DONE_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_array_poll( b_ptr,
                                            h_ptr,
                                            N,
                                            T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_DONE_V_MSK,
                                            (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_DONE_V_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_1_V_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_1_V_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_MODE_1_V_get", N, 1);
    /* ((0x00000730 + (N) * 0x4) bits 2) field ADAPT_MODE_1_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_array_read(  b_ptr, h_ptr, N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_MODE_1_V_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_MODE_1_V_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_1_V_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_MODE_1_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_MODE_1_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_1_V_poll", N, value );

    /* ((0x00000730 + (N) * 0x4) bits 2) field ADAPT_MODE_1_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_array_poll( b_ptr,
                                            h_ptr,
                                            N,
                                            T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_MODE_1_V_MSK,
                                            (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_MODE_1_V_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_0_V_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_0_V_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_MODE_0_V_get", N, 1);
    /* ((0x00000730 + (N) * 0x4) bits 1) field ADAPT_MODE_0_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_array_read(  b_ptr, h_ptr, N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_MODE_0_V_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_MODE_0_V_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_0_V_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_MODE_0_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_ADAPT_MODE_0_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                      t8_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_0_V_poll", N, value );

    /* ((0x00000730 + (N) * 0x4) bits 1) field ADAPT_MODE_0_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_array_poll( b_ptr,
                                            h_ptr,
                                            N,
                                            T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_MODE_0_V_MSK,
                                            (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_ADAPT_MODE_0_V_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE UINT32 t8_ctrl_field_RX_ADAPT_START_V_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_START_V_get( t8_ctrl_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_START_V_get", N, 1);
    /* ((0x00000730 + (N) * 0x4) bits 0) field RX_ADAPT_START_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    reg_value = t8_ctrl_reg_STAT_INT_array_read(  b_ptr, h_ptr, N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_START_V_MSK) >> T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_START_V_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_START_V_get", N, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_RX_ADAPT_START_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_ctrl_field_RX_ADAPT_START_V_poll( t8_ctrl_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_START_V_poll", N, value );

    /* ((0x00000730 + (N) * 0x4) bits 0) field RX_ADAPT_START_V of register PMC_T8_6G_LR_MTSB_FSM_REG_STAT_INT index N=0..1 */
    return t8_ctrl_reg_STAT_INT_array_poll( b_ptr,
                                            h_ptr,
                                            N,
                                            T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_START_V_MSK,
                                            (value<<T8_6G_LR_MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_START_V_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status_N_size2
 * ==================================================================================
 */
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_REQUEST_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_REQUEST_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_REQUEST_OBS_get", N, 1);
    /* ((0x00000738 + (N) * 0x4) bits 12) field ADC_CALIB_REQUEST_OBS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADC_CALIB_REQUEST_OBS_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADC_CALIB_REQUEST_OBS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_REQUEST_OBS_get", N, value );

    return value;
}
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_DONE_IN_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADC_CALIB_DONE_IN_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADC_CALIB_DONE_IN_OBS_get", N, 1);
    /* ((0x00000738 + (N) * 0x4) bits 11) field ADC_CALIB_DONE_IN_OBS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADC_CALIB_DONE_IN_OBS_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADC_CALIB_DONE_IN_OBS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADC_CALIB_DONE_IN_OBS_get", N, value );

    return value;
}
static INLINE UINT32 t8_ctrl_field_CLBRT_STATE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_CLBRT_STATE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_CLBRT_STATE_OBS_get", N, 1);
    /* ((0x00000738 + (N) * 0x4) bits 10:9) field CLBRT_STATE_OBS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CLBRT_STATE_OBS_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CLBRT_STATE_OBS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_CLBRT_STATE_OBS_get", N, value );

    return value;
}
static INLINE UINT32 t8_ctrl_field_range_CLBRT_STATE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_CLBRT_STATE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_CLBRT_STATE_OBS_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_CLBRT_STATE_OBS_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_CLBRT_STATE_OBS_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000738 + (N) * 0x4) bits 10:9) field CLBRT_STATE_OBS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CLBRT_STATE_OBS_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CLBRT_STATE_OBS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CLBRT_STATE_OBS_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_CLBRT_STATE_OBS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_CLBRT_STATE_OBS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 t8_ctrl_field_ADPT_STATE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADPT_STATE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADPT_STATE_OBS_get", N, 1);
    /* ((0x00000738 + (N) * 0x4) bits 8:6) field ADPT_STATE_OBS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADPT_STATE_OBS_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADPT_STATE_OBS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADPT_STATE_OBS_get", N, value );

    return value;
}
static INLINE UINT32 t8_ctrl_field_range_ADPT_STATE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADPT_STATE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_ADPT_STATE_OBS_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADPT_STATE_OBS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADPT_STATE_OBS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000738 + (N) * 0x4) bits 8:6) field ADPT_STATE_OBS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADPT_STATE_OBS_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADPT_STATE_OBS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADPT_STATE_OBS_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADPT_STATE_OBS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADPT_STATE_OBS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_DONE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_DONE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_DONE_OBS_get", N, 1);
    /* ((0x00000738 + (N) * 0x4) bits 4) field RX_ADAPT_DONE_OBS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_RX_ADAPT_DONE_OBS_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_RX_ADAPT_DONE_OBS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_DONE_OBS_get", N, value );

    return value;
}
static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_ADAPT_MODE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_ADAPT_MODE_OBS_get", N, 1);
    /* ((0x00000738 + (N) * 0x4) bits 3:2) field ADAPT_MODE_OBS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADAPT_MODE_OBS_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADAPT_MODE_OBS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_ADAPT_MODE_OBS_get", N, value );

    return value;
}
static INLINE UINT32 t8_ctrl_field_range_ADAPT_MODE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_range_ADAPT_MODE_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_range_ADAPT_MODE_OBS_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_ctrl_field_range_ADAPT_MODE_OBS_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_ctrl_field_range_ADAPT_MODE_OBS_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000738 + (N) * 0x4) bits 3:2) field ADAPT_MODE_OBS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    field_value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADAPT_MODE_OBS_MSK)
                  >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADAPT_MODE_OBS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADAPT_MODE_OBS_MSK, T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_ADAPT_MODE_OBS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "t8_ctrl_field_range_ADAPT_MODE_OBS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_START_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_ctrl_field_RX_ADAPT_START_OBS_get( t8_ctrl_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "t8_ctrl_field_RX_ADAPT_START_OBS_get", N, 1);
    /* ((0x00000738 + (N) * 0x4) bits 1) field RX_ADAPT_START_OBS of register PMC_T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_ index N=0..1 */
    reg_value = t8_ctrl_reg_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY__array_read( b_ptr,
                                                                                h_ptr,
                                                                                N);
    value = (reg_value & T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_RX_ADAPT_START_OBS_MSK) >> T8_6G_LR_MTSB_FSM_REG_T8_6G_LR_MTSB_FSM_LANE_N_OBSERVABILITY_BIT_RX_ADAPT_START_OBS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "t8_ctrl_field_RX_ADAPT_START_OBS_get", N, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _T8_CTRL_IO_INLINE_H */
