/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains prototypes for the field accessor functions
 *     and register accessor functions for the oduksc block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is pm55_60_23_map.xml
 *     block_uri "file:../docs/rda/lw55_60_123_reg.xml"
 *     block_part_number "LW55_60_123"
 *     block_mnemonic "ODUKSC_CORE"
 * 
 *****************************************************************************/

/*--------------------------------------------------------------------------------.
 | The pattern for accessing oduksc io functions is:
 | {
 |     oduksc_buffer_t b_ptr[1];
 |     oduksc_buffer_init( b_ptr, h_ptr );
 |     value = oduksc_field_<FIELD>_get( b_ptr, h_ptr );
 |     oduksc_field_<FIELD>_set( b_ptr, h_ptr , value );
 | ...
 |     oduksc_buffer_flush( b_ptr );
 | }
 | 
 | alternatively, if register coalescing is not needed then omit the buffer like:
 | 
 | value = oduksc_field_<FIELD>_get( NULL, h_ptr );
 | oduksc_field_<FIELD>_set( NULL, h_ptr , value );
 | 
 +-------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.
 | 
 | +----------------------------+
 | | Register 0x00000000 CFG    |
 | +----------------------------+
 | | bit  31  R/W  SOFT_RESET   |
 | | bit  23  R/W  PG_OVERRIDE  |
 | | bit  3:0 R/W  USERBITS_DEL |
 | +----------------------------+
 | 
 | void   oduksc_field_SOFT_RESET_set         ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | UINT32 oduksc_field_SOFT_RESET_get         ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | void   oduksc_field_PG_OVERRIDE_set        ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | UINT32 oduksc_field_PG_OVERRIDE_get        ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | void   oduksc_field_USERBITS_DEL_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | UINT32 oduksc_field_USERBITS_DEL_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | void   oduksc_field_range_USERBITS_DEL_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_USERBITS_DEL_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +-----------------------------------+
 | | Register 0x00000004 RAM_PAGE_CTRL |
 | +-----------------------------------+
 | | bit  0   R/W  PAGE_SWAP_REQ       |
 | | bit  9:8 R/W  PAGE_SWAP_TYPE      |
 | +-----------------------------------+
 | 
 | void                 oduksc_field_PAGE_SWAP_TYPE_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | UINT32               oduksc_field_PAGE_SWAP_TYPE_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | void                 oduksc_field_range_PAGE_SWAP_TYPE_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32               oduksc_field_range_PAGE_SWAP_TYPE_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit )
 | void                 oduksc_field_PAGE_SWAP_REQ_set        ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | UINT32               oduksc_field_PAGE_SWAP_REQ_get        ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | PMC_POLL_RETURN_TYPE oduksc_field_PAGE_SWAP_REQ_poll       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | +-------------------------------------+
 | | Register 0x00000008 RAM_PAGE_STATUS |
 | +-------------------------------------+
 | | bit  0  R  CGEN_ACTIVE_PAGE         |
 | | bit  31 R  RAM_PAGE_SEL_V           |
 | +-------------------------------------+
 | 
 | UINT32 oduksc_field_CGEN_ACTIVE_PAGE_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | UINT32 oduksc_field_RAM_PAGE_SEL_V_get   ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | 
 | +--------------------------------+
 | | Register 0x00000010 ERR_INT_EN |
 | +--------------------------------+
 | | bit  1 R/W  ACC_UNDF_E         |
 | | bit  0 R/W  ACC_OVF_E          |
 | +--------------------------------+
 | 
 | void   oduksc_field_ACC_UNDF_E_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | UINT32 oduksc_field_ACC_UNDF_E_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | void   oduksc_field_ACC_OVF_E_set  ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | UINT32 oduksc_field_ACC_OVF_E_get  ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | 
 | +------------------------------+
 | | Register 0x00000014 ERR_INTS |
 | +------------------------------+
 | | bit  1 R/W  ACC_UNDF_I       |
 | | bit  0 R/W  ACC_OVF_I        |
 | +------------------------------+
 | 
 | void                 oduksc_field_ACC_UNDF_I_set_to_clear ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | UINT32               oduksc_field_ACC_UNDF_I_get          ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | PMC_POLL_RETURN_TYPE oduksc_field_ACC_UNDF_I_poll         ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | void                 oduksc_field_ACC_OVF_I_set_to_clear  ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | UINT32               oduksc_field_ACC_OVF_I_get           ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | PMC_POLL_RETURN_TYPE oduksc_field_ACC_OVF_I_poll          ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | +------------------------------+
 | | Register 0x00000018 ERR_CHAN |
 | +------------------------------+
 | | bit  14:8 R  ACC_UNDF_CHAN   |
 | | bit  6:0  R  ACC_OVF_CHAN    |
 | +------------------------------+
 | 
 | UINT32 oduksc_field_ACC_UNDF_CHAN_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | UINT32 oduksc_field_range_ACC_UNDF_CHAN_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit )
 | UINT32 oduksc_field_ACC_OVF_CHAN_get        ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | UINT32 oduksc_field_range_ACC_OVF_CHAN_get  ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +-----------------------------------------------+
 | | Register (0x00000040 + (N) * 4) RI_PGEN_EN_TM |
 | |     N[0..5]                                   |
 | +-----------------------------------------------+
 | | bit  31   R/W  RI_EN                          |
 | | bit  29:0 R/W  TM                             |
 | +-----------------------------------------------+
 | 
 | void   oduksc_field_RI_EN_set    ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_RI_EN_get    ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_TM_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_TM_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_TM_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_TM_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +--------------------------------------------+
 | | Register (0x00000060 + (N) * 4) RI_PGEN_TN |
 | |     N[0..5]                                |
 | +--------------------------------------------+
 | | bit  30:0 R/W  TN                          |
 | +--------------------------------------------+
 | 
 | void   oduksc_field_TN_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_TN_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_TN_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_TN_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +---------------------------------------------------+
 | | Register (0x00000080 + (N) * 0x4) SRC_ZONE_INT_EN |
 | |     N[0..3]                                       |
 | +---------------------------------------------------+
 | | bit  31:0 R/W  SRC_ZONE_E                         |
 | +---------------------------------------------------+
 | 
 | void   oduksc_lfield_SRC_ZONE_E_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value[4] )
 | void   oduksc_lfield_SRC_ZONE_E_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value[4] )
 | void   oduksc_lfield_range_SRC_ZONE_E_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_lfield_range_SRC_ZONE_E_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------+
 | | Register (0x00000090 + (N) * 0x4) RAMP_DONE_INT_EN |
 | |     N[0..3]                                        |
 | +----------------------------------------------------+
 | | bit  31:0 R/W  RAMP_DONE_E                         |
 | +----------------------------------------------------+
 | 
 | void   oduksc_lfield_RAMP_DONE_E_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value[4] )
 | void   oduksc_lfield_RAMP_DONE_E_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value[4] )
 | void   oduksc_lfield_range_RAMP_DONE_E_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_lfield_range_RAMP_DONE_E_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +-----------------------------------------------+
 | | Register (0x000000a0 + (N) * 4) SRC_ZONE_INTS |
 | |     N[0..3]                                   |
 | +-----------------------------------------------+
 | | bit  31:0 R/W  SRC_ZONE_I                     |
 | +-----------------------------------------------+
 | 
 | void   oduksc_lfield_SRC_ZONE_I_set_to_clear       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value[4] )
 | void   oduksc_lfield_SRC_ZONE_I_get                ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value[4] )
 | void   oduksc_lfield_range_SRC_ZONE_I_set_to_clear ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_lfield_range_SRC_ZONE_I_get          ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +------------------------------------------------+
 | | Register (0x000000b0 + (N) * 4) RAMP_DONE_INTS |
 | |     N[0..3]                                    |
 | +------------------------------------------------+
 | | bit  31:0 R/W  RAMP_DONE_I                     |
 | +------------------------------------------------+
 | 
 | void   oduksc_lfield_RAMP_DONE_I_set_to_clear       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value[4] )
 | void   oduksc_lfield_RAMP_DONE_I_get                ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value[4] )
 | void   oduksc_lfield_range_RAMP_DONE_I_set_to_clear ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_lfield_range_RAMP_DONE_I_get          ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +---------------------------------------------------+
 | | Register (0x000000c0 + (N) * 4) SRC_ZONE_INT_STAT |
 | |     N[0..3]                                       |
 | +---------------------------------------------------+
 | | bit  31:0 R  SRC_ZONE_V                           |
 | +---------------------------------------------------+
 | 
 | void   oduksc_lfield_SRC_ZONE_V_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value[4] )
 | UINT32 oduksc_lfield_range_SRC_ZONE_V_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------------------------+
 | | Register (0x00001000 + (N) * 0x20) CGEN_STATE_RAM_STBY_DWORD0_ACCESS |
 | |     N[0..127]                                                        |
 | +----------------------------------------------------------------------+
 | | bit  31:0 R/W  CGEN_STATE_RAM_STBY_DWORD0                            |
 | +----------------------------------------------------------------------+
 | 
 | void   oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------------------------+
 | | Register (0x00001004 + (N) * 0x20) CGEN_STATE_RAM_STBY_DWORD1_ACCESS |
 | |     N[0..127]                                                        |
 | +----------------------------------------------------------------------+
 | | bit  31:0 R/W  CGEN_STATE_RAM_STBY_DWORD1                            |
 | +----------------------------------------------------------------------+
 | 
 | void   oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------------------------+
 | | Register (0x00001008 + (N) * 0x20) CGEN_STATE_RAM_STBY_DWORD2_ACCESS |
 | |     N[0..127]                                                        |
 | +----------------------------------------------------------------------+
 | | bit  31:0 R/W  CGEN_STATE_RAM_STBY_DWORD2                            |
 | +----------------------------------------------------------------------+
 | 
 | void   oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------------------------+
 | | Register (0x0000100c + (N) * 0x20) CGEN_STATE_RAM_STBY_DWORD3_ACCESS |
 | |     N[0..127]                                                        |
 | +----------------------------------------------------------------------+
 | | bit  31:0 R/W  CGEN_STATE_RAM_STBY_DWORD3                            |
 | +----------------------------------------------------------------------+
 | 
 | void   oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------------------------+
 | | Register (0x00001010 + (N) * 0x20) CGEN_STATE_RAM_STBY_DWORD4_ACCESS |
 | |     N[0..127]                                                        |
 | +----------------------------------------------------------------------+
 | | bit  31:0 R/W  CGEN_STATE_RAM_STBY_DWORD4                            |
 | +----------------------------------------------------------------------+
 | 
 | void   oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------+
 | | Register (0x00001014 + (N) * 0x20) CHAN_CTRL |
 | |     N[0..127]                                |
 | +----------------------------------------------+
 | | bit  5:3 R/W  RI_PGEN_SEL                    |
 | | bit  2   R/W  SRC_ZONE_PB_EN                 |
 | | bit  1   R/W  RAMP_GEN_EN                    |
 | | bit  0   R/W  BASE_GEN_EN                    |
 | +----------------------------------------------+
 | 
 | void   oduksc_field_RI_PGEN_SEL_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_RI_PGEN_SEL_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_RI_PGEN_SEL_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_RI_PGEN_SEL_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | void   oduksc_field_SRC_ZONE_PB_EN_set    ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_SRC_ZONE_PB_EN_get    ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_RAMP_GEN_EN_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_RAMP_GEN_EN_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_BASE_GEN_EN_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_BASE_GEN_EN_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | +----------------------------------------------------------------------+
 | | Register (0x00002000 + (N) * 0x20) CGEN_STATE_RAM_ACTV_DWORD0_ACCESS |
 | |     N[0..127]                                                        |
 | +----------------------------------------------------------------------+
 | | bit  31:0 R/W  CGEN_STATE_RAM_ACTV_DWORD0                            |
 | +----------------------------------------------------------------------+
 | 
 | void   oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------------------------+
 | | Register (0x00002004 + (N) * 0x20) CGEN_STATE_RAM_ACTV_DWORD1_ACCESS |
 | |     N[0..127]                                                        |
 | +----------------------------------------------------------------------+
 | | bit  31:0 R/W  CGEN_STATE_RAM_ACTV_DWORD1                            |
 | +----------------------------------------------------------------------+
 | 
 | void   oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------------------------+
 | | Register (0x00002008 + (N) * 0x20) CGEN_STATE_RAM_ACTV_DWORD2_ACCESS |
 | |     N[0..127]                                                        |
 | +----------------------------------------------------------------------+
 | | bit  31:0 R/W  CGEN_STATE_RAM_ACTV_DWORD2                            |
 | +----------------------------------------------------------------------+
 | 
 | void   oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------------------------+
 | | Register (0x0000200c + (N) * 0x20) CGEN_STATE_RAM_ACTV_DWORD3_ACCESS |
 | |     N[0..127]                                                        |
 | +----------------------------------------------------------------------+
 | | bit  31:0 R/W  CGEN_STATE_RAM_ACTV_DWORD3                            |
 | +----------------------------------------------------------------------+
 | 
 | void   oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------------------------+
 | | Register (0x00002010 + (N) * 0x20) CGEN_STATE_RAM_ACTV_DWORD4_ACCESS |
 | |     N[0..127]                                                        |
 | +----------------------------------------------------------------------+
 | | bit  31:0 R/W  CGEN_STATE_RAM_ACTV_DWORD4                            |
 | +----------------------------------------------------------------------+
 | 
 | void   oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_set       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | UINT32 oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_get       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | void   oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_get ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
#ifndef _ODUKSC_IO_H
#define _ODUKSC_IO_H

#include "oduksc_loc.h"
#include "oduksc_regs.h"
#include "oduksc_io_inline.h"


/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.
 | TSB access functions
 +----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | These functions do not need to be accessed directly,... just included here for completeness.
 +----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | void                 oduksc_buffer_init               ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | void                 oduksc_buffer_flush              ( oduksc_buffer_t *b_ptr )
 | UINT32               oduksc_reg_read                  ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mem_type, UINT32 reg )
 | void                 oduksc_reg_write                 ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mem_type, UINT32 reg, UINT32 value )
 | void                 oduksc_field_set                 ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 unused_mask, UINT32 ofs, UINT32 value )
 | void                 oduksc_action_on_write_field_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 ofs, UINT32 value )
 | void                 oduksc_burst_read                ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mem_type, UINT32 reg, UINT32 len, UINT32 *value )
 | void                 oduksc_burst_write               ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mem_type, UINT32 reg, UINT32 len, UINT32 *value )
 | PMC_POLL_RETURN_TYPE oduksc_poll                      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 +---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.
 | Functions to Access Registers
 +-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | These functions can be used if for some reason the field getters & setters are not appropriate.
 +-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | void                 oduksc_reg_CFG_write                                         ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | void                 oduksc_reg_CFG_field_set                                     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CFG_read                                          ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | 
 | void                 oduksc_reg_RAM_PAGE_CTRL_write                               ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | void                 oduksc_reg_RAM_PAGE_CTRL_field_set                           ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_RAM_PAGE_CTRL_read                                ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | PMC_POLL_RETURN_TYPE oduksc_reg_RAM_PAGE_CTRL_poll                                ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mask, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | void                 oduksc_reg_CHAN_CTRL_array_write                             ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_CHAN_CTRL_array_field_set                         ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CHAN_CTRL_array_read                              ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_RI_PGEN_EN_TM_array_write                         ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_RI_PGEN_EN_TM_array_field_set                     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_RI_PGEN_EN_TM_array_read                          ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_RI_PGEN_TN_array_write                            ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_RI_PGEN_TN_array_field_set                        ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_RI_PGEN_TN_array_read                             ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_ERR_INT_EN_write                                  ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | void                 oduksc_reg_ERR_INT_EN_field_set                              ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_ERR_INT_EN_read                                   ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | 
 | void                 oduksc_reg_SRC_ZONE_INT_EN_array_burst_write                 ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 ofs, UINT32 len, UINT32 *value )
 | void                 oduksc_reg_SRC_ZONE_INT_EN_array_field_set                   ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N, UINT32 mask, UINT32 ofs, UINT32 value )
 | void                 oduksc_reg_SRC_ZONE_INT_EN_array_burst_read                  ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 ofs, UINT32 len, UINT32 *value )
 | UINT32               oduksc_reg_SRC_ZONE_INT_EN_array_read                        ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N )
 | 
 | void                 oduksc_reg_RAMP_DONE_INT_EN_array_burst_write                ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 ofs, UINT32 len, UINT32 *value )
 | void                 oduksc_reg_RAMP_DONE_INT_EN_array_field_set                  ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N, UINT32 mask, UINT32 ofs, UINT32 value )
 | void                 oduksc_reg_RAMP_DONE_INT_EN_array_burst_read                 ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 ofs, UINT32 len, UINT32 *value )
 | UINT32               oduksc_reg_RAMP_DONE_INT_EN_array_read                       ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N )
 | 
 | void                 oduksc_reg_ERR_INTS_write                                    ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 value )
 | void                 oduksc_reg_ERR_INTS_action_on_write_field_set                ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_ERR_INTS_read                                     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | PMC_POLL_RETURN_TYPE oduksc_reg_ERR_INTS_poll                                     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 mask, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | void                 oduksc_reg_SRC_ZONE_INTS_array_burst_write                   ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 ofs, UINT32 len, UINT32 *value )
 | void                 oduksc_reg_SRC_ZONE_INTS_array_action_on_write_field_set     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N, UINT32 mask, UINT32 ofs, UINT32 value )
 | void                 oduksc_reg_SRC_ZONE_INTS_array_burst_read                    ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 ofs, UINT32 len, UINT32 *value )
 | UINT32               oduksc_reg_SRC_ZONE_INTS_array_read                          ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N )
 | PMC_POLL_RETURN_TYPE oduksc_reg_SRC_ZONE_INTS_array_poll                          ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N, UINT32 mask, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | void                 oduksc_reg_RAMP_DONE_INTS_array_burst_write                  ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 ofs, UINT32 len, UINT32 *value )
 | void                 oduksc_reg_RAMP_DONE_INTS_array_action_on_write_field_set    ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N, UINT32 mask, UINT32 ofs, UINT32 value )
 | void                 oduksc_reg_RAMP_DONE_INTS_array_burst_read                   ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 ofs, UINT32 len, UINT32 *value )
 | UINT32               oduksc_reg_RAMP_DONE_INTS_array_read                         ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N )
 | PMC_POLL_RETURN_TYPE oduksc_reg_RAMP_DONE_INTS_array_poll                         ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N, UINT32 mask, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | void                 oduksc_reg_SRC_ZONE_INT_STAT_array_burst_read                ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 ofs, UINT32 len, UINT32 *value )
 | UINT32               oduksc_reg_SRC_ZONE_INT_STAT_array_read                      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N )
 | PMC_POLL_RETURN_TYPE oduksc_reg_SRC_ZONE_INT_STAT_array_poll                      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32 N, UINT32 mask, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | void                 oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_write     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_field_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_read      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_write     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_field_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_read      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_write     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_field_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_read      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_write     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_field_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_read      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_write     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_field_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_read      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_write     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_field_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_read      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_write     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_field_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_read      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_write     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_field_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_read      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_write     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_field_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_read      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | void                 oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_write     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 value )
 | void                 oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_field_set ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_read      ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr, UINT32  N )
 | 
 | UINT32               oduksc_reg_RAM_PAGE_STATUS_read                              ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | 
 | UINT32               oduksc_reg_ERR_CHAN_read                                     ( oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
 | 
 +------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
#endif /* _ODUKSC_IO_H */
