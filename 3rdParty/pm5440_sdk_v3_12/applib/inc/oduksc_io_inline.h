/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the oduksc block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is pm55_60_23_map.xml
 *     block_uri "file:../docs/rda/lw55_60_123_reg.xml"
 *     block_part_number "LW55_60_123"
 *     block_mnemonic "ODUKSC_CORE"
 * 
 *****************************************************************************/
#ifndef _ODUKSC_IO_INLINE_H
#define _ODUKSC_IO_INLINE_H

#include "oduksc_loc.h"
#include "oduksc_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *                tsb level structure and access functions for oduksc
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** ERROR: range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    oduksc_handle_t * h_ptr;
    pmc_sys_handle_t sys_handle;
    UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} oduksc_buffer_t;

#ifndef oduksc_buffer_init
#define oduksc_buffer_init( b_ptr, h_ptr ) \
       _oduksc_buffer_init( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE void _oduksc_buffer_init( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = ((pmc_handle_t *)h_ptr)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, (void**)b_ptr->sys_handle );
    IOLOG( "%s", "oduksc_buffer_init");
    
}

#ifndef oduksc_buffer_flush
#define oduksc_buffer_flush( b_ptr ) \
       _oduksc_buffer_flush( LOG_CALLER b_ptr )
#endif

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void _oduksc_buffer_flush( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr )
{
    IOLOG( "oduksc_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 oduksc_reg_read( oduksc_buffer_t *b_ptr,
                                      oduksc_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                b_ptr->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h_ptr)->base_address + reg);
    return value;
}
static INLINE void oduksc_reg_write( oduksc_buffer_t *b_ptr,
                                     oduksc_handle_t *h_ptr,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         b_ptr->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value);
}

static INLINE void oduksc_field_set( oduksc_buffer_t *b_ptr,
                                     oduksc_handle_t *h_ptr,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 mask,
                                     UINT32 unused_mask,
                                     UINT32 ofs,
                                     UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h_ptr)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void oduksc_action_on_write_field_set( oduksc_buffer_t *b_ptr,
                                                     oduksc_handle_t *h_ptr,
                                                     UINT32 mem_type,
                                                     UINT32 reg,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         b_ptr->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value<<ofs);
}

static INLINE void oduksc_burst_read( oduksc_buffer_t *b_ptr,
                                      oduksc_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 len,
                                      UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h_ptr)->base_address + reg,
                          len,
                          value);
}

static INLINE void oduksc_burst_write( oduksc_buffer_t *b_ptr,
                                       oduksc_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 len,
                                       UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE oduksc_poll( oduksc_buffer_t *b_ptr,
                                                oduksc_handle_t *h_ptr,
                                                UINT32 mem_type,
                                                UINT32 reg,
                                                UINT32 mask,
                                                UINT32 value,
                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                UINT32 max_count,
                                                UINT32 *num_failed_polls,
                                                UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *                       register access functions for oduksc
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CFG
 *
 * Register: Configuration
 * Offset: 0x00000000 CFG
 *
 * bits        31  default 1    SOFT_RESET
 *
 * bits        23  default 0    PG_OVERRIDE
 *
 * bits        3:0 default 0000 USERBITS_DEL
 * field_bits  3:0
 */

#ifndef oduksc_reg_CFG_write
#define oduksc_reg_CFG_write( b_ptr, h_ptr, value ) \
       _oduksc_reg_CFG_write( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_reg_CFG_write( LOG_CALLER_DEFN
                                          oduksc_buffer_t *b_ptr,
                                          oduksc_handle_t *h_ptr,
                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CFG_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODUKSC_CORE_REG_CFG,
                      value);
}


#ifndef oduksc_reg_CFG_field_set
#define oduksc_reg_CFG_field_set( b_ptr, h_ptr, mask, ofs, value ) \
       _oduksc_reg_CFG_field_set( LOG_CALLER b_ptr, h_ptr, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CFG_field_set( LOG_CALLER_DEFN
                                              oduksc_buffer_t *b_ptr,
                                              oduksc_handle_t *h_ptr,
                                              UINT32 mask,
                                              UINT32 ofs,
                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CFG_field_set", mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODUKSC_CORE_REG_CFG,
                      mask,
                      PMC_ODUKSC_CORE_REG_CFG_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CFG_read
#define oduksc_reg_CFG_read( b_ptr, h_ptr ) \
       _oduksc_reg_CFG_read( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_reg_CFG_read( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODUKSC_CORE_REG_CFG);

    IOLOG( "%s -> 0x%08x;", "oduksc_reg_CFG_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL
 *
 * Register: RAM Page Control
 * Offset: 0x00000004 RAM_PAGE_CTRL
 *
 * bits        0   default 0  PAGE_SWAP_REQ
 *
 * bits        9:8 default 00 PAGE_SWAP_TYPE
 * field_bits  1:0
 */

#ifndef oduksc_reg_RAM_PAGE_CTRL_write
#define oduksc_reg_RAM_PAGE_CTRL_write( b_ptr, h_ptr, value ) \
       _oduksc_reg_RAM_PAGE_CTRL_write( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_reg_RAM_PAGE_CTRL_write( LOG_CALLER_DEFN
                                                    oduksc_buffer_t *b_ptr,
                                                    oduksc_handle_t *h_ptr,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_RAM_PAGE_CTRL_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL,
                      value);
}


#ifndef oduksc_reg_RAM_PAGE_CTRL_field_set
#define oduksc_reg_RAM_PAGE_CTRL_field_set( b_ptr, h_ptr, mask, ofs, value ) \
       _oduksc_reg_RAM_PAGE_CTRL_field_set( LOG_CALLER b_ptr, h_ptr, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_RAM_PAGE_CTRL_field_set( LOG_CALLER_DEFN
                                                        oduksc_buffer_t *b_ptr,
                                                        oduksc_handle_t *h_ptr,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_RAM_PAGE_CTRL_field_set", mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL,
                      mask,
                      PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_RAM_PAGE_CTRL_read
#define oduksc_reg_RAM_PAGE_CTRL_read( b_ptr, h_ptr ) \
       _oduksc_reg_RAM_PAGE_CTRL_read( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_reg_RAM_PAGE_CTRL_read( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL);

    IOLOG( "%s -> 0x%08x;", "oduksc_reg_RAM_PAGE_CTRL_read", reg_value);
    return reg_value;
}

#ifndef oduksc_reg_RAM_PAGE_CTRL_poll
#define oduksc_reg_RAM_PAGE_CTRL_poll( b_ptr, h_ptr, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _oduksc_reg_RAM_PAGE_CTRL_poll( LOG_CALLER b_ptr, h_ptr, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _oduksc_reg_RAM_PAGE_CTRL_poll( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "oduksc_reg_RAM_PAGE_CTRL_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return oduksc_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL,
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CHAN_CTRL
 *
 * Register: Channel Control
 * Offset: (0x00001014 + (N) * 0x20) CHAN_CTRL
 *
 * bits        5:3 default 000 RI_PGEN_SEL
 * field_bits  2:0
 *
 * bits        2   default 0   SRC_ZONE_PB_EN
 *
 * bits        1   default 0   RAMP_GEN_EN
 *
 * bits        0   default 0   BASE_GEN_EN
 */

#ifndef oduksc_reg_CHAN_CTRL_array_write
#define oduksc_reg_CHAN_CTRL_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_CHAN_CTRL_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_CHAN_CTRL_array_write( LOG_CALLER_DEFN
                                                      oduksc_buffer_t *b_ptr,
                                                      oduksc_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CHAN_CTRL_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODUKSC_CORE_REG_CHAN_CTRL(N),
                      value);
}


#ifndef oduksc_reg_CHAN_CTRL_array_field_set
#define oduksc_reg_CHAN_CTRL_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_CHAN_CTRL_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CHAN_CTRL_array_field_set( LOG_CALLER_DEFN
                                                          oduksc_buffer_t *b_ptr,
                                                          oduksc_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CHAN_CTRL_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODUKSC_CORE_REG_CHAN_CTRL(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_CHAN_CTRL_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CHAN_CTRL_array_read
#define oduksc_reg_CHAN_CTRL_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_CHAN_CTRL_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_CHAN_CTRL_array_read( LOG_CALLER_DEFN
                                                       oduksc_buffer_t *b_ptr,
                                                       oduksc_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODUKSC_CORE_REG_CHAN_CTRL(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_CHAN_CTRL_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM
 *
 * Register: Ramp Interval PulseGen Enable, TM
 * Offset: (0x00000040 + (N) * 4) RI_PGEN_EN_TM
 *
 * bits 31   default 0                              RI_EN
 *
 * bits 29:0 default 000000000000000000000000000000 TM
 */

#ifndef oduksc_reg_RI_PGEN_EN_TM_array_write
#define oduksc_reg_RI_PGEN_EN_TM_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_RI_PGEN_EN_TM_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_RI_PGEN_EN_TM_array_write( LOG_CALLER_DEFN
                                                          oduksc_buffer_t *b_ptr,
                                                          oduksc_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_RI_PGEN_EN_TM_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM(N),
                      value);
}


#ifndef oduksc_reg_RI_PGEN_EN_TM_array_field_set
#define oduksc_reg_RI_PGEN_EN_TM_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_RI_PGEN_EN_TM_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_RI_PGEN_EN_TM_array_field_set( LOG_CALLER_DEFN
                                                              oduksc_buffer_t *b_ptr,
                                                              oduksc_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_RI_PGEN_EN_TM_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_RI_PGEN_EN_TM_array_read
#define oduksc_reg_RI_PGEN_EN_TM_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_RI_PGEN_EN_TM_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_RI_PGEN_EN_TM_array_read( LOG_CALLER_DEFN
                                                           oduksc_buffer_t *b_ptr,
                                                           oduksc_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_RI_PGEN_EN_TM_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_RI_PGEN_TN
 *
 * Register: Ramp interval PulseGen TN
 * Offset: (0x00000060 + (N) * 4) RI_PGEN_TN
 *
 * bits 30:0 default 0000000000000000000000000000001 TN
 */

#ifndef oduksc_reg_RI_PGEN_TN_array_write
#define oduksc_reg_RI_PGEN_TN_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_RI_PGEN_TN_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_RI_PGEN_TN_array_write( LOG_CALLER_DEFN
                                                       oduksc_buffer_t *b_ptr,
                                                       oduksc_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_RI_PGEN_TN_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODUKSC_CORE_REG_RI_PGEN_TN(N),
                      value);
}


#ifndef oduksc_reg_RI_PGEN_TN_array_field_set
#define oduksc_reg_RI_PGEN_TN_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_RI_PGEN_TN_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_RI_PGEN_TN_array_field_set( LOG_CALLER_DEFN
                                                           oduksc_buffer_t *b_ptr,
                                                           oduksc_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_RI_PGEN_TN_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ODUKSC_CORE_REG_RI_PGEN_TN(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_RI_PGEN_TN_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_RI_PGEN_TN_array_read
#define oduksc_reg_RI_PGEN_TN_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_RI_PGEN_TN_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_RI_PGEN_TN_array_read( LOG_CALLER_DEFN
                                                        oduksc_buffer_t *b_ptr,
                                                        oduksc_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ODUKSC_CORE_REG_RI_PGEN_TN(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_RI_PGEN_TN_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_ERR_INT_EN
 *
 * Register: Error Interrupt Enable
 * Offset: 0x00000010 ERR_INT_EN
 *
 * bits 1 default 0 ACC_UNDF_E
 *
 * bits 0 default 0 ACC_OVF_E
 */

#ifndef oduksc_reg_ERR_INT_EN_write
#define oduksc_reg_ERR_INT_EN_write( b_ptr, h_ptr, value ) \
       _oduksc_reg_ERR_INT_EN_write( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_reg_ERR_INT_EN_write( LOG_CALLER_DEFN
                                                 oduksc_buffer_t *b_ptr,
                                                 oduksc_handle_t *h_ptr,
                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_ERR_INT_EN_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_ERR_INT_EN,
                      value);
}


#ifndef oduksc_reg_ERR_INT_EN_field_set
#define oduksc_reg_ERR_INT_EN_field_set( b_ptr, h_ptr, mask, ofs, value ) \
       _oduksc_reg_ERR_INT_EN_field_set( LOG_CALLER b_ptr, h_ptr, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_ERR_INT_EN_field_set( LOG_CALLER_DEFN
                                                     oduksc_buffer_t *b_ptr,
                                                     oduksc_handle_t *h_ptr,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_ERR_INT_EN_field_set", mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_ERR_INT_EN,
                      mask,
                      PMC_ODUKSC_CORE_REG_ERR_INT_EN_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_ERR_INT_EN_read
#define oduksc_reg_ERR_INT_EN_read( b_ptr, h_ptr ) \
       _oduksc_reg_ERR_INT_EN_read( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_reg_ERR_INT_EN_read( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_ERR_INT_EN);

    IOLOG( "%s -> 0x%08x;", "oduksc_reg_ERR_INT_EN_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_SRC_ZONE_INT_EN
 *
 * Register: Source FIFO Empty Zone Interrupt Enable
 * Offset: (0x00000080 + (N) * 0x4) SRC_ZONE_INT_EN
 *
 * bits        31:0 default 00000000000000000000000000000000 SRC_ZONE_E
 * field_bits  31:0
 */

#ifndef oduksc_reg_SRC_ZONE_INT_EN_array_burst_write
#define oduksc_reg_SRC_ZONE_INT_EN_array_burst_write( b_ptr, h_ptr, ofs, len, value ) \
       _oduksc_reg_SRC_ZONE_INT_EN_array_burst_write( LOG_CALLER b_ptr, h_ptr, ofs, len, value )
#endif
static INLINE void _oduksc_reg_SRC_ZONE_INT_EN_array_burst_write( LOG_CALLER_DEFN
                                                                  oduksc_buffer_t *b_ptr,
                                                                  oduksc_handle_t *h_ptr,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 4)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "oduksc_reg_SRC_ZONE_INT_EN_array_burst_write", ofs, len, 4 );
    IOLOG( "%s of %d words ofs=%d len=%d", "oduksc_reg_SRC_ZONE_INT_EN_array_burst_write", 4, ofs, len);
    oduksc_burst_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODUKSC_CORE_REG_SRC_ZONE_INT_EN(ofs),
                        len,
                        value);

}


#ifndef oduksc_reg_SRC_ZONE_INT_EN_array_field_set
#define oduksc_reg_SRC_ZONE_INT_EN_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_SRC_ZONE_INT_EN_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_SRC_ZONE_INT_EN_array_field_set( LOG_CALLER_DEFN
                                                                oduksc_buffer_t *b_ptr,
                                                                oduksc_handle_t *h_ptr,
                                                                UINT32 N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_SRC_ZONE_INT_EN_array_field_set", mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_SRC_ZONE_INT_EN(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_SRC_ZONE_INT_EN_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_SRC_ZONE_INT_EN_array_burst_read
#define oduksc_reg_SRC_ZONE_INT_EN_array_burst_read( b_ptr, h_ptr, ofs, len, value ) \
       _oduksc_reg_SRC_ZONE_INT_EN_array_burst_read( LOG_CALLER b_ptr, h_ptr, ofs, len, value )
#endif
static INLINE void _oduksc_reg_SRC_ZONE_INT_EN_array_burst_read( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value )
{
    if (len + ofs > 4)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "oduksc_reg_SRC_ZONE_INT_EN_array_burst_read", ofs, len, 4 );
    oduksc_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_STATUS,
                       PMC_ODUKSC_CORE_REG_SRC_ZONE_INT_EN(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "oduksc_reg_SRC_ZONE_INT_EN_array_burst_read", 4, ofs, len);
}


#ifndef oduksc_reg_SRC_ZONE_INT_EN_array_read
#define oduksc_reg_SRC_ZONE_INT_EN_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_SRC_ZONE_INT_EN_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_SRC_ZONE_INT_EN_array_read( LOG_CALLER_DEFN
                                                             oduksc_buffer_t *b_ptr,
                                                             oduksc_handle_t *h_ptr,
                                                             UINT32 N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_SRC_ZONE_INT_EN(N));

    IOLOG( "%s -> 0x%08x;", "oduksc_reg_SRC_ZONE_INT_EN_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_RAMP_DONE_INT_EN
 *
 * Register: Ramp Done indication Interrupt Enable
 * Offset: (0x00000090 + (N) * 0x4) RAMP_DONE_INT_EN
 *
 * bits        31:0 default 00000000000000000000000000000000 RAMP_DONE_E
 * field_bits  31:0
 */

#ifndef oduksc_reg_RAMP_DONE_INT_EN_array_burst_write
#define oduksc_reg_RAMP_DONE_INT_EN_array_burst_write( b_ptr, h_ptr, ofs, len, value ) \
       _oduksc_reg_RAMP_DONE_INT_EN_array_burst_write( LOG_CALLER b_ptr, h_ptr, ofs, len, value )
#endif
static INLINE void _oduksc_reg_RAMP_DONE_INT_EN_array_burst_write( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 4)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "oduksc_reg_RAMP_DONE_INT_EN_array_burst_write", ofs, len, 4 );
    IOLOG( "%s of %d words ofs=%d len=%d", "oduksc_reg_RAMP_DONE_INT_EN_array_burst_write", 4, ofs, len);
    oduksc_burst_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODUKSC_CORE_REG_RAMP_DONE_INT_EN(ofs),
                        len,
                        value);

}


#ifndef oduksc_reg_RAMP_DONE_INT_EN_array_field_set
#define oduksc_reg_RAMP_DONE_INT_EN_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_RAMP_DONE_INT_EN_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_RAMP_DONE_INT_EN_array_field_set( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_RAMP_DONE_INT_EN_array_field_set", mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_RAMP_DONE_INT_EN(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_RAMP_DONE_INT_EN_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_RAMP_DONE_INT_EN_array_burst_read
#define oduksc_reg_RAMP_DONE_INT_EN_array_burst_read( b_ptr, h_ptr, ofs, len, value ) \
       _oduksc_reg_RAMP_DONE_INT_EN_array_burst_read( LOG_CALLER b_ptr, h_ptr, ofs, len, value )
#endif
static INLINE void _oduksc_reg_RAMP_DONE_INT_EN_array_burst_read( LOG_CALLER_DEFN
                                                                  oduksc_buffer_t *b_ptr,
                                                                  oduksc_handle_t *h_ptr,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 4)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "oduksc_reg_RAMP_DONE_INT_EN_array_burst_read", ofs, len, 4 );
    oduksc_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_STATUS,
                       PMC_ODUKSC_CORE_REG_RAMP_DONE_INT_EN(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "oduksc_reg_RAMP_DONE_INT_EN_array_burst_read", 4, ofs, len);
}


#ifndef oduksc_reg_RAMP_DONE_INT_EN_array_read
#define oduksc_reg_RAMP_DONE_INT_EN_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_RAMP_DONE_INT_EN_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_RAMP_DONE_INT_EN_array_read( LOG_CALLER_DEFN
                                                              oduksc_buffer_t *b_ptr,
                                                              oduksc_handle_t *h_ptr,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_RAMP_DONE_INT_EN(N));

    IOLOG( "%s -> 0x%08x;", "oduksc_reg_RAMP_DONE_INT_EN_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_ERR_INTS
 *
 * Register: Error Interrupts
 * Offset: 0x00000014 ERR_INTS
 *
 * bits 1 default X ACC_UNDF_I
 * attribute: int_edge=rising
 * attribute: clk=sys_clk
 *
 * bits 0 default X ACC_OVF_I
 * attribute: int_edge=rising
 * attribute: clk=sys_clk
 */

#ifndef oduksc_reg_ERR_INTS_write
#define oduksc_reg_ERR_INTS_write( b_ptr, h_ptr, value ) \
       _oduksc_reg_ERR_INTS_write( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_reg_ERR_INTS_write( LOG_CALLER_DEFN
                                               oduksc_buffer_t *b_ptr,
                                               oduksc_handle_t *h_ptr,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_ERR_INTS_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_ERR_INTS,
                      value);
}


#ifndef oduksc_reg_ERR_INTS_action_on_write_field_set
#define oduksc_reg_ERR_INTS_action_on_write_field_set( b_ptr, h_ptr, mask, ofs, value ) \
       _oduksc_reg_ERR_INTS_action_on_write_field_set( LOG_CALLER b_ptr, h_ptr, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_ERR_INTS_action_on_write_field_set( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_ERR_INTS_action_on_write_field_set", mask, ofs, value );
    oduksc_action_on_write_field_set( b_ptr,
                                      h_ptr,
                                      MEM_TYPE_STATUS,
                                      PMC_ODUKSC_CORE_REG_ERR_INTS,
                                      mask,
                                      ofs,
                                      value);

}


#ifndef oduksc_reg_ERR_INTS_read
#define oduksc_reg_ERR_INTS_read( b_ptr, h_ptr ) \
       _oduksc_reg_ERR_INTS_read( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_reg_ERR_INTS_read( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_ERR_INTS);

    IOLOG( "%s -> 0x%08x;", "oduksc_reg_ERR_INTS_read", reg_value);
    return reg_value;
}

#ifndef oduksc_reg_ERR_INTS_poll
#define oduksc_reg_ERR_INTS_poll( b_ptr, h_ptr, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _oduksc_reg_ERR_INTS_poll( LOG_CALLER b_ptr, h_ptr, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _oduksc_reg_ERR_INTS_poll( LOG_CALLER_DEFN
                                                              oduksc_buffer_t *b_ptr,
                                                              oduksc_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "oduksc_reg_ERR_INTS_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return oduksc_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODUKSC_CORE_REG_ERR_INTS,
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_SRC_ZONE_INTS
 *
 * Register: Source FIFO Empty Zone Interrupts
 * Offset: (0x000000a0 + (N) * 4) SRC_ZONE_INTS
 *
 * bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX SRC_ZONE_I
 * field_bits  31:0
 * attribute: int_edge=changing
 * attribute: clk=sys_clk
 */

#ifndef oduksc_reg_SRC_ZONE_INTS_array_burst_write
#define oduksc_reg_SRC_ZONE_INTS_array_burst_write( b_ptr, h_ptr, ofs, len, value ) \
       _oduksc_reg_SRC_ZONE_INTS_array_burst_write( LOG_CALLER b_ptr, h_ptr, ofs, len, value )
#endif
static INLINE void _oduksc_reg_SRC_ZONE_INTS_array_burst_write( LOG_CALLER_DEFN
                                                                oduksc_buffer_t *b_ptr,
                                                                oduksc_handle_t *h_ptr,
                                                                UINT32 ofs,
                                                                UINT32 len,
                                                                UINT32 *value )
{
    if (len + ofs > 4)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "oduksc_reg_SRC_ZONE_INTS_array_burst_write", ofs, len, 4 );
    IOLOG( "%s of %d words ofs=%d len=%d", "oduksc_reg_SRC_ZONE_INTS_array_burst_write", 4, ofs, len);
    oduksc_burst_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODUKSC_CORE_REG_SRC_ZONE_INTS(ofs),
                        len,
                        value);

}


#ifndef oduksc_reg_SRC_ZONE_INTS_array_action_on_write_field_set
#define oduksc_reg_SRC_ZONE_INTS_array_action_on_write_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_SRC_ZONE_INTS_array_action_on_write_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_SRC_ZONE_INTS_array_action_on_write_field_set( LOG_CALLER_DEFN
                                                                              oduksc_buffer_t *b_ptr,
                                                                              oduksc_handle_t *h_ptr,
                                                                              UINT32 N,
                                                                              UINT32 mask,
                                                                              UINT32 ofs,
                                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_SRC_ZONE_INTS_array_action_on_write_field_set", mask, ofs, value );
    oduksc_action_on_write_field_set( b_ptr,
                                      h_ptr,
                                      MEM_TYPE_STATUS,
                                      PMC_ODUKSC_CORE_REG_SRC_ZONE_INTS(N),
                                      mask,
                                      ofs,
                                      value);

}


#ifndef oduksc_reg_SRC_ZONE_INTS_array_burst_read
#define oduksc_reg_SRC_ZONE_INTS_array_burst_read( b_ptr, h_ptr, ofs, len, value ) \
       _oduksc_reg_SRC_ZONE_INTS_array_burst_read( LOG_CALLER b_ptr, h_ptr, ofs, len, value )
#endif
static INLINE void _oduksc_reg_SRC_ZONE_INTS_array_burst_read( LOG_CALLER_DEFN
                                                               oduksc_buffer_t *b_ptr,
                                                               oduksc_handle_t *h_ptr,
                                                               UINT32 ofs,
                                                               UINT32 len,
                                                               UINT32 *value )
{
    if (len + ofs > 4)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "oduksc_reg_SRC_ZONE_INTS_array_burst_read", ofs, len, 4 );
    oduksc_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_STATUS,
                       PMC_ODUKSC_CORE_REG_SRC_ZONE_INTS(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "oduksc_reg_SRC_ZONE_INTS_array_burst_read", 4, ofs, len);
}


#ifndef oduksc_reg_SRC_ZONE_INTS_array_read
#define oduksc_reg_SRC_ZONE_INTS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_SRC_ZONE_INTS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_SRC_ZONE_INTS_array_read( LOG_CALLER_DEFN
                                                           oduksc_buffer_t *b_ptr,
                                                           oduksc_handle_t *h_ptr,
                                                           UINT32 N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_SRC_ZONE_INTS(N));

    IOLOG( "%s -> 0x%08x;", "oduksc_reg_SRC_ZONE_INTS_array_read", reg_value);
    return reg_value;
}

#ifndef oduksc_reg_SRC_ZONE_INTS_array_poll
#define oduksc_reg_SRC_ZONE_INTS_array_poll( b_ptr, h_ptr, N, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _oduksc_reg_SRC_ZONE_INTS_array_poll( LOG_CALLER b_ptr, h_ptr, N, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _oduksc_reg_SRC_ZONE_INTS_array_poll( LOG_CALLER_DEFN
                                                                         oduksc_buffer_t *b_ptr,
                                                                         oduksc_handle_t *h_ptr,
                                                                         UINT32 N,
                                                                         UINT32 mask,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "oduksc_reg_SRC_ZONE_INTS_array_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return oduksc_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODUKSC_CORE_REG_SRC_ZONE_INTS(N),
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_RAMP_DONE_INTS
 *
 * Register: Ramp Done indication Interrupts
 * Offset: (0x000000b0 + (N) * 4) RAMP_DONE_INTS
 *
 * bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX RAMP_DONE_I
 * field_bits  31:0
 * attribute: int_edge=rising
 * attribute: clk=sys_clk
 */

#ifndef oduksc_reg_RAMP_DONE_INTS_array_burst_write
#define oduksc_reg_RAMP_DONE_INTS_array_burst_write( b_ptr, h_ptr, ofs, len, value ) \
       _oduksc_reg_RAMP_DONE_INTS_array_burst_write( LOG_CALLER b_ptr, h_ptr, ofs, len, value )
#endif
static INLINE void _oduksc_reg_RAMP_DONE_INTS_array_burst_write( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value )
{
    if (len + ofs > 4)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "oduksc_reg_RAMP_DONE_INTS_array_burst_write", ofs, len, 4 );
    IOLOG( "%s of %d words ofs=%d len=%d", "oduksc_reg_RAMP_DONE_INTS_array_burst_write", 4, ofs, len);
    oduksc_burst_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODUKSC_CORE_REG_RAMP_DONE_INTS(ofs),
                        len,
                        value);

}


#ifndef oduksc_reg_RAMP_DONE_INTS_array_action_on_write_field_set
#define oduksc_reg_RAMP_DONE_INTS_array_action_on_write_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_RAMP_DONE_INTS_array_action_on_write_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_RAMP_DONE_INTS_array_action_on_write_field_set( LOG_CALLER_DEFN
                                                                               oduksc_buffer_t *b_ptr,
                                                                               oduksc_handle_t *h_ptr,
                                                                               UINT32 N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_RAMP_DONE_INTS_array_action_on_write_field_set", mask, ofs, value );
    oduksc_action_on_write_field_set( b_ptr,
                                      h_ptr,
                                      MEM_TYPE_STATUS,
                                      PMC_ODUKSC_CORE_REG_RAMP_DONE_INTS(N),
                                      mask,
                                      ofs,
                                      value);

}


#ifndef oduksc_reg_RAMP_DONE_INTS_array_burst_read
#define oduksc_reg_RAMP_DONE_INTS_array_burst_read( b_ptr, h_ptr, ofs, len, value ) \
       _oduksc_reg_RAMP_DONE_INTS_array_burst_read( LOG_CALLER b_ptr, h_ptr, ofs, len, value )
#endif
static INLINE void _oduksc_reg_RAMP_DONE_INTS_array_burst_read( LOG_CALLER_DEFN
                                                                oduksc_buffer_t *b_ptr,
                                                                oduksc_handle_t *h_ptr,
                                                                UINT32 ofs,
                                                                UINT32 len,
                                                                UINT32 *value )
{
    if (len + ofs > 4)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "oduksc_reg_RAMP_DONE_INTS_array_burst_read", ofs, len, 4 );
    oduksc_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_STATUS,
                       PMC_ODUKSC_CORE_REG_RAMP_DONE_INTS(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "oduksc_reg_RAMP_DONE_INTS_array_burst_read", 4, ofs, len);
}


#ifndef oduksc_reg_RAMP_DONE_INTS_array_read
#define oduksc_reg_RAMP_DONE_INTS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_RAMP_DONE_INTS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_RAMP_DONE_INTS_array_read( LOG_CALLER_DEFN
                                                            oduksc_buffer_t *b_ptr,
                                                            oduksc_handle_t *h_ptr,
                                                            UINT32 N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_RAMP_DONE_INTS(N));

    IOLOG( "%s -> 0x%08x;", "oduksc_reg_RAMP_DONE_INTS_array_read", reg_value);
    return reg_value;
}

#ifndef oduksc_reg_RAMP_DONE_INTS_array_poll
#define oduksc_reg_RAMP_DONE_INTS_array_poll( b_ptr, h_ptr, N, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _oduksc_reg_RAMP_DONE_INTS_array_poll( LOG_CALLER b_ptr, h_ptr, N, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _oduksc_reg_RAMP_DONE_INTS_array_poll( LOG_CALLER_DEFN
                                                                          oduksc_buffer_t *b_ptr,
                                                                          oduksc_handle_t *h_ptr,
                                                                          UINT32 N,
                                                                          UINT32 mask,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "oduksc_reg_RAMP_DONE_INTS_array_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return oduksc_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODUKSC_CORE_REG_RAMP_DONE_INTS(N),
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_SRC_ZONE_INT_STAT
 *
 * Register: Source FIFO Empty Zone Interrupt Status
 * Offset: (0x000000c0 + (N) * 4) SRC_ZONE_INT_STAT
 *
 * bits        31:0 default 00000000000000000000000000000000 SRC_ZONE_V
 * field_bits  31:0
 */

#ifndef oduksc_reg_SRC_ZONE_INT_STAT_array_burst_read
#define oduksc_reg_SRC_ZONE_INT_STAT_array_burst_read( b_ptr, h_ptr, ofs, len, value ) \
       _oduksc_reg_SRC_ZONE_INT_STAT_array_burst_read( LOG_CALLER b_ptr, h_ptr, ofs, len, value )
#endif
static INLINE void _oduksc_reg_SRC_ZONE_INT_STAT_array_burst_read( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 4)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "oduksc_reg_SRC_ZONE_INT_STAT_array_burst_read", ofs, len, 4 );
    oduksc_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_STATUS,
                       PMC_ODUKSC_CORE_REG_SRC_ZONE_INT_STAT(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "oduksc_reg_SRC_ZONE_INT_STAT_array_burst_read", 4, ofs, len);
}


#ifndef oduksc_reg_SRC_ZONE_INT_STAT_array_read
#define oduksc_reg_SRC_ZONE_INT_STAT_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_SRC_ZONE_INT_STAT_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_SRC_ZONE_INT_STAT_array_read( LOG_CALLER_DEFN
                                                               oduksc_buffer_t *b_ptr,
                                                               oduksc_handle_t *h_ptr,
                                                               UINT32 N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_SRC_ZONE_INT_STAT(N));

    IOLOG( "%s -> 0x%08x;", "oduksc_reg_SRC_ZONE_INT_STAT_array_read", reg_value);
    return reg_value;
}

#ifndef oduksc_reg_SRC_ZONE_INT_STAT_array_poll
#define oduksc_reg_SRC_ZONE_INT_STAT_array_poll( b_ptr, h_ptr, N, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _oduksc_reg_SRC_ZONE_INT_STAT_array_poll( LOG_CALLER b_ptr, h_ptr, N, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _oduksc_reg_SRC_ZONE_INT_STAT_array_poll( LOG_CALLER_DEFN
                                                                             oduksc_buffer_t *b_ptr,
                                                                             oduksc_handle_t *h_ptr,
                                                                             UINT32 N,
                                                                             UINT32 mask,
                                                                             UINT32 value,
                                                                             PMC_POLL_COMPARISON_TYPE cmp,
                                                                             UINT32 max_count,
                                                                             UINT32 *num_failed_polls,
                                                                             UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "oduksc_reg_SRC_ZONE_INT_STAT_array_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return oduksc_poll( b_ptr,
                        h_ptr,
                        MEM_TYPE_STATUS,
                        PMC_ODUKSC_CORE_REG_SRC_ZONE_INT_STAT(N),
                        mask,
                        value,
                        cmp,
                        max_count,
                        num_failed_polls,
                        delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS
 *
 * Register: Credit Generator State RAM Standby Page Channel N Bits 25:0 Access
 * Offset: (0x00001000 + (N) * 0x20) CGEN_STATE_RAM_STBY_DWORD0_ACCESS
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX CGEN_STATE_RAM_STBY_DWORD0
 */

#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_write
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_write( LOG_CALLER_DEFN
                                                                              oduksc_buffer_t *b_ptr,
                                                                              oduksc_handle_t *h_ptr,
                                                                              UINT32  N,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS(N),
                      value);
}


#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_field_set
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_field_set( LOG_CALLER_DEFN
                                                                                  oduksc_buffer_t *b_ptr,
                                                                                  oduksc_handle_t *h_ptr,
                                                                                  UINT32  N,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_read
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_read( LOG_CALLER_DEFN
                                                                               oduksc_buffer_t *b_ptr,
                                                                               oduksc_handle_t *h_ptr,
                                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS
 *
 * Register: Credit Generator State RAM Standby Page Channel N Bits 51:26 Access
 * Offset: (0x00001004 + (N) * 0x20) CGEN_STATE_RAM_STBY_DWORD1_ACCESS
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX CGEN_STATE_RAM_STBY_DWORD1
 */

#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_write
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_write( LOG_CALLER_DEFN
                                                                              oduksc_buffer_t *b_ptr,
                                                                              oduksc_handle_t *h_ptr,
                                                                              UINT32  N,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS(N),
                      value);
}


#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_field_set
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_field_set( LOG_CALLER_DEFN
                                                                                  oduksc_buffer_t *b_ptr,
                                                                                  oduksc_handle_t *h_ptr,
                                                                                  UINT32  N,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_read
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_read( LOG_CALLER_DEFN
                                                                               oduksc_buffer_t *b_ptr,
                                                                               oduksc_handle_t *h_ptr,
                                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS
 *
 * Register: Credit Generator State RAM Standby Page Channel N Bits 77:52 Access
 * Offset: (0x00001008 + (N) * 0x20) CGEN_STATE_RAM_STBY_DWORD2_ACCESS
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX CGEN_STATE_RAM_STBY_DWORD2
 */

#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_write
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_write( LOG_CALLER_DEFN
                                                                              oduksc_buffer_t *b_ptr,
                                                                              oduksc_handle_t *h_ptr,
                                                                              UINT32  N,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS(N),
                      value);
}


#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_field_set
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_field_set( LOG_CALLER_DEFN
                                                                                  oduksc_buffer_t *b_ptr,
                                                                                  oduksc_handle_t *h_ptr,
                                                                                  UINT32  N,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_read
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_read( LOG_CALLER_DEFN
                                                                               oduksc_buffer_t *b_ptr,
                                                                               oduksc_handle_t *h_ptr,
                                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS
 *
 * Register: Credit Generator State RAM Standby Page Channel N Bits 103:78 Access
 * Offset: (0x0000100c + (N) * 0x20) CGEN_STATE_RAM_STBY_DWORD3_ACCESS
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX CGEN_STATE_RAM_STBY_DWORD3
 */

#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_write
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_write( LOG_CALLER_DEFN
                                                                              oduksc_buffer_t *b_ptr,
                                                                              oduksc_handle_t *h_ptr,
                                                                              UINT32  N,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS(N),
                      value);
}


#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_field_set
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_field_set( LOG_CALLER_DEFN
                                                                                  oduksc_buffer_t *b_ptr,
                                                                                  oduksc_handle_t *h_ptr,
                                                                                  UINT32  N,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_read
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_read( LOG_CALLER_DEFN
                                                                               oduksc_buffer_t *b_ptr,
                                                                               oduksc_handle_t *h_ptr,
                                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS
 *
 * Register: Credit Generator State RAM Standby Page Channel N Bits 130:104 Access
 * Offset: (0x00001010 + (N) * 0x20) CGEN_STATE_RAM_STBY_DWORD4_ACCESS
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX CGEN_STATE_RAM_STBY_DWORD4
 */

#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_write
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_write( LOG_CALLER_DEFN
                                                                              oduksc_buffer_t *b_ptr,
                                                                              oduksc_handle_t *h_ptr,
                                                                              UINT32  N,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS(N),
                      value);
}


#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_field_set
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_field_set( LOG_CALLER_DEFN
                                                                                  oduksc_buffer_t *b_ptr,
                                                                                  oduksc_handle_t *h_ptr,
                                                                                  UINT32  N,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_read
#define oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_read( LOG_CALLER_DEFN
                                                                               oduksc_buffer_t *b_ptr,
                                                                               oduksc_handle_t *h_ptr,
                                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS
 *
 * Register: Credit Generator State RAM Active Page Channel N Bits 25:0 Access
 * Offset: (0x00002000 + (N) * 0x20) CGEN_STATE_RAM_ACTV_DWORD0_ACCESS
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX CGEN_STATE_RAM_ACTV_DWORD0
 */

#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_write
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_write( LOG_CALLER_DEFN
                                                                              oduksc_buffer_t *b_ptr,
                                                                              oduksc_handle_t *h_ptr,
                                                                              UINT32  N,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS(N),
                      value);
}


#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_field_set
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_field_set( LOG_CALLER_DEFN
                                                                                  oduksc_buffer_t *b_ptr,
                                                                                  oduksc_handle_t *h_ptr,
                                                                                  UINT32  N,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_read
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_read( LOG_CALLER_DEFN
                                                                               oduksc_buffer_t *b_ptr,
                                                                               oduksc_handle_t *h_ptr,
                                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS
 *
 * Register: Credit Generator State RAM Active Page Channel N Bits 51:26 Access
 * Offset: (0x00002004 + (N) * 0x20) CGEN_STATE_RAM_ACTV_DWORD1_ACCESS
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX CGEN_STATE_RAM_ACTV_DWORD1
 */

#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_write
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_write( LOG_CALLER_DEFN
                                                                              oduksc_buffer_t *b_ptr,
                                                                              oduksc_handle_t *h_ptr,
                                                                              UINT32  N,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS(N),
                      value);
}


#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_field_set
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_field_set( LOG_CALLER_DEFN
                                                                                  oduksc_buffer_t *b_ptr,
                                                                                  oduksc_handle_t *h_ptr,
                                                                                  UINT32  N,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_read
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_read( LOG_CALLER_DEFN
                                                                               oduksc_buffer_t *b_ptr,
                                                                               oduksc_handle_t *h_ptr,
                                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS
 *
 * Register: Credit Generator State RAM Active Page Channel N Bits 77:52 Access
 * Offset: (0x00002008 + (N) * 0x20) CGEN_STATE_RAM_ACTV_DWORD2_ACCESS
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX CGEN_STATE_RAM_ACTV_DWORD2
 */

#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_write
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_write( LOG_CALLER_DEFN
                                                                              oduksc_buffer_t *b_ptr,
                                                                              oduksc_handle_t *h_ptr,
                                                                              UINT32  N,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS(N),
                      value);
}


#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_field_set
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_field_set( LOG_CALLER_DEFN
                                                                                  oduksc_buffer_t *b_ptr,
                                                                                  oduksc_handle_t *h_ptr,
                                                                                  UINT32  N,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_read
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_read( LOG_CALLER_DEFN
                                                                               oduksc_buffer_t *b_ptr,
                                                                               oduksc_handle_t *h_ptr,
                                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS
 *
 * Register: Credit Generator State RAM Active Page Channel N Bits 103:78 Access
 * Offset: (0x0000200c + (N) * 0x20) CGEN_STATE_RAM_ACTV_DWORD3_ACCESS
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX CGEN_STATE_RAM_ACTV_DWORD3
 */

#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_write
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_write( LOG_CALLER_DEFN
                                                                              oduksc_buffer_t *b_ptr,
                                                                              oduksc_handle_t *h_ptr,
                                                                              UINT32  N,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS(N),
                      value);
}


#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_field_set
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_field_set( LOG_CALLER_DEFN
                                                                                  oduksc_buffer_t *b_ptr,
                                                                                  oduksc_handle_t *h_ptr,
                                                                                  UINT32  N,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_read
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_read( LOG_CALLER_DEFN
                                                                               oduksc_buffer_t *b_ptr,
                                                                               oduksc_handle_t *h_ptr,
                                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS
 *
 * Register: Credit Generator State RAM Active Page Channel N Bits 130:104 Access
 * Offset: (0x00002010 + (N) * 0x20) CGEN_STATE_RAM_ACTV_DWORD4_ACCESS
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX CGEN_STATE_RAM_ACTV_DWORD4
 */

#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_write
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_write( b_ptr, h_ptr, N, value ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_write( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_write( LOG_CALLER_DEFN
                                                                              oduksc_buffer_t *b_ptr,
                                                                              oduksc_handle_t *h_ptr,
                                                                              UINT32  N,
                                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_write", value );
    oduksc_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS(N),
                      value);
}


#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_field_set
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_field_set( b_ptr, h_ptr, N, mask, ofs, value ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_field_set( LOG_CALLER b_ptr, h_ptr, N, mask, ofs, value )
#endif
static INLINE void _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_field_set( LOG_CALLER_DEFN
                                                                                  oduksc_buffer_t *b_ptr,
                                                                                  oduksc_handle_t *h_ptr,
                                                                                  UINT32  N,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_field_set", N, mask, ofs, value );
    oduksc_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS(N),
                      mask,
                      PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_UNUSED_MASK,
                      ofs,
                      value);

}


#ifndef oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_read
#define oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_read( b_ptr, h_ptr, N ) \
       _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_read( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_read( LOG_CALLER_DEFN
                                                                               oduksc_buffer_t *b_ptr,
                                                                               oduksc_handle_t *h_ptr,
                                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS(N));

    IOLOG( "%s -> 0x%08x; N=%d", "oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_RAM_PAGE_STATUS
 *
 * Register: RAM Page Status
 * Offset: 0x00000008 RAM_PAGE_STATUS
 *
 * bits 0  default X CGEN_ACTIVE_PAGE
 *
 * bits 31 default X RAM_PAGE_SEL_V
 */

#ifndef oduksc_reg_RAM_PAGE_STATUS_read
#define oduksc_reg_RAM_PAGE_STATUS_read( b_ptr, h_ptr ) \
       _oduksc_reg_RAM_PAGE_STATUS_read( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_reg_RAM_PAGE_STATUS_read( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_RAM_PAGE_STATUS);

    IOLOG( "%s -> 0x%08x;", "oduksc_reg_RAM_PAGE_STATUS_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUKSC_CORE_REG_ERR_CHAN
 *
 * Register: Errored Channel
 * Offset: 0x00000018 ERR_CHAN
 *
 * bits 14:8 default XXXXXXX ACC_UNDF_CHAN
 *
 * bits 6:0  default XXXXXXX ACC_OVF_CHAN
 */

#ifndef oduksc_reg_ERR_CHAN_read
#define oduksc_reg_ERR_CHAN_read( b_ptr, h_ptr ) \
       _oduksc_reg_ERR_CHAN_read( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_reg_ERR_CHAN_read( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = oduksc_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUKSC_CORE_REG_ERR_CHAN);

    IOLOG( "%s -> 0x%08x;", "oduksc_reg_ERR_CHAN_read", reg_value);
    return reg_value;
}

/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset config
 * ==================================================================================
 */

#ifndef oduksc_field_SOFT_RESET_set
#define oduksc_field_SOFT_RESET_set( b_ptr, h_ptr, value ) \
       _oduksc_field_SOFT_RESET_set( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_field_SOFT_RESET_set( LOG_CALLER_DEFN
                                                 oduksc_buffer_t *b_ptr,
                                                 oduksc_handle_t *h_ptr,
                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_SOFT_RESET_set", value, 1);
    IOLOG( "%s <= 0x%08x", "oduksc_field_SOFT_RESET_set", value );

    /* (0x00000000 bits 31) field SOFT_RESET of register PMC_ODUKSC_CORE_REG_CFG */
    _oduksc_reg_CFG_field_set( LOG_CALLER_ARGS
                               b_ptr,
                               h_ptr,
                               ODUKSC_CORE_REG_CFG_BIT_SOFT_RESET_MSK,
                               ODUKSC_CORE_REG_CFG_BIT_SOFT_RESET_OFF,
                               value);
}


#ifndef oduksc_field_SOFT_RESET_get
#define oduksc_field_SOFT_RESET_get( b_ptr, h_ptr ) \
       _oduksc_field_SOFT_RESET_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_SOFT_RESET_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 31) field SOFT_RESET of register PMC_ODUKSC_CORE_REG_CFG */
    reg_value = _oduksc_reg_CFG_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_CFG_BIT_SOFT_RESET_MSK) >> ODUKSC_CORE_REG_CFG_BIT_SOFT_RESET_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_SOFT_RESET_get", value );

    return value;
}

#ifndef oduksc_field_PG_OVERRIDE_set
#define oduksc_field_PG_OVERRIDE_set( b_ptr, h_ptr, value ) \
       _oduksc_field_PG_OVERRIDE_set( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_field_PG_OVERRIDE_set( LOG_CALLER_DEFN
                                                  oduksc_buffer_t *b_ptr,
                                                  oduksc_handle_t *h_ptr,
                                                  UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_PG_OVERRIDE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "oduksc_field_PG_OVERRIDE_set", value );

    /* (0x00000000 bits 23) field PG_OVERRIDE of register PMC_ODUKSC_CORE_REG_CFG */
    _oduksc_reg_CFG_field_set( LOG_CALLER_ARGS
                               b_ptr,
                               h_ptr,
                               ODUKSC_CORE_REG_CFG_BIT_PG_OVERRIDE_MSK,
                               ODUKSC_CORE_REG_CFG_BIT_PG_OVERRIDE_OFF,
                               value);
}


#ifndef oduksc_field_PG_OVERRIDE_get
#define oduksc_field_PG_OVERRIDE_get( b_ptr, h_ptr ) \
       _oduksc_field_PG_OVERRIDE_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_PG_OVERRIDE_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 23) field PG_OVERRIDE of register PMC_ODUKSC_CORE_REG_CFG */
    reg_value = _oduksc_reg_CFG_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_CFG_BIT_PG_OVERRIDE_MSK) >> ODUKSC_CORE_REG_CFG_BIT_PG_OVERRIDE_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_PG_OVERRIDE_get", value );

    return value;
}

#ifndef oduksc_field_USERBITS_DEL_set
#define oduksc_field_USERBITS_DEL_set( b_ptr, h_ptr, value ) \
       _oduksc_field_USERBITS_DEL_set( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_field_USERBITS_DEL_set( LOG_CALLER_DEFN
                                                   oduksc_buffer_t *b_ptr,
                                                   oduksc_handle_t *h_ptr,
                                                   UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_USERBITS_DEL_set", value, 15);
    IOLOG( "%s <= 0x%08x", "oduksc_field_USERBITS_DEL_set", value );

    /* (0x00000000 bits 3:0) bits 0:3 use field USERBITS_DEL of register PMC_ODUKSC_CORE_REG_CFG */
    _oduksc_reg_CFG_field_set( LOG_CALLER_ARGS
                               b_ptr,
                               h_ptr,
                               ODUKSC_CORE_REG_CFG_BIT_USERBITS_DEL_MSK,
                               ODUKSC_CORE_REG_CFG_BIT_USERBITS_DEL_OFF,
                               value);
}


#ifndef oduksc_field_USERBITS_DEL_get
#define oduksc_field_USERBITS_DEL_get( b_ptr, h_ptr ) \
       _oduksc_field_USERBITS_DEL_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_USERBITS_DEL_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 3:0) bits 0:3 use field USERBITS_DEL of register PMC_ODUKSC_CORE_REG_CFG */
    reg_value = _oduksc_reg_CFG_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_CFG_BIT_USERBITS_DEL_MSK) >> ODUKSC_CORE_REG_CFG_BIT_USERBITS_DEL_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_USERBITS_DEL_get", value );

    return value;
}

#ifndef oduksc_field_range_USERBITS_DEL_set
#define oduksc_field_range_USERBITS_DEL_set( b_ptr, h_ptr, start_bit, stop_bit, value ) \
       _oduksc_field_range_USERBITS_DEL_set( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_USERBITS_DEL_set( LOG_CALLER_DEFN
                                                         oduksc_buffer_t *b_ptr,
                                                         oduksc_handle_t *h_ptr,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_USERBITS_DEL_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_USERBITS_DEL_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_USERBITS_DEL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000000 bits 3:0) bits 0:3 use field USERBITS_DEL of register PMC_ODUKSC_CORE_REG_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000000 bits 3:0) bits 0:3 use field USERBITS_DEL of register PMC_ODUKSC_CORE_REG_CFG */
        _oduksc_reg_CFG_field_set( LOG_CALLER_ARGS
                                   b_ptr,
                                   h_ptr,
                                   subfield_mask << (ODUKSC_CORE_REG_CFG_BIT_USERBITS_DEL_OFF + subfield_offset),
                                   ODUKSC_CORE_REG_CFG_BIT_USERBITS_DEL_OFF + subfield_offset,
                                   value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_USERBITS_DEL_get
#define oduksc_field_range_USERBITS_DEL_get( b_ptr, h_ptr, start_bit, stop_bit ) \
       _oduksc_field_range_USERBITS_DEL_get( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_USERBITS_DEL_get( LOG_CALLER_DEFN
                                                           oduksc_buffer_t *b_ptr,
                                                           oduksc_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_USERBITS_DEL_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_USERBITS_DEL_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000000 bits 3:0) bits 0:3 use field USERBITS_DEL of register PMC_ODUKSC_CORE_REG_CFG */
    reg_value = _oduksc_reg_CFG_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    field_value = (reg_value & ODUKSC_CORE_REG_CFG_BIT_USERBITS_DEL_MSK)
                  >> ODUKSC_CORE_REG_CFG_BIT_USERBITS_DEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CFG_BIT_USERBITS_DEL_MSK, ODUKSC_CORE_REG_CFG_BIT_USERBITS_DEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_USERBITS_DEL_get", start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_PAGE_SWAP_TYPE_set
#define oduksc_field_PAGE_SWAP_TYPE_set( b_ptr, h_ptr, value ) \
       _oduksc_field_PAGE_SWAP_TYPE_set( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_field_PAGE_SWAP_TYPE_set( LOG_CALLER_DEFN
                                                     oduksc_buffer_t *b_ptr,
                                                     oduksc_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_PAGE_SWAP_TYPE_set", value, 3);
    IOLOG( "%s <= 0x%08x", "oduksc_field_PAGE_SWAP_TYPE_set", value );

    /* (0x00000004 bits 9:8) bits 0:1 use field PAGE_SWAP_TYPE of register PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL */
    _oduksc_reg_RAM_PAGE_CTRL_field_set( LOG_CALLER_ARGS
                                         b_ptr,
                                         h_ptr,
                                         ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_TYPE_MSK,
                                         ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_TYPE_OFF,
                                         value);
}


#ifndef oduksc_field_PAGE_SWAP_TYPE_get
#define oduksc_field_PAGE_SWAP_TYPE_get( b_ptr, h_ptr ) \
       _oduksc_field_PAGE_SWAP_TYPE_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_PAGE_SWAP_TYPE_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 9:8) bits 0:1 use field PAGE_SWAP_TYPE of register PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL */
    reg_value = _oduksc_reg_RAM_PAGE_CTRL_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_TYPE_MSK) >> ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_TYPE_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_PAGE_SWAP_TYPE_get", value );

    return value;
}

#ifndef oduksc_field_range_PAGE_SWAP_TYPE_set
#define oduksc_field_range_PAGE_SWAP_TYPE_set( b_ptr, h_ptr, start_bit, stop_bit, value ) \
       _oduksc_field_range_PAGE_SWAP_TYPE_set( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_PAGE_SWAP_TYPE_set( LOG_CALLER_DEFN
                                                           oduksc_buffer_t *b_ptr,
                                                           oduksc_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_PAGE_SWAP_TYPE_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_PAGE_SWAP_TYPE_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_PAGE_SWAP_TYPE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000004 bits 9:8) bits 0:1 use field PAGE_SWAP_TYPE of register PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000004 bits 9:8) bits 0:1 use field PAGE_SWAP_TYPE of register PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL */
        _oduksc_reg_RAM_PAGE_CTRL_field_set( LOG_CALLER_ARGS
                                             b_ptr,
                                             h_ptr,
                                             subfield_mask << (ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_TYPE_OFF + subfield_offset),
                                             ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_TYPE_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_PAGE_SWAP_TYPE_get
#define oduksc_field_range_PAGE_SWAP_TYPE_get( b_ptr, h_ptr, start_bit, stop_bit ) \
       _oduksc_field_range_PAGE_SWAP_TYPE_get( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_PAGE_SWAP_TYPE_get( LOG_CALLER_DEFN
                                                             oduksc_buffer_t *b_ptr,
                                                             oduksc_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_PAGE_SWAP_TYPE_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_PAGE_SWAP_TYPE_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000004 bits 9:8) bits 0:1 use field PAGE_SWAP_TYPE of register PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL */
    reg_value = _oduksc_reg_RAM_PAGE_CTRL_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    field_value = (reg_value & ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_TYPE_MSK)
                  >> ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_TYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_TYPE_MSK, ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_TYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_PAGE_SWAP_TYPE_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *             Parameter Access Functions for Paramset config_N_size128
 * ==================================================================================
 */

#ifndef oduksc_field_RI_PGEN_SEL_set
#define oduksc_field_RI_PGEN_SEL_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_RI_PGEN_SEL_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_RI_PGEN_SEL_set( LOG_CALLER_DEFN
                                                  oduksc_buffer_t *b_ptr,
                                                  oduksc_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_RI_PGEN_SEL_set", N, 127);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_RI_PGEN_SEL_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_RI_PGEN_SEL_set", N, value );

    /* ((0x00001014 + (N) * 0x20) bits 5:3) bits 0:2 use field RI_PGEN_SEL of register PMC_ODUKSC_CORE_REG_CHAN_CTRL index N=0..127 */
    _oduksc_reg_CHAN_CTRL_array_field_set( LOG_CALLER_ARGS
                                           b_ptr,
                                           h_ptr,
                                           N,
                                           ODUKSC_CORE_REG_CHAN_CTRL_BIT_RI_PGEN_SEL_MSK,
                                           ODUKSC_CORE_REG_CHAN_CTRL_BIT_RI_PGEN_SEL_OFF,
                                           value);
}


#ifndef oduksc_field_RI_PGEN_SEL_get
#define oduksc_field_RI_PGEN_SEL_get( b_ptr, h_ptr, N ) \
       _oduksc_field_RI_PGEN_SEL_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_RI_PGEN_SEL_get( LOG_CALLER_DEFN
                                                    oduksc_buffer_t *b_ptr,
                                                    oduksc_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_RI_PGEN_SEL_get", N, 127);
    /* ((0x00001014 + (N) * 0x20) bits 5:3) bits 0:2 use field RI_PGEN_SEL of register PMC_ODUKSC_CORE_REG_CHAN_CTRL index N=0..127 */
    reg_value = _oduksc_reg_CHAN_CTRL_array_read( LOG_CALLER_ARGS b_ptr, h_ptr, N);
    value = (reg_value & ODUKSC_CORE_REG_CHAN_CTRL_BIT_RI_PGEN_SEL_MSK) >> ODUKSC_CORE_REG_CHAN_CTRL_BIT_RI_PGEN_SEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_RI_PGEN_SEL_get", N, value );

    return value;
}

#ifndef oduksc_field_range_RI_PGEN_SEL_set
#define oduksc_field_range_RI_PGEN_SEL_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_RI_PGEN_SEL_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_RI_PGEN_SEL_set( LOG_CALLER_DEFN
                                                        oduksc_buffer_t *b_ptr,
                                                        oduksc_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_RI_PGEN_SEL_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_RI_PGEN_SEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_RI_PGEN_SEL_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_RI_PGEN_SEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001014 + (N) * 0x20) bits 5:3) bits 0:2 use field RI_PGEN_SEL of register PMC_ODUKSC_CORE_REG_CHAN_CTRL index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001014 + (N) * 0x20) bits 5:3) bits 0:2 use field RI_PGEN_SEL of register PMC_ODUKSC_CORE_REG_CHAN_CTRL index N=0..127 */
        _oduksc_reg_CHAN_CTRL_array_field_set( LOG_CALLER_ARGS
                                               b_ptr,
                                               h_ptr,
                                               N,
                                               subfield_mask << (ODUKSC_CORE_REG_CHAN_CTRL_BIT_RI_PGEN_SEL_OFF + subfield_offset),
                                               ODUKSC_CORE_REG_CHAN_CTRL_BIT_RI_PGEN_SEL_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_RI_PGEN_SEL_get
#define oduksc_field_range_RI_PGEN_SEL_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_RI_PGEN_SEL_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_RI_PGEN_SEL_get( LOG_CALLER_DEFN
                                                          oduksc_buffer_t *b_ptr,
                                                          oduksc_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_RI_PGEN_SEL_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_RI_PGEN_SEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_RI_PGEN_SEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001014 + (N) * 0x20) bits 5:3) bits 0:2 use field RI_PGEN_SEL of register PMC_ODUKSC_CORE_REG_CHAN_CTRL index N=0..127 */
    reg_value = _oduksc_reg_CHAN_CTRL_array_read( LOG_CALLER_ARGS b_ptr, h_ptr, N);
    field_value = (reg_value & ODUKSC_CORE_REG_CHAN_CTRL_BIT_RI_PGEN_SEL_MSK)
                  >> ODUKSC_CORE_REG_CHAN_CTRL_BIT_RI_PGEN_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CHAN_CTRL_BIT_RI_PGEN_SEL_MSK, ODUKSC_CORE_REG_CHAN_CTRL_BIT_RI_PGEN_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_RI_PGEN_SEL_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_SRC_ZONE_PB_EN_set
#define oduksc_field_SRC_ZONE_PB_EN_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_SRC_ZONE_PB_EN_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_SRC_ZONE_PB_EN_set( LOG_CALLER_DEFN
                                                     oduksc_buffer_t *b_ptr,
                                                     oduksc_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_SRC_ZONE_PB_EN_set", N, 127);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_SRC_ZONE_PB_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_SRC_ZONE_PB_EN_set", N, value );

    /* ((0x00001014 + (N) * 0x20) bits 2) field SRC_ZONE_PB_EN of register PMC_ODUKSC_CORE_REG_CHAN_CTRL index N=0..127 */
    _oduksc_reg_CHAN_CTRL_array_field_set( LOG_CALLER_ARGS
                                           b_ptr,
                                           h_ptr,
                                           N,
                                           ODUKSC_CORE_REG_CHAN_CTRL_BIT_SRC_ZONE_PB_EN_MSK,
                                           ODUKSC_CORE_REG_CHAN_CTRL_BIT_SRC_ZONE_PB_EN_OFF,
                                           value);
}


#ifndef oduksc_field_SRC_ZONE_PB_EN_get
#define oduksc_field_SRC_ZONE_PB_EN_get( b_ptr, h_ptr, N ) \
       _oduksc_field_SRC_ZONE_PB_EN_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_SRC_ZONE_PB_EN_get( LOG_CALLER_DEFN
                                                       oduksc_buffer_t *b_ptr,
                                                       oduksc_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_SRC_ZONE_PB_EN_get", N, 127);
    /* ((0x00001014 + (N) * 0x20) bits 2) field SRC_ZONE_PB_EN of register PMC_ODUKSC_CORE_REG_CHAN_CTRL index N=0..127 */
    reg_value = _oduksc_reg_CHAN_CTRL_array_read( LOG_CALLER_ARGS b_ptr, h_ptr, N);
    value = (reg_value & ODUKSC_CORE_REG_CHAN_CTRL_BIT_SRC_ZONE_PB_EN_MSK) >> ODUKSC_CORE_REG_CHAN_CTRL_BIT_SRC_ZONE_PB_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_SRC_ZONE_PB_EN_get", N, value );

    return value;
}

#ifndef oduksc_field_RAMP_GEN_EN_set
#define oduksc_field_RAMP_GEN_EN_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_RAMP_GEN_EN_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_RAMP_GEN_EN_set( LOG_CALLER_DEFN
                                                  oduksc_buffer_t *b_ptr,
                                                  oduksc_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_RAMP_GEN_EN_set", N, 127);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_RAMP_GEN_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_RAMP_GEN_EN_set", N, value );

    /* ((0x00001014 + (N) * 0x20) bits 1) field RAMP_GEN_EN of register PMC_ODUKSC_CORE_REG_CHAN_CTRL index N=0..127 */
    _oduksc_reg_CHAN_CTRL_array_field_set( LOG_CALLER_ARGS
                                           b_ptr,
                                           h_ptr,
                                           N,
                                           ODUKSC_CORE_REG_CHAN_CTRL_BIT_RAMP_GEN_EN_MSK,
                                           ODUKSC_CORE_REG_CHAN_CTRL_BIT_RAMP_GEN_EN_OFF,
                                           value);
}


#ifndef oduksc_field_RAMP_GEN_EN_get
#define oduksc_field_RAMP_GEN_EN_get( b_ptr, h_ptr, N ) \
       _oduksc_field_RAMP_GEN_EN_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_RAMP_GEN_EN_get( LOG_CALLER_DEFN
                                                    oduksc_buffer_t *b_ptr,
                                                    oduksc_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_RAMP_GEN_EN_get", N, 127);
    /* ((0x00001014 + (N) * 0x20) bits 1) field RAMP_GEN_EN of register PMC_ODUKSC_CORE_REG_CHAN_CTRL index N=0..127 */
    reg_value = _oduksc_reg_CHAN_CTRL_array_read( LOG_CALLER_ARGS b_ptr, h_ptr, N);
    value = (reg_value & ODUKSC_CORE_REG_CHAN_CTRL_BIT_RAMP_GEN_EN_MSK) >> ODUKSC_CORE_REG_CHAN_CTRL_BIT_RAMP_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_RAMP_GEN_EN_get", N, value );

    return value;
}

#ifndef oduksc_field_BASE_GEN_EN_set
#define oduksc_field_BASE_GEN_EN_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_BASE_GEN_EN_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_BASE_GEN_EN_set( LOG_CALLER_DEFN
                                                  oduksc_buffer_t *b_ptr,
                                                  oduksc_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_BASE_GEN_EN_set", N, 127);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_BASE_GEN_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_BASE_GEN_EN_set", N, value );

    /* ((0x00001014 + (N) * 0x20) bits 0) field BASE_GEN_EN of register PMC_ODUKSC_CORE_REG_CHAN_CTRL index N=0..127 */
    _oduksc_reg_CHAN_CTRL_array_field_set( LOG_CALLER_ARGS
                                           b_ptr,
                                           h_ptr,
                                           N,
                                           ODUKSC_CORE_REG_CHAN_CTRL_BIT_BASE_GEN_EN_MSK,
                                           ODUKSC_CORE_REG_CHAN_CTRL_BIT_BASE_GEN_EN_OFF,
                                           value);
}


#ifndef oduksc_field_BASE_GEN_EN_get
#define oduksc_field_BASE_GEN_EN_get( b_ptr, h_ptr, N ) \
       _oduksc_field_BASE_GEN_EN_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_BASE_GEN_EN_get( LOG_CALLER_DEFN
                                                    oduksc_buffer_t *b_ptr,
                                                    oduksc_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_BASE_GEN_EN_get", N, 127);
    /* ((0x00001014 + (N) * 0x20) bits 0) field BASE_GEN_EN of register PMC_ODUKSC_CORE_REG_CHAN_CTRL index N=0..127 */
    reg_value = _oduksc_reg_CHAN_CTRL_array_read( LOG_CALLER_ARGS b_ptr, h_ptr, N);
    value = (reg_value & ODUKSC_CORE_REG_CHAN_CTRL_BIT_BASE_GEN_EN_MSK) >> ODUKSC_CORE_REG_CHAN_CTRL_BIT_BASE_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_BASE_GEN_EN_get", N, value );

    return value;
}

/*
 * ==================================================================================
 *              Parameter Access Functions for Paramset config_N_size6
 * ==================================================================================
 */

#ifndef oduksc_field_RI_EN_set
#define oduksc_field_RI_EN_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_RI_EN_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_RI_EN_set( LOG_CALLER_DEFN
                                            oduksc_buffer_t *b_ptr,
                                            oduksc_handle_t *h_ptr,
                                            UINT32  N,
                                            UINT32 value )
{
    if (N > 5)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_RI_EN_set", N, 5);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_RI_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_RI_EN_set", N, value );

    /* ((0x00000040 + (N) * 4) bits 31) field RI_EN of register PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM index N=0..5 */
    _oduksc_reg_RI_PGEN_EN_TM_array_field_set( LOG_CALLER_ARGS
                                               b_ptr,
                                               h_ptr,
                                               N,
                                               ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_RI_EN_MSK,
                                               ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_RI_EN_OFF,
                                               value);
}


#ifndef oduksc_field_RI_EN_get
#define oduksc_field_RI_EN_get( b_ptr, h_ptr, N ) \
       _oduksc_field_RI_EN_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_RI_EN_get( LOG_CALLER_DEFN
                                              oduksc_buffer_t *b_ptr,
                                              oduksc_handle_t *h_ptr,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 5)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_RI_EN_get", N, 5);
    /* ((0x00000040 + (N) * 4) bits 31) field RI_EN of register PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM index N=0..5 */
    reg_value = _oduksc_reg_RI_PGEN_EN_TM_array_read( LOG_CALLER_ARGS
                                                      b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_RI_EN_MSK) >> ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_RI_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_RI_EN_get", N, value );

    return value;
}

#ifndef oduksc_field_TM_set
#define oduksc_field_TM_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_TM_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_TM_set( LOG_CALLER_DEFN
                                         oduksc_buffer_t *b_ptr,
                                         oduksc_handle_t *h_ptr,
                                         UINT32  N,
                                         UINT32 value )
{
    if (N > 5)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_TM_set", N, 5);
    if (value > 1073741823)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_TM_set", value, 1073741823);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_TM_set", N, value );

    /* ((0x00000040 + (N) * 4) bits 29:0) field TM of register PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM index N=0..5 */
    _oduksc_reg_RI_PGEN_EN_TM_array_field_set( LOG_CALLER_ARGS
                                               b_ptr,
                                               h_ptr,
                                               N,
                                               ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_TM_MSK,
                                               ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_TM_OFF,
                                               value);
}


#ifndef oduksc_field_TM_get
#define oduksc_field_TM_get( b_ptr, h_ptr, N ) \
       _oduksc_field_TM_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_TM_get( LOG_CALLER_DEFN
                                           oduksc_buffer_t *b_ptr,
                                           oduksc_handle_t *h_ptr,
                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 5)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_TM_get", N, 5);
    /* ((0x00000040 + (N) * 4) bits 29:0) field TM of register PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM index N=0..5 */
    reg_value = _oduksc_reg_RI_PGEN_EN_TM_array_read( LOG_CALLER_ARGS
                                                      b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_TM_MSK) >> ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_TM_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_TM_get", N, value );

    return value;
}

#ifndef oduksc_field_range_TM_set
#define oduksc_field_range_TM_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_TM_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_TM_set( LOG_CALLER_DEFN
                                               oduksc_buffer_t *b_ptr,
                                               oduksc_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value )
{
    if (N > 5)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_TM_set", N, 5);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_TM_set", stop_bit, start_bit );
    if (stop_bit > 29) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_TM_set", stop_bit, 29 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_TM_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000040 + (N) * 4) bits 29:0) field TM of register PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM index N=0..5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 29) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 29;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000040 + (N) * 4) bits 29:0) field TM of register PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM index N=0..5 */
        _oduksc_reg_RI_PGEN_EN_TM_array_field_set( LOG_CALLER_ARGS
                                                   b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_TM_OFF + subfield_offset),
                                                   ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_TM_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_TM_get
#define oduksc_field_range_TM_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_TM_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_TM_get( LOG_CALLER_DEFN
                                                 oduksc_buffer_t *b_ptr,
                                                 oduksc_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 5)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_TM_get", N, 5);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_TM_get", stop_bit, start_bit );
    if (stop_bit > 29) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_TM_get", stop_bit, 29 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 29) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 29;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000040 + (N) * 4) bits 29:0) field TM of register PMC_ODUKSC_CORE_REG_RI_PGEN_EN_TM index N=0..5 */
    reg_value = _oduksc_reg_RI_PGEN_EN_TM_array_read( LOG_CALLER_ARGS
                                                      b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_TM_MSK)
                  >> ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_TM_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_TM_MSK, ODUKSC_CORE_REG_RI_PGEN_EN_TM_BIT_TM_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_TM_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_TN_set
#define oduksc_field_TN_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_TN_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_TN_set( LOG_CALLER_DEFN
                                         oduksc_buffer_t *b_ptr,
                                         oduksc_handle_t *h_ptr,
                                         UINT32  N,
                                         UINT32 value )
{
    if (N > 5)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_TN_set", N, 5);
    if (value > 2147483647)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_TN_set", value, 2147483647);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_TN_set", N, value );

    /* ((0x00000060 + (N) * 4) bits 30:0) field TN of register PMC_ODUKSC_CORE_REG_RI_PGEN_TN index N=0..5 */
    _oduksc_reg_RI_PGEN_TN_array_field_set( LOG_CALLER_ARGS
                                            b_ptr,
                                            h_ptr,
                                            N,
                                            ODUKSC_CORE_REG_RI_PGEN_TN_BIT_TN_MSK,
                                            ODUKSC_CORE_REG_RI_PGEN_TN_BIT_TN_OFF,
                                            value);
}


#ifndef oduksc_field_TN_get
#define oduksc_field_TN_get( b_ptr, h_ptr, N ) \
       _oduksc_field_TN_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_TN_get( LOG_CALLER_DEFN
                                           oduksc_buffer_t *b_ptr,
                                           oduksc_handle_t *h_ptr,
                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 5)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_TN_get", N, 5);
    /* ((0x00000060 + (N) * 4) bits 30:0) field TN of register PMC_ODUKSC_CORE_REG_RI_PGEN_TN index N=0..5 */
    reg_value = _oduksc_reg_RI_PGEN_TN_array_read( LOG_CALLER_ARGS
                                                   b_ptr,
                                                   h_ptr,
                                                   N);
    value = (reg_value & ODUKSC_CORE_REG_RI_PGEN_TN_BIT_TN_MSK) >> ODUKSC_CORE_REG_RI_PGEN_TN_BIT_TN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_TN_get", N, value );

    return value;
}

#ifndef oduksc_field_range_TN_set
#define oduksc_field_range_TN_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_TN_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_TN_set( LOG_CALLER_DEFN
                                               oduksc_buffer_t *b_ptr,
                                               oduksc_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value )
{
    if (N > 5)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_TN_set", N, 5);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_TN_set", stop_bit, start_bit );
    if (stop_bit > 30) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_TN_set", stop_bit, 30 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_TN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000060 + (N) * 4) bits 30:0) field TN of register PMC_ODUKSC_CORE_REG_RI_PGEN_TN index N=0..5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 30) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 30;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000060 + (N) * 4) bits 30:0) field TN of register PMC_ODUKSC_CORE_REG_RI_PGEN_TN index N=0..5 */
        _oduksc_reg_RI_PGEN_TN_array_field_set( LOG_CALLER_ARGS
                                                b_ptr,
                                                h_ptr,
                                                N,
                                                subfield_mask << (ODUKSC_CORE_REG_RI_PGEN_TN_BIT_TN_OFF + subfield_offset),
                                                ODUKSC_CORE_REG_RI_PGEN_TN_BIT_TN_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_TN_get
#define oduksc_field_range_TN_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_TN_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_TN_get( LOG_CALLER_DEFN
                                                 oduksc_buffer_t *b_ptr,
                                                 oduksc_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 5)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_TN_get", N, 5);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_TN_get", stop_bit, start_bit );
    if (stop_bit > 30) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_TN_get", stop_bit, 30 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 30) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 30;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000060 + (N) * 4) bits 30:0) field TN of register PMC_ODUKSC_CORE_REG_RI_PGEN_TN index N=0..5 */
    reg_value = _oduksc_reg_RI_PGEN_TN_array_read( LOG_CALLER_ARGS
                                                   b_ptr,
                                                   h_ptr,
                                                   N);
    field_value = (reg_value & ODUKSC_CORE_REG_RI_PGEN_TN_BIT_TN_MSK)
                  >> ODUKSC_CORE_REG_RI_PGEN_TN_BIT_TN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_RI_PGEN_TN_BIT_TN_MSK, ODUKSC_CORE_REG_RI_PGEN_TN_BIT_TN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_TN_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *               Parameter Access Functions for Paramset config_edge
 * ==================================================================================
 */

#ifndef oduksc_field_PAGE_SWAP_REQ_set
#define oduksc_field_PAGE_SWAP_REQ_set( b_ptr, h_ptr, value ) \
       _oduksc_field_PAGE_SWAP_REQ_set( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_field_PAGE_SWAP_REQ_set( LOG_CALLER_DEFN
                                                    oduksc_buffer_t *b_ptr,
                                                    oduksc_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_PAGE_SWAP_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "oduksc_field_PAGE_SWAP_REQ_set", value );

    /* (0x00000004 bits 0) field PAGE_SWAP_REQ of register PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL */
    _oduksc_reg_RAM_PAGE_CTRL_field_set( LOG_CALLER_ARGS
                                         b_ptr,
                                         h_ptr,
                                         ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_REQ_MSK,
                                         ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_REQ_OFF,
                                         value);
}


#ifndef oduksc_field_PAGE_SWAP_REQ_get
#define oduksc_field_PAGE_SWAP_REQ_get( b_ptr, h_ptr ) \
       _oduksc_field_PAGE_SWAP_REQ_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_PAGE_SWAP_REQ_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 0) field PAGE_SWAP_REQ of register PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL */
    reg_value = _oduksc_reg_RAM_PAGE_CTRL_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_REQ_MSK) >> ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_PAGE_SWAP_REQ_get", value );

    return value;
}

#ifndef oduksc_field_PAGE_SWAP_REQ_poll
#define oduksc_field_PAGE_SWAP_REQ_poll( b_ptr, h_ptr, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _oduksc_field_PAGE_SWAP_REQ_poll( LOG_CALLER b_ptr, h_ptr, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _oduksc_field_PAGE_SWAP_REQ_poll( LOG_CALLER_DEFN
                                                                     oduksc_buffer_t *b_ptr,
                                                                     oduksc_handle_t *h_ptr,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "oduksc_field_PAGE_SWAP_REQ_poll", value );

    /* (0x00000004 bits 0) field PAGE_SWAP_REQ of register PMC_ODUKSC_CORE_REG_RAM_PAGE_CTRL */
    return _oduksc_reg_RAM_PAGE_CTRL_poll( LOG_CALLER_ARGS
                                           b_ptr,
                                           h_ptr,
                                           ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_REQ_MSK,
                                           (value<<ODUKSC_CORE_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_REQ_OFF),
                                           cmp,
                                           max_count,
                                           num_failed_polls,
                                           delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 *                Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */

#ifndef oduksc_field_ACC_UNDF_E_set
#define oduksc_field_ACC_UNDF_E_set( b_ptr, h_ptr, value ) \
       _oduksc_field_ACC_UNDF_E_set( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_field_ACC_UNDF_E_set( LOG_CALLER_DEFN
                                                 oduksc_buffer_t *b_ptr,
                                                 oduksc_handle_t *h_ptr,
                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_ACC_UNDF_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "oduksc_field_ACC_UNDF_E_set", value );

    /* (0x00000010 bits 1) field ACC_UNDF_E of register PMC_ODUKSC_CORE_REG_ERR_INT_EN */
    _oduksc_reg_ERR_INT_EN_field_set( LOG_CALLER_ARGS
                                      b_ptr,
                                      h_ptr,
                                      ODUKSC_CORE_REG_ERR_INT_EN_BIT_ACC_UNDF_E_MSK,
                                      ODUKSC_CORE_REG_ERR_INT_EN_BIT_ACC_UNDF_E_OFF,
                                      value);
}


#ifndef oduksc_field_ACC_UNDF_E_get
#define oduksc_field_ACC_UNDF_E_get( b_ptr, h_ptr ) \
       _oduksc_field_ACC_UNDF_E_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_ACC_UNDF_E_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 1) field ACC_UNDF_E of register PMC_ODUKSC_CORE_REG_ERR_INT_EN */
    reg_value = _oduksc_reg_ERR_INT_EN_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_ERR_INT_EN_BIT_ACC_UNDF_E_MSK) >> ODUKSC_CORE_REG_ERR_INT_EN_BIT_ACC_UNDF_E_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_ACC_UNDF_E_get", value );

    return value;
}

#ifndef oduksc_field_ACC_OVF_E_set
#define oduksc_field_ACC_OVF_E_set( b_ptr, h_ptr, value ) \
       _oduksc_field_ACC_OVF_E_set( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_field_ACC_OVF_E_set( LOG_CALLER_DEFN
                                                oduksc_buffer_t *b_ptr,
                                                oduksc_handle_t *h_ptr,
                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_ACC_OVF_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "oduksc_field_ACC_OVF_E_set", value );

    /* (0x00000010 bits 0) field ACC_OVF_E of register PMC_ODUKSC_CORE_REG_ERR_INT_EN */
    _oduksc_reg_ERR_INT_EN_field_set( LOG_CALLER_ARGS
                                      b_ptr,
                                      h_ptr,
                                      ODUKSC_CORE_REG_ERR_INT_EN_BIT_ACC_OVF_E_MSK,
                                      ODUKSC_CORE_REG_ERR_INT_EN_BIT_ACC_OVF_E_OFF,
                                      value);
}


#ifndef oduksc_field_ACC_OVF_E_get
#define oduksc_field_ACC_OVF_E_get( b_ptr, h_ptr ) \
       _oduksc_field_ACC_OVF_E_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_ACC_OVF_E_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 0) field ACC_OVF_E of register PMC_ODUKSC_CORE_REG_ERR_INT_EN */
    reg_value = _oduksc_reg_ERR_INT_EN_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_ERR_INT_EN_BIT_ACC_OVF_E_MSK) >> ODUKSC_CORE_REG_ERR_INT_EN_BIT_ACC_OVF_E_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_ACC_OVF_E_get", value );

    return value;
}

/*
 * ==================================================================================
 *         Parameter Access Functions for Paramset int_enable_N_burstsize4
 * ==================================================================================
 */

#ifndef oduksc_lfield_SRC_ZONE_E_set
#define oduksc_lfield_SRC_ZONE_E_set( b_ptr, h_ptr, value ) \
       _oduksc_lfield_SRC_ZONE_E_set( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_lfield_SRC_ZONE_E_set( LOG_CALLER_DEFN
                                                  oduksc_buffer_t *b_ptr,
                                                  oduksc_handle_t *h_ptr,
                                                  UINT32 value[4] )
{
    IOLOG( "%s ", "oduksc_lfield_SRC_ZONE_E_set");
    _oduksc_reg_SRC_ZONE_INT_EN_array_burst_write( LOG_CALLER_ARGS
                                                   b_ptr,
                                                   h_ptr,
                                                   0,
                                                   4,
                                                   value);
}


#ifndef oduksc_lfield_SRC_ZONE_E_get
#define oduksc_lfield_SRC_ZONE_E_get( b_ptr, h_ptr, value ) \
       _oduksc_lfield_SRC_ZONE_E_get( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_lfield_SRC_ZONE_E_get( LOG_CALLER_DEFN
                                                  oduksc_buffer_t *b_ptr,
                                                  oduksc_handle_t *h_ptr,
                                                  UINT32 value[4] )
{
    IOLOG( "%s ", "oduksc_lfield_SRC_ZONE_E_get");
    _oduksc_reg_SRC_ZONE_INT_EN_array_burst_read( LOG_CALLER_ARGS
                                                  b_ptr,
                                                  h_ptr,
                                                  0,
                                                  4,
                                                  (UINT32 *)value);
}


#ifndef oduksc_lfield_range_SRC_ZONE_E_set
#define oduksc_lfield_range_SRC_ZONE_E_set( b_ptr, h_ptr, start_bit, stop_bit, value ) \
       _oduksc_lfield_range_SRC_ZONE_E_set( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_lfield_range_SRC_ZONE_E_set( LOG_CALLER_DEFN
                                                        oduksc_buffer_t *b_ptr,
                                                        oduksc_handle_t *h_ptr,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "oduksc_lfield_range_SRC_ZONE_E_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "oduksc_lfield_range_SRC_ZONE_E_set", start_bit, stop_bit, value);
    _oduksc_reg_SRC_ZONE_INT_EN_array_field_set( LOG_CALLER_ARGS
                                                 b_ptr,
                                                 h_ptr,
                                                 word_number,
                                                 mask,
                                                 field_ofs,
                                                 value);
}


#ifndef oduksc_lfield_range_SRC_ZONE_E_get
#define oduksc_lfield_range_SRC_ZONE_E_get( b_ptr, h_ptr, start_bit, stop_bit ) \
       _oduksc_lfield_range_SRC_ZONE_E_get( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_lfield_range_SRC_ZONE_E_get( LOG_CALLER_DEFN
                                                          oduksc_buffer_t *b_ptr,
                                                          oduksc_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "oduksc_lfield_range_SRC_ZONE_E_get", start_bit, stop_bit );
    }
    reg_value = _oduksc_reg_SRC_ZONE_INT_EN_array_read( LOG_CALLER_ARGS
                                                        b_ptr,
                                                        h_ptr,
                                                        word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "oduksc_lfield_range_SRC_ZONE_E_get", start_bit, stop_bit, value );
    return value;
}


#ifndef oduksc_lfield_RAMP_DONE_E_set
#define oduksc_lfield_RAMP_DONE_E_set( b_ptr, h_ptr, value ) \
       _oduksc_lfield_RAMP_DONE_E_set( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_lfield_RAMP_DONE_E_set( LOG_CALLER_DEFN
                                                   oduksc_buffer_t *b_ptr,
                                                   oduksc_handle_t *h_ptr,
                                                   UINT32 value[4] )
{
    IOLOG( "%s ", "oduksc_lfield_RAMP_DONE_E_set");
    _oduksc_reg_RAMP_DONE_INT_EN_array_burst_write( LOG_CALLER_ARGS
                                                    b_ptr,
                                                    h_ptr,
                                                    0,
                                                    4,
                                                    value);
}


#ifndef oduksc_lfield_RAMP_DONE_E_get
#define oduksc_lfield_RAMP_DONE_E_get( b_ptr, h_ptr, value ) \
       _oduksc_lfield_RAMP_DONE_E_get( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_lfield_RAMP_DONE_E_get( LOG_CALLER_DEFN
                                                   oduksc_buffer_t *b_ptr,
                                                   oduksc_handle_t *h_ptr,
                                                   UINT32 value[4] )
{
    IOLOG( "%s ", "oduksc_lfield_RAMP_DONE_E_get");
    _oduksc_reg_RAMP_DONE_INT_EN_array_burst_read( LOG_CALLER_ARGS
                                                   b_ptr,
                                                   h_ptr,
                                                   0,
                                                   4,
                                                   (UINT32 *)value);
}


#ifndef oduksc_lfield_range_RAMP_DONE_E_set
#define oduksc_lfield_range_RAMP_DONE_E_set( b_ptr, h_ptr, start_bit, stop_bit, value ) \
       _oduksc_lfield_range_RAMP_DONE_E_set( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_lfield_range_RAMP_DONE_E_set( LOG_CALLER_DEFN
                                                         oduksc_buffer_t *b_ptr,
                                                         oduksc_handle_t *h_ptr,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "oduksc_lfield_range_RAMP_DONE_E_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "oduksc_lfield_range_RAMP_DONE_E_set", start_bit, stop_bit, value);
    _oduksc_reg_RAMP_DONE_INT_EN_array_field_set( LOG_CALLER_ARGS
                                                  b_ptr,
                                                  h_ptr,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}


#ifndef oduksc_lfield_range_RAMP_DONE_E_get
#define oduksc_lfield_range_RAMP_DONE_E_get( b_ptr, h_ptr, start_bit, stop_bit ) \
       _oduksc_lfield_range_RAMP_DONE_E_get( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_lfield_range_RAMP_DONE_E_get( LOG_CALLER_DEFN
                                                           oduksc_buffer_t *b_ptr,
                                                           oduksc_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "oduksc_lfield_range_RAMP_DONE_E_get", start_bit, stop_bit );
    }
    reg_value = _oduksc_reg_RAMP_DONE_INT_EN_array_read( LOG_CALLER_ARGS
                                                         b_ptr,
                                                         h_ptr,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "oduksc_lfield_range_RAMP_DONE_E_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *                 Parameter Access Functions for Paramset int_sync
 * ==================================================================================
 */

#ifndef oduksc_field_ACC_UNDF_I_set_to_clear
#define oduksc_field_ACC_UNDF_I_set_to_clear( b_ptr, h_ptr, value ) \
       _oduksc_field_ACC_UNDF_I_set_to_clear( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_field_ACC_UNDF_I_set_to_clear( LOG_CALLER_DEFN
                                                          oduksc_buffer_t *b_ptr,
                                                          oduksc_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_ACC_UNDF_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "oduksc_field_ACC_UNDF_I_set_to_clear", value );

    /* (0x00000014 bits 1) field ACC_UNDF_I of register PMC_ODUKSC_CORE_REG_ERR_INTS */
    _oduksc_reg_ERR_INTS_action_on_write_field_set( LOG_CALLER_ARGS
                                                    b_ptr,
                                                    h_ptr,
                                                    ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_UNDF_I_MSK,
                                                    ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_UNDF_I_OFF,
                                                    value);
}


#ifndef oduksc_field_ACC_UNDF_I_get
#define oduksc_field_ACC_UNDF_I_get( b_ptr, h_ptr ) \
       _oduksc_field_ACC_UNDF_I_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_ACC_UNDF_I_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000014 bits 1) field ACC_UNDF_I of register PMC_ODUKSC_CORE_REG_ERR_INTS */
    reg_value = _oduksc_reg_ERR_INTS_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_UNDF_I_MSK) >> ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_UNDF_I_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_ACC_UNDF_I_get", value );

    return value;
}

#ifndef oduksc_field_ACC_UNDF_I_poll
#define oduksc_field_ACC_UNDF_I_poll( b_ptr, h_ptr, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _oduksc_field_ACC_UNDF_I_poll( LOG_CALLER b_ptr, h_ptr, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _oduksc_field_ACC_UNDF_I_poll( LOG_CALLER_DEFN
                                                                  oduksc_buffer_t *b_ptr,
                                                                  oduksc_handle_t *h_ptr,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "oduksc_field_ACC_UNDF_I_poll", value );

    /* (0x00000014 bits 1) field ACC_UNDF_I of register PMC_ODUKSC_CORE_REG_ERR_INTS */
    return _oduksc_reg_ERR_INTS_poll( LOG_CALLER_ARGS
                                      b_ptr,
                                      h_ptr,
                                      ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_UNDF_I_MSK,
                                      (value<<ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_UNDF_I_OFF),
                                      cmp,
                                      max_count,
                                      num_failed_polls,
                                      delay_between_polls_in_microseconds);
}


#ifndef oduksc_field_ACC_OVF_I_set_to_clear
#define oduksc_field_ACC_OVF_I_set_to_clear( b_ptr, h_ptr, value ) \
       _oduksc_field_ACC_OVF_I_set_to_clear( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_field_ACC_OVF_I_set_to_clear( LOG_CALLER_DEFN
                                                         oduksc_buffer_t *b_ptr,
                                                         oduksc_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "oduksc_field_ACC_OVF_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "oduksc_field_ACC_OVF_I_set_to_clear", value );

    /* (0x00000014 bits 0) field ACC_OVF_I of register PMC_ODUKSC_CORE_REG_ERR_INTS */
    _oduksc_reg_ERR_INTS_action_on_write_field_set( LOG_CALLER_ARGS
                                                    b_ptr,
                                                    h_ptr,
                                                    ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_OVF_I_MSK,
                                                    ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_OVF_I_OFF,
                                                    value);
}


#ifndef oduksc_field_ACC_OVF_I_get
#define oduksc_field_ACC_OVF_I_get( b_ptr, h_ptr ) \
       _oduksc_field_ACC_OVF_I_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_ACC_OVF_I_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000014 bits 0) field ACC_OVF_I of register PMC_ODUKSC_CORE_REG_ERR_INTS */
    reg_value = _oduksc_reg_ERR_INTS_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_OVF_I_MSK) >> ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_OVF_I_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_ACC_OVF_I_get", value );

    return value;
}

#ifndef oduksc_field_ACC_OVF_I_poll
#define oduksc_field_ACC_OVF_I_poll( b_ptr, h_ptr, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _oduksc_field_ACC_OVF_I_poll( LOG_CALLER b_ptr, h_ptr, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _oduksc_field_ACC_OVF_I_poll( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32 value,
                                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                                 UINT32 max_count,
                                                                 UINT32 *num_failed_polls,
                                                                 UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "oduksc_field_ACC_OVF_I_poll", value );

    /* (0x00000014 bits 0) field ACC_OVF_I of register PMC_ODUKSC_CORE_REG_ERR_INTS */
    return _oduksc_reg_ERR_INTS_poll( LOG_CALLER_ARGS
                                      b_ptr,
                                      h_ptr,
                                      ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_OVF_I_MSK,
                                      (value<<ODUKSC_CORE_REG_ERR_INTS_BIT_ACC_OVF_I_OFF),
                                      cmp,
                                      max_count,
                                      num_failed_polls,
                                      delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 *          Parameter Access Functions for Paramset int_sync_N_burstsize4
 * ==================================================================================
 */

#ifndef oduksc_lfield_SRC_ZONE_I_set_to_clear
#define oduksc_lfield_SRC_ZONE_I_set_to_clear( b_ptr, h_ptr, value ) \
       _oduksc_lfield_SRC_ZONE_I_set_to_clear( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_lfield_SRC_ZONE_I_set_to_clear( LOG_CALLER_DEFN
                                                           oduksc_buffer_t *b_ptr,
                                                           oduksc_handle_t *h_ptr,
                                                           UINT32 value[4] )
{
    IOLOG( "%s ", "oduksc_lfield_SRC_ZONE_I_set_to_clear");
    _oduksc_reg_SRC_ZONE_INTS_array_burst_write( LOG_CALLER_ARGS
                                                 b_ptr,
                                                 h_ptr,
                                                 0,
                                                 4,
                                                 value);
}


#ifndef oduksc_lfield_SRC_ZONE_I_get
#define oduksc_lfield_SRC_ZONE_I_get( b_ptr, h_ptr, value ) \
       _oduksc_lfield_SRC_ZONE_I_get( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_lfield_SRC_ZONE_I_get( LOG_CALLER_DEFN
                                                  oduksc_buffer_t *b_ptr,
                                                  oduksc_handle_t *h_ptr,
                                                  UINT32 value[4] )
{
    IOLOG( "%s ", "oduksc_lfield_SRC_ZONE_I_get");
    _oduksc_reg_SRC_ZONE_INTS_array_burst_read( LOG_CALLER_ARGS
                                                b_ptr,
                                                h_ptr,
                                                0,
                                                4,
                                                (UINT32 *)value);
}


#ifndef oduksc_lfield_range_SRC_ZONE_I_set_to_clear
#define oduksc_lfield_range_SRC_ZONE_I_set_to_clear( b_ptr, h_ptr, start_bit, stop_bit, value ) \
       _oduksc_lfield_range_SRC_ZONE_I_set_to_clear( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_lfield_range_SRC_ZONE_I_set_to_clear( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "oduksc_lfield_range_SRC_ZONE_I_set_to_clear", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "oduksc_lfield_range_SRC_ZONE_I_set_to_clear", start_bit, stop_bit, value);
    _oduksc_reg_SRC_ZONE_INTS_array_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b_ptr,
                                                               h_ptr,
                                                               word_number,
                                                               mask,
                                                               field_ofs,
                                                               value);
}


#ifndef oduksc_lfield_range_SRC_ZONE_I_get
#define oduksc_lfield_range_SRC_ZONE_I_get( b_ptr, h_ptr, start_bit, stop_bit ) \
       _oduksc_lfield_range_SRC_ZONE_I_get( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_lfield_range_SRC_ZONE_I_get( LOG_CALLER_DEFN
                                                          oduksc_buffer_t *b_ptr,
                                                          oduksc_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "oduksc_lfield_range_SRC_ZONE_I_get", start_bit, stop_bit );
    }
    reg_value = _oduksc_reg_SRC_ZONE_INTS_array_read( LOG_CALLER_ARGS
                                                      b_ptr,
                                                      h_ptr,
                                                      word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "oduksc_lfield_range_SRC_ZONE_I_get", start_bit, stop_bit, value );
    return value;
}


#ifndef oduksc_lfield_RAMP_DONE_I_set_to_clear
#define oduksc_lfield_RAMP_DONE_I_set_to_clear( b_ptr, h_ptr, value ) \
       _oduksc_lfield_RAMP_DONE_I_set_to_clear( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_lfield_RAMP_DONE_I_set_to_clear( LOG_CALLER_DEFN
                                                            oduksc_buffer_t *b_ptr,
                                                            oduksc_handle_t *h_ptr,
                                                            UINT32 value[4] )
{
    IOLOG( "%s ", "oduksc_lfield_RAMP_DONE_I_set_to_clear");
    _oduksc_reg_RAMP_DONE_INTS_array_burst_write( LOG_CALLER_ARGS
                                                  b_ptr,
                                                  h_ptr,
                                                  0,
                                                  4,
                                                  value);
}


#ifndef oduksc_lfield_RAMP_DONE_I_get
#define oduksc_lfield_RAMP_DONE_I_get( b_ptr, h_ptr, value ) \
       _oduksc_lfield_RAMP_DONE_I_get( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_lfield_RAMP_DONE_I_get( LOG_CALLER_DEFN
                                                   oduksc_buffer_t *b_ptr,
                                                   oduksc_handle_t *h_ptr,
                                                   UINT32 value[4] )
{
    IOLOG( "%s ", "oduksc_lfield_RAMP_DONE_I_get");
    _oduksc_reg_RAMP_DONE_INTS_array_burst_read( LOG_CALLER_ARGS
                                                 b_ptr,
                                                 h_ptr,
                                                 0,
                                                 4,
                                                 (UINT32 *)value);
}


#ifndef oduksc_lfield_range_RAMP_DONE_I_set_to_clear
#define oduksc_lfield_range_RAMP_DONE_I_set_to_clear( b_ptr, h_ptr, start_bit, stop_bit, value ) \
       _oduksc_lfield_range_RAMP_DONE_I_set_to_clear( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_lfield_range_RAMP_DONE_I_set_to_clear( LOG_CALLER_DEFN
                                                                  oduksc_buffer_t *b_ptr,
                                                                  oduksc_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "oduksc_lfield_range_RAMP_DONE_I_set_to_clear", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "oduksc_lfield_range_RAMP_DONE_I_set_to_clear", start_bit, stop_bit, value);
    _oduksc_reg_RAMP_DONE_INTS_array_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b_ptr,
                                                                h_ptr,
                                                                word_number,
                                                                mask,
                                                                field_ofs,
                                                                value);
}


#ifndef oduksc_lfield_range_RAMP_DONE_I_get
#define oduksc_lfield_range_RAMP_DONE_I_get( b_ptr, h_ptr, start_bit, stop_bit ) \
       _oduksc_lfield_range_RAMP_DONE_I_get( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_lfield_range_RAMP_DONE_I_get( LOG_CALLER_DEFN
                                                           oduksc_buffer_t *b_ptr,
                                                           oduksc_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "oduksc_lfield_range_RAMP_DONE_I_get", start_bit, stop_bit );
    }
    reg_value = _oduksc_reg_RAMP_DONE_INTS_array_read( LOG_CALLER_ARGS
                                                       b_ptr,
                                                       h_ptr,
                                                       word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "oduksc_lfield_range_RAMP_DONE_I_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *          Parameter Access Functions for Paramset int_value_N_burstsize4
 * ==================================================================================
 */

#ifndef oduksc_lfield_SRC_ZONE_V_get
#define oduksc_lfield_SRC_ZONE_V_get( b_ptr, h_ptr, value ) \
       _oduksc_lfield_SRC_ZONE_V_get( LOG_CALLER b_ptr, h_ptr, value )
#endif
static INLINE void _oduksc_lfield_SRC_ZONE_V_get( LOG_CALLER_DEFN
                                                  oduksc_buffer_t *b_ptr,
                                                  oduksc_handle_t *h_ptr,
                                                  UINT32 value[4] )
{
    IOLOG( "%s ", "oduksc_lfield_SRC_ZONE_V_get");
    _oduksc_reg_SRC_ZONE_INT_STAT_array_burst_read( LOG_CALLER_ARGS
                                                    b_ptr,
                                                    h_ptr,
                                                    0,
                                                    4,
                                                    (UINT32 *)value);
}


#ifndef oduksc_lfield_range_SRC_ZONE_V_get
#define oduksc_lfield_range_SRC_ZONE_V_get( b_ptr, h_ptr, start_bit, stop_bit ) \
       _oduksc_lfield_range_SRC_ZONE_V_get( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_lfield_range_SRC_ZONE_V_get( LOG_CALLER_DEFN
                                                          oduksc_buffer_t *b_ptr,
                                                          oduksc_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "oduksc_lfield_range_SRC_ZONE_V_get", start_bit, stop_bit );
    }
    reg_value = _oduksc_reg_SRC_ZONE_INT_STAT_array_read( LOG_CALLER_ARGS
                                                          b_ptr,
                                                          h_ptr,
                                                          word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "oduksc_lfield_range_SRC_ZONE_V_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *              Parameter Access Functions for Paramset ram_N_size128
 * ==================================================================================
 */

#ifndef oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_set
#define oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_set( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_set", N, 127);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_set", N, value );

    /* ((0x00001000 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD0 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS index N=0..127 */
    _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                   b_ptr,
                                                                   h_ptr,
                                                                   N,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD0_MSK,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD0_OFF,
                                                                   value);
}


#ifndef oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_get
#define oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_get( b_ptr, h_ptr, N ) \
       _oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_get( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_get", N, 127);
    /* ((0x00001000 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD0 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD0_MSK) >> ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD0_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD0_get", N, value );

    return value;
}

#ifndef oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_set
#define oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_set( LOG_CALLER_DEFN
                                                                       oduksc_buffer_t *b_ptr,
                                                                       oduksc_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001000 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD0 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001000 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD0 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS index N=0..127 */
        _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                       b_ptr,
                                                                       h_ptr,
                                                                       N,
                                                                       subfield_mask << (ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD0_OFF + subfield_offset),
                                                                       ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD0_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_get
#define oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_get( LOG_CALLER_DEFN
                                                                         oduksc_buffer_t *b_ptr,
                                                                         oduksc_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001000 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD0 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    field_value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD0_MSK)
                  >> ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD0_MSK, ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD0_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_set
#define oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_set( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_set", N, 127);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_set", N, value );

    /* ((0x00001004 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD1 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS index N=0..127 */
    _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                   b_ptr,
                                                                   h_ptr,
                                                                   N,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD1_MSK,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD1_OFF,
                                                                   value);
}


#ifndef oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_get
#define oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_get( b_ptr, h_ptr, N ) \
       _oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_get( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_get", N, 127);
    /* ((0x00001004 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD1 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD1_MSK) >> ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD1_get", N, value );

    return value;
}

#ifndef oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_set
#define oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_set( LOG_CALLER_DEFN
                                                                       oduksc_buffer_t *b_ptr,
                                                                       oduksc_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001004 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD1 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001004 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD1 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS index N=0..127 */
        _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                       b_ptr,
                                                                       h_ptr,
                                                                       N,
                                                                       subfield_mask << (ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD1_OFF + subfield_offset),
                                                                       ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD1_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_get
#define oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_get( LOG_CALLER_DEFN
                                                                         oduksc_buffer_t *b_ptr,
                                                                         oduksc_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001004 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD1 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    field_value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD1_MSK)
                  >> ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD1_MSK, ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD1_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_set
#define oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_set( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_set", N, 127);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_set", N, value );

    /* ((0x00001008 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD2 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS index N=0..127 */
    _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                   b_ptr,
                                                                   h_ptr,
                                                                   N,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD2_MSK,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD2_OFF,
                                                                   value);
}


#ifndef oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_get
#define oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_get( b_ptr, h_ptr, N ) \
       _oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_get( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_get", N, 127);
    /* ((0x00001008 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD2 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD2_MSK) >> ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD2_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD2_get", N, value );

    return value;
}

#ifndef oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_set
#define oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_set( LOG_CALLER_DEFN
                                                                       oduksc_buffer_t *b_ptr,
                                                                       oduksc_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001008 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD2 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001008 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD2 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS index N=0..127 */
        _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                       b_ptr,
                                                                       h_ptr,
                                                                       N,
                                                                       subfield_mask << (ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD2_OFF + subfield_offset),
                                                                       ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD2_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_get
#define oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_get( LOG_CALLER_DEFN
                                                                         oduksc_buffer_t *b_ptr,
                                                                         oduksc_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001008 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD2 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    field_value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD2_MSK)
                  >> ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD2_MSK, ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD2_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_set
#define oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_set( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_set", N, 127);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_set", N, value );

    /* ((0x0000100c + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD3 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS index N=0..127 */
    _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                   b_ptr,
                                                                   h_ptr,
                                                                   N,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD3_MSK,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD3_OFF,
                                                                   value);
}


#ifndef oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_get
#define oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_get( b_ptr, h_ptr, N ) \
       _oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_get( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_get", N, 127);
    /* ((0x0000100c + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD3 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD3_MSK) >> ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD3_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD3_get", N, value );

    return value;
}

#ifndef oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_set
#define oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_set( LOG_CALLER_DEFN
                                                                       oduksc_buffer_t *b_ptr,
                                                                       oduksc_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000100c + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD3 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000100c + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD3 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS index N=0..127 */
        _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                       b_ptr,
                                                                       h_ptr,
                                                                       N,
                                                                       subfield_mask << (ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD3_OFF + subfield_offset),
                                                                       ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD3_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_get
#define oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_get( LOG_CALLER_DEFN
                                                                         oduksc_buffer_t *b_ptr,
                                                                         oduksc_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000100c + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD3 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    field_value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD3_MSK)
                  >> ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD3_MSK, ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD3_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_set
#define oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_set( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_set", N, 127);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_set", N, value );

    /* ((0x00001010 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD4 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS index N=0..127 */
    _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                   b_ptr,
                                                                   h_ptr,
                                                                   N,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD4_MSK,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD4_OFF,
                                                                   value);
}


#ifndef oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_get
#define oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_get( b_ptr, h_ptr, N ) \
       _oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_get( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_get", N, 127);
    /* ((0x00001010 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD4 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD4_MSK) >> ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD4_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_STBY_DWORD4_get", N, value );

    return value;
}

#ifndef oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_set
#define oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_set( LOG_CALLER_DEFN
                                                                       oduksc_buffer_t *b_ptr,
                                                                       oduksc_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001010 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD4 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001010 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD4 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS index N=0..127 */
        _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                       b_ptr,
                                                                       h_ptr,
                                                                       N,
                                                                       subfield_mask << (ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD4_OFF + subfield_offset),
                                                                       ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD4_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_get
#define oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_get( LOG_CALLER_DEFN
                                                                         oduksc_buffer_t *b_ptr,
                                                                         oduksc_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001010 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_STBY_DWORD4 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    field_value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD4_MSK)
                  >> ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD4_MSK, ODUKSC_CORE_REG_CGEN_STATE_RAM_STBY_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_STBY_DWORD4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_STBY_DWORD4_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_set
#define oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_set( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_set", N, 127);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_set", N, value );

    /* ((0x00002000 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD0 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS index N=0..127 */
    _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                   b_ptr,
                                                                   h_ptr,
                                                                   N,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD0_MSK,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD0_OFF,
                                                                   value);
}


#ifndef oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_get
#define oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_get( b_ptr, h_ptr, N ) \
       _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_get( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_get", N, 127);
    /* ((0x00002000 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD0 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD0_MSK) >> ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD0_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD0_get", N, value );

    return value;
}

#ifndef oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_set
#define oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_set( LOG_CALLER_DEFN
                                                                       oduksc_buffer_t *b_ptr,
                                                                       oduksc_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002000 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD0 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002000 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD0 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS index N=0..127 */
        _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                       b_ptr,
                                                                       h_ptr,
                                                                       N,
                                                                       subfield_mask << (ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD0_OFF + subfield_offset),
                                                                       ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD0_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_get
#define oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_get( LOG_CALLER_DEFN
                                                                         oduksc_buffer_t *b_ptr,
                                                                         oduksc_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002000 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD0 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    field_value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD0_MSK)
                  >> ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD0_MSK, ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD0_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD0_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_set
#define oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_set( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_set", N, 127);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_set", N, value );

    /* ((0x00002004 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD1 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS index N=0..127 */
    _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                   b_ptr,
                                                                   h_ptr,
                                                                   N,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD1_MSK,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD1_OFF,
                                                                   value);
}


#ifndef oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_get
#define oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_get( b_ptr, h_ptr, N ) \
       _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_get( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_get", N, 127);
    /* ((0x00002004 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD1 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD1_MSK) >> ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD1_get", N, value );

    return value;
}

#ifndef oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_set
#define oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_set( LOG_CALLER_DEFN
                                                                       oduksc_buffer_t *b_ptr,
                                                                       oduksc_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002004 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD1 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002004 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD1 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS index N=0..127 */
        _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                       b_ptr,
                                                                       h_ptr,
                                                                       N,
                                                                       subfield_mask << (ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD1_OFF + subfield_offset),
                                                                       ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD1_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_get
#define oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_get( LOG_CALLER_DEFN
                                                                         oduksc_buffer_t *b_ptr,
                                                                         oduksc_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002004 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD1 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    field_value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD1_MSK)
                  >> ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD1_MSK, ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD1_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD1_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_set
#define oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_set( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_set", N, 127);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_set", N, value );

    /* ((0x00002008 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD2 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS index N=0..127 */
    _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                   b_ptr,
                                                                   h_ptr,
                                                                   N,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD2_MSK,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD2_OFF,
                                                                   value);
}


#ifndef oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_get
#define oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_get( b_ptr, h_ptr, N ) \
       _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_get( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_get", N, 127);
    /* ((0x00002008 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD2 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD2_MSK) >> ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD2_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD2_get", N, value );

    return value;
}

#ifndef oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_set
#define oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_set( LOG_CALLER_DEFN
                                                                       oduksc_buffer_t *b_ptr,
                                                                       oduksc_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002008 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD2 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002008 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD2 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS index N=0..127 */
        _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                       b_ptr,
                                                                       h_ptr,
                                                                       N,
                                                                       subfield_mask << (ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD2_OFF + subfield_offset),
                                                                       ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD2_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_get
#define oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_get( LOG_CALLER_DEFN
                                                                         oduksc_buffer_t *b_ptr,
                                                                         oduksc_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002008 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD2 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    field_value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD2_MSK)
                  >> ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD2_MSK, ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD2_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD2_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_set
#define oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_set( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_set", N, 127);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_set", N, value );

    /* ((0x0000200c + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD3 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS index N=0..127 */
    _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                   b_ptr,
                                                                   h_ptr,
                                                                   N,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD3_MSK,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD3_OFF,
                                                                   value);
}


#ifndef oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_get
#define oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_get( b_ptr, h_ptr, N ) \
       _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_get( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_get", N, 127);
    /* ((0x0000200c + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD3 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD3_MSK) >> ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD3_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD3_get", N, value );

    return value;
}

#ifndef oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_set
#define oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_set( LOG_CALLER_DEFN
                                                                       oduksc_buffer_t *b_ptr,
                                                                       oduksc_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000200c + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD3 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000200c + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD3 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS index N=0..127 */
        _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                       b_ptr,
                                                                       h_ptr,
                                                                       N,
                                                                       subfield_mask << (ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD3_OFF + subfield_offset),
                                                                       ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD3_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_get
#define oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_get( LOG_CALLER_DEFN
                                                                         oduksc_buffer_t *b_ptr,
                                                                         oduksc_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000200c + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD3 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    field_value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD3_MSK)
                  >> ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD3_MSK, ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD3_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD3_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_set
#define oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_set( b_ptr, h_ptr, N, value ) \
       _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_set( LOG_CALLER b_ptr, h_ptr, N, value )
#endif
static INLINE void _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_set( LOG_CALLER_DEFN
                                                                 oduksc_buffer_t *b_ptr,
                                                                 oduksc_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_set", N, 127);
    IOLOG( "%s <= N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_set", N, value );

    /* ((0x00002010 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD4 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS index N=0..127 */
    _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                   b_ptr,
                                                                   h_ptr,
                                                                   N,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD4_MSK,
                                                                   ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD4_OFF,
                                                                   value);
}


#ifndef oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_get
#define oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_get( b_ptr, h_ptr, N ) \
       _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_get( LOG_CALLER b_ptr, h_ptr, N )
#endif
static INLINE UINT32 _oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_get( LOG_CALLER_DEFN
                                                                   oduksc_buffer_t *b_ptr,
                                                                   oduksc_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_get", N, 127);
    /* ((0x00002010 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD4 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD4_MSK) >> ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD4_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "oduksc_field_CGEN_STATE_RAM_ACTV_DWORD4_get", N, value );

    return value;
}

#ifndef oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_set
#define oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_set( b_ptr, h_ptr, N, start_bit, stop_bit, value ) \
       _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_set( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit, value )
#endif
static INLINE void _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_set( LOG_CALLER_DEFN
                                                                       oduksc_buffer_t *b_ptr,
                                                                       oduksc_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002010 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD4 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002010 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD4 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS index N=0..127 */
        _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_field_set( LOG_CALLER_ARGS
                                                                       b_ptr,
                                                                       h_ptr,
                                                                       N,
                                                                       subfield_mask << (ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD4_OFF + subfield_offset),
                                                                       ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD4_OFF + subfield_offset,
                                                                       value >> subfield_shift);
    }
}


#ifndef oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_get
#define oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_get( b_ptr, h_ptr, N, start_bit, stop_bit ) \
       _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_get( LOG_CALLER b_ptr, h_ptr, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_get( LOG_CALLER_DEFN
                                                                         oduksc_buffer_t *b_ptr,
                                                                         oduksc_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002010 + (N) * 0x20) bits 31:0) field CGEN_STATE_RAM_ACTV_DWORD4 of register PMC_ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS index N=0..127 */
    reg_value = _oduksc_reg_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_array_read( LOG_CALLER_ARGS
                                                                          b_ptr,
                                                                          h_ptr,
                                                                          N);
    field_value = (reg_value & ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD4_MSK)
                  >> ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD4_MSK, ODUKSC_CORE_REG_CGEN_STATE_RAM_ACTV_DWORD4_ACCESS_BIT_CGEN_STATE_RAM_ACTV_DWORD4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_CGEN_STATE_RAM_ACTV_DWORD4_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset status
 * ==================================================================================
 */

#ifndef oduksc_field_CGEN_ACTIVE_PAGE_get
#define oduksc_field_CGEN_ACTIVE_PAGE_get( b_ptr, h_ptr ) \
       _oduksc_field_CGEN_ACTIVE_PAGE_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_CGEN_ACTIVE_PAGE_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 0) field CGEN_ACTIVE_PAGE of register PMC_ODUKSC_CORE_REG_RAM_PAGE_STATUS */
    reg_value = _oduksc_reg_RAM_PAGE_STATUS_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_RAM_PAGE_STATUS_BIT_CGEN_ACTIVE_PAGE_MSK) >> ODUKSC_CORE_REG_RAM_PAGE_STATUS_BIT_CGEN_ACTIVE_PAGE_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_CGEN_ACTIVE_PAGE_get", value );

    return value;
}

#ifndef oduksc_field_RAM_PAGE_SEL_V_get
#define oduksc_field_RAM_PAGE_SEL_V_get( b_ptr, h_ptr ) \
       _oduksc_field_RAM_PAGE_SEL_V_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_RAM_PAGE_SEL_V_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 31) field RAM_PAGE_SEL_V of register PMC_ODUKSC_CORE_REG_RAM_PAGE_STATUS */
    reg_value = _oduksc_reg_RAM_PAGE_STATUS_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_RAM_PAGE_STATUS_BIT_RAM_PAGE_SEL_V_MSK) >> ODUKSC_CORE_REG_RAM_PAGE_STATUS_BIT_RAM_PAGE_SEL_V_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_RAM_PAGE_SEL_V_get", value );

    return value;
}

#ifndef oduksc_field_ACC_UNDF_CHAN_get
#define oduksc_field_ACC_UNDF_CHAN_get( b_ptr, h_ptr ) \
       _oduksc_field_ACC_UNDF_CHAN_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_ACC_UNDF_CHAN_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000018 bits 14:8) field ACC_UNDF_CHAN of register PMC_ODUKSC_CORE_REG_ERR_CHAN */
    reg_value = _oduksc_reg_ERR_CHAN_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_UNDF_CHAN_MSK) >> ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_UNDF_CHAN_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_ACC_UNDF_CHAN_get", value );

    return value;
}

#ifndef oduksc_field_range_ACC_UNDF_CHAN_get
#define oduksc_field_range_ACC_UNDF_CHAN_get( b_ptr, h_ptr, start_bit, stop_bit ) \
       _oduksc_field_range_ACC_UNDF_CHAN_get( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_ACC_UNDF_CHAN_get( LOG_CALLER_DEFN
                                                            oduksc_buffer_t *b_ptr,
                                                            oduksc_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_ACC_UNDF_CHAN_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_ACC_UNDF_CHAN_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000018 bits 14:8) field ACC_UNDF_CHAN of register PMC_ODUKSC_CORE_REG_ERR_CHAN */
    reg_value = _oduksc_reg_ERR_CHAN_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    field_value = (reg_value & ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_UNDF_CHAN_MSK)
                  >> ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_UNDF_CHAN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_UNDF_CHAN_MSK, ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_UNDF_CHAN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_ACC_UNDF_CHAN_get", start_bit, stop_bit, value );

    return value;
}

#ifndef oduksc_field_ACC_OVF_CHAN_get
#define oduksc_field_ACC_OVF_CHAN_get( b_ptr, h_ptr ) \
       _oduksc_field_ACC_OVF_CHAN_get( LOG_CALLER b_ptr, h_ptr )
#endif
static INLINE UINT32 _oduksc_field_ACC_OVF_CHAN_get( LOG_CALLER_DEFN oduksc_buffer_t *b_ptr, oduksc_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000018 bits 6:0) field ACC_OVF_CHAN of register PMC_ODUKSC_CORE_REG_ERR_CHAN */
    reg_value = _oduksc_reg_ERR_CHAN_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    value = (reg_value & ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_OVF_CHAN_MSK) >> ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_OVF_CHAN_OFF;
    IOLOG( "%s -> 0x%08x", "oduksc_field_ACC_OVF_CHAN_get", value );

    return value;
}

#ifndef oduksc_field_range_ACC_OVF_CHAN_get
#define oduksc_field_range_ACC_OVF_CHAN_get( b_ptr, h_ptr, start_bit, stop_bit ) \
       _oduksc_field_range_ACC_OVF_CHAN_get( LOG_CALLER b_ptr, h_ptr, start_bit, stop_bit )
#endif
static INLINE UINT32 _oduksc_field_range_ACC_OVF_CHAN_get( LOG_CALLER_DEFN
                                                           oduksc_buffer_t *b_ptr,
                                                           oduksc_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "oduksc_field_range_ACC_OVF_CHAN_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "oduksc_field_range_ACC_OVF_CHAN_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000018 bits 6:0) field ACC_OVF_CHAN of register PMC_ODUKSC_CORE_REG_ERR_CHAN */
    reg_value = _oduksc_reg_ERR_CHAN_read( LOG_CALLER_ARGS b_ptr, h_ptr);
    field_value = (reg_value & ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_OVF_CHAN_MSK)
                  >> ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_OVF_CHAN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_OVF_CHAN_MSK, ODUKSC_CORE_REG_ERR_CHAN_BIT_ACC_OVF_CHAN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "oduksc_field_range_ACC_OVF_CHAN_get", start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _ODUKSC_IO_INLINE_H */
