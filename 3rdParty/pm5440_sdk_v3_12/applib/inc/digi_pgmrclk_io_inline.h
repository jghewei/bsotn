/******************************************************************************
 *   COPYRIGHT (C) 2013 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the digi_pgmrclk block
 *****************************************************************************/
#ifndef _DIGI_PGMRCLK_IO_INLINE_H
#define _DIGI_PGMRCLK_IO_INLINE_H

#include "digi_api.h"
#include "digi_pgmrclk_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define DIGI_PGMRCLK_IO_VERSION 2

/*
 * ==================================================================================
 *  tsb level structure and access functions for digi_pgmrclk
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) LOG( __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) LOG( "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) LOG_DATA( __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    digi_handle_t * h_ptr;
    pmc_sys_handle_t * sys_handle;
    PMC_VAR_CONST UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} digi_pgmrclk_buffer_t;
static INLINE void digi_pgmrclk_buffer_init( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_buffer_init( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = ((pmc_handle_t *)h_ptr)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s", "digi_pgmrclk_buffer_init");
    
}

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void digi_pgmrclk_buffer_flush( digi_pgmrclk_buffer_t *b_ptr ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_buffer_flush( digi_pgmrclk_buffer_t *b_ptr )
{
    IOLOG( "digi_pgmrclk_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 digi_pgmrclk_reg_read( digi_pgmrclk_buffer_t *b_ptr,
                                            digi_handle_t *h_ptr,
                                            UINT32 mem_type,
                                            UINT32 reg ) ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_read( digi_pgmrclk_buffer_t *b_ptr,
                                            digi_handle_t *h_ptr,
                                            UINT32 mem_type,
                                            UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                b_ptr->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h_ptr)->base_address + reg);
    return value;
}
static INLINE void digi_pgmrclk_reg_write( digi_pgmrclk_buffer_t *b_ptr,
                                           digi_handle_t *h_ptr,
                                           UINT32 mem_type,
                                           UINT32 reg,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_write( digi_pgmrclk_buffer_t *b_ptr,
                                           digi_handle_t *h_ptr,
                                           UINT32 mem_type,
                                           UINT32 reg,
                                           UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         b_ptr->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value);
}

static INLINE void digi_pgmrclk_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                           digi_handle_t *h_ptr,
                                           UINT32 mem_type,
                                           UINT32 reg,
                                           UINT32 mask,
                                           UINT32 unused_mask,
                                           UINT32 ofs,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                           digi_handle_t *h_ptr,
                                           UINT32 mem_type,
                                           UINT32 reg,
                                           UINT32 mask,
                                           UINT32 unused_mask,
                                           UINT32 ofs,
                                           UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h_ptr)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void digi_pgmrclk_action_on_write_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 mem_type,
                                                           UINT32 reg,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_action_on_write_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 mem_type,
                                                           UINT32 reg,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         b_ptr->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value<<ofs);
}

static INLINE void digi_pgmrclk_burst_read( digi_pgmrclk_buffer_t *b_ptr,
                                            digi_handle_t *h_ptr,
                                            UINT32 mem_type,
                                            UINT32 reg,
                                            UINT32 len,
                                            UINT32 *value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_burst_read( digi_pgmrclk_buffer_t *b_ptr,
                                            digi_handle_t *h_ptr,
                                            UINT32 mem_type,
                                            UINT32 reg,
                                            UINT32 len,
                                            UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h_ptr)->base_address + reg,
                          len,
                          value);
}

static INLINE void digi_pgmrclk_burst_write( digi_pgmrclk_buffer_t *b_ptr,
                                             digi_handle_t *h_ptr,
                                             UINT32 mem_type,
                                             UINT32 reg,
                                             UINT32 len,
                                             UINT32 *value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_burst_write( digi_pgmrclk_buffer_t *b_ptr,
                                             digi_handle_t *h_ptr,
                                             UINT32 mem_type,
                                             UINT32 reg,
                                             UINT32 len,
                                             UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 mem_type,
                                                      UINT32 reg,
                                                      UINT32 mask,
                                                      UINT32 value,
                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                      UINT32 max_count,
                                                      UINT32 *num_failed_polls,
                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 mem_type,
                                                      UINT32 reg,
                                                      UINT32 mask,
                                                      UINT32 value,
                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                      UINT32 max_count,
                                                      UINT32 *num_failed_polls,
                                                      UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for digi_pgmrclk
 * ==================================================================================
 */

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_RESET_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_RESET_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_RESET_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_RESET_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_RESET_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_RESET_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_RESET_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_RESET_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_RESET_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                          digi_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                          digi_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                          digi_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                          digi_handle_t *h_ptr,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_MANUAL_PULSE_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_MANUAL_PULSE_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_MANUAL_PULSE_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_MANUAL_PULSE_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_MANUAL_PULSE_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_MANUAL_PULSE_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_MANUAL_PULSE_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_MANUAL_PULSE_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_MANUAL_PULSE_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_ENS_write( digi_pgmrclk_buffer_t *b_ptr,
                                                    digi_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_ENS_write( digi_pgmrclk_buffer_t *b_ptr,
                                                    digi_handle_t *h_ptr,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_ENS_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_ENS,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_ENS_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_ENS_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_ENS_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_ENS,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_ENS_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_ENS_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_ENS_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_ENS);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_ENS_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_write( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS,
                            value);
}

static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FPI_GENERATOR_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FPI_GENERATOR_CFG_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FPI_GENERATOR_CFG_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG,
                            value);
}

static INLINE void digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FPI_GENERATOR_CFG_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_0_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_0_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_TIP_MASK_0_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_0,
                            value);
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_0_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_0_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_TIP_MASK_0_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_0,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_0_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_0_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_0_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_TIP_MASK_0);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_TIP_MASK_0_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_1_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_1_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_TIP_MASK_1_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_1,
                            value);
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_1_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_1_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_TIP_MASK_1_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_1,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_1_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_1_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_1_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_TIP_MASK_1);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_TIP_MASK_1_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_2_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_2_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_TIP_MASK_2_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_2,
                            value);
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_2_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_2_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_TIP_MASK_2_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_2,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_2_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_2_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_2_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_TIP_MASK_2);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_TIP_MASK_2_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_3_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_3_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_TIP_MASK_3_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_3,
                            value);
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_3_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_3_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_TIP_MASK_3_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_3,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_3_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_3_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_3_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_TIP_MASK_3);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_TIP_MASK_3_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_4_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_4_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_TIP_MASK_4_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_4,
                            value);
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_4_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_4_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_TIP_MASK_4_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_4,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_4_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_4_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_4_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_TIP_MASK_4);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_TIP_MASK_4_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_5_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_5_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_TIP_MASK_5_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_5,
                            value);
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_5_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_5_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_TIP_MASK_5_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_5,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_5_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_5_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_5_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_TIP_MASK_5);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_TIP_MASK_5_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_6_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_6_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_TIP_MASK_6_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_6,
                            value);
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_6_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_6_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_TIP_MASK_6_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_6,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_6_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_6_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_6_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_TIP_MASK_6);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_TIP_MASK_6_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_7_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_7_write( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_TIP_MASK_7_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_7,
                            value);
}

static INLINE void digi_pgmrclk_reg_TIP_MASK_7_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_TIP_MASK_7_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_TIP_MASK_7_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_7,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_TIP_MASK_7_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_7_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_TIP_MASK_7_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_TIP_MASK_7);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_TIP_MASK_7_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_0_CLK_SELECT_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_0_CLK_SELECT_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_0_CLK_SELECT_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_0_CLK_SELECT_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_0_CLK_SELECT_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_0_CLK_SELECT_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_0_CLK_SELECT_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_0_CLK_SELECT_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_0_CLK_SELECT_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_1_CLK_SELECT_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_1_CLK_SELECT_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_1_CLK_SELECT_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_1_CLK_SELECT_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_1_CLK_SELECT_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_1_CLK_SELECT_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_1_CLK_SELECT_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_1_CLK_SELECT_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_1_CLK_SELECT_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_2_CLK_SELECT_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_2_CLK_SELECT_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_2_CLK_SELECT_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_2_CLK_SELECT_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_2_CLK_SELECT_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_2_CLK_SELECT_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_2_CLK_SELECT_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_2_CLK_SELECT_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_2_CLK_SELECT_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_3_CLK_SELECT_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_3_CLK_SELECT_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_3_CLK_SELECT_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_3_CLK_SELECT_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_3_CLK_SELECT_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_3_CLK_SELECT_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_3_CLK_SELECT_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_3_CLK_SELECT_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_3_CLK_SELECT_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_0_INTEGER_write( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_0_INTEGER_write( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_0_INTEGER_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_INTEGER,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_0_INTEGER_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_0_INTEGER_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_0_INTEGER_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_INTEGER,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_INTEGER_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_0_INTEGER_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_0_INTEGER_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_0_INTEGER);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_0_INTEGER_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_1_INTEGER_write( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_1_INTEGER_write( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_1_INTEGER_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_INTEGER,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_1_INTEGER_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_1_INTEGER_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_1_INTEGER_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_INTEGER,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_INTEGER_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_1_INTEGER_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_1_INTEGER_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_1_INTEGER);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_1_INTEGER_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_2_INTEGER_write( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_2_INTEGER_write( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_2_INTEGER_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_INTEGER,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_2_INTEGER_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_2_INTEGER_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_2_INTEGER_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_INTEGER,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_INTEGER_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_2_INTEGER_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_2_INTEGER_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_2_INTEGER);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_2_INTEGER_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_3_INTEGER_write( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_3_INTEGER_write( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_3_INTEGER_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_INTEGER,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_3_INTEGER_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_3_INTEGER_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_3_INTEGER_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_INTEGER,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_INTEGER_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_3_INTEGER_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_3_INTEGER_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_3_INTEGER);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_3_INTEGER_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_0_NUMERATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_0_NUMERATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_0_NUMERATOR_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_0_NUMERATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_0_NUMERATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_0_NUMERATOR_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_0_NUMERATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_0_NUMERATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_0_NUMERATOR_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_1_NUMERATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_1_NUMERATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_1_NUMERATOR_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_1_NUMERATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_1_NUMERATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_1_NUMERATOR_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_1_NUMERATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_1_NUMERATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_1_NUMERATOR_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_2_NUMERATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_2_NUMERATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_2_NUMERATOR_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_2_NUMERATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_2_NUMERATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_2_NUMERATOR_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_2_NUMERATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_2_NUMERATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_2_NUMERATOR_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_3_NUMERATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_3_NUMERATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_3_NUMERATOR_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_3_NUMERATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_3_NUMERATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_3_NUMERATOR_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_3_NUMERATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_3_NUMERATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_3_NUMERATOR_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_0_DENOMINATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_0_DENOMINATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_0_DENOMINATOR_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_0_DENOMINATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_0_DENOMINATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_0_DENOMINATOR_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_0_DENOMINATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_0_DENOMINATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_0_DENOMINATOR_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_1_DENOMINATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_1_DENOMINATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_1_DENOMINATOR_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_1_DENOMINATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_1_DENOMINATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_1_DENOMINATOR_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_1_DENOMINATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_1_DENOMINATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_1_DENOMINATOR_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_2_DENOMINATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_2_DENOMINATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_2_DENOMINATOR_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_2_DENOMINATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_2_DENOMINATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_2_DENOMINATOR_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_2_DENOMINATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_2_DENOMINATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_2_DENOMINATOR_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_3_DENOMINATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_3_DENOMINATOR_write( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_3_DENOMINATOR_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_3_DENOMINATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_3_DENOMINATOR_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_3_DENOMINATOR_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_3_DENOMINATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_3_DENOMINATOR_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_3_DENOMINATOR_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_EN_AND_RESET_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_EN_AND_RESET_write( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_EN_AND_RESET_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_EN_AND_RESET_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_EN_AND_RESET_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_EN_AND_RESET_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_EN_AND_RESET_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_EN_AND_RESET_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_EN_AND_RESET_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_FDIV_OUTPUT_EN_write( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_OUTPUT_EN_write( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_FDIV_OUTPUT_EN_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN,
                            value);
}

static INLINE void digi_pgmrclk_reg_FDIV_OUTPUT_EN_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_FDIV_OUTPUT_EN_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_FDIV_OUTPUT_EN_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_FDIV_OUTPUT_EN_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_FDIV_OUTPUT_EN_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_FDIV_OUTPUT_EN_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_IDIV_EN_write( digi_pgmrclk_buffer_t *b_ptr,
                                                   digi_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_IDIV_EN_write( digi_pgmrclk_buffer_t *b_ptr,
                                                   digi_handle_t *h_ptr,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_IDIV_EN_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_IDIV_EN,
                            value);
}

static INLINE void digi_pgmrclk_reg_IDIV_EN_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_IDIV_EN_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_IDIV_EN_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_CONFIG,
                            PMC_DIGI_PGMRCLK_REG_IDIV_EN,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_IDIV_EN_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_IDIV_EN_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_IDIV_EN_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_CONFIG,
                                       PMC_DIGI_PGMRCLK_REG_IDIV_EN);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_IDIV_EN_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_INT_EN_REG_0_write( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_INT_EN_REG_0_write( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_INT_EN_REG_0_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_STATUS,
                            PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0,
                            value);
}

static INLINE void digi_pgmrclk_reg_INT_EN_REG_0_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_INT_EN_REG_0_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_INT_EN_REG_0_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_STATUS,
                            PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_INT_EN_REG_0_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_INT_EN_REG_0_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_STATUS,
                                       PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_INT_EN_REG_0_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_INT_EN_REG_1_write( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_INT_EN_REG_1_write( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_INT_EN_REG_1_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_STATUS,
                            PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1,
                            value);
}

static INLINE void digi_pgmrclk_reg_INT_EN_REG_1_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_INT_EN_REG_1_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_INT_EN_REG_1_field_set", mask, ofs, value );
    digi_pgmrclk_field_set( b_ptr,
                            h_ptr,
                            MEM_TYPE_STATUS,
                            PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1,
                            mask,
                            PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1_UNUSED_MASK,
                            ofs,
                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_INT_EN_REG_1_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_INT_EN_REG_1_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_STATUS,
                                       PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_INT_EN_REG_1_read", reg_value);
    return reg_value;
}

static INLINE void digi_pgmrclk_reg_INT_REG_0_write( digi_pgmrclk_buffer_t *b_ptr,
                                                     digi_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_INT_REG_0_write( digi_pgmrclk_buffer_t *b_ptr,
                                                     digi_handle_t *h_ptr,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_INT_REG_0_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_STATUS,
                            PMC_DIGI_PGMRCLK_REG_INT_REG_0,
                            value);
}

static INLINE void digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set", mask, ofs, value );
    digi_pgmrclk_action_on_write_field_set( b_ptr,
                                            h_ptr,
                                            MEM_TYPE_STATUS,
                                            PMC_DIGI_PGMRCLK_REG_INT_REG_0,
                                            mask,
                                            ofs,
                                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_INT_REG_0_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_INT_REG_0_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_STATUS,
                                       PMC_DIGI_PGMRCLK_REG_INT_REG_0);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_INT_REG_0_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_reg_INT_REG_0_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_reg_INT_REG_0_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "digi_pgmrclk_reg_INT_REG_0_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return digi_pgmrclk_poll( b_ptr,
                              h_ptr,
                              MEM_TYPE_STATUS,
                              PMC_DIGI_PGMRCLK_REG_INT_REG_0,
                              mask,
                              value,
                              cmp,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


static INLINE void digi_pgmrclk_reg_INT_REG_1_write( digi_pgmrclk_buffer_t *b_ptr,
                                                     digi_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_INT_REG_1_write( digi_pgmrclk_buffer_t *b_ptr,
                                                     digi_handle_t *h_ptr,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "digi_pgmrclk_reg_INT_REG_1_write", value );
    digi_pgmrclk_reg_write( b_ptr,
                            h_ptr,
                            MEM_TYPE_STATUS,
                            PMC_DIGI_PGMRCLK_REG_INT_REG_1,
                            value);
}

static INLINE void digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set", mask, ofs, value );
    digi_pgmrclk_action_on_write_field_set( b_ptr,
                                            h_ptr,
                                            MEM_TYPE_STATUS,
                                            PMC_DIGI_PGMRCLK_REG_INT_REG_1,
                                            mask,
                                            ofs,
                                            value);

}

static INLINE UINT32 digi_pgmrclk_reg_INT_REG_1_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_INT_REG_1_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_STATUS,
                                       PMC_DIGI_PGMRCLK_REG_INT_REG_1);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_INT_REG_1_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_reg_INT_REG_1_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_reg_INT_REG_1_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "digi_pgmrclk_reg_INT_REG_1_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return digi_pgmrclk_poll( b_ptr,
                              h_ptr,
                              MEM_TYPE_STATUS,
                              PMC_DIGI_PGMRCLK_REG_INT_REG_1,
                              mask,
                              value,
                              cmp,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


static INLINE UINT32 digi_pgmrclk_reg_INT_STAT_REG_0_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_INT_STAT_REG_0_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_STATUS,
                                       PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_INT_STAT_REG_0_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_reg_INT_STAT_REG_0_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_reg_INT_STAT_REG_0_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "digi_pgmrclk_reg_INT_STAT_REG_0_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return digi_pgmrclk_poll( b_ptr,
                              h_ptr,
                              MEM_TYPE_STATUS,
                              PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0,
                              mask,
                              value,
                              cmp,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


static INLINE UINT32 digi_pgmrclk_reg_INT_STAT_REG_1_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_INT_STAT_REG_1_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_STATUS,
                                       PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_INT_STAT_REG_1_read", reg_value);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_reg_INT_STAT_REG_1_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_reg_INT_STAT_REG_1_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 mask,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "digi_pgmrclk_reg_INT_STAT_REG_1_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return digi_pgmrclk_poll( b_ptr,
                              h_ptr,
                              MEM_TYPE_STATUS,
                              PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1,
                              mask,
                              value,
                              cmp,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


static INLINE UINT32 digi_pgmrclk_reg_TIP_COMPLETE_STAT_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_reg_TIP_COMPLETE_STAT_read( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = digi_pgmrclk_reg_read( b_ptr,
                                       h_ptr,
                                       MEM_TYPE_STATUS,
                                       PMC_DIGI_PGMRCLK_REG_TIP_COMPLETE_STAT);

    IOLOG( "%s -> 0x%08x;", "digi_pgmrclk_reg_TIP_COMPLETE_STAT_read", reg_value);
    return reg_value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */
static INLINE void digi_pgmrclk_field_MISC_LCLK_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MISC_LCLK_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MISC_LCLK_0_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MISC_LCLK_0_set", value );

    /* (0x00015000 bits 26:24) bits 0:2 use field MISC_LCLK_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MISC_LCLK_0_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MISC_LCLK_0_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015000 bits 26:24) bits 0:2 use field MISC_LCLK_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MISC_LCLK_0_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MISC_LCLK_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MISC_LCLK_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_0_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015000 bits 26:24) bits 0:2 use field MISC_LCLK_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015000 bits 26:24) bits 0:2 use field MISC_LCLK_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MISC_LCLK_0_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MISC_LCLK_0_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015000 bits 26:24) bits 0:2 use field MISC_LCLK_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MISC_LCLK_0_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MISC_LCLK_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MISC_LCLK_0_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MISC_LCLK_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_0_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_0_set", value );

    /* (0x00015000 bits 23) field AUTO_LCLKOUT_EN_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_AUTO_LCLKOUT_EN_0_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_AUTO_LCLKOUT_EN_0_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015000 bits 23) field AUTO_LCLKOUT_EN_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_AUTO_LCLKOUT_EN_0_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_AUTO_LCLKOUT_EN_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_0_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_0_set", value );

    /* (0x00015000 bits 22) field LCLK_PULS_GEN_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_LCLK_PULS_GEN_0_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_LCLK_PULS_GEN_0_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015000 bits 22) field LCLK_PULS_GEN_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_LCLK_PULS_GEN_0_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_LCLK_PULS_GEN_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_0_set", value, 16383);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_0_set", value );

    /* (0x00015000 bits 21:8) bits 0:13 use field SYNC_INTERVAL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_INTERVAL_0_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_INTERVAL_0_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015000 bits 21:8) bits 0:13 use field SYNC_INTERVAL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_INTERVAL_0_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_INTERVAL_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_0_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_0_set", stop_bit, 13 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015000 bits 21:8) bits 0:13 use field SYNC_INTERVAL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015000 bits 21:8) bits 0:13 use field SYNC_INTERVAL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_INTERVAL_0_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_INTERVAL_0_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_0_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_0_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015000 bits 21:8) bits 0:13 use field SYNC_INTERVAL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_INTERVAL_0_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_INTERVAL_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_INTERVAL_0_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_INTERVAL_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_0_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_0_set", value );

    /* (0x00015000 bits 7) field SYNC_DISABLE_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_DISABLE_0_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_DISABLE_0_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015000 bits 7) field SYNC_DISABLE_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_DISABLE_0_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_SYNC_DISABLE_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_0_set", value, 3);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_0_set", value );

    /* (0x00015000 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_PMON_SYNC_I_SEL_0_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_PMON_SYNC_I_SEL_0_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015000 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_PMON_SYNC_I_SEL_0_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_PMON_SYNC_I_SEL_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_0_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_0_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015000 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015000 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_PMON_SYNC_I_SEL_0_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_PMON_SYNC_I_SEL_0_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_0_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_0_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015000 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_PMON_SYNC_I_SEL_0_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_PMON_SYNC_I_SEL_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_PMON_SYNC_I_SEL_0_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_PMON_SYNC_I_SEL_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_0_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_0_set", value );

    /* (0x00015000 bits 4) field CNTR_ENABLE_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_CNTR_ENABLE_0_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_CNTR_ENABLE_0_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015000 bits 4) field CNTR_ENABLE_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_CNTR_ENABLE_0_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_CNTR_ENABLE_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_MASK_WINDOW_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MASK_WINDOW_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_0_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_0_set", value );

    /* (0x00015000 bits 3:0) bits 0:3 use field MASK_WINDOW_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MASK_WINDOW_0_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MASK_WINDOW_0_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015000 bits 3:0) bits 0:3 use field MASK_WINDOW_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MASK_WINDOW_0_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MASK_WINDOW_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_0_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_0_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015000 bits 3:0) bits 0:3 use field MASK_WINDOW_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015000 bits 3:0) bits 0:3 use field MASK_WINDOW_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MASK_WINDOW_0_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MASK_WINDOW_0_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_0_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_0_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015000 bits 3:0) bits 0:3 use field MASK_WINDOW_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_0_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MASK_WINDOW_0_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MASK_WINDOW_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MASK_WINDOW_0_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_0_CFG_BIT_MASK_WINDOW_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_MISC_LCLK_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MISC_LCLK_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MISC_LCLK_1_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MISC_LCLK_1_set", value );

    /* (0x00015004 bits 26:24) bits 0:2 use field MISC_LCLK_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MISC_LCLK_1_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MISC_LCLK_1_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015004 bits 26:24) bits 0:2 use field MISC_LCLK_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MISC_LCLK_1_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MISC_LCLK_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MISC_LCLK_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_1_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015004 bits 26:24) bits 0:2 use field MISC_LCLK_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015004 bits 26:24) bits 0:2 use field MISC_LCLK_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MISC_LCLK_1_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MISC_LCLK_1_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015004 bits 26:24) bits 0:2 use field MISC_LCLK_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MISC_LCLK_1_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MISC_LCLK_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MISC_LCLK_1_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MISC_LCLK_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_1_set", value );

    /* (0x00015004 bits 23) field AUTO_LCLKOUT_EN_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_AUTO_LCLKOUT_EN_1_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_AUTO_LCLKOUT_EN_1_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015004 bits 23) field AUTO_LCLKOUT_EN_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_AUTO_LCLKOUT_EN_1_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_AUTO_LCLKOUT_EN_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_1_set", value );

    /* (0x00015004 bits 22) field LCLK_PULS_GEN_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_LCLK_PULS_GEN_1_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_LCLK_PULS_GEN_1_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015004 bits 22) field LCLK_PULS_GEN_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_LCLK_PULS_GEN_1_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_LCLK_PULS_GEN_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_1_set", value, 16383);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_1_set", value );

    /* (0x00015004 bits 21:8) bits 0:13 use field SYNC_INTERVAL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_INTERVAL_1_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_INTERVAL_1_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015004 bits 21:8) bits 0:13 use field SYNC_INTERVAL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_INTERVAL_1_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_INTERVAL_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_1_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_1_set", stop_bit, 13 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015004 bits 21:8) bits 0:13 use field SYNC_INTERVAL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015004 bits 21:8) bits 0:13 use field SYNC_INTERVAL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_INTERVAL_1_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_INTERVAL_1_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_1_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_1_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015004 bits 21:8) bits 0:13 use field SYNC_INTERVAL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_INTERVAL_1_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_INTERVAL_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_INTERVAL_1_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_INTERVAL_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_1_set", value );

    /* (0x00015004 bits 7) field SYNC_DISABLE_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_DISABLE_1_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_DISABLE_1_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015004 bits 7) field SYNC_DISABLE_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_DISABLE_1_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_SYNC_DISABLE_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_1_set", value, 3);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_1_set", value );

    /* (0x00015004 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_PMON_SYNC_I_SEL_1_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_PMON_SYNC_I_SEL_1_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015004 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_PMON_SYNC_I_SEL_1_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_PMON_SYNC_I_SEL_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_1_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_1_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015004 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015004 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_PMON_SYNC_I_SEL_1_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_PMON_SYNC_I_SEL_1_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_1_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_1_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015004 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_PMON_SYNC_I_SEL_1_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_PMON_SYNC_I_SEL_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_PMON_SYNC_I_SEL_1_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_PMON_SYNC_I_SEL_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_1_set", value );

    /* (0x00015004 bits 4) field CNTR_ENABLE_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_CNTR_ENABLE_1_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_CNTR_ENABLE_1_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015004 bits 4) field CNTR_ENABLE_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_CNTR_ENABLE_1_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_CNTR_ENABLE_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_MASK_WINDOW_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MASK_WINDOW_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_1_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_1_set", value );

    /* (0x00015004 bits 3:0) bits 0:3 use field MASK_WINDOW_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MASK_WINDOW_1_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MASK_WINDOW_1_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015004 bits 3:0) bits 0:3 use field MASK_WINDOW_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MASK_WINDOW_1_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MASK_WINDOW_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_1_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015004 bits 3:0) bits 0:3 use field MASK_WINDOW_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015004 bits 3:0) bits 0:3 use field MASK_WINDOW_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MASK_WINDOW_1_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MASK_WINDOW_1_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015004 bits 3:0) bits 0:3 use field MASK_WINDOW_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_1_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MASK_WINDOW_1_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MASK_WINDOW_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MASK_WINDOW_1_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_1_CFG_BIT_MASK_WINDOW_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_MISC_LCLK_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MISC_LCLK_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MISC_LCLK_2_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MISC_LCLK_2_set", value );

    /* (0x00015008 bits 26:24) bits 0:2 use field MISC_LCLK_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MISC_LCLK_2_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MISC_LCLK_2_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015008 bits 26:24) bits 0:2 use field MISC_LCLK_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MISC_LCLK_2_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MISC_LCLK_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MISC_LCLK_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_2_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015008 bits 26:24) bits 0:2 use field MISC_LCLK_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015008 bits 26:24) bits 0:2 use field MISC_LCLK_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MISC_LCLK_2_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MISC_LCLK_2_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015008 bits 26:24) bits 0:2 use field MISC_LCLK_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MISC_LCLK_2_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MISC_LCLK_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MISC_LCLK_2_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MISC_LCLK_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_2_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_2_set", value );

    /* (0x00015008 bits 23) field AUTO_LCLKOUT_EN_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_AUTO_LCLKOUT_EN_2_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_AUTO_LCLKOUT_EN_2_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015008 bits 23) field AUTO_LCLKOUT_EN_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_AUTO_LCLKOUT_EN_2_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_AUTO_LCLKOUT_EN_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_2_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_2_set", value );

    /* (0x00015008 bits 22) field LCLK_PULS_GEN_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_LCLK_PULS_GEN_2_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_LCLK_PULS_GEN_2_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015008 bits 22) field LCLK_PULS_GEN_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_LCLK_PULS_GEN_2_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_LCLK_PULS_GEN_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_2_set", value, 16383);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_2_set", value );

    /* (0x00015008 bits 21:8) bits 0:13 use field SYNC_INTERVAL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_INTERVAL_2_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_INTERVAL_2_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015008 bits 21:8) bits 0:13 use field SYNC_INTERVAL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_INTERVAL_2_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_INTERVAL_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_2_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_2_set", stop_bit, 13 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015008 bits 21:8) bits 0:13 use field SYNC_INTERVAL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015008 bits 21:8) bits 0:13 use field SYNC_INTERVAL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_INTERVAL_2_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_INTERVAL_2_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_2_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_2_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015008 bits 21:8) bits 0:13 use field SYNC_INTERVAL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_INTERVAL_2_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_INTERVAL_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_INTERVAL_2_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_INTERVAL_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_2_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_2_set", value );

    /* (0x00015008 bits 7) field SYNC_DISABLE_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_DISABLE_2_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_DISABLE_2_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015008 bits 7) field SYNC_DISABLE_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_DISABLE_2_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_SYNC_DISABLE_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_2_set", value, 3);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_2_set", value );

    /* (0x00015008 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_PMON_SYNC_I_SEL_2_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_PMON_SYNC_I_SEL_2_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015008 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_PMON_SYNC_I_SEL_2_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_PMON_SYNC_I_SEL_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_2_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_2_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015008 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015008 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_PMON_SYNC_I_SEL_2_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_PMON_SYNC_I_SEL_2_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_2_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_2_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015008 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_PMON_SYNC_I_SEL_2_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_PMON_SYNC_I_SEL_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_PMON_SYNC_I_SEL_2_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_PMON_SYNC_I_SEL_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_2_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_2_set", value );

    /* (0x00015008 bits 4) field CNTR_ENABLE_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_CNTR_ENABLE_2_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_CNTR_ENABLE_2_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015008 bits 4) field CNTR_ENABLE_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_CNTR_ENABLE_2_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_CNTR_ENABLE_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_MASK_WINDOW_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MASK_WINDOW_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_2_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_2_set", value );

    /* (0x00015008 bits 3:0) bits 0:3 use field MASK_WINDOW_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MASK_WINDOW_2_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MASK_WINDOW_2_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015008 bits 3:0) bits 0:3 use field MASK_WINDOW_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MASK_WINDOW_2_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MASK_WINDOW_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_2_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015008 bits 3:0) bits 0:3 use field MASK_WINDOW_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015008 bits 3:0) bits 0:3 use field MASK_WINDOW_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MASK_WINDOW_2_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MASK_WINDOW_2_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015008 bits 3:0) bits 0:3 use field MASK_WINDOW_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_2_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MASK_WINDOW_2_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MASK_WINDOW_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MASK_WINDOW_2_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_2_CFG_BIT_MASK_WINDOW_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_MISC_LCLK_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MISC_LCLK_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MISC_LCLK_3_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MISC_LCLK_3_set", value );

    /* (0x0001500c bits 26:24) bits 0:2 use field MISC_LCLK_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MISC_LCLK_3_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MISC_LCLK_3_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001500c bits 26:24) bits 0:2 use field MISC_LCLK_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MISC_LCLK_3_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MISC_LCLK_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MISC_LCLK_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_3_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001500c bits 26:24) bits 0:2 use field MISC_LCLK_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001500c bits 26:24) bits 0:2 use field MISC_LCLK_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MISC_LCLK_3_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MISC_LCLK_3_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001500c bits 26:24) bits 0:2 use field MISC_LCLK_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MISC_LCLK_3_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MISC_LCLK_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MISC_LCLK_3_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MISC_LCLK_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_3_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_3_set", value );

    /* (0x0001500c bits 23) field AUTO_LCLKOUT_EN_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_AUTO_LCLKOUT_EN_3_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_AUTO_LCLKOUT_EN_3_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001500c bits 23) field AUTO_LCLKOUT_EN_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_AUTO_LCLKOUT_EN_3_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_AUTO_LCLKOUT_EN_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_3_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_3_set", value );

    /* (0x0001500c bits 22) field LCLK_PULS_GEN_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_LCLK_PULS_GEN_3_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_LCLK_PULS_GEN_3_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001500c bits 22) field LCLK_PULS_GEN_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_LCLK_PULS_GEN_3_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_LCLK_PULS_GEN_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_3_set", value, 16383);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_3_set", value );

    /* (0x0001500c bits 21:8) bits 0:13 use field SYNC_INTERVAL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_INTERVAL_3_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_INTERVAL_3_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001500c bits 21:8) bits 0:13 use field SYNC_INTERVAL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_INTERVAL_3_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_INTERVAL_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_3_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_3_set", stop_bit, 13 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001500c bits 21:8) bits 0:13 use field SYNC_INTERVAL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001500c bits 21:8) bits 0:13 use field SYNC_INTERVAL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_INTERVAL_3_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_INTERVAL_3_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_3_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_3_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001500c bits 21:8) bits 0:13 use field SYNC_INTERVAL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_INTERVAL_3_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_INTERVAL_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_INTERVAL_3_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_INTERVAL_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_3_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_3_set", value );

    /* (0x0001500c bits 7) field SYNC_DISABLE_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_DISABLE_3_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_DISABLE_3_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001500c bits 7) field SYNC_DISABLE_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_DISABLE_3_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_SYNC_DISABLE_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_3_set", value, 3);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_3_set", value );

    /* (0x0001500c bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_PMON_SYNC_I_SEL_3_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_PMON_SYNC_I_SEL_3_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001500c bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_PMON_SYNC_I_SEL_3_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_PMON_SYNC_I_SEL_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_3_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_3_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001500c bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001500c bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_PMON_SYNC_I_SEL_3_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_PMON_SYNC_I_SEL_3_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_3_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_3_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001500c bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_PMON_SYNC_I_SEL_3_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_PMON_SYNC_I_SEL_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_PMON_SYNC_I_SEL_3_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_PMON_SYNC_I_SEL_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_3_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_3_set", value );

    /* (0x0001500c bits 4) field CNTR_ENABLE_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_CNTR_ENABLE_3_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_CNTR_ENABLE_3_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001500c bits 4) field CNTR_ENABLE_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_CNTR_ENABLE_3_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_CNTR_ENABLE_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_MASK_WINDOW_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MASK_WINDOW_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_3_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_3_set", value );

    /* (0x0001500c bits 3:0) bits 0:3 use field MASK_WINDOW_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MASK_WINDOW_3_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MASK_WINDOW_3_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001500c bits 3:0) bits 0:3 use field MASK_WINDOW_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MASK_WINDOW_3_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MASK_WINDOW_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_3_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001500c bits 3:0) bits 0:3 use field MASK_WINDOW_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001500c bits 3:0) bits 0:3 use field MASK_WINDOW_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MASK_WINDOW_3_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MASK_WINDOW_3_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001500c bits 3:0) bits 0:3 use field MASK_WINDOW_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_3_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MASK_WINDOW_3_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MASK_WINDOW_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MASK_WINDOW_3_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_3_CFG_BIT_MASK_WINDOW_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_MISC_LCLK_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MISC_LCLK_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MISC_LCLK_4_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MISC_LCLK_4_set", value );

    /* (0x00015010 bits 26:24) bits 0:2 use field MISC_LCLK_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MISC_LCLK_4_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MISC_LCLK_4_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015010 bits 26:24) bits 0:2 use field MISC_LCLK_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MISC_LCLK_4_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MISC_LCLK_4_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MISC_LCLK_4_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_4_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_4_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015010 bits 26:24) bits 0:2 use field MISC_LCLK_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015010 bits 26:24) bits 0:2 use field MISC_LCLK_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MISC_LCLK_4_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MISC_LCLK_4_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_4_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_4_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015010 bits 26:24) bits 0:2 use field MISC_LCLK_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MISC_LCLK_4_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MISC_LCLK_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MISC_LCLK_4_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MISC_LCLK_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_4_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_4_set", value );

    /* (0x00015010 bits 23) field AUTO_LCLKOUT_EN_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_AUTO_LCLKOUT_EN_4_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_AUTO_LCLKOUT_EN_4_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015010 bits 23) field AUTO_LCLKOUT_EN_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_AUTO_LCLKOUT_EN_4_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_AUTO_LCLKOUT_EN_4_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_4_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_4_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_4_set", value );

    /* (0x00015010 bits 22) field LCLK_PULS_GEN_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_LCLK_PULS_GEN_4_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_LCLK_PULS_GEN_4_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015010 bits 22) field LCLK_PULS_GEN_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_LCLK_PULS_GEN_4_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_LCLK_PULS_GEN_4_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_4_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_4_set", value, 16383);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_4_set", value );

    /* (0x00015010 bits 21:8) bits 0:13 use field SYNC_INTERVAL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_INTERVAL_4_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_INTERVAL_4_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015010 bits 21:8) bits 0:13 use field SYNC_INTERVAL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_INTERVAL_4_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_INTERVAL_4_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_4_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_4_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_4_set", stop_bit, 13 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015010 bits 21:8) bits 0:13 use field SYNC_INTERVAL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015010 bits 21:8) bits 0:13 use field SYNC_INTERVAL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_INTERVAL_4_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_INTERVAL_4_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_4_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_4_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015010 bits 21:8) bits 0:13 use field SYNC_INTERVAL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_INTERVAL_4_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_INTERVAL_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_INTERVAL_4_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_INTERVAL_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_4_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_4_set", value );

    /* (0x00015010 bits 7) field SYNC_DISABLE_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_DISABLE_4_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_DISABLE_4_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015010 bits 7) field SYNC_DISABLE_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_DISABLE_4_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_SYNC_DISABLE_4_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_4_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_4_set", value, 3);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_4_set", value );

    /* (0x00015010 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_PMON_SYNC_I_SEL_4_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_PMON_SYNC_I_SEL_4_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015010 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_PMON_SYNC_I_SEL_4_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_PMON_SYNC_I_SEL_4_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_4_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_4_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_4_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015010 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015010 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_PMON_SYNC_I_SEL_4_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_PMON_SYNC_I_SEL_4_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_4_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_4_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015010 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_PMON_SYNC_I_SEL_4_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_PMON_SYNC_I_SEL_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_PMON_SYNC_I_SEL_4_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_PMON_SYNC_I_SEL_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_4_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_4_set", value );

    /* (0x00015010 bits 4) field CNTR_ENABLE_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_CNTR_ENABLE_4_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_CNTR_ENABLE_4_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015010 bits 4) field CNTR_ENABLE_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_CNTR_ENABLE_4_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_CNTR_ENABLE_4_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_4_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_MASK_WINDOW_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MASK_WINDOW_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_4_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_4_set", value );

    /* (0x00015010 bits 3:0) bits 0:3 use field MASK_WINDOW_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MASK_WINDOW_4_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MASK_WINDOW_4_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015010 bits 3:0) bits 0:3 use field MASK_WINDOW_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MASK_WINDOW_4_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MASK_WINDOW_4_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_4_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_4_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_4_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015010 bits 3:0) bits 0:3 use field MASK_WINDOW_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015010 bits 3:0) bits 0:3 use field MASK_WINDOW_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MASK_WINDOW_4_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MASK_WINDOW_4_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_4_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_4_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015010 bits 3:0) bits 0:3 use field MASK_WINDOW_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_4_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MASK_WINDOW_4_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MASK_WINDOW_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MASK_WINDOW_4_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_4_CFG_BIT_MASK_WINDOW_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_MISC_LCLK_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MISC_LCLK_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MISC_LCLK_5_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MISC_LCLK_5_set", value );

    /* (0x00015014 bits 26:24) bits 0:2 use field MISC_LCLK_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MISC_LCLK_5_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MISC_LCLK_5_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015014 bits 26:24) bits 0:2 use field MISC_LCLK_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MISC_LCLK_5_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MISC_LCLK_5_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MISC_LCLK_5_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_5_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_5_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015014 bits 26:24) bits 0:2 use field MISC_LCLK_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015014 bits 26:24) bits 0:2 use field MISC_LCLK_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MISC_LCLK_5_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MISC_LCLK_5_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_5_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_5_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015014 bits 26:24) bits 0:2 use field MISC_LCLK_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MISC_LCLK_5_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MISC_LCLK_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MISC_LCLK_5_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MISC_LCLK_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_5_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_5_set", value );

    /* (0x00015014 bits 23) field AUTO_LCLKOUT_EN_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_AUTO_LCLKOUT_EN_5_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_AUTO_LCLKOUT_EN_5_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015014 bits 23) field AUTO_LCLKOUT_EN_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_AUTO_LCLKOUT_EN_5_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_AUTO_LCLKOUT_EN_5_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_5_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_5_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_5_set", value );

    /* (0x00015014 bits 22) field LCLK_PULS_GEN_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_LCLK_PULS_GEN_5_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_LCLK_PULS_GEN_5_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015014 bits 22) field LCLK_PULS_GEN_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_LCLK_PULS_GEN_5_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_LCLK_PULS_GEN_5_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_5_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_5_set", value, 16383);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_5_set", value );

    /* (0x00015014 bits 21:8) bits 0:13 use field SYNC_INTERVAL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_INTERVAL_5_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_INTERVAL_5_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015014 bits 21:8) bits 0:13 use field SYNC_INTERVAL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_INTERVAL_5_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_INTERVAL_5_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_5_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_5_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_5_set", stop_bit, 13 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015014 bits 21:8) bits 0:13 use field SYNC_INTERVAL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015014 bits 21:8) bits 0:13 use field SYNC_INTERVAL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_INTERVAL_5_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_INTERVAL_5_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_5_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_5_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015014 bits 21:8) bits 0:13 use field SYNC_INTERVAL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_INTERVAL_5_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_INTERVAL_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_INTERVAL_5_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_INTERVAL_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_5_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_5_set", value );

    /* (0x00015014 bits 7) field SYNC_DISABLE_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_DISABLE_5_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_DISABLE_5_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015014 bits 7) field SYNC_DISABLE_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_DISABLE_5_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_SYNC_DISABLE_5_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_5_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_5_set", value, 3);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_5_set", value );

    /* (0x00015014 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_PMON_SYNC_I_SEL_5_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_PMON_SYNC_I_SEL_5_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015014 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_PMON_SYNC_I_SEL_5_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_PMON_SYNC_I_SEL_5_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_5_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_5_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_5_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015014 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015014 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_PMON_SYNC_I_SEL_5_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_PMON_SYNC_I_SEL_5_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_5_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_5_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015014 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_PMON_SYNC_I_SEL_5_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_PMON_SYNC_I_SEL_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_PMON_SYNC_I_SEL_5_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_PMON_SYNC_I_SEL_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_5_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_5_set", value );

    /* (0x00015014 bits 4) field CNTR_ENABLE_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_CNTR_ENABLE_5_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_CNTR_ENABLE_5_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015014 bits 4) field CNTR_ENABLE_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_CNTR_ENABLE_5_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_CNTR_ENABLE_5_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_5_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_MASK_WINDOW_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MASK_WINDOW_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_5_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_5_set", value );

    /* (0x00015014 bits 3:0) bits 0:3 use field MASK_WINDOW_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MASK_WINDOW_5_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MASK_WINDOW_5_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015014 bits 3:0) bits 0:3 use field MASK_WINDOW_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MASK_WINDOW_5_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MASK_WINDOW_5_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_5_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_5_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_5_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015014 bits 3:0) bits 0:3 use field MASK_WINDOW_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015014 bits 3:0) bits 0:3 use field MASK_WINDOW_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MASK_WINDOW_5_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MASK_WINDOW_5_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_5_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_5_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015014 bits 3:0) bits 0:3 use field MASK_WINDOW_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_5_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MASK_WINDOW_5_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MASK_WINDOW_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MASK_WINDOW_5_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_5_CFG_BIT_MASK_WINDOW_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_MISC_LCLK_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MISC_LCLK_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MISC_LCLK_6_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MISC_LCLK_6_set", value );

    /* (0x00015018 bits 26:24) bits 0:2 use field MISC_LCLK_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MISC_LCLK_6_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MISC_LCLK_6_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015018 bits 26:24) bits 0:2 use field MISC_LCLK_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MISC_LCLK_6_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MISC_LCLK_6_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MISC_LCLK_6_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_6_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_6_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015018 bits 26:24) bits 0:2 use field MISC_LCLK_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015018 bits 26:24) bits 0:2 use field MISC_LCLK_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MISC_LCLK_6_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MISC_LCLK_6_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_6_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_6_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015018 bits 26:24) bits 0:2 use field MISC_LCLK_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MISC_LCLK_6_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MISC_LCLK_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MISC_LCLK_6_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MISC_LCLK_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_6_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_6_set", value );

    /* (0x00015018 bits 23) field AUTO_LCLKOUT_EN_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_AUTO_LCLKOUT_EN_6_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_AUTO_LCLKOUT_EN_6_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015018 bits 23) field AUTO_LCLKOUT_EN_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_AUTO_LCLKOUT_EN_6_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_AUTO_LCLKOUT_EN_6_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_6_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_6_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_6_set", value );

    /* (0x00015018 bits 22) field LCLK_PULS_GEN_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_LCLK_PULS_GEN_6_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_LCLK_PULS_GEN_6_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015018 bits 22) field LCLK_PULS_GEN_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_LCLK_PULS_GEN_6_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_LCLK_PULS_GEN_6_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_6_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_6_set", value, 16383);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_6_set", value );

    /* (0x00015018 bits 21:8) bits 0:13 use field SYNC_INTERVAL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_INTERVAL_6_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_INTERVAL_6_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015018 bits 21:8) bits 0:13 use field SYNC_INTERVAL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_INTERVAL_6_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_INTERVAL_6_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_6_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_6_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_6_set", stop_bit, 13 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015018 bits 21:8) bits 0:13 use field SYNC_INTERVAL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015018 bits 21:8) bits 0:13 use field SYNC_INTERVAL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_INTERVAL_6_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_INTERVAL_6_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_6_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_6_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015018 bits 21:8) bits 0:13 use field SYNC_INTERVAL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_INTERVAL_6_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_INTERVAL_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_INTERVAL_6_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_INTERVAL_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_6_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_6_set", value );

    /* (0x00015018 bits 7) field SYNC_DISABLE_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_DISABLE_6_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_DISABLE_6_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015018 bits 7) field SYNC_DISABLE_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_DISABLE_6_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_SYNC_DISABLE_6_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_6_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_6_set", value, 3);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_6_set", value );

    /* (0x00015018 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_PMON_SYNC_I_SEL_6_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_PMON_SYNC_I_SEL_6_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015018 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_PMON_SYNC_I_SEL_6_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_PMON_SYNC_I_SEL_6_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_6_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_6_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_6_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015018 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015018 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_PMON_SYNC_I_SEL_6_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_PMON_SYNC_I_SEL_6_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_6_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_6_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015018 bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_PMON_SYNC_I_SEL_6_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_PMON_SYNC_I_SEL_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_PMON_SYNC_I_SEL_6_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_PMON_SYNC_I_SEL_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_6_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_6_set", value );

    /* (0x00015018 bits 4) field CNTR_ENABLE_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_CNTR_ENABLE_6_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_CNTR_ENABLE_6_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015018 bits 4) field CNTR_ENABLE_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_CNTR_ENABLE_6_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_CNTR_ENABLE_6_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_6_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_MASK_WINDOW_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MASK_WINDOW_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_6_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_6_set", value );

    /* (0x00015018 bits 3:0) bits 0:3 use field MASK_WINDOW_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MASK_WINDOW_6_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MASK_WINDOW_6_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015018 bits 3:0) bits 0:3 use field MASK_WINDOW_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MASK_WINDOW_6_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MASK_WINDOW_6_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_6_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_6_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_6_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015018 bits 3:0) bits 0:3 use field MASK_WINDOW_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015018 bits 3:0) bits 0:3 use field MASK_WINDOW_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MASK_WINDOW_6_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MASK_WINDOW_6_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_6_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_6_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015018 bits 3:0) bits 0:3 use field MASK_WINDOW_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_6_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MASK_WINDOW_6_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MASK_WINDOW_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MASK_WINDOW_6_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_6_CFG_BIT_MASK_WINDOW_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_MISC_LCLK_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MISC_LCLK_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MISC_LCLK_7_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MISC_LCLK_7_set", value );

    /* (0x0001501c bits 26:24) bits 0:2 use field MISC_LCLK_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MISC_LCLK_7_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MISC_LCLK_7_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MISC_LCLK_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001501c bits 26:24) bits 0:2 use field MISC_LCLK_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MISC_LCLK_7_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MISC_LCLK_7_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MISC_LCLK_7_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MISC_LCLK_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_7_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_7_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001501c bits 26:24) bits 0:2 use field MISC_LCLK_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001501c bits 26:24) bits 0:2 use field MISC_LCLK_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MISC_LCLK_7_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MISC_LCLK_7_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MISC_LCLK_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_LCLK_7_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_LCLK_7_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001501c bits 26:24) bits 0:2 use field MISC_LCLK_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MISC_LCLK_7_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MISC_LCLK_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MISC_LCLK_7_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MISC_LCLK_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_LCLK_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_7_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_7_set", value );

    /* (0x0001501c bits 23) field AUTO_LCLKOUT_EN_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_AUTO_LCLKOUT_EN_7_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_AUTO_LCLKOUT_EN_7_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001501c bits 23) field AUTO_LCLKOUT_EN_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_AUTO_LCLKOUT_EN_7_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_AUTO_LCLKOUT_EN_7_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_7_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_PULS_GEN_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_7_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_7_set", value );

    /* (0x0001501c bits 22) field LCLK_PULS_GEN_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_LCLK_PULS_GEN_7_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_LCLK_PULS_GEN_7_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_PULS_GEN_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001501c bits 22) field LCLK_PULS_GEN_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_LCLK_PULS_GEN_7_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_LCLK_PULS_GEN_7_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_PULS_GEN_7_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_7_set", value, 16383);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_7_set", value );

    /* (0x0001501c bits 21:8) bits 0:13 use field SYNC_INTERVAL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_INTERVAL_7_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_INTERVAL_7_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001501c bits 21:8) bits 0:13 use field SYNC_INTERVAL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_INTERVAL_7_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_INTERVAL_7_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_7_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_7_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_7_set", stop_bit, 13 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001501c bits 21:8) bits 0:13 use field SYNC_INTERVAL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001501c bits 21:8) bits 0:13 use field SYNC_INTERVAL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_INTERVAL_7_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_INTERVAL_7_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_7_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_7_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001501c bits 21:8) bits 0:13 use field SYNC_INTERVAL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_INTERVAL_7_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_INTERVAL_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_INTERVAL_7_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_INTERVAL_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_7_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_7_set", value );

    /* (0x0001501c bits 7) field SYNC_DISABLE_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_DISABLE_7_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_DISABLE_7_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001501c bits 7) field SYNC_DISABLE_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_DISABLE_7_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_SYNC_DISABLE_7_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_7_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_SEL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_7_set", value, 3);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_7_set", value );

    /* (0x0001501c bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_PMON_SYNC_I_SEL_7_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_PMON_SYNC_I_SEL_7_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_SEL_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001501c bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_PMON_SYNC_I_SEL_7_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_PMON_SYNC_I_SEL_7_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_SEL_7_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_PMON_SYNC_I_SEL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_7_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_7_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001501c bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001501c bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_PMON_SYNC_I_SEL_7_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_PMON_SYNC_I_SEL_7_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_PMON_SYNC_I_SEL_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_7_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_7_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001501c bits 6:5) bits 0:1 use field PMON_SYNC_I_SEL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_PMON_SYNC_I_SEL_7_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_PMON_SYNC_I_SEL_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_PMON_SYNC_I_SEL_7_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_PMON_SYNC_I_SEL_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_PMON_SYNC_I_SEL_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_7_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_7_set", value );

    /* (0x0001501c bits 4) field CNTR_ENABLE_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_CNTR_ENABLE_7_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_CNTR_ENABLE_7_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001501c bits 4) field CNTR_ENABLE_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_CNTR_ENABLE_7_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_CNTR_ENABLE_7_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_7_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_MASK_WINDOW_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MASK_WINDOW_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_7_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_7_set", value );

    /* (0x0001501c bits 3:0) bits 0:3 use field MASK_WINDOW_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MASK_WINDOW_7_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MASK_WINDOW_7_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001501c bits 3:0) bits 0:3 use field MASK_WINDOW_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MASK_WINDOW_7_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MASK_WINDOW_7_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_7_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_7_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_7_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001501c bits 3:0) bits 0:3 use field MASK_WINDOW_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001501c bits 3:0) bits 0:3 use field MASK_WINDOW_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
        digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MASK_WINDOW_7_OFF + subfield_offset),
                                                         DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MASK_WINDOW_7_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_7_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_7_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001501c bits 3:0) bits 0:3 use field MASK_WINDOW_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_7_CFG_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MASK_WINDOW_7_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MASK_WINDOW_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MASK_WINDOW_7_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_7_CFG_BIT_MASK_WINDOW_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_INTERVAL_RST_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_INTERVAL_RST_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_0_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_0_set", value );

    /* (0x00015020 bits 7) field INTERVAL_RST_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    digi_pgmrclk_reg_LCLK_GENERATOR_RESET_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_0_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_0_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015020 bits 7) field INTERVAL_RST_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_RESET_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_0_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_INTERVAL_RST_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_INTERVAL_RST_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_1_set", value );

    /* (0x00015020 bits 6) field INTERVAL_RST_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    digi_pgmrclk_reg_LCLK_GENERATOR_RESET_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_1_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_1_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015020 bits 6) field INTERVAL_RST_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_RESET_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_1_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_INTERVAL_RST_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_INTERVAL_RST_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_2_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_2_set", value );

    /* (0x00015020 bits 5) field INTERVAL_RST_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    digi_pgmrclk_reg_LCLK_GENERATOR_RESET_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_2_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_2_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015020 bits 5) field INTERVAL_RST_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_RESET_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_2_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_INTERVAL_RST_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_INTERVAL_RST_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_3_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_3_set", value );

    /* (0x00015020 bits 4) field INTERVAL_RST_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    digi_pgmrclk_reg_LCLK_GENERATOR_RESET_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_3_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_3_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015020 bits 4) field INTERVAL_RST_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_RESET_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_3_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_INTERVAL_RST_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_INTERVAL_RST_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_4_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_4_set", value );

    /* (0x00015020 bits 3) field INTERVAL_RST_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    digi_pgmrclk_reg_LCLK_GENERATOR_RESET_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_4_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_4_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015020 bits 3) field INTERVAL_RST_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_RESET_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_4_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_4_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_4_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_INTERVAL_RST_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_INTERVAL_RST_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_5_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_5_set", value );

    /* (0x00015020 bits 2) field INTERVAL_RST_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    digi_pgmrclk_reg_LCLK_GENERATOR_RESET_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_5_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_5_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015020 bits 2) field INTERVAL_RST_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_RESET_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_5_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_5_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_5_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_INTERVAL_RST_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_INTERVAL_RST_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_6_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_6_set", value );

    /* (0x00015020 bits 1) field INTERVAL_RST_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    digi_pgmrclk_reg_LCLK_GENERATOR_RESET_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_6_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_6_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015020 bits 1) field INTERVAL_RST_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_RESET_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_6_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_6_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_6_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_INTERVAL_RST_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_INTERVAL_RST_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_7_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_7_set", value );

    /* (0x00015020 bits 0) field INTERVAL_RST_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    digi_pgmrclk_reg_LCLK_GENERATOR_RESET_field_set( b_ptr,
                                                     h_ptr,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_7_MSK,
                                                     DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_7_OFF,
                                                     value);
}

static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015020 bits 0) field INTERVAL_RST_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_RESET_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_7_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_RESET_BIT_INTERVAL_RST_7_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_7_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_17_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_17_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_17_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_17_set", value );

    /* (0x00015024 bits 23:21) bits 0:2 use field LCLK_OUT_SEL_17 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_17_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_17_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_17_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_17_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015024 bits 23:21) bits 0:2 use field LCLK_OUT_SEL_17 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_17_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_17_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_17_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_17_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_17_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_17_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_17_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_17_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015024 bits 23:21) bits 0:2 use field LCLK_OUT_SEL_17 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015024 bits 23:21) bits 0:2 use field LCLK_OUT_SEL_17 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_17_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_17_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_17_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_17_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_17_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_17_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015024 bits 23:21) bits 0:2 use field LCLK_OUT_SEL_17 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_17_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_17_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_17_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_17_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_17_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_16_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_16_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_16_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_16_set", value );

    /* (0x00015024 bits 20:18) bits 0:2 use field LCLK_OUT_SEL_16 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_16_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_16_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_16_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_16_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015024 bits 20:18) bits 0:2 use field LCLK_OUT_SEL_16 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_16_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_16_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_16_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_16_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_16_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_16_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_16_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_16_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015024 bits 20:18) bits 0:2 use field LCLK_OUT_SEL_16 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015024 bits 20:18) bits 0:2 use field LCLK_OUT_SEL_16 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_16_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_16_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_16_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_16_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_16_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_16_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015024 bits 20:18) bits 0:2 use field LCLK_OUT_SEL_16 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_16_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_16_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_16_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_16_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_16_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_15_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_15_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_15_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_15_set", value );

    /* (0x00015024 bits 17:15) bits 0:2 use field LCLK_OUT_SEL_15 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_15_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_15_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_15_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_15_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015024 bits 17:15) bits 0:2 use field LCLK_OUT_SEL_15 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_15_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_15_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_15_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_15_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_15_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_15_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_15_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_15_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015024 bits 17:15) bits 0:2 use field LCLK_OUT_SEL_15 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015024 bits 17:15) bits 0:2 use field LCLK_OUT_SEL_15 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_15_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_15_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_15_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_15_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_15_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_15_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015024 bits 17:15) bits 0:2 use field LCLK_OUT_SEL_15 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_15_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_15_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_15_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_15_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_15_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_14_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_14_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_14_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_14_set", value );

    /* (0x00015024 bits 14:12) bits 0:2 use field LCLK_OUT_SEL_14 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_14_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_14_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_14_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_14_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015024 bits 14:12) bits 0:2 use field LCLK_OUT_SEL_14 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_14_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_14_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_14_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_14_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_14_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_14_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_14_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_14_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015024 bits 14:12) bits 0:2 use field LCLK_OUT_SEL_14 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015024 bits 14:12) bits 0:2 use field LCLK_OUT_SEL_14 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_14_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_14_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_14_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_14_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_14_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_14_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015024 bits 14:12) bits 0:2 use field LCLK_OUT_SEL_14 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_14_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_14_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_14_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_14_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_14_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_13_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_13_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_13_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_13_set", value );

    /* (0x00015024 bits 11:9) bits 0:2 use field LCLK_OUT_SEL_13 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_13_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_13_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_13_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_13_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015024 bits 11:9) bits 0:2 use field LCLK_OUT_SEL_13 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_13_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_13_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_13_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_13_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_13_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_13_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_13_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_13_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015024 bits 11:9) bits 0:2 use field LCLK_OUT_SEL_13 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015024 bits 11:9) bits 0:2 use field LCLK_OUT_SEL_13 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_13_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_13_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_13_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_13_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_13_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_13_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015024 bits 11:9) bits 0:2 use field LCLK_OUT_SEL_13 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_13_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_13_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_13_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_13_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_13_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_12_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_12_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_12_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_12_set", value );

    /* (0x00015024 bits 8:6) bits 0:2 use field LCLK_OUT_SEL_12 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_12_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_12_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_12_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_12_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015024 bits 8:6) bits 0:2 use field LCLK_OUT_SEL_12 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_12_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_12_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_12_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_12_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_12_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_12_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_12_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_12_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015024 bits 8:6) bits 0:2 use field LCLK_OUT_SEL_12 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015024 bits 8:6) bits 0:2 use field LCLK_OUT_SEL_12 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_12_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_12_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_12_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_12_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_12_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_12_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015024 bits 8:6) bits 0:2 use field LCLK_OUT_SEL_12 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_12_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_12_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_12_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_12_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_12_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_11_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_11_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_11_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_11_set", value );

    /* (0x00015024 bits 5:3) bits 0:2 use field LCLK_OUT_SEL_11 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_11_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_11_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_11_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_11_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015024 bits 5:3) bits 0:2 use field LCLK_OUT_SEL_11 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_11_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_11_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_11_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_11_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_11_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_11_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_11_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_11_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015024 bits 5:3) bits 0:2 use field LCLK_OUT_SEL_11 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015024 bits 5:3) bits 0:2 use field LCLK_OUT_SEL_11 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_11_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_11_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_11_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_11_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_11_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_11_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015024 bits 5:3) bits 0:2 use field LCLK_OUT_SEL_11 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_11_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_11_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_11_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_11_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_11_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_10_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_10_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_10_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_10_set", value );

    /* (0x00015024 bits 2:0) bits 0:2 use field LCLK_OUT_SEL_10 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_10_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_10_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_10_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_10_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015024 bits 2:0) bits 0:2 use field LCLK_OUT_SEL_10 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_10_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_10_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_10_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_10_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_10_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_10_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_10_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_10_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015024 bits 2:0) bits 0:2 use field LCLK_OUT_SEL_10 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015024 bits 2:0) bits 0:2 use field LCLK_OUT_SEL_10 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_10_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_10_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_10_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_10_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_10_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_10_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015024 bits 2:0) bits 0:2 use field LCLK_OUT_SEL_10 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_0_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_10_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_10_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_10_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_0_BIT_LCLK_OUT_SEL_10_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_10_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_9_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_9_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_9_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_9_set", value );

    /* (0x00015028 bits 29:27) bits 0:2 use field LCLK_OUT_SEL_9 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_9_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_9_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_9_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_9_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015028 bits 29:27) bits 0:2 use field LCLK_OUT_SEL_9 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_9_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_9_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_9_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_9_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_9_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_9_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_9_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_9_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015028 bits 29:27) bits 0:2 use field LCLK_OUT_SEL_9 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015028 bits 29:27) bits 0:2 use field LCLK_OUT_SEL_9 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_9_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_9_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_9_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_9_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_9_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_9_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015028 bits 29:27) bits 0:2 use field LCLK_OUT_SEL_9 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_9_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_9_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_9_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_9_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_9_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_8_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_8_set", value );

    /* (0x00015028 bits 26:24) bits 0:2 use field LCLK_OUT_SEL_8 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_8_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_8_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015028 bits 26:24) bits 0:2 use field LCLK_OUT_SEL_8 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_8_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_8_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_8_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_8_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_8_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_8_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015028 bits 26:24) bits 0:2 use field LCLK_OUT_SEL_8 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015028 bits 26:24) bits 0:2 use field LCLK_OUT_SEL_8 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_8_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_8_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_8_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_8_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_8_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_8_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015028 bits 26:24) bits 0:2 use field LCLK_OUT_SEL_8 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_8_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_8_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_8_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_8_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_8_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_7_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_7_set", value );

    /* (0x00015028 bits 23:21) bits 0:2 use field LCLK_OUT_SEL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_7_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_7_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015028 bits 23:21) bits 0:2 use field LCLK_OUT_SEL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_7_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_7_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_7_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_7_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_7_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015028 bits 23:21) bits 0:2 use field LCLK_OUT_SEL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015028 bits 23:21) bits 0:2 use field LCLK_OUT_SEL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_7_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_7_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_7_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_7_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015028 bits 23:21) bits 0:2 use field LCLK_OUT_SEL_7 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_7_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_7_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_6_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_6_set", value );

    /* (0x00015028 bits 20:18) bits 0:2 use field LCLK_OUT_SEL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_6_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_6_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015028 bits 20:18) bits 0:2 use field LCLK_OUT_SEL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_6_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_6_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_6_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_6_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_6_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015028 bits 20:18) bits 0:2 use field LCLK_OUT_SEL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015028 bits 20:18) bits 0:2 use field LCLK_OUT_SEL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_6_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_6_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_6_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_6_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015028 bits 20:18) bits 0:2 use field LCLK_OUT_SEL_6 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_6_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_6_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_5_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_5_set", value );

    /* (0x00015028 bits 17:15) bits 0:2 use field LCLK_OUT_SEL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_5_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_5_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015028 bits 17:15) bits 0:2 use field LCLK_OUT_SEL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_5_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_5_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_5_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_5_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_5_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015028 bits 17:15) bits 0:2 use field LCLK_OUT_SEL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015028 bits 17:15) bits 0:2 use field LCLK_OUT_SEL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_5_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_5_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_5_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_5_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015028 bits 17:15) bits 0:2 use field LCLK_OUT_SEL_5 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_5_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_5_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_4_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_4_set", value );

    /* (0x00015028 bits 14:12) bits 0:2 use field LCLK_OUT_SEL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_4_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_4_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015028 bits 14:12) bits 0:2 use field LCLK_OUT_SEL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_4_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_4_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_4_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_4_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_4_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015028 bits 14:12) bits 0:2 use field LCLK_OUT_SEL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015028 bits 14:12) bits 0:2 use field LCLK_OUT_SEL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_4_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_4_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_4_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_4_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015028 bits 14:12) bits 0:2 use field LCLK_OUT_SEL_4 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_4_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_4_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_3_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_3_set", value );

    /* (0x00015028 bits 11:9) bits 0:2 use field LCLK_OUT_SEL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_3_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_3_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015028 bits 11:9) bits 0:2 use field LCLK_OUT_SEL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_3_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_3_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015028 bits 11:9) bits 0:2 use field LCLK_OUT_SEL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015028 bits 11:9) bits 0:2 use field LCLK_OUT_SEL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_3_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_3_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015028 bits 11:9) bits 0:2 use field LCLK_OUT_SEL_3 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_3_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_3_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_2_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_2_set", value );

    /* (0x00015028 bits 8:6) bits 0:2 use field LCLK_OUT_SEL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_2_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_2_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015028 bits 8:6) bits 0:2 use field LCLK_OUT_SEL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_2_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_2_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015028 bits 8:6) bits 0:2 use field LCLK_OUT_SEL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015028 bits 8:6) bits 0:2 use field LCLK_OUT_SEL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_2_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_2_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015028 bits 8:6) bits 0:2 use field LCLK_OUT_SEL_2 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_2_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_2_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_1_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_1_set", value );

    /* (0x00015028 bits 5:3) bits 0:2 use field LCLK_OUT_SEL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_1_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_1_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015028 bits 5:3) bits 0:2 use field LCLK_OUT_SEL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_1_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_1_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015028 bits 5:3) bits 0:2 use field LCLK_OUT_SEL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015028 bits 5:3) bits 0:2 use field LCLK_OUT_SEL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_1_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_1_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015028 bits 5:3) bits 0:2 use field LCLK_OUT_SEL_1 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_1_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_1_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_0_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_0_set", value );

    /* (0x00015028 bits 2:0) bits 0:2 use field LCLK_OUT_SEL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                           h_ptr,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_0_MSK,
                                                           DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_0_OFF,
                                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015028 bits 2:0) bits 0:2 use field LCLK_OUT_SEL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_0_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_SEL_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_0_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015028 bits 2:0) bits 0:2 use field LCLK_OUT_SEL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015028 bits 2:0) bits 0:2 use field LCLK_OUT_SEL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
        digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_field_set( b_ptr,
                                                               h_ptr,
                                                               subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_0_OFF + subfield_offset),
                                                               DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_0_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_SEL_0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015028 bits 2:0) bits 0:2 use field LCLK_OUT_SEL_0 of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1 */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_SELECTION_1_read( b_ptr,
                                                                  h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_0_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_0_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_SELECTION_1_BIT_LCLK_OUT_SEL_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_SEL_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_MAN_PULS_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_MAN_PULS_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_MAN_PULS_EN_set", value, 1048575);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_MAN_PULS_EN_set", value );

    /* (0x0001502c bits 19:0) bits 0:19 use field LCLK_OUT_MAN_PULS_EN of register PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS */
    digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_field_set( b_ptr,
                                                      h_ptr,
                                                      DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS_BIT_LCLK_OUT_MAN_PULS_EN_MSK,
                                                      DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS_BIT_LCLK_OUT_MAN_PULS_EN_OFF,
                                                      value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_MAN_PULS_EN_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_MAN_PULS_EN_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001502c bits 19:0) bits 0:19 use field LCLK_OUT_MAN_PULS_EN of register PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS */
    reg_value = digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_read( b_ptr,
                                                             h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS_BIT_LCLK_OUT_MAN_PULS_EN_MSK) >> DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS_BIT_LCLK_OUT_MAN_PULS_EN_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_MAN_PULS_EN_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_EN_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_EN_set", stop_bit, 19 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001502c bits 19:0) bits 0:19 use field LCLK_OUT_MAN_PULS_EN of register PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001502c bits 19:0) bits 0:19 use field LCLK_OUT_MAN_PULS_EN of register PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS */
        digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_field_set( b_ptr,
                                                          h_ptr,
                                                          subfield_mask << (DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS_BIT_LCLK_OUT_MAN_PULS_EN_OFF + subfield_offset),
                                                          DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS_BIT_LCLK_OUT_MAN_PULS_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_EN_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                        digi_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_EN_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                        digi_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_EN_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_EN_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001502c bits 19:0) bits 0:19 use field LCLK_OUT_MAN_PULS_EN of register PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS */
    reg_value = digi_pgmrclk_reg_LCLK_MANUAL_PULSE_ENS_read( b_ptr,
                                                             h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS_BIT_LCLK_OUT_MAN_PULS_EN_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS_BIT_LCLK_OUT_MAN_PULS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS_BIT_LCLK_OUT_MAN_PULS_EN_MSK, DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_ENS_BIT_LCLK_OUT_MAN_PULS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_MAN_PULS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_MAN_PULS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_MAN_PULS_set", value, 1048575);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_MAN_PULS_set", value );

    /* (0x00015030 bits 19:0) bits 0:19 use field LCLK_OUT_MAN_PULS of register PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE */
    digi_pgmrclk_reg_LCLK_MANUAL_PULSE_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_BIT_LCLK_OUT_MAN_PULS_MSK,
                                                  DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_BIT_LCLK_OUT_MAN_PULS_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_MAN_PULS_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_MAN_PULS_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015030 bits 19:0) bits 0:19 use field LCLK_OUT_MAN_PULS of register PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE */
    reg_value = digi_pgmrclk_reg_LCLK_MANUAL_PULSE_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_BIT_LCLK_OUT_MAN_PULS_MSK) >> DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_BIT_LCLK_OUT_MAN_PULS_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_MAN_PULS_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_set", stop_bit, 19 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015030 bits 19:0) bits 0:19 use field LCLK_OUT_MAN_PULS of register PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015030 bits 19:0) bits 0:19 use field LCLK_OUT_MAN_PULS of register PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE */
        digi_pgmrclk_reg_LCLK_MANUAL_PULSE_field_set( b_ptr,
                                                      h_ptr,
                                                      subfield_mask << (DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_BIT_LCLK_OUT_MAN_PULS_OFF + subfield_offset),
                                                      DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_BIT_LCLK_OUT_MAN_PULS_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015030 bits 19:0) bits 0:19 use field LCLK_OUT_MAN_PULS of register PMC_DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE */
    reg_value = digi_pgmrclk_reg_LCLK_MANUAL_PULSE_read( b_ptr,
                                                         h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_BIT_LCLK_OUT_MAN_PULS_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_BIT_LCLK_OUT_MAN_PULS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_BIT_LCLK_OUT_MAN_PULS_MSK, DIGI_PGMRCLK_REG_LCLK_MANUAL_PULSE_BIT_LCLK_OUT_MAN_PULS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_MAN_PULS_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_OUT_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_OUT_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_OUT_EN_set", value, 1048575);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_OUT_EN_set", value );

    /* (0x00015034 bits 19:0) bits 0:19 use field LCLK_OUT_EN of register PMC_DIGI_PGMRCLK_REG_LCLK_ENS */
    digi_pgmrclk_reg_LCLK_ENS_field_set( b_ptr,
                                         h_ptr,
                                         DIGI_PGMRCLK_REG_LCLK_ENS_BIT_LCLK_OUT_EN_MSK,
                                         DIGI_PGMRCLK_REG_LCLK_ENS_BIT_LCLK_OUT_EN_OFF,
                                         value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_EN_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_OUT_EN_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015034 bits 19:0) bits 0:19 use field LCLK_OUT_EN of register PMC_DIGI_PGMRCLK_REG_LCLK_ENS */
    reg_value = digi_pgmrclk_reg_LCLK_ENS_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_ENS_BIT_LCLK_OUT_EN_MSK) >> DIGI_PGMRCLK_REG_LCLK_ENS_BIT_LCLK_OUT_EN_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_OUT_EN_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_OUT_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_EN_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_EN_set", stop_bit, 19 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_EN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015034 bits 19:0) bits 0:19 use field LCLK_OUT_EN of register PMC_DIGI_PGMRCLK_REG_LCLK_ENS */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015034 bits 19:0) bits 0:19 use field LCLK_OUT_EN of register PMC_DIGI_PGMRCLK_REG_LCLK_ENS */
        digi_pgmrclk_reg_LCLK_ENS_field_set( b_ptr,
                                             h_ptr,
                                             subfield_mask << (DIGI_PGMRCLK_REG_LCLK_ENS_BIT_LCLK_OUT_EN_OFF + subfield_offset),
                                             DIGI_PGMRCLK_REG_LCLK_ENS_BIT_LCLK_OUT_EN_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_EN_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_OUT_EN_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_OUT_EN_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_OUT_EN_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015034 bits 19:0) bits 0:19 use field LCLK_OUT_EN of register PMC_DIGI_PGMRCLK_REG_LCLK_ENS */
    reg_value = digi_pgmrclk_reg_LCLK_ENS_read(  b_ptr, h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_ENS_BIT_LCLK_OUT_EN_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_ENS_BIT_LCLK_OUT_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_ENS_BIT_LCLK_OUT_EN_MSK, DIGI_PGMRCLK_REG_LCLK_ENS_BIT_LCLK_OUT_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_OUT_EN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_BYPASS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_BYPASS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_BYPASS_set", value, 255);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_BYPASS_set", value );

    /* (0x00015038 bits 7:0) bits 0:7 use field LCLK_GEN_BYPASS of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS */
    digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_field_set( b_ptr,
                                                      h_ptr,
                                                      DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS_BIT_LCLK_GEN_BYPASS_MSK,
                                                      DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS_BIT_LCLK_GEN_BYPASS_OFF,
                                                      value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_BYPASS_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_BYPASS_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015038 bits 7:0) bits 0:7 use field LCLK_GEN_BYPASS of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_read( b_ptr,
                                                             h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS_BIT_LCLK_GEN_BYPASS_MSK) >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS_BIT_LCLK_GEN_BYPASS_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_BYPASS_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_LCLK_GEN_BYPASS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_LCLK_GEN_BYPASS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_GEN_BYPASS_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_GEN_BYPASS_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_GEN_BYPASS_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015038 bits 7:0) bits 0:7 use field LCLK_GEN_BYPASS of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015038 bits 7:0) bits 0:7 use field LCLK_GEN_BYPASS of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS */
        digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_field_set( b_ptr,
                                                          h_ptr,
                                                          subfield_mask << (DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS_BIT_LCLK_GEN_BYPASS_OFF + subfield_offset),
                                                          DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS_BIT_LCLK_GEN_BYPASS_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_LCLK_GEN_BYPASS_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_LCLK_GEN_BYPASS_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_LCLK_GEN_BYPASS_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_LCLK_GEN_BYPASS_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015038 bits 7:0) bits 0:7 use field LCLK_GEN_BYPASS of register PMC_DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS */
    reg_value = digi_pgmrclk_reg_LCLK_GENERATOR_BYPASS_read( b_ptr,
                                                             h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS_BIT_LCLK_GEN_BYPASS_MSK)
                  >> DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS_BIT_LCLK_GEN_BYPASS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS_BIT_LCLK_GEN_BYPASS_MSK, DIGI_PGMRCLK_REG_LCLK_GENERATOR_BYPASS_BIT_LCLK_GEN_BYPASS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_LCLK_GEN_BYPASS_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_MISC_FPI_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MISC_FPI_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MISC_FPI_8_set", value, 7);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MISC_FPI_8_set", value );

    /* (0x00015044 bits 29:27) bits 0:2 use field MISC_FPI_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MISC_FPI_8_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MISC_FPI_8_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_MISC_FPI_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MISC_FPI_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 29:27) bits 0:2 use field MISC_FPI_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MISC_FPI_8_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MISC_FPI_8_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MISC_FPI_8_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MISC_FPI_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MISC_FPI_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_FPI_8_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_FPI_8_set", stop_bit, 2 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_FPI_8_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015044 bits 29:27) bits 0:2 use field MISC_FPI_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015044 bits 29:27) bits 0:2 use field MISC_FPI_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
        digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                      h_ptr,
                                                      subfield_mask << (DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MISC_FPI_8_OFF + subfield_offset),
                                                      DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MISC_FPI_8_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MISC_FPI_8_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MISC_FPI_8_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MISC_FPI_8_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MISC_FPI_8_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015044 bits 29:27) bits 0:2 use field MISC_FPI_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MISC_FPI_8_MSK)
                  >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MISC_FPI_8_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MISC_FPI_8_MSK, DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MISC_FPI_8_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MISC_FPI_8_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_AUTO_LCLKOUT_EN_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_8_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_8_set", value );

    /* (0x00015044 bits 26) field AUTO_LCLKOUT_EN_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_AUTO_LCLKOUT_EN_8_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_AUTO_LCLKOUT_EN_8_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_AUTO_LCLKOUT_EN_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 26) field AUTO_LCLKOUT_EN_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_AUTO_LCLKOUT_EN_8_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_AUTO_LCLKOUT_EN_8_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_AUTO_LCLKOUT_EN_8_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_FPI_PULS_GEN_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FPI_PULS_GEN_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FPI_PULS_GEN_8_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FPI_PULS_GEN_8_set", value );

    /* (0x00015044 bits 25) field FPI_PULS_GEN_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_PULS_GEN_8_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_PULS_GEN_8_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_PULS_GEN_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_PULS_GEN_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 25) field FPI_PULS_GEN_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_PULS_GEN_8_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_PULS_GEN_8_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_PULS_GEN_8_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_INTERVAL_RST_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_INTERVAL_RST_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_8_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_8_set", value );

    /* (0x00015044 bits 24) field INTERVAL_RST_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_INTERVAL_RST_8_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_INTERVAL_RST_8_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_INTERVAL_RST_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 24) field INTERVAL_RST_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_INTERVAL_RST_8_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_INTERVAL_RST_8_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_INTERVAL_RST_8_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_INTERVAL_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_8_set", value, 16383);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_8_set", value );

    /* (0x00015044 bits 23:10) bits 0:13 use field SYNC_INTERVAL_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_INTERVAL_8_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_INTERVAL_8_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_INTERVAL_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 23:10) bits 0:13 use field SYNC_INTERVAL_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_INTERVAL_8_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_INTERVAL_8_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_INTERVAL_8_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_SYNC_INTERVAL_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_8_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_8_set", stop_bit, 13 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_8_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015044 bits 23:10) bits 0:13 use field SYNC_INTERVAL_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015044 bits 23:10) bits 0:13 use field SYNC_INTERVAL_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
        digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                      h_ptr,
                                                      subfield_mask << (DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_INTERVAL_8_OFF + subfield_offset),
                                                      DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_INTERVAL_8_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_8_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_SYNC_INTERVAL_8_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SYNC_INTERVAL_8_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SYNC_INTERVAL_8_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015044 bits 23:10) bits 0:13 use field SYNC_INTERVAL_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_INTERVAL_8_MSK)
                  >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_INTERVAL_8_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_INTERVAL_8_MSK, DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_INTERVAL_8_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SYNC_INTERVAL_8_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_SYNC_DISABLE_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_8_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_8_set", value );

    /* (0x00015044 bits 9) field SYNC_DISABLE_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_DISABLE_8_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_DISABLE_8_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SYNC_DISABLE_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 9) field SYNC_DISABLE_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_DISABLE_8_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_SYNC_DISABLE_8_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SYNC_DISABLE_8_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_CNTR_ENABLE_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_8_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_8_set", value );

    /* (0x00015044 bits 8) field CNTR_ENABLE_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_CNTR_ENABLE_8_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_CNTR_ENABLE_8_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_CNTR_ENABLE_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 8) field CNTR_ENABLE_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_CNTR_ENABLE_8_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_CNTR_ENABLE_8_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_CNTR_ENABLE_8_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_MASK_WINDOW_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_MASK_WINDOW_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                         digi_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_8_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_8_set", value );

    /* (0x00015044 bits 7:4) bits 0:3 use field MASK_WINDOW_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MASK_WINDOW_8_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MASK_WINDOW_8_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_MASK_WINDOW_8_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 7:4) bits 0:3 use field MASK_WINDOW_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MASK_WINDOW_8_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MASK_WINDOW_8_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_MASK_WINDOW_8_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_MASK_WINDOW_8_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_8_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_8_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_8_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015044 bits 7:4) bits 0:3 use field MASK_WINDOW_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015044 bits 7:4) bits 0:3 use field MASK_WINDOW_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
        digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                      h_ptr,
                                                      subfield_mask << (DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MASK_WINDOW_8_OFF + subfield_offset),
                                                      DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MASK_WINDOW_8_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_8_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_MASK_WINDOW_8_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_MASK_WINDOW_8_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_MASK_WINDOW_8_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015044 bits 7:4) bits 0:3 use field MASK_WINDOW_8 of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MASK_WINDOW_8_MSK)
                  >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MASK_WINDOW_8_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MASK_WINDOW_8_MSK, DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_MASK_WINDOW_8_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_MASK_WINDOW_8_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FPI_GEN_BYPASS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FPI_GEN_BYPASS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FPI_GEN_BYPASS_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FPI_GEN_BYPASS_set", value );

    /* (0x00015044 bits 3) field FPI_GEN_BYPASS of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_GEN_BYPASS_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_GEN_BYPASS_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_GEN_BYPASS_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_GEN_BYPASS_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 3) field FPI_GEN_BYPASS of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_GEN_BYPASS_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_GEN_BYPASS_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_GEN_BYPASS_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_FPI_OUT_MAN_PULS_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FPI_OUT_MAN_PULS_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FPI_OUT_MAN_PULS_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FPI_OUT_MAN_PULS_EN_set", value );

    /* (0x00015044 bits 2) field FPI_OUT_MAN_PULS_EN of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_MAN_PULS_EN_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_MAN_PULS_EN_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_MAN_PULS_EN_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_MAN_PULS_EN_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 2) field FPI_OUT_MAN_PULS_EN of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_MAN_PULS_EN_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_MAN_PULS_EN_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_OUT_MAN_PULS_EN_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_FPI_OUT_MAN_PULS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FPI_OUT_MAN_PULS_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FPI_OUT_MAN_PULS_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FPI_OUT_MAN_PULS_set", value );

    /* (0x00015044 bits 1) field FPI_OUT_MAN_PULS of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_MAN_PULS_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_MAN_PULS_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_MAN_PULS_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_MAN_PULS_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 1) field FPI_OUT_MAN_PULS of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_MAN_PULS_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_MAN_PULS_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_OUT_MAN_PULS_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_FPI_OUT_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FPI_OUT_EN_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FPI_OUT_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FPI_OUT_EN_set", value );

    /* (0x00015044 bits 0) field FPI_OUT_EN of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    digi_pgmrclk_reg_FPI_GENERATOR_CFG_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_EN_MSK,
                                                  DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_EN_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_EN_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_EN_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015044 bits 0) field FPI_OUT_EN of register PMC_DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG */
    reg_value = digi_pgmrclk_reg_FPI_GENERATOR_CFG_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_EN_MSK) >> DIGI_PGMRCLK_REG_FPI_GENERATOR_CFG_BIT_FPI_OUT_EN_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_OUT_EN_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_MASK_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_MASK_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_MASK_0_set", value, 262143);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_MASK_0_set", value );

    /* (0x0001504c bits 17:0) bits 0:17 use field TIP_MASK_0 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_0 */
    digi_pgmrclk_reg_TIP_MASK_0_field_set( b_ptr,
                                           h_ptr,
                                           DIGI_PGMRCLK_REG_TIP_MASK_0_BIT_TIP_MASK_0_MSK,
                                           DIGI_PGMRCLK_REG_TIP_MASK_0_BIT_TIP_MASK_0_OFF,
                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001504c bits 17:0) bits 0:17 use field TIP_MASK_0 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_0 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_0_BIT_TIP_MASK_0_MSK) >> DIGI_PGMRCLK_REG_TIP_MASK_0_BIT_TIP_MASK_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_MASK_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_TIP_MASK_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_TIP_MASK_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_0_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_0_set", stop_bit, 17 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001504c bits 17:0) bits 0:17 use field TIP_MASK_0 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001504c bits 17:0) bits 0:17 use field TIP_MASK_0 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_0 */
        digi_pgmrclk_reg_TIP_MASK_0_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (DIGI_PGMRCLK_REG_TIP_MASK_0_BIT_TIP_MASK_0_OFF + subfield_offset),
                                               DIGI_PGMRCLK_REG_TIP_MASK_0_BIT_TIP_MASK_0_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_0_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_0_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001504c bits 17:0) bits 0:17 use field TIP_MASK_0 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_0 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_0_read(  b_ptr, h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_0_BIT_TIP_MASK_0_MSK)
                  >> DIGI_PGMRCLK_REG_TIP_MASK_0_BIT_TIP_MASK_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_TIP_MASK_0_BIT_TIP_MASK_0_MSK, DIGI_PGMRCLK_REG_TIP_MASK_0_BIT_TIP_MASK_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_MASK_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_MASK_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_MASK_1_set", value, 262143);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_MASK_1_set", value );

    /* (0x00015050 bits 17:0) bits 0:17 use field TIP_MASK_1 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_1 */
    digi_pgmrclk_reg_TIP_MASK_1_field_set( b_ptr,
                                           h_ptr,
                                           DIGI_PGMRCLK_REG_TIP_MASK_1_BIT_TIP_MASK_1_MSK,
                                           DIGI_PGMRCLK_REG_TIP_MASK_1_BIT_TIP_MASK_1_OFF,
                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015050 bits 17:0) bits 0:17 use field TIP_MASK_1 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_1 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_1_BIT_TIP_MASK_1_MSK) >> DIGI_PGMRCLK_REG_TIP_MASK_1_BIT_TIP_MASK_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_MASK_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_TIP_MASK_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_TIP_MASK_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_1_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_1_set", stop_bit, 17 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015050 bits 17:0) bits 0:17 use field TIP_MASK_1 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015050 bits 17:0) bits 0:17 use field TIP_MASK_1 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_1 */
        digi_pgmrclk_reg_TIP_MASK_1_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (DIGI_PGMRCLK_REG_TIP_MASK_1_BIT_TIP_MASK_1_OFF + subfield_offset),
                                               DIGI_PGMRCLK_REG_TIP_MASK_1_BIT_TIP_MASK_1_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_1_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_1_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015050 bits 17:0) bits 0:17 use field TIP_MASK_1 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_1 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_1_read(  b_ptr, h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_1_BIT_TIP_MASK_1_MSK)
                  >> DIGI_PGMRCLK_REG_TIP_MASK_1_BIT_TIP_MASK_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_TIP_MASK_1_BIT_TIP_MASK_1_MSK, DIGI_PGMRCLK_REG_TIP_MASK_1_BIT_TIP_MASK_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_MASK_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_MASK_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_MASK_2_set", value, 262143);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_MASK_2_set", value );

    /* (0x00015054 bits 17:0) bits 0:17 use field TIP_MASK_2 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_2 */
    digi_pgmrclk_reg_TIP_MASK_2_field_set( b_ptr,
                                           h_ptr,
                                           DIGI_PGMRCLK_REG_TIP_MASK_2_BIT_TIP_MASK_2_MSK,
                                           DIGI_PGMRCLK_REG_TIP_MASK_2_BIT_TIP_MASK_2_OFF,
                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015054 bits 17:0) bits 0:17 use field TIP_MASK_2 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_2 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_2_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_2_BIT_TIP_MASK_2_MSK) >> DIGI_PGMRCLK_REG_TIP_MASK_2_BIT_TIP_MASK_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_MASK_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_TIP_MASK_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_TIP_MASK_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_2_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_2_set", stop_bit, 17 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015054 bits 17:0) bits 0:17 use field TIP_MASK_2 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015054 bits 17:0) bits 0:17 use field TIP_MASK_2 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_2 */
        digi_pgmrclk_reg_TIP_MASK_2_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (DIGI_PGMRCLK_REG_TIP_MASK_2_BIT_TIP_MASK_2_OFF + subfield_offset),
                                               DIGI_PGMRCLK_REG_TIP_MASK_2_BIT_TIP_MASK_2_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_2_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_2_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015054 bits 17:0) bits 0:17 use field TIP_MASK_2 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_2 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_2_read(  b_ptr, h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_2_BIT_TIP_MASK_2_MSK)
                  >> DIGI_PGMRCLK_REG_TIP_MASK_2_BIT_TIP_MASK_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_TIP_MASK_2_BIT_TIP_MASK_2_MSK, DIGI_PGMRCLK_REG_TIP_MASK_2_BIT_TIP_MASK_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_MASK_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_MASK_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_MASK_3_set", value, 262143);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_MASK_3_set", value );

    /* (0x00015058 bits 17:0) bits 0:17 use field TIP_MASK_3 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_3 */
    digi_pgmrclk_reg_TIP_MASK_3_field_set( b_ptr,
                                           h_ptr,
                                           DIGI_PGMRCLK_REG_TIP_MASK_3_BIT_TIP_MASK_3_MSK,
                                           DIGI_PGMRCLK_REG_TIP_MASK_3_BIT_TIP_MASK_3_OFF,
                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015058 bits 17:0) bits 0:17 use field TIP_MASK_3 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_3 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_3_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_3_BIT_TIP_MASK_3_MSK) >> DIGI_PGMRCLK_REG_TIP_MASK_3_BIT_TIP_MASK_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_MASK_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_TIP_MASK_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_TIP_MASK_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_3_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_3_set", stop_bit, 17 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015058 bits 17:0) bits 0:17 use field TIP_MASK_3 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015058 bits 17:0) bits 0:17 use field TIP_MASK_3 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_3 */
        digi_pgmrclk_reg_TIP_MASK_3_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (DIGI_PGMRCLK_REG_TIP_MASK_3_BIT_TIP_MASK_3_OFF + subfield_offset),
                                               DIGI_PGMRCLK_REG_TIP_MASK_3_BIT_TIP_MASK_3_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_3_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_3_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015058 bits 17:0) bits 0:17 use field TIP_MASK_3 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_3 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_3_read(  b_ptr, h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_3_BIT_TIP_MASK_3_MSK)
                  >> DIGI_PGMRCLK_REG_TIP_MASK_3_BIT_TIP_MASK_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_TIP_MASK_3_BIT_TIP_MASK_3_MSK, DIGI_PGMRCLK_REG_TIP_MASK_3_BIT_TIP_MASK_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_MASK_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_MASK_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_MASK_4_set", value, 262143);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_MASK_4_set", value );

    /* (0x0001505c bits 17:0) bits 0:17 use field TIP_MASK_4 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_4 */
    digi_pgmrclk_reg_TIP_MASK_4_field_set( b_ptr,
                                           h_ptr,
                                           DIGI_PGMRCLK_REG_TIP_MASK_4_BIT_TIP_MASK_4_MSK,
                                           DIGI_PGMRCLK_REG_TIP_MASK_4_BIT_TIP_MASK_4_OFF,
                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_4_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001505c bits 17:0) bits 0:17 use field TIP_MASK_4 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_4 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_4_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_4_BIT_TIP_MASK_4_MSK) >> DIGI_PGMRCLK_REG_TIP_MASK_4_BIT_TIP_MASK_4_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_MASK_4_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_TIP_MASK_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_TIP_MASK_4_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_4_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_4_set", stop_bit, 17 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001505c bits 17:0) bits 0:17 use field TIP_MASK_4 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001505c bits 17:0) bits 0:17 use field TIP_MASK_4 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_4 */
        digi_pgmrclk_reg_TIP_MASK_4_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (DIGI_PGMRCLK_REG_TIP_MASK_4_BIT_TIP_MASK_4_OFF + subfield_offset),
                                               DIGI_PGMRCLK_REG_TIP_MASK_4_BIT_TIP_MASK_4_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_4_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_4_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_4_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001505c bits 17:0) bits 0:17 use field TIP_MASK_4 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_4 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_4_read(  b_ptr, h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_4_BIT_TIP_MASK_4_MSK)
                  >> DIGI_PGMRCLK_REG_TIP_MASK_4_BIT_TIP_MASK_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_TIP_MASK_4_BIT_TIP_MASK_4_MSK, DIGI_PGMRCLK_REG_TIP_MASK_4_BIT_TIP_MASK_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_MASK_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_MASK_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_MASK_5_set", value, 262143);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_MASK_5_set", value );

    /* (0x00015060 bits 17:0) bits 0:17 use field TIP_MASK_5 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_5 */
    digi_pgmrclk_reg_TIP_MASK_5_field_set( b_ptr,
                                           h_ptr,
                                           DIGI_PGMRCLK_REG_TIP_MASK_5_BIT_TIP_MASK_5_MSK,
                                           DIGI_PGMRCLK_REG_TIP_MASK_5_BIT_TIP_MASK_5_OFF,
                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_5_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015060 bits 17:0) bits 0:17 use field TIP_MASK_5 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_5 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_5_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_5_BIT_TIP_MASK_5_MSK) >> DIGI_PGMRCLK_REG_TIP_MASK_5_BIT_TIP_MASK_5_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_MASK_5_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_TIP_MASK_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_TIP_MASK_5_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_5_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_5_set", stop_bit, 17 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015060 bits 17:0) bits 0:17 use field TIP_MASK_5 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015060 bits 17:0) bits 0:17 use field TIP_MASK_5 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_5 */
        digi_pgmrclk_reg_TIP_MASK_5_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (DIGI_PGMRCLK_REG_TIP_MASK_5_BIT_TIP_MASK_5_OFF + subfield_offset),
                                               DIGI_PGMRCLK_REG_TIP_MASK_5_BIT_TIP_MASK_5_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_5_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_5_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_5_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015060 bits 17:0) bits 0:17 use field TIP_MASK_5 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_5 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_5_read(  b_ptr, h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_5_BIT_TIP_MASK_5_MSK)
                  >> DIGI_PGMRCLK_REG_TIP_MASK_5_BIT_TIP_MASK_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_TIP_MASK_5_BIT_TIP_MASK_5_MSK, DIGI_PGMRCLK_REG_TIP_MASK_5_BIT_TIP_MASK_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_MASK_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_MASK_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_MASK_6_set", value, 262143);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_MASK_6_set", value );

    /* (0x00015064 bits 17:0) bits 0:17 use field TIP_MASK_6 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_6 */
    digi_pgmrclk_reg_TIP_MASK_6_field_set( b_ptr,
                                           h_ptr,
                                           DIGI_PGMRCLK_REG_TIP_MASK_6_BIT_TIP_MASK_6_MSK,
                                           DIGI_PGMRCLK_REG_TIP_MASK_6_BIT_TIP_MASK_6_OFF,
                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_6_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015064 bits 17:0) bits 0:17 use field TIP_MASK_6 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_6 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_6_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_6_BIT_TIP_MASK_6_MSK) >> DIGI_PGMRCLK_REG_TIP_MASK_6_BIT_TIP_MASK_6_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_MASK_6_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_TIP_MASK_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_TIP_MASK_6_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_6_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_6_set", stop_bit, 17 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015064 bits 17:0) bits 0:17 use field TIP_MASK_6 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015064 bits 17:0) bits 0:17 use field TIP_MASK_6 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_6 */
        digi_pgmrclk_reg_TIP_MASK_6_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (DIGI_PGMRCLK_REG_TIP_MASK_6_BIT_TIP_MASK_6_OFF + subfield_offset),
                                               DIGI_PGMRCLK_REG_TIP_MASK_6_BIT_TIP_MASK_6_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_6_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_6_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_6_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015064 bits 17:0) bits 0:17 use field TIP_MASK_6 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_6 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_6_read(  b_ptr, h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_6_BIT_TIP_MASK_6_MSK)
                  >> DIGI_PGMRCLK_REG_TIP_MASK_6_BIT_TIP_MASK_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_TIP_MASK_6_BIT_TIP_MASK_6_MSK, DIGI_PGMRCLK_REG_TIP_MASK_6_BIT_TIP_MASK_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_MASK_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_MASK_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_MASK_7_set", value, 262143);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_MASK_7_set", value );

    /* (0x00015068 bits 17:0) bits 0:17 use field TIP_MASK_7 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_7 */
    digi_pgmrclk_reg_TIP_MASK_7_field_set( b_ptr,
                                           h_ptr,
                                           DIGI_PGMRCLK_REG_TIP_MASK_7_BIT_TIP_MASK_7_MSK,
                                           DIGI_PGMRCLK_REG_TIP_MASK_7_BIT_TIP_MASK_7_OFF,
                                           value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_MASK_7_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015068 bits 17:0) bits 0:17 use field TIP_MASK_7 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_7 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_7_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_7_BIT_TIP_MASK_7_MSK) >> DIGI_PGMRCLK_REG_TIP_MASK_7_BIT_TIP_MASK_7_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_MASK_7_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_TIP_MASK_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_TIP_MASK_7_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_7_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_7_set", stop_bit, 17 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015068 bits 17:0) bits 0:17 use field TIP_MASK_7 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015068 bits 17:0) bits 0:17 use field TIP_MASK_7 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_7 */
        digi_pgmrclk_reg_TIP_MASK_7_field_set( b_ptr,
                                               h_ptr,
                                               subfield_mask << (DIGI_PGMRCLK_REG_TIP_MASK_7_BIT_TIP_MASK_7_OFF + subfield_offset),
                                               DIGI_PGMRCLK_REG_TIP_MASK_7_BIT_TIP_MASK_7_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_TIP_MASK_7_get( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_TIP_MASK_7_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_TIP_MASK_7_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015068 bits 17:0) bits 0:17 use field TIP_MASK_7 of register PMC_DIGI_PGMRCLK_REG_TIP_MASK_7 */
    reg_value = digi_pgmrclk_reg_TIP_MASK_7_read(  b_ptr, h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_TIP_MASK_7_BIT_TIP_MASK_7_MSK)
                  >> DIGI_PGMRCLK_REG_TIP_MASK_7_BIT_TIP_MASK_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_TIP_MASK_7_BIT_TIP_MASK_7_MSK, DIGI_PGMRCLK_REG_TIP_MASK_7_BIT_TIP_MASK_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_TIP_MASK_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_CLK_MUX_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_CLK_MUX_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_0_set", value, 511);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_0_set", value );

    /* (0x00015084 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT */
    digi_pgmrclk_reg_FDIV_0_CLK_SELECT_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_0_MSK,
                                                  DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_0_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_CLK_MUX_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_CLK_MUX_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015084 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT */
    reg_value = digi_pgmrclk_reg_FDIV_0_CLK_SELECT_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_0_MSK) >> DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_0_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_0_set", stop_bit, 8 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015084 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015084 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT */
        digi_pgmrclk_reg_FDIV_0_CLK_SELECT_field_set( b_ptr,
                                                      h_ptr,
                                                      subfield_mask << (DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_0_OFF + subfield_offset),
                                                      DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_0_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_0_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_0_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015084 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT */
    reg_value = digi_pgmrclk_reg_FDIV_0_CLK_SELECT_read( b_ptr,
                                                         h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_0_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_0_MSK, DIGI_PGMRCLK_REG_FDIV_0_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_CLK_MUX_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_CLK_MUX_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_1_set", value, 511);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_1_set", value );

    /* (0x00015088 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT */
    digi_pgmrclk_reg_FDIV_1_CLK_SELECT_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_1_MSK,
                                                  DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_1_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_CLK_MUX_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_CLK_MUX_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015088 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT */
    reg_value = digi_pgmrclk_reg_FDIV_1_CLK_SELECT_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_1_MSK) >> DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_1_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_1_set", stop_bit, 8 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015088 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015088 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT */
        digi_pgmrclk_reg_FDIV_1_CLK_SELECT_field_set( b_ptr,
                                                      h_ptr,
                                                      subfield_mask << (DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_1_OFF + subfield_offset),
                                                      DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_1_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_1_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015088 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT */
    reg_value = digi_pgmrclk_reg_FDIV_1_CLK_SELECT_read( b_ptr,
                                                         h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_1_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_1_MSK, DIGI_PGMRCLK_REG_FDIV_1_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_CLK_MUX_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_CLK_MUX_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_2_set", value, 511);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_2_set", value );

    /* (0x0001508c bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT */
    digi_pgmrclk_reg_FDIV_2_CLK_SELECT_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_2_MSK,
                                                  DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_2_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_CLK_MUX_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_CLK_MUX_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001508c bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT */
    reg_value = digi_pgmrclk_reg_FDIV_2_CLK_SELECT_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_2_MSK) >> DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_2_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_2_set", stop_bit, 8 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001508c bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001508c bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT */
        digi_pgmrclk_reg_FDIV_2_CLK_SELECT_field_set( b_ptr,
                                                      h_ptr,
                                                      subfield_mask << (DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_2_OFF + subfield_offset),
                                                      DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_2_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_2_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_2_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001508c bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT */
    reg_value = digi_pgmrclk_reg_FDIV_2_CLK_SELECT_read( b_ptr,
                                                         h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_2_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_2_MSK, DIGI_PGMRCLK_REG_FDIV_2_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_CLK_MUX_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_CLK_MUX_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_3_set", value, 511);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_3_set", value );

    /* (0x00015090 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT */
    digi_pgmrclk_reg_FDIV_3_CLK_SELECT_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_3_MSK,
                                                  DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_3_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_CLK_MUX_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_CLK_MUX_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015090 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT */
    reg_value = digi_pgmrclk_reg_FDIV_3_CLK_SELECT_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_3_MSK) >> DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_CLK_MUX_SEL_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_3_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_3_set", stop_bit, 8 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015090 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015090 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT */
        digi_pgmrclk_reg_FDIV_3_CLK_SELECT_field_set( b_ptr,
                                                      h_ptr,
                                                      subfield_mask << (DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_3_OFF + subfield_offset),
                                                      DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_3_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_3_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015090 bits 8:0) bits 0:8 use field FDIV_CLK_MUX_SEL_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT */
    reg_value = digi_pgmrclk_reg_FDIV_3_CLK_SELECT_read( b_ptr,
                                                         h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_3_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_3_MSK, DIGI_PGMRCLK_REG_FDIV_3_CLK_SELECT_BIT_FDIV_CLK_MUX_SEL_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_CLK_MUX_SEL_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_INTEGER_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_INTEGER_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_INTEGER_0_set", value );

    /* (0x00015094 bits 31:0) bits 0:31 use field FDIV_INTEGER_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_INTEGER */
    digi_pgmrclk_reg_FDIV_0_INTEGER_field_set( b_ptr,
                                               h_ptr,
                                               DIGI_PGMRCLK_REG_FDIV_0_INTEGER_BIT_FDIV_INTEGER_0_MSK,
                                               DIGI_PGMRCLK_REG_FDIV_0_INTEGER_BIT_FDIV_INTEGER_0_OFF,
                                               value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_INTEGER_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_INTEGER_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015094 bits 31:0) bits 0:31 use field FDIV_INTEGER_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_INTEGER */
    reg_value = digi_pgmrclk_reg_FDIV_0_INTEGER_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_0_INTEGER_BIT_FDIV_INTEGER_0_MSK) >> DIGI_PGMRCLK_REG_FDIV_0_INTEGER_BIT_FDIV_INTEGER_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_INTEGER_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_INTEGER_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_INTEGER_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_INTEGER_0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_INTEGER_0_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_INTEGER_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015094 bits 31:0) bits 0:31 use field FDIV_INTEGER_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_INTEGER */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015094 bits 31:0) bits 0:31 use field FDIV_INTEGER_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_INTEGER */
        digi_pgmrclk_reg_FDIV_0_INTEGER_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (DIGI_PGMRCLK_REG_FDIV_0_INTEGER_BIT_FDIV_INTEGER_0_OFF + subfield_offset),
                                                   DIGI_PGMRCLK_REG_FDIV_0_INTEGER_BIT_FDIV_INTEGER_0_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_INTEGER_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_INTEGER_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_INTEGER_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_INTEGER_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015094 bits 31:0) bits 0:31 use field FDIV_INTEGER_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_INTEGER */
    reg_value = digi_pgmrclk_reg_FDIV_0_INTEGER_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_0_INTEGER_BIT_FDIV_INTEGER_0_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_0_INTEGER_BIT_FDIV_INTEGER_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_0_INTEGER_BIT_FDIV_INTEGER_0_MSK, DIGI_PGMRCLK_REG_FDIV_0_INTEGER_BIT_FDIV_INTEGER_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_INTEGER_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_INTEGER_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_INTEGER_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_INTEGER_1_set", value );

    /* (0x00015098 bits 31:0) bits 0:31 use field FDIV_INTEGER_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_INTEGER */
    digi_pgmrclk_reg_FDIV_1_INTEGER_field_set( b_ptr,
                                               h_ptr,
                                               DIGI_PGMRCLK_REG_FDIV_1_INTEGER_BIT_FDIV_INTEGER_1_MSK,
                                               DIGI_PGMRCLK_REG_FDIV_1_INTEGER_BIT_FDIV_INTEGER_1_OFF,
                                               value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_INTEGER_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_INTEGER_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015098 bits 31:0) bits 0:31 use field FDIV_INTEGER_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_INTEGER */
    reg_value = digi_pgmrclk_reg_FDIV_1_INTEGER_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_1_INTEGER_BIT_FDIV_INTEGER_1_MSK) >> DIGI_PGMRCLK_REG_FDIV_1_INTEGER_BIT_FDIV_INTEGER_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_INTEGER_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_INTEGER_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_INTEGER_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_INTEGER_1_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_INTEGER_1_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_INTEGER_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00015098 bits 31:0) bits 0:31 use field FDIV_INTEGER_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_INTEGER */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00015098 bits 31:0) bits 0:31 use field FDIV_INTEGER_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_INTEGER */
        digi_pgmrclk_reg_FDIV_1_INTEGER_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (DIGI_PGMRCLK_REG_FDIV_1_INTEGER_BIT_FDIV_INTEGER_1_OFF + subfield_offset),
                                                   DIGI_PGMRCLK_REG_FDIV_1_INTEGER_BIT_FDIV_INTEGER_1_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_INTEGER_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_INTEGER_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_INTEGER_1_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_INTEGER_1_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015098 bits 31:0) bits 0:31 use field FDIV_INTEGER_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_INTEGER */
    reg_value = digi_pgmrclk_reg_FDIV_1_INTEGER_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_1_INTEGER_BIT_FDIV_INTEGER_1_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_1_INTEGER_BIT_FDIV_INTEGER_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_1_INTEGER_BIT_FDIV_INTEGER_1_MSK, DIGI_PGMRCLK_REG_FDIV_1_INTEGER_BIT_FDIV_INTEGER_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_INTEGER_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_INTEGER_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_INTEGER_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_INTEGER_2_set", value );

    /* (0x0001509c bits 31:0) bits 0:31 use field FDIV_INTEGER_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_INTEGER */
    digi_pgmrclk_reg_FDIV_2_INTEGER_field_set( b_ptr,
                                               h_ptr,
                                               DIGI_PGMRCLK_REG_FDIV_2_INTEGER_BIT_FDIV_INTEGER_2_MSK,
                                               DIGI_PGMRCLK_REG_FDIV_2_INTEGER_BIT_FDIV_INTEGER_2_OFF,
                                               value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_INTEGER_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_INTEGER_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001509c bits 31:0) bits 0:31 use field FDIV_INTEGER_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_INTEGER */
    reg_value = digi_pgmrclk_reg_FDIV_2_INTEGER_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_2_INTEGER_BIT_FDIV_INTEGER_2_MSK) >> DIGI_PGMRCLK_REG_FDIV_2_INTEGER_BIT_FDIV_INTEGER_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_INTEGER_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_INTEGER_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_INTEGER_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_INTEGER_2_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_INTEGER_2_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_INTEGER_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0001509c bits 31:0) bits 0:31 use field FDIV_INTEGER_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_INTEGER */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0001509c bits 31:0) bits 0:31 use field FDIV_INTEGER_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_INTEGER */
        digi_pgmrclk_reg_FDIV_2_INTEGER_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (DIGI_PGMRCLK_REG_FDIV_2_INTEGER_BIT_FDIV_INTEGER_2_OFF + subfield_offset),
                                                   DIGI_PGMRCLK_REG_FDIV_2_INTEGER_BIT_FDIV_INTEGER_2_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_INTEGER_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_INTEGER_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_INTEGER_2_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_INTEGER_2_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0001509c bits 31:0) bits 0:31 use field FDIV_INTEGER_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_INTEGER */
    reg_value = digi_pgmrclk_reg_FDIV_2_INTEGER_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_2_INTEGER_BIT_FDIV_INTEGER_2_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_2_INTEGER_BIT_FDIV_INTEGER_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_2_INTEGER_BIT_FDIV_INTEGER_2_MSK, DIGI_PGMRCLK_REG_FDIV_2_INTEGER_BIT_FDIV_INTEGER_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_INTEGER_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_INTEGER_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_INTEGER_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_INTEGER_3_set", value );

    /* (0x000150a0 bits 31:0) bits 0:31 use field FDIV_INTEGER_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_INTEGER */
    digi_pgmrclk_reg_FDIV_3_INTEGER_field_set( b_ptr,
                                               h_ptr,
                                               DIGI_PGMRCLK_REG_FDIV_3_INTEGER_BIT_FDIV_INTEGER_3_MSK,
                                               DIGI_PGMRCLK_REG_FDIV_3_INTEGER_BIT_FDIV_INTEGER_3_OFF,
                                               value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_INTEGER_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_INTEGER_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150a0 bits 31:0) bits 0:31 use field FDIV_INTEGER_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_INTEGER */
    reg_value = digi_pgmrclk_reg_FDIV_3_INTEGER_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_3_INTEGER_BIT_FDIV_INTEGER_3_MSK) >> DIGI_PGMRCLK_REG_FDIV_3_INTEGER_BIT_FDIV_INTEGER_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_INTEGER_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_INTEGER_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_INTEGER_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_INTEGER_3_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_INTEGER_3_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_INTEGER_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150a0 bits 31:0) bits 0:31 use field FDIV_INTEGER_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_INTEGER */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150a0 bits 31:0) bits 0:31 use field FDIV_INTEGER_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_INTEGER */
        digi_pgmrclk_reg_FDIV_3_INTEGER_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (DIGI_PGMRCLK_REG_FDIV_3_INTEGER_BIT_FDIV_INTEGER_3_OFF + subfield_offset),
                                                   DIGI_PGMRCLK_REG_FDIV_3_INTEGER_BIT_FDIV_INTEGER_3_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_INTEGER_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_INTEGER_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_INTEGER_3_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_INTEGER_3_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150a0 bits 31:0) bits 0:31 use field FDIV_INTEGER_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_INTEGER */
    reg_value = digi_pgmrclk_reg_FDIV_3_INTEGER_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_3_INTEGER_BIT_FDIV_INTEGER_3_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_3_INTEGER_BIT_FDIV_INTEGER_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_3_INTEGER_BIT_FDIV_INTEGER_3_MSK, DIGI_PGMRCLK_REG_FDIV_3_INTEGER_BIT_FDIV_INTEGER_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_INTEGER_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_NUMERATOR_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_NUMERATOR_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_NUMERATOR_0_set", value );

    /* (0x000150a4 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR */
    digi_pgmrclk_reg_FDIV_0_NUMERATOR_field_set( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR_BIT_FDIV_NUMERATOR_0_MSK,
                                                 DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR_BIT_FDIV_NUMERATOR_0_OFF,
                                                 value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_NUMERATOR_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_NUMERATOR_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150a4 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR */
    reg_value = digi_pgmrclk_reg_FDIV_0_NUMERATOR_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR_BIT_FDIV_NUMERATOR_0_MSK) >> DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR_BIT_FDIV_NUMERATOR_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_NUMERATOR_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_NUMERATOR_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_NUMERATOR_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_0_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_NUMERATOR_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150a4 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150a4 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR */
        digi_pgmrclk_reg_FDIV_0_NUMERATOR_field_set( b_ptr,
                                                     h_ptr,
                                                     subfield_mask << (DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR_BIT_FDIV_NUMERATOR_0_OFF + subfield_offset),
                                                     DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR_BIT_FDIV_NUMERATOR_0_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_NUMERATOR_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_NUMERATOR_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150a4 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR */
    reg_value = digi_pgmrclk_reg_FDIV_0_NUMERATOR_read( b_ptr,
                                                        h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR_BIT_FDIV_NUMERATOR_0_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR_BIT_FDIV_NUMERATOR_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR_BIT_FDIV_NUMERATOR_0_MSK, DIGI_PGMRCLK_REG_FDIV_0_NUMERATOR_BIT_FDIV_NUMERATOR_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_NUMERATOR_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_NUMERATOR_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_NUMERATOR_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_NUMERATOR_1_set", value );

    /* (0x000150a8 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR */
    digi_pgmrclk_reg_FDIV_1_NUMERATOR_field_set( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR_BIT_FDIV_NUMERATOR_1_MSK,
                                                 DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR_BIT_FDIV_NUMERATOR_1_OFF,
                                                 value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_NUMERATOR_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_NUMERATOR_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150a8 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR */
    reg_value = digi_pgmrclk_reg_FDIV_1_NUMERATOR_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR_BIT_FDIV_NUMERATOR_1_MSK) >> DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR_BIT_FDIV_NUMERATOR_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_NUMERATOR_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_NUMERATOR_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_NUMERATOR_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_1_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_1_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_NUMERATOR_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150a8 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150a8 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR */
        digi_pgmrclk_reg_FDIV_1_NUMERATOR_field_set( b_ptr,
                                                     h_ptr,
                                                     subfield_mask << (DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR_BIT_FDIV_NUMERATOR_1_OFF + subfield_offset),
                                                     DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR_BIT_FDIV_NUMERATOR_1_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_NUMERATOR_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_NUMERATOR_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_1_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_1_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150a8 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR */
    reg_value = digi_pgmrclk_reg_FDIV_1_NUMERATOR_read( b_ptr,
                                                        h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR_BIT_FDIV_NUMERATOR_1_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR_BIT_FDIV_NUMERATOR_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR_BIT_FDIV_NUMERATOR_1_MSK, DIGI_PGMRCLK_REG_FDIV_1_NUMERATOR_BIT_FDIV_NUMERATOR_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_NUMERATOR_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_NUMERATOR_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_NUMERATOR_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_NUMERATOR_2_set", value );

    /* (0x000150ac bits 31:0) bits 0:31 use field FDIV_NUMERATOR_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR */
    digi_pgmrclk_reg_FDIV_2_NUMERATOR_field_set( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR_BIT_FDIV_NUMERATOR_2_MSK,
                                                 DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR_BIT_FDIV_NUMERATOR_2_OFF,
                                                 value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_NUMERATOR_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_NUMERATOR_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150ac bits 31:0) bits 0:31 use field FDIV_NUMERATOR_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR */
    reg_value = digi_pgmrclk_reg_FDIV_2_NUMERATOR_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR_BIT_FDIV_NUMERATOR_2_MSK) >> DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR_BIT_FDIV_NUMERATOR_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_NUMERATOR_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_NUMERATOR_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_NUMERATOR_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_2_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_2_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_NUMERATOR_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150ac bits 31:0) bits 0:31 use field FDIV_NUMERATOR_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150ac bits 31:0) bits 0:31 use field FDIV_NUMERATOR_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR */
        digi_pgmrclk_reg_FDIV_2_NUMERATOR_field_set( b_ptr,
                                                     h_ptr,
                                                     subfield_mask << (DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR_BIT_FDIV_NUMERATOR_2_OFF + subfield_offset),
                                                     DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR_BIT_FDIV_NUMERATOR_2_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_NUMERATOR_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_NUMERATOR_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_2_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_2_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150ac bits 31:0) bits 0:31 use field FDIV_NUMERATOR_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR */
    reg_value = digi_pgmrclk_reg_FDIV_2_NUMERATOR_read( b_ptr,
                                                        h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR_BIT_FDIV_NUMERATOR_2_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR_BIT_FDIV_NUMERATOR_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR_BIT_FDIV_NUMERATOR_2_MSK, DIGI_PGMRCLK_REG_FDIV_2_NUMERATOR_BIT_FDIV_NUMERATOR_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_NUMERATOR_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_NUMERATOR_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_NUMERATOR_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                            digi_handle_t *h_ptr,
                                                            UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_NUMERATOR_3_set", value );

    /* (0x000150b0 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR */
    digi_pgmrclk_reg_FDIV_3_NUMERATOR_field_set( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR_BIT_FDIV_NUMERATOR_3_MSK,
                                                 DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR_BIT_FDIV_NUMERATOR_3_OFF,
                                                 value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_NUMERATOR_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_NUMERATOR_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150b0 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR */
    reg_value = digi_pgmrclk_reg_FDIV_3_NUMERATOR_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR_BIT_FDIV_NUMERATOR_3_MSK) >> DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR_BIT_FDIV_NUMERATOR_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_NUMERATOR_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_NUMERATOR_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_NUMERATOR_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                  digi_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_3_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_3_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_NUMERATOR_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150b0 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150b0 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR */
        digi_pgmrclk_reg_FDIV_3_NUMERATOR_field_set( b_ptr,
                                                     h_ptr,
                                                     subfield_mask << (DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR_BIT_FDIV_NUMERATOR_3_OFF + subfield_offset),
                                                     DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR_BIT_FDIV_NUMERATOR_3_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_NUMERATOR_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_NUMERATOR_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_3_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_NUMERATOR_3_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150b0 bits 31:0) bits 0:31 use field FDIV_NUMERATOR_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR */
    reg_value = digi_pgmrclk_reg_FDIV_3_NUMERATOR_read( b_ptr,
                                                        h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR_BIT_FDIV_NUMERATOR_3_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR_BIT_FDIV_NUMERATOR_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR_BIT_FDIV_NUMERATOR_3_MSK, DIGI_PGMRCLK_REG_FDIV_3_NUMERATOR_BIT_FDIV_NUMERATOR_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_NUMERATOR_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_DENOMINATOR_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_DENOMINATOR_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_DENOMINATOR_0_set", value );

    /* (0x000150b4 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR */
    digi_pgmrclk_reg_FDIV_0_DENOMINATOR_field_set( b_ptr,
                                                   h_ptr,
                                                   DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR_BIT_FDIV_DENOMINATOR_0_MSK,
                                                   DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR_BIT_FDIV_DENOMINATOR_0_OFF,
                                                   value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_DENOMINATOR_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_DENOMINATOR_0_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150b4 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR */
    reg_value = digi_pgmrclk_reg_FDIV_0_DENOMINATOR_read( b_ptr,
                                                          h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR_BIT_FDIV_DENOMINATOR_0_MSK) >> DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR_BIT_FDIV_DENOMINATOR_0_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_DENOMINATOR_0_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_DENOMINATOR_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_DENOMINATOR_0_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_0_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150b4 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150b4 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR */
        digi_pgmrclk_reg_FDIV_0_DENOMINATOR_field_set( b_ptr,
                                                       h_ptr,
                                                       subfield_mask << (DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR_BIT_FDIV_DENOMINATOR_0_OFF + subfield_offset),
                                                       DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR_BIT_FDIV_DENOMINATOR_0_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_DENOMINATOR_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_DENOMINATOR_0_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150b4 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_0 of register PMC_DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR */
    reg_value = digi_pgmrclk_reg_FDIV_0_DENOMINATOR_read( b_ptr,
                                                          h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR_BIT_FDIV_DENOMINATOR_0_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR_BIT_FDIV_DENOMINATOR_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR_BIT_FDIV_DENOMINATOR_0_MSK, DIGI_PGMRCLK_REG_FDIV_0_DENOMINATOR_BIT_FDIV_DENOMINATOR_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_DENOMINATOR_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_DENOMINATOR_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_DENOMINATOR_1_set", value );

    /* (0x000150b8 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR */
    digi_pgmrclk_reg_FDIV_1_DENOMINATOR_field_set( b_ptr,
                                                   h_ptr,
                                                   DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR_BIT_FDIV_DENOMINATOR_1_MSK,
                                                   DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR_BIT_FDIV_DENOMINATOR_1_OFF,
                                                   value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_DENOMINATOR_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_DENOMINATOR_1_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150b8 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR */
    reg_value = digi_pgmrclk_reg_FDIV_1_DENOMINATOR_read( b_ptr,
                                                          h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR_BIT_FDIV_DENOMINATOR_1_MSK) >> DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR_BIT_FDIV_DENOMINATOR_1_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_DENOMINATOR_1_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_DENOMINATOR_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_DENOMINATOR_1_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_1_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_1_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150b8 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150b8 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR */
        digi_pgmrclk_reg_FDIV_1_DENOMINATOR_field_set( b_ptr,
                                                       h_ptr,
                                                       subfield_mask << (DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR_BIT_FDIV_DENOMINATOR_1_OFF + subfield_offset),
                                                       DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR_BIT_FDIV_DENOMINATOR_1_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_DENOMINATOR_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_DENOMINATOR_1_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_1_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_1_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150b8 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_1 of register PMC_DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR */
    reg_value = digi_pgmrclk_reg_FDIV_1_DENOMINATOR_read( b_ptr,
                                                          h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR_BIT_FDIV_DENOMINATOR_1_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR_BIT_FDIV_DENOMINATOR_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR_BIT_FDIV_DENOMINATOR_1_MSK, DIGI_PGMRCLK_REG_FDIV_1_DENOMINATOR_BIT_FDIV_DENOMINATOR_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_DENOMINATOR_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_DENOMINATOR_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_DENOMINATOR_2_set", value );

    /* (0x000150bc bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR */
    digi_pgmrclk_reg_FDIV_2_DENOMINATOR_field_set( b_ptr,
                                                   h_ptr,
                                                   DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR_BIT_FDIV_DENOMINATOR_2_MSK,
                                                   DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR_BIT_FDIV_DENOMINATOR_2_OFF,
                                                   value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_DENOMINATOR_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_DENOMINATOR_2_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150bc bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR */
    reg_value = digi_pgmrclk_reg_FDIV_2_DENOMINATOR_read( b_ptr,
                                                          h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR_BIT_FDIV_DENOMINATOR_2_MSK) >> DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR_BIT_FDIV_DENOMINATOR_2_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_DENOMINATOR_2_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_DENOMINATOR_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_DENOMINATOR_2_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_2_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_2_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150bc bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150bc bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR */
        digi_pgmrclk_reg_FDIV_2_DENOMINATOR_field_set( b_ptr,
                                                       h_ptr,
                                                       subfield_mask << (DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR_BIT_FDIV_DENOMINATOR_2_OFF + subfield_offset),
                                                       DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR_BIT_FDIV_DENOMINATOR_2_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_DENOMINATOR_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_DENOMINATOR_2_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_2_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_2_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150bc bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_2 of register PMC_DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR */
    reg_value = digi_pgmrclk_reg_FDIV_2_DENOMINATOR_read( b_ptr,
                                                          h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR_BIT_FDIV_DENOMINATOR_2_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR_BIT_FDIV_DENOMINATOR_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR_BIT_FDIV_DENOMINATOR_2_MSK, DIGI_PGMRCLK_REG_FDIV_2_DENOMINATOR_BIT_FDIV_DENOMINATOR_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_DENOMINATOR_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_DENOMINATOR_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_DENOMINATOR_3_set", value );

    /* (0x000150c0 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR */
    digi_pgmrclk_reg_FDIV_3_DENOMINATOR_field_set( b_ptr,
                                                   h_ptr,
                                                   DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR_BIT_FDIV_DENOMINATOR_3_MSK,
                                                   DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR_BIT_FDIV_DENOMINATOR_3_OFF,
                                                   value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_DENOMINATOR_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_DENOMINATOR_3_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150c0 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR */
    reg_value = digi_pgmrclk_reg_FDIV_3_DENOMINATOR_read( b_ptr,
                                                          h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR_BIT_FDIV_DENOMINATOR_3_MSK) >> DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR_BIT_FDIV_DENOMINATOR_3_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_DENOMINATOR_3_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_DENOMINATOR_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_DENOMINATOR_3_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_3_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_3_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150c0 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150c0 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR */
        digi_pgmrclk_reg_FDIV_3_DENOMINATOR_field_set( b_ptr,
                                                       h_ptr,
                                                       subfield_mask << (DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR_BIT_FDIV_DENOMINATOR_3_OFF + subfield_offset),
                                                       DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR_BIT_FDIV_DENOMINATOR_3_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_DENOMINATOR_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_DENOMINATOR_3_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_3_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_3_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150c0 bits 31:0) bits 0:31 use field FDIV_DENOMINATOR_3 of register PMC_DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR */
    reg_value = digi_pgmrclk_reg_FDIV_3_DENOMINATOR_read( b_ptr,
                                                          h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR_BIT_FDIV_DENOMINATOR_3_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR_BIT_FDIV_DENOMINATOR_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR_BIT_FDIV_DENOMINATOR_3_MSK, DIGI_PGMRCLK_REG_FDIV_3_DENOMINATOR_BIT_FDIV_DENOMINATOR_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_DENOMINATOR_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FDIV_ENABLE_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_ENABLE_set", value );

    /* (0x000150c8 bits 7:4) bits 0:3 use field FDIV_ENABLE of register PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET */
    digi_pgmrclk_reg_FDIV_EN_AND_RESET_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_ENABLE_MSK,
                                                  DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_ENABLE_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150c8 bits 7:4) bits 0:3 use field FDIV_ENABLE of register PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET */
    reg_value = digi_pgmrclk_reg_FDIV_EN_AND_RESET_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_ENABLE_MSK) >> DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_ENABLE_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_ENABLE_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_ENABLE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_ENABLE_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_ENABLE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150c8 bits 7:4) bits 0:3 use field FDIV_ENABLE of register PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150c8 bits 7:4) bits 0:3 use field FDIV_ENABLE of register PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET */
        digi_pgmrclk_reg_FDIV_EN_AND_RESET_field_set( b_ptr,
                                                      h_ptr,
                                                      subfield_mask << (DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_ENABLE_OFF + subfield_offset),
                                                      DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_ENABLE_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_ENABLE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_ENABLE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150c8 bits 7:4) bits 0:3 use field FDIV_ENABLE of register PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET */
    reg_value = digi_pgmrclk_reg_FDIV_EN_AND_RESET_read( b_ptr,
                                                         h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_ENABLE_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_ENABLE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_ENABLE_MSK, DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_ENABLE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_ENABLE_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_SW_RST_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_SW_RST_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FDIV_SW_RST_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_SW_RST_set", value );

    /* (0x000150c8 bits 3:0) bits 0:3 use field FDIV_SW_RST of register PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET */
    digi_pgmrclk_reg_FDIV_EN_AND_RESET_field_set( b_ptr,
                                                  h_ptr,
                                                  DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_SW_RST_MSK,
                                                  DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_SW_RST_OFF,
                                                  value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_SW_RST_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_SW_RST_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150c8 bits 3:0) bits 0:3 use field FDIV_SW_RST of register PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET */
    reg_value = digi_pgmrclk_reg_FDIV_EN_AND_RESET_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_SW_RST_MSK) >> DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_SW_RST_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_SW_RST_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_SW_RST_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_SW_RST_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_SW_RST_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_SW_RST_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_SW_RST_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150c8 bits 3:0) bits 0:3 use field FDIV_SW_RST of register PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150c8 bits 3:0) bits 0:3 use field FDIV_SW_RST of register PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET */
        digi_pgmrclk_reg_FDIV_EN_AND_RESET_field_set( b_ptr,
                                                      h_ptr,
                                                      subfield_mask << (DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_SW_RST_OFF + subfield_offset),
                                                      DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_SW_RST_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_SW_RST_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_SW_RST_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_SW_RST_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_SW_RST_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150c8 bits 3:0) bits 0:3 use field FDIV_SW_RST of register PMC_DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET */
    reg_value = digi_pgmrclk_reg_FDIV_EN_AND_RESET_read( b_ptr,
                                                         h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_SW_RST_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_SW_RST_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_SW_RST_MSK, DIGI_PGMRCLK_REG_FDIV_EN_AND_RESET_BIT_FDIV_SW_RST_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_SW_RST_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_FDIV_OUT_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FDIV_OUT_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FDIV_OUT_ENABLE_set", value, 15);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FDIV_OUT_ENABLE_set", value );

    /* (0x000150cc bits 3:0) bits 0:3 use field FDIV_OUT_ENABLE of register PMC_DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN */
    digi_pgmrclk_reg_FDIV_OUTPUT_EN_field_set( b_ptr,
                                               h_ptr,
                                               DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN_BIT_FDIV_OUT_ENABLE_MSK,
                                               DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN_BIT_FDIV_OUT_ENABLE_OFF,
                                               value);
}

static INLINE UINT32 digi_pgmrclk_field_FDIV_OUT_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FDIV_OUT_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150cc bits 3:0) bits 0:3 use field FDIV_OUT_ENABLE of register PMC_DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN */
    reg_value = digi_pgmrclk_reg_FDIV_OUTPUT_EN_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN_BIT_FDIV_OUT_ENABLE_MSK) >> DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN_BIT_FDIV_OUT_ENABLE_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FDIV_OUT_ENABLE_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_FDIV_OUT_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_FDIV_OUT_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_OUT_ENABLE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_OUT_ENABLE_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_OUT_ENABLE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150cc bits 3:0) bits 0:3 use field FDIV_OUT_ENABLE of register PMC_DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150cc bits 3:0) bits 0:3 use field FDIV_OUT_ENABLE of register PMC_DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN */
        digi_pgmrclk_reg_FDIV_OUTPUT_EN_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN_BIT_FDIV_OUT_ENABLE_OFF + subfield_offset),
                                                   DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN_BIT_FDIV_OUT_ENABLE_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_FDIV_OUT_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_FDIV_OUT_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_FDIV_OUT_ENABLE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_FDIV_OUT_ENABLE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150cc bits 3:0) bits 0:3 use field FDIV_OUT_ENABLE of register PMC_DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN */
    reg_value = digi_pgmrclk_reg_FDIV_OUTPUT_EN_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN_BIT_FDIV_OUT_ENABLE_MSK)
                  >> DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN_BIT_FDIV_OUT_ENABLE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN_BIT_FDIV_OUT_ENABLE_MSK, DIGI_PGMRCLK_REG_FDIV_OUTPUT_EN_BIT_FDIV_OUT_ENABLE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_FDIV_OUT_ENABLE_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void digi_pgmrclk_field_IDIV_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_IDIV_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_IDIV_ENABLE_set", value, 3);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_IDIV_ENABLE_set", value );

    /* (0x000150d0 bits 1:0) bits 0:1 use field IDIV_ENABLE of register PMC_DIGI_PGMRCLK_REG_IDIV_EN */
    digi_pgmrclk_reg_IDIV_EN_field_set( b_ptr,
                                        h_ptr,
                                        DIGI_PGMRCLK_REG_IDIV_EN_BIT_IDIV_ENABLE_MSK,
                                        DIGI_PGMRCLK_REG_IDIV_EN_BIT_IDIV_ENABLE_OFF,
                                        value);
}

static INLINE UINT32 digi_pgmrclk_field_IDIV_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_IDIV_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000150d0 bits 1:0) bits 0:1 use field IDIV_ENABLE of register PMC_DIGI_PGMRCLK_REG_IDIV_EN */
    reg_value = digi_pgmrclk_reg_IDIV_EN_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_IDIV_EN_BIT_IDIV_ENABLE_MSK) >> DIGI_PGMRCLK_REG_IDIV_EN_BIT_IDIV_ENABLE_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_IDIV_ENABLE_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_range_IDIV_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_range_IDIV_ENABLE_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_IDIV_ENABLE_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_IDIV_ENABLE_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_IDIV_ENABLE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000150d0 bits 1:0) bits 0:1 use field IDIV_ENABLE of register PMC_DIGI_PGMRCLK_REG_IDIV_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000150d0 bits 1:0) bits 0:1 use field IDIV_ENABLE of register PMC_DIGI_PGMRCLK_REG_IDIV_EN */
        digi_pgmrclk_reg_IDIV_EN_field_set( b_ptr,
                                            h_ptr,
                                            subfield_mask << (DIGI_PGMRCLK_REG_IDIV_EN_BIT_IDIV_ENABLE_OFF + subfield_offset),
                                            DIGI_PGMRCLK_REG_IDIV_EN_BIT_IDIV_ENABLE_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 digi_pgmrclk_field_range_IDIV_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_IDIV_ENABLE_get( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_IDIV_ENABLE_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_IDIV_ENABLE_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000150d0 bits 1:0) bits 0:1 use field IDIV_ENABLE of register PMC_DIGI_PGMRCLK_REG_IDIV_EN */
    reg_value = digi_pgmrclk_reg_IDIV_EN_read(  b_ptr, h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_IDIV_EN_BIT_IDIV_ENABLE_MSK)
                  >> DIGI_PGMRCLK_REG_IDIV_EN_BIT_IDIV_ENABLE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_IDIV_EN_BIT_IDIV_ENABLE_MSK, DIGI_PGMRCLK_REG_IDIV_EN_BIT_IDIV_ENABLE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_IDIV_ENABLE_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */
static INLINE void digi_pgmrclk_field_TIP_FALLING_7_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_7_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_7_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_7_E_set", value );

    /* (0x00015074 bits 27) field TIP_FALLING_7_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_7_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_7_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_7_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_7_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 27) field TIP_FALLING_7_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_7_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_7_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_7_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_FALLING_6_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_6_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_6_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_6_E_set", value );

    /* (0x00015074 bits 26) field TIP_FALLING_6_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_6_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_6_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_6_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_6_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 26) field TIP_FALLING_6_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_6_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_6_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_6_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_FALLING_5_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_5_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_5_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_5_E_set", value );

    /* (0x00015074 bits 25) field TIP_FALLING_5_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_5_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_5_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_5_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_5_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 25) field TIP_FALLING_5_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_5_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_5_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_5_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_FALLING_4_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_4_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_4_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_4_E_set", value );

    /* (0x00015074 bits 24) field TIP_FALLING_4_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_4_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_4_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_4_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_4_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 24) field TIP_FALLING_4_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_4_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_4_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_4_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_FALLING_3_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_3_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_3_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_3_E_set", value );

    /* (0x00015074 bits 23) field TIP_FALLING_3_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_3_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_3_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_3_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_3_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 23) field TIP_FALLING_3_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_3_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_3_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_3_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_FALLING_2_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_2_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_2_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_2_E_set", value );

    /* (0x00015074 bits 22) field TIP_FALLING_2_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_2_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_2_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_2_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_2_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 22) field TIP_FALLING_2_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_2_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_2_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_2_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_FALLING_1_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_1_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_1_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_1_E_set", value );

    /* (0x00015074 bits 21) field TIP_FALLING_1_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_1_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_1_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_1_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_1_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 21) field TIP_FALLING_1_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_1_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_1_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_1_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_FALLING_0_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_0_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                           digi_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_0_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_0_E_set", value );

    /* (0x00015074 bits 20) field TIP_FALLING_0_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_0_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_0_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_0_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_0_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 20) field TIP_FALLING_0_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_0_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_FALLING_0_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_0_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_RISING_7_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_7_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_7_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_7_E_set", value );

    /* (0x00015074 bits 19) field TIP_RISING_7_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_7_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_7_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_7_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_7_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 19) field TIP_RISING_7_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_7_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_7_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_7_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_RISING_6_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_6_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_6_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_6_E_set", value );

    /* (0x00015074 bits 18) field TIP_RISING_6_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_6_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_6_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_6_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_6_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 18) field TIP_RISING_6_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_6_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_6_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_6_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_RISING_5_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_5_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_5_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_5_E_set", value );

    /* (0x00015074 bits 17) field TIP_RISING_5_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_5_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_5_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_5_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_5_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 17) field TIP_RISING_5_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_5_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_5_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_5_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_RISING_4_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_4_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_4_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_4_E_set", value );

    /* (0x00015074 bits 16) field TIP_RISING_4_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_4_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_4_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_4_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_4_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 16) field TIP_RISING_4_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_4_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_4_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_4_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_RISING_3_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_3_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_3_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_3_E_set", value );

    /* (0x00015074 bits 15) field TIP_RISING_3_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_3_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_3_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_3_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_3_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 15) field TIP_RISING_3_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_3_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_3_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_3_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_RISING_2_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_2_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_2_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_2_E_set", value );

    /* (0x00015074 bits 14) field TIP_RISING_2_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_2_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_2_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_2_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_2_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 14) field TIP_RISING_2_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_2_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_2_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_2_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_RISING_1_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_1_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_1_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_1_E_set", value );

    /* (0x00015074 bits 13) field TIP_RISING_1_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_1_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_1_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_1_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_1_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 13) field TIP_RISING_1_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_1_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_1_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_1_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_TIP_RISING_0_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_0_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_0_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_0_E_set", value );

    /* (0x00015074 bits 12) field TIP_RISING_0_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_0_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_0_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_0_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_0_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 12) field TIP_RISING_0_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_0_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_TIP_RISING_0_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_0_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_FPI_OUT_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                     digi_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FPI_OUT_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                     digi_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FPI_OUT_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FPI_OUT_E_set", value );

    /* (0x00015074 bits 11) field FPI_OUT_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_FPI_OUT_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_FPI_OUT_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 11) field FPI_OUT_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_FPI_OUT_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_FPI_OUT_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_OUT_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_FPI_IN_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                    digi_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FPI_IN_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                    digi_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FPI_IN_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FPI_IN_E_set", value );

    /* (0x00015074 bits 10) field FPI_IN_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_FPI_IN_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_FPI_IN_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_IN_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_IN_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 10) field FPI_IN_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_FPI_IN_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_FPI_IN_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_IN_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_ALU_BKP_SYNC_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_ALU_BKP_SYNC_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                          digi_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_ALU_BKP_SYNC_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_ALU_BKP_SYNC_E_set", value );

    /* (0x00015074 bits 9) field ALU_BKP_SYNC_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_ALU_BKP_SYNC_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_ALU_BKP_SYNC_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_ALU_BKP_SYNC_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_ALU_BKP_SYNC_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 9) field ALU_BKP_SYNC_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_ALU_BKP_SYNC_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_ALU_BKP_SYNC_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_ALU_BKP_SYNC_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_PMON_SYNC_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_PMON_SYNC_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                       digi_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_PMON_SYNC_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_PMON_SYNC_E_set", value );

    /* (0x00015074 bits 8) field PMON_SYNC_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_PMON_SYNC_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_PMON_SYNC_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 8) field PMON_SYNC_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_PMON_SYNC_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_PMON_SYNC_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_PMON_SYNC_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_7_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_7_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_7_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_7_E_set", value );

    /* (0x00015074 bits 7) field LCLK_GEN_7_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_7_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_7_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_7_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_7_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 7) field LCLK_GEN_7_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_7_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_7_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_7_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_6_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_6_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_6_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_6_E_set", value );

    /* (0x00015074 bits 6) field LCLK_GEN_6_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_6_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_6_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_6_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_6_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 6) field LCLK_GEN_6_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_6_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_6_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_6_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_5_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_5_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_5_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_5_E_set", value );

    /* (0x00015074 bits 5) field LCLK_GEN_5_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_5_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_5_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_5_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_5_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 5) field LCLK_GEN_5_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_5_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_5_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_5_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_4_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_4_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_4_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_4_E_set", value );

    /* (0x00015074 bits 4) field LCLK_GEN_4_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_4_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_4_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_4_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_4_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 4) field LCLK_GEN_4_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_4_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_4_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_4_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_3_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_3_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_3_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_3_E_set", value );

    /* (0x00015074 bits 3) field LCLK_GEN_3_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_3_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_3_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_3_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_3_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 3) field LCLK_GEN_3_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_3_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_3_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_3_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_2_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_2_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_2_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_2_E_set", value );

    /* (0x00015074 bits 2) field LCLK_GEN_2_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_2_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_2_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_2_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_2_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 2) field LCLK_GEN_2_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_2_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_2_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_2_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_1_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_1_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_1_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_1_E_set", value );

    /* (0x00015074 bits 1) field LCLK_GEN_1_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_1_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_1_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_1_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_1_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 1) field LCLK_GEN_1_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_1_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_1_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_1_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_0_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_0_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                        digi_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_0_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_0_E_set", value );

    /* (0x00015074 bits 0) field LCLK_GEN_0_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    digi_pgmrclk_reg_INT_EN_REG_0_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_0_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_0_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_0_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_0_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015074 bits 0) field LCLK_GEN_0_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_0_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_0_BIT_LCLK_GEN_0_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_0_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_FPI_SYNC_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FPI_SYNC_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                      digi_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FPI_SYNC_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FPI_SYNC_E_set", value );

    /* (0x00015078 bits 8) field FPI_SYNC_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    digi_pgmrclk_reg_INT_EN_REG_1_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_FPI_SYNC_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_FPI_SYNC_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_SYNC_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_SYNC_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015078 bits 8) field FPI_SYNC_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_FPI_SYNC_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_FPI_SYNC_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_SYNC_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_7_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_7_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_7_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_7_E_set", value );

    /* (0x00015078 bits 7) field LCLK_GEN_SYNC_7_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    digi_pgmrclk_reg_INT_EN_REG_1_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_7_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_7_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_7_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_7_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015078 bits 7) field LCLK_GEN_SYNC_7_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_7_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_7_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_7_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_6_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_6_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_6_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_6_E_set", value );

    /* (0x00015078 bits 6) field LCLK_GEN_SYNC_6_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    digi_pgmrclk_reg_INT_EN_REG_1_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_6_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_6_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_6_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_6_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015078 bits 6) field LCLK_GEN_SYNC_6_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_6_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_6_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_6_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_5_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_5_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_5_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_5_E_set", value );

    /* (0x00015078 bits 5) field LCLK_GEN_SYNC_5_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    digi_pgmrclk_reg_INT_EN_REG_1_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_5_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_5_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_5_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_5_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015078 bits 5) field LCLK_GEN_SYNC_5_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_5_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_5_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_5_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_4_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_4_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_4_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_4_E_set", value );

    /* (0x00015078 bits 4) field LCLK_GEN_SYNC_4_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    digi_pgmrclk_reg_INT_EN_REG_1_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_4_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_4_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_4_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_4_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015078 bits 4) field LCLK_GEN_SYNC_4_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_4_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_4_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_4_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_3_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_3_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_3_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_3_E_set", value );

    /* (0x00015078 bits 3) field LCLK_GEN_SYNC_3_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    digi_pgmrclk_reg_INT_EN_REG_1_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_3_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_3_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_3_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_3_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015078 bits 3) field LCLK_GEN_SYNC_3_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_3_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_3_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_3_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_2_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_2_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_2_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_2_E_set", value );

    /* (0x00015078 bits 2) field LCLK_GEN_SYNC_2_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    digi_pgmrclk_reg_INT_EN_REG_1_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_2_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_2_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_2_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_2_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015078 bits 2) field LCLK_GEN_SYNC_2_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_2_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_2_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_2_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_1_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_1_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_1_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_1_E_set", value );

    /* (0x00015078 bits 1) field LCLK_GEN_SYNC_1_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    digi_pgmrclk_reg_INT_EN_REG_1_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_1_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_1_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_1_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_1_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015078 bits 1) field LCLK_GEN_SYNC_1_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_1_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_1_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_1_E_get", value );

    return value;
}
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_0_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_0_E_set( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_0_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_0_E_set", value );

    /* (0x00015078 bits 0) field LCLK_GEN_SYNC_0_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    digi_pgmrclk_reg_INT_EN_REG_1_field_set( b_ptr,
                                             h_ptr,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_0_E_MSK,
                                             DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_0_E_OFF,
                                             value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_0_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_0_E_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015078 bits 0) field LCLK_GEN_SYNC_0_E of register PMC_DIGI_PGMRCLK_REG_INT_EN_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_EN_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_0_E_MSK) >> DIGI_PGMRCLK_REG_INT_EN_REG_1_BIT_LCLK_GEN_SYNC_0_E_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_0_E_get", value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_sync
 * ==================================================================================
 */
static INLINE void digi_pgmrclk_field_TIP_FALLING_7_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_7_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_7_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_7_I_set_to_clear", value );

    /* (0x0001506c bits 27) field TIP_FALLING_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_7_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_7_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_7_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_7_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 27) field TIP_FALLING_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_7_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_7_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_7_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_7_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_7_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_7_I_poll", value );

    /* (0x0001506c bits 27) field TIP_FALLING_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_7_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_7_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_FALLING_6_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_6_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_6_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_6_I_set_to_clear", value );

    /* (0x0001506c bits 26) field TIP_FALLING_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_6_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_6_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_6_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_6_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 26) field TIP_FALLING_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_6_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_6_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_6_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_6_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_6_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_6_I_poll", value );

    /* (0x0001506c bits 26) field TIP_FALLING_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_6_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_6_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_FALLING_5_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_5_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_5_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_5_I_set_to_clear", value );

    /* (0x0001506c bits 25) field TIP_FALLING_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_5_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_5_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_5_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_5_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 25) field TIP_FALLING_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_5_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_5_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_5_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_5_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_5_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_5_I_poll", value );

    /* (0x0001506c bits 25) field TIP_FALLING_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_5_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_5_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_FALLING_4_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_4_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_4_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_4_I_set_to_clear", value );

    /* (0x0001506c bits 24) field TIP_FALLING_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_4_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_4_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_4_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_4_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 24) field TIP_FALLING_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_4_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_4_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_4_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_4_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_4_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_4_I_poll", value );

    /* (0x0001506c bits 24) field TIP_FALLING_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_4_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_4_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_FALLING_3_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_3_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_3_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_3_I_set_to_clear", value );

    /* (0x0001506c bits 23) field TIP_FALLING_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_3_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_3_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_3_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_3_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 23) field TIP_FALLING_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_3_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_3_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_3_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_3_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_3_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_3_I_poll", value );

    /* (0x0001506c bits 23) field TIP_FALLING_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_3_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_3_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_FALLING_2_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_2_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_2_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_2_I_set_to_clear", value );

    /* (0x0001506c bits 22) field TIP_FALLING_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_2_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_2_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_2_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_2_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 22) field TIP_FALLING_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_2_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_2_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_2_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_2_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_2_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_2_I_poll", value );

    /* (0x0001506c bits 22) field TIP_FALLING_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_2_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_2_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_FALLING_1_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_1_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_1_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_1_I_set_to_clear", value );

    /* (0x0001506c bits 21) field TIP_FALLING_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_1_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_1_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_1_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_1_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 21) field TIP_FALLING_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_1_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_1_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_1_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_1_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_1_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_1_I_poll", value );

    /* (0x0001506c bits 21) field TIP_FALLING_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_1_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_1_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_FALLING_0_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_FALLING_0_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                    digi_handle_t *h_ptr,
                                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_FALLING_0_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_FALLING_0_I_set_to_clear", value );

    /* (0x0001506c bits 20) field TIP_FALLING_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_0_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_0_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_0_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_0_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 20) field TIP_FALLING_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_0_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_0_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_0_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_0_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_0_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_0_I_poll", value );

    /* (0x0001506c bits 20) field TIP_FALLING_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_0_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_FALLING_0_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_RISING_7_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_7_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_7_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_7_I_set_to_clear", value );

    /* (0x0001506c bits 19) field TIP_RISING_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_7_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_7_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_7_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_7_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 19) field TIP_RISING_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_7_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_7_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_7_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_7_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_7_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_7_I_poll", value );

    /* (0x0001506c bits 19) field TIP_RISING_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_7_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_7_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_RISING_6_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_6_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_6_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_6_I_set_to_clear", value );

    /* (0x0001506c bits 18) field TIP_RISING_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_6_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_6_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_6_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_6_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 18) field TIP_RISING_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_6_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_6_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_6_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_6_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_6_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_6_I_poll", value );

    /* (0x0001506c bits 18) field TIP_RISING_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_6_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_6_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_RISING_5_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_5_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_5_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_5_I_set_to_clear", value );

    /* (0x0001506c bits 17) field TIP_RISING_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_5_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_5_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_5_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_5_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 17) field TIP_RISING_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_5_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_5_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_5_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_5_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_5_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_5_I_poll", value );

    /* (0x0001506c bits 17) field TIP_RISING_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_5_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_5_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_RISING_4_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_4_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_4_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_4_I_set_to_clear", value );

    /* (0x0001506c bits 16) field TIP_RISING_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_4_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_4_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_4_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_4_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 16) field TIP_RISING_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_4_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_4_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_4_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_4_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_4_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_4_I_poll", value );

    /* (0x0001506c bits 16) field TIP_RISING_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_4_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_4_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_RISING_3_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_3_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_3_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_3_I_set_to_clear", value );

    /* (0x0001506c bits 15) field TIP_RISING_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_3_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_3_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_3_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_3_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 15) field TIP_RISING_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_3_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_3_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_3_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_3_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_3_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_3_I_poll", value );

    /* (0x0001506c bits 15) field TIP_RISING_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_3_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_3_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_RISING_2_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_2_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_2_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_2_I_set_to_clear", value );

    /* (0x0001506c bits 14) field TIP_RISING_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_2_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_2_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_2_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_2_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 14) field TIP_RISING_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_2_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_2_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_2_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_2_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_2_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_2_I_poll", value );

    /* (0x0001506c bits 14) field TIP_RISING_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_2_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_2_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_RISING_1_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_1_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_1_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_1_I_set_to_clear", value );

    /* (0x0001506c bits 13) field TIP_RISING_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_1_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_1_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_1_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_1_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 13) field TIP_RISING_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_1_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_1_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_1_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_1_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_1_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_1_I_poll", value );

    /* (0x0001506c bits 13) field TIP_RISING_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_1_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_1_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_TIP_RISING_0_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_TIP_RISING_0_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_TIP_RISING_0_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_TIP_RISING_0_I_set_to_clear", value );

    /* (0x0001506c bits 12) field TIP_RISING_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_0_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_0_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_0_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_0_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 12) field TIP_RISING_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_0_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_0_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_0_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_0_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_0_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_0_I_poll", value );

    /* (0x0001506c bits 12) field TIP_RISING_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_0_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_TIP_RISING_0_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_FPI_OUT_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FPI_OUT_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                              digi_handle_t *h_ptr,
                                                              UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FPI_OUT_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FPI_OUT_I_set_to_clear", value );

    /* (0x0001506c bits 11) field FPI_OUT_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_OUT_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_OUT_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 11) field FPI_OUT_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_OUT_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_OUT_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_OUT_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_OUT_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_OUT_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_FPI_OUT_I_poll", value );

    /* (0x0001506c bits 11) field FPI_OUT_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_OUT_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_OUT_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_FPI_IN_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FPI_IN_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                             digi_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FPI_IN_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FPI_IN_I_set_to_clear", value );

    /* (0x0001506c bits 10) field FPI_IN_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_IN_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_IN_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_IN_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_IN_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 10) field FPI_IN_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_IN_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_IN_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_IN_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_IN_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_IN_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_FPI_IN_I_poll", value );

    /* (0x0001506c bits 10) field FPI_IN_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_IN_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_FPI_IN_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_ALU_BKP_SYNC_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_ALU_BKP_SYNC_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_ALU_BKP_SYNC_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_ALU_BKP_SYNC_I_set_to_clear", value );

    /* (0x0001506c bits 9) field ALU_BKP_SYNC_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_ALU_BKP_SYNC_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_ALU_BKP_SYNC_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_ALU_BKP_SYNC_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_ALU_BKP_SYNC_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 9) field ALU_BKP_SYNC_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_ALU_BKP_SYNC_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_ALU_BKP_SYNC_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_ALU_BKP_SYNC_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_ALU_BKP_SYNC_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_ALU_BKP_SYNC_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_ALU_BKP_SYNC_I_poll", value );

    /* (0x0001506c bits 9) field ALU_BKP_SYNC_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_ALU_BKP_SYNC_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_ALU_BKP_SYNC_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_PMON_SYNC_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_PMON_SYNC_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                digi_handle_t *h_ptr,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_set_to_clear", value );

    /* (0x0001506c bits 8) field PMON_SYNC_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_PMON_SYNC_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_PMON_SYNC_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 8) field PMON_SYNC_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_PMON_SYNC_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_PMON_SYNC_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_PMON_SYNC_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                        digi_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_PMON_SYNC_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                        digi_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_PMON_SYNC_I_poll", value );

    /* (0x0001506c bits 8) field PMON_SYNC_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_PMON_SYNC_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_PMON_SYNC_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_7_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_7_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_7_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_7_I_set_to_clear", value );

    /* (0x0001506c bits 7) field LCLK_GEN_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_7_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_7_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_7_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_7_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 7) field LCLK_GEN_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_7_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_7_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_7_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_7_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_7_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_7_I_poll", value );

    /* (0x0001506c bits 7) field LCLK_GEN_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_7_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_7_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_6_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_6_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_6_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_6_I_set_to_clear", value );

    /* (0x0001506c bits 6) field LCLK_GEN_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_6_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_6_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_6_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_6_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 6) field LCLK_GEN_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_6_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_6_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_6_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_6_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_6_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_6_I_poll", value );

    /* (0x0001506c bits 6) field LCLK_GEN_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_6_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_6_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_5_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_5_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_5_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_5_I_set_to_clear", value );

    /* (0x0001506c bits 5) field LCLK_GEN_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_5_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_5_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_5_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_5_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 5) field LCLK_GEN_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_5_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_5_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_5_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_5_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_5_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_5_I_poll", value );

    /* (0x0001506c bits 5) field LCLK_GEN_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_5_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_5_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_4_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_4_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_4_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_4_I_set_to_clear", value );

    /* (0x0001506c bits 4) field LCLK_GEN_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_4_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_4_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_4_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_4_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 4) field LCLK_GEN_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_4_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_4_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_4_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_4_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_4_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_4_I_poll", value );

    /* (0x0001506c bits 4) field LCLK_GEN_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_4_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_4_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_3_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_3_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_3_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_3_I_set_to_clear", value );

    /* (0x0001506c bits 3) field LCLK_GEN_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_3_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_3_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_3_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_3_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 3) field LCLK_GEN_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_3_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_3_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_3_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_3_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_3_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_3_I_poll", value );

    /* (0x0001506c bits 3) field LCLK_GEN_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_3_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_3_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_2_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_2_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_2_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_2_I_set_to_clear", value );

    /* (0x0001506c bits 2) field LCLK_GEN_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_2_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_2_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_2_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_2_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 2) field LCLK_GEN_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_2_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_2_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_2_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_2_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_2_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_2_I_poll", value );

    /* (0x0001506c bits 2) field LCLK_GEN_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_2_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_2_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_1_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_1_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_1_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_1_I_set_to_clear", value );

    /* (0x0001506c bits 1) field LCLK_GEN_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_1_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_1_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_1_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_1_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 1) field LCLK_GEN_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_1_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_1_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_1_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_1_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_1_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_1_I_poll", value );

    /* (0x0001506c bits 1) field LCLK_GEN_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_1_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_1_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_0_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_0_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                 digi_handle_t *h_ptr,
                                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_0_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_0_I_set_to_clear", value );

    /* (0x0001506c bits 0) field LCLK_GEN_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    digi_pgmrclk_reg_INT_REG_0_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_0_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_0_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_0_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_0_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001506c bits 0) field LCLK_GEN_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_REG_0_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_0_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_0_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_0_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_0_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_0_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_0_I_poll", value );

    /* (0x0001506c bits 0) field LCLK_GEN_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_0 */
    return digi_pgmrclk_reg_INT_REG_0_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_0_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_0_BIT_LCLK_GEN_0_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_FPI_SYNC_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_FPI_SYNC_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                               digi_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_FPI_SYNC_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_FPI_SYNC_I_set_to_clear", value );

    /* (0x00015070 bits 8) field FPI_SYNC_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_FPI_SYNC_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_FPI_SYNC_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_SYNC_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_SYNC_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015070 bits 8) field FPI_SYNC_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_1_BIT_FPI_SYNC_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_1_BIT_FPI_SYNC_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_SYNC_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_SYNC_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                       digi_handle_t *h_ptr,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_SYNC_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                       digi_handle_t *h_ptr,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_FPI_SYNC_I_poll", value );

    /* (0x00015070 bits 8) field FPI_SYNC_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    return digi_pgmrclk_reg_INT_REG_1_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_1_BIT_FPI_SYNC_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_1_BIT_FPI_SYNC_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_7_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_7_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_7_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_7_I_set_to_clear", value );

    /* (0x00015070 bits 7) field LCLK_GEN_SYNC_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_7_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_7_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_7_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_7_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015070 bits 7) field LCLK_GEN_SYNC_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_7_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_7_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_7_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_7_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_7_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_7_I_poll", value );

    /* (0x00015070 bits 7) field LCLK_GEN_SYNC_7_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    return digi_pgmrclk_reg_INT_REG_1_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_7_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_7_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_6_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_6_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_6_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_6_I_set_to_clear", value );

    /* (0x00015070 bits 6) field LCLK_GEN_SYNC_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_6_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_6_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_6_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_6_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015070 bits 6) field LCLK_GEN_SYNC_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_6_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_6_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_6_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_6_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_6_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_6_I_poll", value );

    /* (0x00015070 bits 6) field LCLK_GEN_SYNC_6_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    return digi_pgmrclk_reg_INT_REG_1_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_6_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_6_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_5_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_5_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_5_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_5_I_set_to_clear", value );

    /* (0x00015070 bits 5) field LCLK_GEN_SYNC_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_5_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_5_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_5_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_5_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015070 bits 5) field LCLK_GEN_SYNC_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_5_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_5_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_5_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_5_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_5_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_5_I_poll", value );

    /* (0x00015070 bits 5) field LCLK_GEN_SYNC_5_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    return digi_pgmrclk_reg_INT_REG_1_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_5_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_5_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_4_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_4_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_4_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_4_I_set_to_clear", value );

    /* (0x00015070 bits 4) field LCLK_GEN_SYNC_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_4_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_4_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_4_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_4_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015070 bits 4) field LCLK_GEN_SYNC_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_4_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_4_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_4_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_4_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_4_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_4_I_poll", value );

    /* (0x00015070 bits 4) field LCLK_GEN_SYNC_4_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    return digi_pgmrclk_reg_INT_REG_1_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_4_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_4_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_3_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_3_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_3_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_3_I_set_to_clear", value );

    /* (0x00015070 bits 3) field LCLK_GEN_SYNC_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_3_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_3_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_3_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_3_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015070 bits 3) field LCLK_GEN_SYNC_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_3_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_3_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_3_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_3_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_3_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_3_I_poll", value );

    /* (0x00015070 bits 3) field LCLK_GEN_SYNC_3_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    return digi_pgmrclk_reg_INT_REG_1_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_3_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_3_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_2_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_2_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_2_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_2_I_set_to_clear", value );

    /* (0x00015070 bits 2) field LCLK_GEN_SYNC_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_2_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_2_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_2_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_2_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015070 bits 2) field LCLK_GEN_SYNC_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_2_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_2_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_2_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_2_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_2_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_2_I_poll", value );

    /* (0x00015070 bits 2) field LCLK_GEN_SYNC_2_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    return digi_pgmrclk_reg_INT_REG_1_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_2_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_2_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_1_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_1_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_1_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_1_I_set_to_clear", value );

    /* (0x00015070 bits 1) field LCLK_GEN_SYNC_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_1_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_1_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_1_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_1_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015070 bits 1) field LCLK_GEN_SYNC_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_1_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_1_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_1_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_1_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_1_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_1_I_poll", value );

    /* (0x00015070 bits 1) field LCLK_GEN_SYNC_1_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    return digi_pgmrclk_reg_INT_REG_1_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_1_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_1_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_0_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void digi_pgmrclk_field_LCLK_GEN_SYNC_0_I_set_to_clear( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_0_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_0_I_set_to_clear", value );

    /* (0x00015070 bits 0) field LCLK_GEN_SYNC_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    digi_pgmrclk_reg_INT_REG_1_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_0_I_MSK,
                                                          DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_0_I_OFF,
                                                          value);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_0_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_0_I_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015070 bits 0) field LCLK_GEN_SYNC_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_REG_1_read(  b_ptr, h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_0_I_MSK) >> DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_0_I_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_0_I_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_0_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_0_I_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_0_I_poll", value );

    /* (0x00015070 bits 0) field LCLK_GEN_SYNC_0_I of register PMC_DIGI_PGMRCLK_REG_INT_REG_1 */
    return digi_pgmrclk_reg_INT_REG_1_poll( b_ptr,
                                            h_ptr,
                                            DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_0_I_MSK,
                                            (value<<DIGI_PGMRCLK_REG_INT_REG_1_BIT_LCLK_GEN_SYNC_0_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_value
 * ==================================================================================
 */
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_7_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_7_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 27) field TIP_FALLING_7_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_7_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_7_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_7_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_7_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_7_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_7_V_poll", value );

    /* (0x0001507c bits 27) field TIP_FALLING_7_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_7_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_7_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_6_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_6_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 26) field TIP_FALLING_6_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_6_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_6_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_6_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_6_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_6_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_6_V_poll", value );

    /* (0x0001507c bits 26) field TIP_FALLING_6_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_6_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_6_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_5_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_5_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 25) field TIP_FALLING_5_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_5_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_5_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_5_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_5_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_5_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_5_V_poll", value );

    /* (0x0001507c bits 25) field TIP_FALLING_5_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_5_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_5_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_4_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_4_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 24) field TIP_FALLING_4_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_4_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_4_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_4_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_4_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_4_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_4_V_poll", value );

    /* (0x0001507c bits 24) field TIP_FALLING_4_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_4_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_4_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_3_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_3_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 23) field TIP_FALLING_3_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_3_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_3_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_3_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_3_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_3_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_3_V_poll", value );

    /* (0x0001507c bits 23) field TIP_FALLING_3_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_3_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_3_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_2_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_2_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 22) field TIP_FALLING_2_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_2_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_2_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_2_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_2_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_2_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_2_V_poll", value );

    /* (0x0001507c bits 22) field TIP_FALLING_2_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_2_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_2_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_1_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_1_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 21) field TIP_FALLING_1_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_1_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_1_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_1_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_1_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_1_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_1_V_poll", value );

    /* (0x0001507c bits 21) field TIP_FALLING_1_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_1_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_1_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_0_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_FALLING_0_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 20) field TIP_FALLING_0_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_0_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_0_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_FALLING_0_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_0_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_FALLING_0_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                            digi_handle_t *h_ptr,
                                                                            UINT32 value,
                                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_FALLING_0_V_poll", value );

    /* (0x0001507c bits 20) field TIP_FALLING_0_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_0_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_FALLING_0_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_7_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_7_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 19) field TIP_RISING_7_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_7_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_7_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_7_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_7_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_7_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_7_V_poll", value );

    /* (0x0001507c bits 19) field TIP_RISING_7_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_7_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_7_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_6_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_6_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 18) field TIP_RISING_6_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_6_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_6_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_6_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_6_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_6_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_6_V_poll", value );

    /* (0x0001507c bits 18) field TIP_RISING_6_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_6_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_6_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_5_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_5_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 17) field TIP_RISING_5_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_5_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_5_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_5_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_5_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_5_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_5_V_poll", value );

    /* (0x0001507c bits 17) field TIP_RISING_5_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_5_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_5_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_4_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_4_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 16) field TIP_RISING_4_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_4_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_4_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_4_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_4_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_4_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_4_V_poll", value );

    /* (0x0001507c bits 16) field TIP_RISING_4_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_4_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_4_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_3_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_3_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 15) field TIP_RISING_3_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_3_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_3_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_3_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_3_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_3_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_3_V_poll", value );

    /* (0x0001507c bits 15) field TIP_RISING_3_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_3_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_3_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_2_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_2_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 14) field TIP_RISING_2_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_2_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_2_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_2_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_2_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_2_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_2_V_poll", value );

    /* (0x0001507c bits 14) field TIP_RISING_2_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_2_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_2_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_1_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_1_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 13) field TIP_RISING_1_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_1_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_1_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_1_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_1_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_1_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_1_V_poll", value );

    /* (0x0001507c bits 13) field TIP_RISING_1_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_1_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_1_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_0_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_TIP_RISING_0_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 12) field TIP_RISING_0_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_0_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_0_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_TIP_RISING_0_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_0_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_TIP_RISING_0_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_TIP_RISING_0_V_poll", value );

    /* (0x0001507c bits 12) field TIP_RISING_0_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_0_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_TIP_RISING_0_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_OUT_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 11) field FPI_OUT_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_FPI_OUT_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_FPI_OUT_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_OUT_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_OUT_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_OUT_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                      digi_handle_t *h_ptr,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_FPI_OUT_V_poll", value );

    /* (0x0001507c bits 11) field FPI_OUT_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_FPI_OUT_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_FPI_OUT_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_IN_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_IN_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 10) field FPI_IN_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_FPI_IN_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_FPI_IN_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_IN_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_IN_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_IN_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                     digi_handle_t *h_ptr,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_FPI_IN_V_poll", value );

    /* (0x0001507c bits 10) field FPI_IN_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_FPI_IN_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_FPI_IN_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_ALU_BKP_SYNC_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_ALU_BKP_SYNC_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 9) field ALU_BKP_SYNC_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_ALU_BKP_SYNC_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_ALU_BKP_SYNC_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_ALU_BKP_SYNC_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_ALU_BKP_SYNC_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_ALU_BKP_SYNC_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                           digi_handle_t *h_ptr,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_ALU_BKP_SYNC_V_poll", value );

    /* (0x0001507c bits 9) field ALU_BKP_SYNC_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_ALU_BKP_SYNC_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_ALU_BKP_SYNC_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_PMON_SYNC_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 8) field PMON_SYNC_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_PMON_SYNC_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_PMON_SYNC_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_PMON_SYNC_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_PMON_SYNC_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                        digi_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_PMON_SYNC_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                        digi_handle_t *h_ptr,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_PMON_SYNC_V_poll", value );

    /* (0x0001507c bits 8) field PMON_SYNC_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_PMON_SYNC_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_PMON_SYNC_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_7_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_7_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 7) field LCLK_GEN_7_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_7_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_7_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_7_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_7_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_7_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_7_V_poll", value );

    /* (0x0001507c bits 7) field LCLK_GEN_7_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_7_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_7_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_6_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_6_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 6) field LCLK_GEN_6_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_6_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_6_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_6_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_6_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_6_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_6_V_poll", value );

    /* (0x0001507c bits 6) field LCLK_GEN_6_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_6_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_6_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_5_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_5_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 5) field LCLK_GEN_5_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_5_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_5_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_5_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_5_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_5_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_5_V_poll", value );

    /* (0x0001507c bits 5) field LCLK_GEN_5_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_5_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_5_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_4_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_4_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 4) field LCLK_GEN_4_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_4_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_4_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_4_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_4_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_4_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_4_V_poll", value );

    /* (0x0001507c bits 4) field LCLK_GEN_4_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_4_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_4_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_3_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_3_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 3) field LCLK_GEN_3_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_3_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_3_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_3_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_3_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_3_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_3_V_poll", value );

    /* (0x0001507c bits 3) field LCLK_GEN_3_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_3_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_3_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_2_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_2_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 2) field LCLK_GEN_2_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_2_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_2_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_2_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_2_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_2_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_2_V_poll", value );

    /* (0x0001507c bits 2) field LCLK_GEN_2_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_2_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_2_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_1_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_1_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 1) field LCLK_GEN_1_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_1_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_1_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_1_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_1_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_1_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_1_V_poll", value );

    /* (0x0001507c bits 1) field LCLK_GEN_1_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_1_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_1_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_0_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_0_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0001507c bits 0) field LCLK_GEN_0_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_0_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_0_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_0_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_0_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_0_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_0_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                         digi_handle_t *h_ptr,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_0_V_poll", value );

    /* (0x0001507c bits 0) field LCLK_GEN_0_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_0 */
    return digi_pgmrclk_reg_INT_STAT_REG_0_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_0_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_0_BIT_LCLK_GEN_0_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_FPI_SYNC_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_FPI_SYNC_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015080 bits 8) field FPI_SYNC_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_FPI_SYNC_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_FPI_SYNC_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_FPI_SYNC_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_SYNC_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                       digi_handle_t *h_ptr,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_FPI_SYNC_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                       digi_handle_t *h_ptr,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_FPI_SYNC_V_poll", value );

    /* (0x00015080 bits 8) field FPI_SYNC_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    return digi_pgmrclk_reg_INT_STAT_REG_1_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_FPI_SYNC_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_FPI_SYNC_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_7_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_7_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015080 bits 7) field LCLK_GEN_SYNC_7_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_7_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_7_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_7_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_7_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_7_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_7_V_poll", value );

    /* (0x00015080 bits 7) field LCLK_GEN_SYNC_7_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    return digi_pgmrclk_reg_INT_STAT_REG_1_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_7_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_7_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_6_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_6_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015080 bits 6) field LCLK_GEN_SYNC_6_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_6_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_6_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_6_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_6_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_6_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_6_V_poll", value );

    /* (0x00015080 bits 6) field LCLK_GEN_SYNC_6_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    return digi_pgmrclk_reg_INT_STAT_REG_1_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_6_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_6_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_5_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_5_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015080 bits 5) field LCLK_GEN_SYNC_5_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_5_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_5_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_5_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_5_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_5_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_5_V_poll", value );

    /* (0x00015080 bits 5) field LCLK_GEN_SYNC_5_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    return digi_pgmrclk_reg_INT_STAT_REG_1_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_5_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_5_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_4_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_4_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015080 bits 4) field LCLK_GEN_SYNC_4_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_4_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_4_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_4_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_4_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_4_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_4_V_poll", value );

    /* (0x00015080 bits 4) field LCLK_GEN_SYNC_4_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    return digi_pgmrclk_reg_INT_STAT_REG_1_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_4_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_4_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_3_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_3_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015080 bits 3) field LCLK_GEN_SYNC_3_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_3_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_3_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_3_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_3_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_3_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_3_V_poll", value );

    /* (0x00015080 bits 3) field LCLK_GEN_SYNC_3_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    return digi_pgmrclk_reg_INT_STAT_REG_1_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_3_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_3_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_2_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_2_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015080 bits 2) field LCLK_GEN_SYNC_2_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_2_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_2_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_2_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_2_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_2_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_2_V_poll", value );

    /* (0x00015080 bits 2) field LCLK_GEN_SYNC_2_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    return digi_pgmrclk_reg_INT_STAT_REG_1_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_2_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_2_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_1_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_1_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015080 bits 1) field LCLK_GEN_SYNC_1_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_1_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_1_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_1_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_1_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_1_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_1_V_poll", value );

    /* (0x00015080 bits 1) field LCLK_GEN_SYNC_1_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    return digi_pgmrclk_reg_INT_STAT_REG_1_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_1_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_1_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}

static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_0_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_LCLK_GEN_SYNC_0_V_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015080 bits 0) field LCLK_GEN_SYNC_0_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    reg_value = digi_pgmrclk_reg_INT_STAT_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_0_V_MSK) >> DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_0_V_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_0_V_get", value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_0_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE digi_pgmrclk_field_LCLK_GEN_SYNC_0_V_poll( digi_pgmrclk_buffer_t *b_ptr,
                                                                              digi_handle_t *h_ptr,
                                                                              UINT32 value,
                                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                                              UINT32 max_count,
                                                                              UINT32 *num_failed_polls,
                                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "digi_pgmrclk_field_LCLK_GEN_SYNC_0_V_poll", value );

    /* (0x00015080 bits 0) field LCLK_GEN_SYNC_0_V of register PMC_DIGI_PGMRCLK_REG_INT_STAT_REG_1 */
    return digi_pgmrclk_reg_INT_STAT_REG_1_poll( b_ptr,
                                                 h_ptr,
                                                 DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_0_V_MSK,
                                                 (value<<DIGI_PGMRCLK_REG_INT_STAT_REG_1_BIT_LCLK_GEN_SYNC_0_V_OFF),
                                                 cmp,
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status
 * ==================================================================================
 */
static INLINE UINT32 digi_pgmrclk_field_SS_TIP_COMPLETE_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_SS_TIP_COMPLETE_get( digi_pgmrclk_buffer_t *b_ptr, digi_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00015048 bits 7:0) bits 0:7 use field SS_TIP_COMPLETE of register PMC_DIGI_PGMRCLK_REG_TIP_COMPLETE_STAT */
    reg_value = digi_pgmrclk_reg_TIP_COMPLETE_STAT_read( b_ptr,
                                                         h_ptr);
    value = (reg_value & DIGI_PGMRCLK_REG_TIP_COMPLETE_STAT_BIT_SS_TIP_COMPLETE_MSK) >> DIGI_PGMRCLK_REG_TIP_COMPLETE_STAT_BIT_SS_TIP_COMPLETE_OFF;
    IOLOG( "%s -> 0x%08x", "digi_pgmrclk_field_SS_TIP_COMPLETE_get", value );

    return value;
}
static INLINE UINT32 digi_pgmrclk_field_range_SS_TIP_COMPLETE_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 digi_pgmrclk_field_range_SS_TIP_COMPLETE_get( digi_pgmrclk_buffer_t *b_ptr,
                                                                   digi_handle_t *h_ptr,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "digi_pgmrclk_field_range_SS_TIP_COMPLETE_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "digi_pgmrclk_field_range_SS_TIP_COMPLETE_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00015048 bits 7:0) bits 0:7 use field SS_TIP_COMPLETE of register PMC_DIGI_PGMRCLK_REG_TIP_COMPLETE_STAT */
    reg_value = digi_pgmrclk_reg_TIP_COMPLETE_STAT_read( b_ptr,
                                                         h_ptr);
    field_value = (reg_value & DIGI_PGMRCLK_REG_TIP_COMPLETE_STAT_BIT_SS_TIP_COMPLETE_MSK)
                  >> DIGI_PGMRCLK_REG_TIP_COMPLETE_STAT_BIT_SS_TIP_COMPLETE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, DIGI_PGMRCLK_REG_TIP_COMPLETE_STAT_BIT_SS_TIP_COMPLETE_MSK, DIGI_PGMRCLK_REG_TIP_COMPLETE_STAT_BIT_SS_TIP_COMPLETE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "digi_pgmrclk_field_range_SS_TIP_COMPLETE_get", start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _DIGI_PGMRCLK_IO_INLINE_H */
