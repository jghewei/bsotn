/******************************************************************************
 *   COPYRIGHT (C) 2013 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the c8_ctrl block
 *****************************************************************************/
#ifndef _C8_CTRL_IO_INLINE_H
#define _C8_CTRL_IO_INLINE_H

#include "c8.h"
#include "c8_ctrl_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define C8_CTRL_IO_VERSION 2

/*
 * ==================================================================================
 *  tsb level structure and access functions for c8_ctrl
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) LOG( __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) LOG( "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) LOG_DATA( __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    c8_handle_t * h_ptr;
    UINT32 A;
    pmc_sys_handle_t * sys_handle;
    PMC_VAR_CONST UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} c8_ctrl_buffer_t;
static INLINE void c8_ctrl_buffer_init( c8_ctrl_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A ) ALWAYS_INLINE;
static INLINE void c8_ctrl_buffer_init( c8_ctrl_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->A                        = A;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = (((pmc_handle_t *)h_ptr)->base_address + ((0)*0x01000) );
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s A=%d", "c8_ctrl_buffer_init", A);
    
}

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void c8_ctrl_buffer_flush( c8_ctrl_buffer_t *b_ptr ) ALWAYS_INLINE;
static INLINE void c8_ctrl_buffer_flush( c8_ctrl_buffer_t *b_ptr )
{
    IOLOG( "c8_ctrl_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 c8_ctrl_reg_read( c8_ctrl_buffer_t *b_ptr,
                                       c8_handle_t *h_ptr,
                                       UINT32 A,
                                       UINT32 mem_type,
                                       UINT32 reg ) ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_read( c8_ctrl_buffer_t *b_ptr,
                                       c8_handle_t *h_ptr,
                                       UINT32 A,
                                       UINT32 mem_type,
                                       UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                (b_ptr->base_address + (b_ptr->A)*0x01000),
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg);
    return value;
}
static INLINE void c8_ctrl_reg_write( c8_ctrl_buffer_t *b_ptr,
                                      c8_handle_t *h_ptr,
                                      UINT32 A,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_write( c8_ctrl_buffer_t *b_ptr,
                                      c8_handle_t *h_ptr,
                                      UINT32 A,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         (b_ptr->base_address + (b_ptr->A)*0x01000),
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                         value);
}

static INLINE void c8_ctrl_field_set( c8_ctrl_buffer_t *b_ptr,
                                      c8_handle_t *h_ptr,
                                      UINT32 A,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 mask,
                                      UINT32 unused_mask,
                                      UINT32 ofs,
                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_set( c8_ctrl_buffer_t *b_ptr,
                                      c8_handle_t *h_ptr,
                                      UINT32 A,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 mask,
                                      UINT32 unused_mask,
                                      UINT32 ofs,
                                      UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x01000),
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void c8_ctrl_action_on_write_field_set( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 mem_type,
                                                      UINT32 reg,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_action_on_write_field_set( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 mem_type,
                                                      UINT32 reg,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         (b_ptr->base_address + (b_ptr->A)*0x01000),
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                         value<<ofs);
}

static INLINE void c8_ctrl_burst_read( c8_ctrl_buffer_t *b_ptr,
                                       c8_handle_t *h_ptr,
                                       UINT32 A,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 len,
                                       UINT32 *value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_burst_read( c8_ctrl_buffer_t *b_ptr,
                                       c8_handle_t *h_ptr,
                                       UINT32 A,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 len,
                                       UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x01000),
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                          len,
                          value);
}

static INLINE void c8_ctrl_burst_write( c8_ctrl_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 len,
                                        UINT32 *value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_burst_write( c8_ctrl_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 len,
                                        UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x01000),
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_poll( c8_ctrl_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 mem_type,
                                                 UINT32 reg,
                                                 UINT32 mask,
                                                 UINT32 value,
                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                 UINT32 max_count,
                                                 UINT32 *num_failed_polls,
                                                 UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_poll( c8_ctrl_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 mem_type,
                                                 UINT32 reg,
                                                 UINT32 mask,
                                                 UINT32 value,
                                                 PMC_POLL_COMPARISON_TYPE cmp,
                                                 UINT32 max_count,
                                                 UINT32 *num_failed_polls,
                                                 UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x01000),
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for c8_ctrl
 * ==================================================================================
 */

static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_write( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_write( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_write( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_write( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_write( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_write( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_CONFIG,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_CONFIG,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__write( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__write( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_STATUS,
                       PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_,
                       value);
}

static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__field_set( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__field_set( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_STATUS,
                       PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_,
                       mask,
                       PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__read( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__read( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_STATUS,
                                  PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__read", reg_value, A);
    return reg_value;
}

static INLINE void c8_ctrl_reg_STAT_INT_EVENT_write( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_STAT_INT_EVENT_write( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_STAT_INT_EVENT_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_STATUS,
                       PMC_MTSB_FSM_REG_STAT_INT_EVENT,
                       value);
}

static INLINE void c8_ctrl_reg_STAT_INT_EVENT_action_on_write_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                         c8_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_STAT_INT_EVENT_action_on_write_field_set( c8_ctrl_buffer_t *b_ptr,
                                                                         c8_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_STAT_INT_EVENT_action_on_write_field_set", A, mask, ofs, value );
    c8_ctrl_action_on_write_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       MEM_TYPE_STATUS,
                                       PMC_MTSB_FSM_REG_STAT_INT_EVENT,
                                       mask,
                                       ofs,
                                       value);

}

static INLINE UINT32 c8_ctrl_reg_STAT_INT_EVENT_read( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_STAT_INT_EVENT_read( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_STATUS,
                                  PMC_MTSB_FSM_REG_STAT_INT_EVENT);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_STAT_INT_EVENT_read", reg_value, A);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_reg_STAT_INT_EVENT_poll( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 mask,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_reg_STAT_INT_EVENT_poll( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 mask,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "c8_ctrl_reg_STAT_INT_EVENT_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return c8_ctrl_poll( b_ptr,
                         h_ptr,
                         A,
                         MEM_TYPE_STATUS,
                         PMC_MTSB_FSM_REG_STAT_INT_EVENT,
                         mask,
                         value,
                         cmp,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


static INLINE void c8_ctrl_reg_STAT_INT_EN_write( c8_ctrl_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_STAT_INT_EN_write( c8_ctrl_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_ctrl_reg_STAT_INT_EN_write", value );
    c8_ctrl_reg_write( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_STATUS,
                       PMC_MTSB_FSM_REG_STAT_INT_EN,
                       value);
}

static INLINE void c8_ctrl_reg_STAT_INT_EN_field_set( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_reg_STAT_INT_EN_field_set( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_ctrl_reg_STAT_INT_EN_field_set", A, mask, ofs, value );
    c8_ctrl_field_set( b_ptr,
                       h_ptr,
                       A,
                       MEM_TYPE_STATUS,
                       PMC_MTSB_FSM_REG_STAT_INT_EN,
                       mask,
                       PMC_MTSB_FSM_REG_STAT_INT_EN_UNUSED_MASK,
                       ofs,
                       value);

}

static INLINE UINT32 c8_ctrl_reg_STAT_INT_EN_read( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_STAT_INT_EN_read( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_STATUS,
                                  PMC_MTSB_FSM_REG_STAT_INT_EN);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_STAT_INT_EN_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 c8_ctrl_reg_STAT_INT_read( c8_ctrl_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_reg_STAT_INT_read( c8_ctrl_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_ctrl_reg_read( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_STATUS,
                                  PMC_MTSB_FSM_REG_STAT_INT);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_ctrl_reg_STAT_INT_read", reg_value, A);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_reg_STAT_INT_poll( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_reg_STAT_INT_poll( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              PMC_POLL_COMPARISON_TYPE cmp,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "c8_ctrl_reg_STAT_INT_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return c8_ctrl_poll( b_ptr,
                         h_ptr,
                         A,
                         MEM_TYPE_STATUS,
                         PMC_MTSB_FSM_REG_STAT_INT,
                         mask,
                         value,
                         cmp,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */
static INLINE void c8_ctrl_field_ADAPT_CLK_ENB_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_CLK_ENB_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_CLK_ENB_OVR_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_CLK_ENB_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_CLK_ENB_OVR_set", A, value );

    /* (0x00000c00 bits 10) field ADAPT_CLK_ENB_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_CLK_ENB_OVR_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_CLK_ENB_OVR_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_CLK_ENB_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_CLK_ENB_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_CLK_ENB_OVR_get", A, 7);
    /* (0x00000c00 bits 10) field ADAPT_CLK_ENB_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_CLK_ENB_OVR_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_CLK_ENB_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_CLK_ENB_OVR_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_set", A, value );

    /* (0x00000c00 bits 9) field ADAPT_CLK_ENB_OVR_EN of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_CLK_ENB_OVR_EN_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_CLK_ENB_OVR_EN_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_get", A, 7);
    /* (0x00000c00 bits 9) field ADAPT_CLK_ENB_OVR_EN of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_CLK_ENB_OVR_EN_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_CLK_ENB_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_CLK_ENB_OVR_EN_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_ENB_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_ENB_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_ENB_OVR_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_ENB_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_ENB_OVR_set", A, value );

    /* (0x00000c00 bits 8) field ADAPT_ENB_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_ENB_OVR_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_ENB_OVR_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_ENB_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_ENB_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_ENB_OVR_get", A, 7);
    /* (0x00000c00 bits 8) field ADAPT_ENB_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_ENB_OVR_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_ENB_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_ENB_OVR_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_ENB_OVR_EN_set( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_ENB_OVR_EN_set( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_ENB_OVR_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_ENB_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_ENB_OVR_EN_set", A, value );

    /* (0x00000c00 bits 7) field ADAPT_ENB_OVR_EN of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_ENB_OVR_EN_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_ENB_OVR_EN_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_ENB_OVR_EN_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_ENB_OVR_EN_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_ENB_OVR_EN_get", A, 7);
    /* (0x00000c00 bits 7) field ADAPT_ENB_OVR_EN of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_ENB_OVR_EN_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_ENB_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_ENB_OVR_EN_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_set", A, value );

    /* (0x00000c00 bits 6) field FORCE_ENABLE_COUNTER_TRIG of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_FORCE_ENABLE_COUNTER_TRIG_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_FORCE_ENABLE_COUNTER_TRIG_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_get", A, 7);
    /* (0x00000c00 bits 6) field FORCE_ENABLE_COUNTER_TRIG of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_FORCE_ENABLE_COUNTER_TRIG_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_FORCE_ENABLE_COUNTER_TRIG_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_FORCE_ENABLE_COUNTER_TRIG_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_STATUS_0_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_STATUS_0_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_STATUS_0_OVR_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_OVR_set", A, value );

    /* (0x00000c00 bits 5) field ADAPT_STATUS_0_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_STATUS_0_OVR_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_STATUS_0_OVR_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_STATUS_0_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_STATUS_0_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_STATUS_0_OVR_get", A, 7);
    /* (0x00000c00 bits 5) field ADAPT_STATUS_0_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_STATUS_0_OVR_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_STATUS_0_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_OVR_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_STATUS_0_OVR_EN_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_STATUS_0_OVR_EN_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_STATUS_0_OVR_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_OVR_EN_set", A, value );

    /* (0x00000c00 bits 4) field ADAPT_STATUS_0_OVR_EN of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_STATUS_0_OVR_EN_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_STATUS_0_OVR_EN_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_STATUS_0_OVR_EN_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_STATUS_0_OVR_EN_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_STATUS_0_OVR_EN_get", A, 7);
    /* (0x00000c00 bits 4) field ADAPT_STATUS_0_OVR_EN of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_STATUS_0_OVR_EN_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_STATUS_0_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_OVR_EN_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_INIT_FORCE_set( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_INIT_FORCE_set( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_INIT_FORCE_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_INIT_FORCE_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_INIT_FORCE_set", A, value );

    /* (0x00000c00 bits 3) field ADAPT_INIT_FORCE of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_INIT_FORCE_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_INIT_FORCE_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_INIT_FORCE_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_INIT_FORCE_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_INIT_FORCE_get", A, 7);
    /* (0x00000c00 bits 3) field ADAPT_INIT_FORCE of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_INIT_FORCE_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_ADAPT_INIT_FORCE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_INIT_FORCE_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_TO_PCS_PMA_OVR_EN_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_TO_PCS_PMA_OVR_EN_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_TO_PCS_PMA_OVR_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_TO_PCS_PMA_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_TO_PCS_PMA_OVR_EN_set", A, value );

    /* (0x00000c00 bits 2) field TO_PCS_PMA_OVR_EN of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_TO_PCS_PMA_OVR_EN_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_TO_PCS_PMA_OVR_EN_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_TO_PCS_PMA_OVR_EN_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_TO_PCS_PMA_OVR_EN_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_TO_PCS_PMA_OVR_EN_get", A, 7);
    /* (0x00000c00 bits 2) field TO_PCS_PMA_OVR_EN of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_TO_PCS_PMA_OVR_EN_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_TO_PCS_PMA_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_TO_PCS_PMA_OVR_EN_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_FROM_PCS_PMA_OVR_EN_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_FROM_PCS_PMA_OVR_EN_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_FROM_PCS_PMA_OVR_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_FROM_PCS_PMA_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_FROM_PCS_PMA_OVR_EN_set", A, value );

    /* (0x00000c00 bits 1) field FROM_PCS_PMA_OVR_EN of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_FROM_PCS_PMA_OVR_EN_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_FROM_PCS_PMA_OVR_EN_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_FROM_PCS_PMA_OVR_EN_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_FROM_PCS_PMA_OVR_EN_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_FROM_PCS_PMA_OVR_EN_get", A, 7);
    /* (0x00000c00 bits 1) field FROM_PCS_PMA_OVR_EN of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_FROM_PCS_PMA_OVR_EN_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_FROM_PCS_PMA_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_FROM_PCS_PMA_OVR_EN_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_RESET_ADPT_FSM_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RESET_ADPT_FSM_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RESET_ADPT_FSM_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RESET_ADPT_FSM_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RESET_ADPT_FSM_set", A, value );

    /* (0x00000c00 bits 0) field RESET_ADPT_FSM of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_RESET_ADPT_FSM_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_RESET_ADPT_FSM_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_RESET_ADPT_FSM_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RESET_ADPT_FSM_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RESET_ADPT_FSM_get", A, 7);
    /* (0x00000c00 bits 0) field RESET_ADPT_FSM of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_1_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_RESET_ADPT_FSM_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_1_BIT_RESET_ADPT_FSM_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RESET_ADPT_FSM_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_PRELOAD_ADC_INDEX_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PRELOAD_ADC_INDEX_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN3_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN3_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN3_set", A, value );

    /* (0x00000c08 bits 20:18) field PRELOAD_ADC_INDEX_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN3_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN3_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_PRELOAD_ADC_INDEX_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PRELOAD_ADC_INDEX_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN3_get", A, 7);
    /* (0x00000c08 bits 20:18) field PRELOAD_ADC_INDEX_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c08 bits 20:18) field PRELOAD_ADC_INDEX_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c08 bits 20:18) field PRELOAD_ADC_INDEX_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   subfield_mask << (MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN3_OFF + subfield_offset),
                                                   MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN3_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c08 bits 20:18) field PRELOAD_ADC_INDEX_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN3_MSK, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_PRELOAD_ADC_INDEX_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PRELOAD_ADC_INDEX_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN2_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN2_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN2_set", A, value );

    /* (0x00000c08 bits 17:15) field PRELOAD_ADC_INDEX_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN2_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN2_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_PRELOAD_ADC_INDEX_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PRELOAD_ADC_INDEX_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN2_get", A, 7);
    /* (0x00000c08 bits 17:15) field PRELOAD_ADC_INDEX_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c08 bits 17:15) field PRELOAD_ADC_INDEX_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c08 bits 17:15) field PRELOAD_ADC_INDEX_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   subfield_mask << (MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN2_OFF + subfield_offset),
                                                   MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN2_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c08 bits 17:15) field PRELOAD_ADC_INDEX_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN2_MSK, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_PRELOAD_ADC_INDEX_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PRELOAD_ADC_INDEX_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN1_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN1_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN1_set", A, value );

    /* (0x00000c08 bits 14:12) field PRELOAD_ADC_INDEX_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN1_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN1_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_PRELOAD_ADC_INDEX_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PRELOAD_ADC_INDEX_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN1_get", A, 7);
    /* (0x00000c08 bits 14:12) field PRELOAD_ADC_INDEX_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PRELOAD_ADC_INDEX_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c08 bits 14:12) field PRELOAD_ADC_INDEX_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c08 bits 14:12) field PRELOAD_ADC_INDEX_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   subfield_mask << (MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN1_OFF + subfield_offset),
                                                   MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN1_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c08 bits 14:12) field PRELOAD_ADC_INDEX_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN1_MSK, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_ADC_INDEX_GEN1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_ADC_INDEX_GEN1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_PRELOAD_FFE_INDEX_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PRELOAD_FFE_INDEX_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN3_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN3_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN3_set", A, value );

    /* (0x00000c08 bits 11:9) field PRELOAD_FFE_INDEX_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN3_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN3_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_PRELOAD_FFE_INDEX_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PRELOAD_FFE_INDEX_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN3_get", A, 7);
    /* (0x00000c08 bits 11:9) field PRELOAD_FFE_INDEX_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c08 bits 11:9) field PRELOAD_FFE_INDEX_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c08 bits 11:9) field PRELOAD_FFE_INDEX_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   subfield_mask << (MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN3_OFF + subfield_offset),
                                                   MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN3_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c08 bits 11:9) field PRELOAD_FFE_INDEX_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN3_MSK, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_PRELOAD_FFE_INDEX_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PRELOAD_FFE_INDEX_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN2_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN2_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN2_set", A, value );

    /* (0x00000c08 bits 8:6) field PRELOAD_FFE_INDEX_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN2_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN2_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_PRELOAD_FFE_INDEX_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PRELOAD_FFE_INDEX_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN2_get", A, 7);
    /* (0x00000c08 bits 8:6) field PRELOAD_FFE_INDEX_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c08 bits 8:6) field PRELOAD_FFE_INDEX_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c08 bits 8:6) field PRELOAD_FFE_INDEX_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   subfield_mask << (MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN2_OFF + subfield_offset),
                                                   MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN2_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c08 bits 8:6) field PRELOAD_FFE_INDEX_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN2_MSK, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_PRELOAD_FFE_INDEX_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PRELOAD_FFE_INDEX_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN1_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN1_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN1_set", A, value );

    /* (0x00000c08 bits 5:3) field PRELOAD_FFE_INDEX_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN1_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN1_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_PRELOAD_FFE_INDEX_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PRELOAD_FFE_INDEX_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN1_get", A, 7);
    /* (0x00000c08 bits 5:3) field PRELOAD_FFE_INDEX_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PRELOAD_FFE_INDEX_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c08 bits 5:3) field PRELOAD_FFE_INDEX_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c08 bits 5:3) field PRELOAD_FFE_INDEX_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   subfield_mask << (MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN1_OFF + subfield_offset),
                                                   MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN1_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c08 bits 5:3) field PRELOAD_FFE_INDEX_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN1_MSK, MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_FFE_INDEX_GEN1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_PRELOAD_FFE_INDEX_GEN1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_PRELOAD_LUT_EN_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PRELOAD_LUT_EN_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_LUT_EN_GEN3_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PRELOAD_LUT_EN_GEN3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PRELOAD_LUT_EN_GEN3_set", A, value );

    /* (0x00000c08 bits 2) field PRELOAD_LUT_EN_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN3_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN3_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_PRELOAD_LUT_EN_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PRELOAD_LUT_EN_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_LUT_EN_GEN3_get", A, 7);
    /* (0x00000c08 bits 2) field PRELOAD_LUT_EN_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PRELOAD_LUT_EN_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_PRELOAD_LUT_EN_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PRELOAD_LUT_EN_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_LUT_EN_GEN2_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PRELOAD_LUT_EN_GEN2_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PRELOAD_LUT_EN_GEN2_set", A, value );

    /* (0x00000c08 bits 1) field PRELOAD_LUT_EN_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN2_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN2_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_PRELOAD_LUT_EN_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PRELOAD_LUT_EN_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_LUT_EN_GEN2_get", A, 7);
    /* (0x00000c08 bits 1) field PRELOAD_LUT_EN_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PRELOAD_LUT_EN_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_PRELOAD_LUT_EN_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PRELOAD_LUT_EN_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_LUT_EN_GEN1_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PRELOAD_LUT_EN_GEN1_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PRELOAD_LUT_EN_GEN1_set", A, value );

    /* (0x00000c08 bits 0) field PRELOAD_LUT_EN_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN1_MSK,
                                               MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN1_OFF,
                                               value);
}

static INLINE UINT32 c8_ctrl_field_PRELOAD_LUT_EN_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PRELOAD_LUT_EN_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_LUT_EN_GEN1_get", A, 7);
    /* (0x00000c08 bits 0) field PRELOAD_LUT_EN_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_CFG_2_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_CFG_2_BIT_PRELOAD_LUT_EN_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PRELOAD_LUT_EN_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_L0_CNTR_set( c8_ctrl_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_L0_CNTR_set( c8_ctrl_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_L0_CNTR_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_L0_CNTR_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_L0_CNTR_set", A, value );

    /* (0x00000c40 bits 3:0) field ADAPT_L0_CNTR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_L0_CNTR_get( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_L0_CNTR_get( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_L0_CNTR_get", A, 7);
    /* (0x00000c40 bits 3:0) field ADAPT_L0_CNTR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_L0_CNTR_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_L0_CNTR_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_L0_CNTR_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_L0_CNTR_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_L0_CNTR_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_L0_CNTR_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_L0_CNTR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c40 bits 3:0) field ADAPT_L0_CNTR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c40 bits 3:0) field ADAPT_L0_CNTR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_L0_CNTR_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_L0_CNTR_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_L0_CNTR_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_L0_CNTR_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_L0_CNTR_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c40 bits 3:0) field ADAPT_L0_CNTR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_1_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_1_BIT_ADAPT_L0_CNTR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_L0_CNTR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DSS_ENB_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DSS_ENB_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DSS_ENB_GEN3_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DSS_ENB_GEN3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DSS_ENB_GEN3_set", A, value );

    /* (0x00000c44 bits 26) field DSS_ENB_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DSS_ENB_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DSS_ENB_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DSS_ENB_GEN3_get", A, 7);
    /* (0x00000c44 bits 26) field DSS_ENB_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DSS_ENB_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_DSS_ENB_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DSS_ENB_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DSS_ENB_GEN2_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DSS_ENB_GEN2_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DSS_ENB_GEN2_set", A, value );

    /* (0x00000c44 bits 25) field DSS_ENB_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DSS_ENB_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DSS_ENB_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DSS_ENB_GEN2_get", A, 7);
    /* (0x00000c44 bits 25) field DSS_ENB_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DSS_ENB_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_DSS_ENB_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DSS_ENB_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DSS_ENB_GEN1_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DSS_ENB_GEN1_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DSS_ENB_GEN1_set", A, value );

    /* (0x00000c44 bits 24) field DSS_ENB_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DSS_ENB_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DSS_ENB_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DSS_ENB_GEN1_get", A, 7);
    /* (0x00000c44 bits 24) field DSS_ENB_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_DSS_ENB_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DSS_ENB_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_MU_STEP_ADC_MAP_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_MU_STEP_ADC_MAP_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS3_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS3_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS3_set", A, value );

    /* (0x00000c44 bits 23:21) field MU_STEP_ADC_MAP_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_MU_STEP_ADC_MAP_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_MU_STEP_ADC_MAP_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS3_get", A, 7);
    /* (0x00000c44 bits 23:21) field MU_STEP_ADC_MAP_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c44 bits 23:21) field MU_STEP_ADC_MAP_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c44 bits 23:21) field MU_STEP_ADC_MAP_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS3_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS3_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c44 bits 23:21) field MU_STEP_ADC_MAP_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_MU_STEP_ADC_MAP_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_MU_STEP_ADC_MAP_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS2_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS2_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS2_set", A, value );

    /* (0x00000c44 bits 20:18) field MU_STEP_ADC_MAP_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_MU_STEP_ADC_MAP_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_MU_STEP_ADC_MAP_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS2_get", A, 7);
    /* (0x00000c44 bits 20:18) field MU_STEP_ADC_MAP_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c44 bits 20:18) field MU_STEP_ADC_MAP_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c44 bits 20:18) field MU_STEP_ADC_MAP_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS2_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS2_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c44 bits 20:18) field MU_STEP_ADC_MAP_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_MU_STEP_ADC_MAP_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_MU_STEP_ADC_MAP_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS1_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS1_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS1_set", A, value );

    /* (0x00000c44 bits 17:15) field MU_STEP_ADC_MAP_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_MU_STEP_ADC_MAP_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_MU_STEP_ADC_MAP_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS1_get", A, 7);
    /* (0x00000c44 bits 17:15) field MU_STEP_ADC_MAP_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c44 bits 17:15) field MU_STEP_ADC_MAP_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c44 bits 17:15) field MU_STEP_ADC_MAP_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS1_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS1_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c44 bits 17:15) field MU_STEP_ADC_MAP_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_MU_STEP_ADC_MAP_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_MU_STEP_ADC_MAP_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS0_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS0_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS0_set", A, value );

    /* (0x00000c44 bits 14:12) field MU_STEP_ADC_MAP_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS0_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS0_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_MU_STEP_ADC_MAP_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_MU_STEP_ADC_MAP_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS0_get", A, 7);
    /* (0x00000c44 bits 14:12) field MU_STEP_ADC_MAP_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_MU_STEP_ADC_MAP_PASS0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c44 bits 14:12) field MU_STEP_ADC_MAP_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c44 bits 14:12) field MU_STEP_ADC_MAP_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS0_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS0_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c44 bits 14:12) field MU_STEP_ADC_MAP_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_ADC_MAP_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_ADC_MAP_PASS0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_MU_STEP_COEF_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_MU_STEP_COEF_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_COEF_PASS3_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS3_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS3_set", A, value );

    /* (0x00000c44 bits 11:9) field MU_STEP_COEF_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_MU_STEP_COEF_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_MU_STEP_COEF_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_COEF_PASS3_get", A, 7);
    /* (0x00000c44 bits 11:9) field MU_STEP_COEF_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_MU_STEP_COEF_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_MU_STEP_COEF_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_COEF_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS3_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_COEF_PASS3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c44 bits 11:9) field MU_STEP_COEF_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c44 bits 11:9) field MU_STEP_COEF_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS3_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS3_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_MU_STEP_COEF_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_MU_STEP_COEF_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_COEF_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c44 bits 11:9) field MU_STEP_COEF_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_COEF_PASS3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_MU_STEP_COEF_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_MU_STEP_COEF_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_COEF_PASS2_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS2_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS2_set", A, value );

    /* (0x00000c44 bits 8:6) field MU_STEP_COEF_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_MU_STEP_COEF_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_MU_STEP_COEF_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_COEF_PASS2_get", A, 7);
    /* (0x00000c44 bits 8:6) field MU_STEP_COEF_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_MU_STEP_COEF_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_MU_STEP_COEF_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_COEF_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS2_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_COEF_PASS2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c44 bits 8:6) field MU_STEP_COEF_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c44 bits 8:6) field MU_STEP_COEF_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS2_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS2_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_MU_STEP_COEF_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_MU_STEP_COEF_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_COEF_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c44 bits 8:6) field MU_STEP_COEF_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_COEF_PASS2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_MU_STEP_COEF_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_MU_STEP_COEF_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_COEF_PASS1_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS1_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS1_set", A, value );

    /* (0x00000c44 bits 5:3) field MU_STEP_COEF_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_MU_STEP_COEF_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_MU_STEP_COEF_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_COEF_PASS1_get", A, 7);
    /* (0x00000c44 bits 5:3) field MU_STEP_COEF_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_MU_STEP_COEF_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_MU_STEP_COEF_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_COEF_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS1_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_COEF_PASS1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c44 bits 5:3) field MU_STEP_COEF_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c44 bits 5:3) field MU_STEP_COEF_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS1_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS1_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_MU_STEP_COEF_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_MU_STEP_COEF_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_COEF_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c44 bits 5:3) field MU_STEP_COEF_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_COEF_PASS1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_MU_STEP_COEF_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_MU_STEP_COEF_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_COEF_PASS0_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS0_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS0_set", A, value );

    /* (0x00000c44 bits 2:0) field MU_STEP_COEF_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS0_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS0_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_MU_STEP_COEF_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_MU_STEP_COEF_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_MU_STEP_COEF_PASS0_get", A, 7);
    /* (0x00000c44 bits 2:0) field MU_STEP_COEF_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_MU_STEP_COEF_PASS0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_MU_STEP_COEF_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_MU_STEP_COEF_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_COEF_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_COEF_PASS0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c44 bits 2:0) field MU_STEP_COEF_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c44 bits 2:0) field MU_STEP_COEF_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS0_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS0_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_MU_STEP_COEF_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_MU_STEP_COEF_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_MU_STEP_COEF_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_MU_STEP_COEF_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c44 bits 2:0) field MU_STEP_COEF_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_2_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_2_BIT_MU_STEP_COEF_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_MU_STEP_COEF_PASS0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_RR_PERIOD_COEF_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RR_PERIOD_COEF_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_COEF_GEN3_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RR_PERIOD_COEF_GEN3_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_COEF_GEN3_set", A, value );

    /* (0x00000c48 bits 23:20) field RR_PERIOD_COEF_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_RR_PERIOD_COEF_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RR_PERIOD_COEF_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_COEF_GEN3_get", A, 7);
    /* (0x00000c48 bits 23:20) field RR_PERIOD_COEF_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_COEF_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c48 bits 23:20) field RR_PERIOD_COEF_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c48 bits 23:20) field RR_PERIOD_COEF_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN3_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN3_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c48 bits 23:20) field RR_PERIOD_COEF_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_RR_PERIOD_COEF_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RR_PERIOD_COEF_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_COEF_GEN2_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RR_PERIOD_COEF_GEN2_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_COEF_GEN2_set", A, value );

    /* (0x00000c48 bits 19:16) field RR_PERIOD_COEF_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_RR_PERIOD_COEF_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RR_PERIOD_COEF_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_COEF_GEN2_get", A, 7);
    /* (0x00000c48 bits 19:16) field RR_PERIOD_COEF_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_COEF_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c48 bits 19:16) field RR_PERIOD_COEF_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c48 bits 19:16) field RR_PERIOD_COEF_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN2_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN2_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c48 bits 19:16) field RR_PERIOD_COEF_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_RR_PERIOD_COEF_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RR_PERIOD_COEF_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_COEF_GEN1_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RR_PERIOD_COEF_GEN1_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_COEF_GEN1_set", A, value );

    /* (0x00000c48 bits 15:12) field RR_PERIOD_COEF_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_RR_PERIOD_COEF_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RR_PERIOD_COEF_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_COEF_GEN1_get", A, 7);
    /* (0x00000c48 bits 15:12) field RR_PERIOD_COEF_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_COEF_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c48 bits 15:12) field RR_PERIOD_COEF_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c48 bits 15:12) field RR_PERIOD_COEF_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN1_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN1_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c48 bits 15:12) field RR_PERIOD_COEF_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_RR_PERIOD_COEF_GEN1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_COEF_GEN1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_L0_ENB_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_L0_ENB_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_L0_ENB_GEN3_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_L0_ENB_GEN3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_L0_ENB_GEN3_set", A, value );

    /* (0x00000c48 bits 11) field ADAPT_L0_ENB_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_L0_ENB_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_L0_ENB_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_L0_ENB_GEN3_get", A, 7);
    /* (0x00000c48 bits 11) field ADAPT_L0_ENB_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_L0_ENB_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_L0_ENB_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_L0_ENB_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_L0_ENB_GEN2_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_L0_ENB_GEN2_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_L0_ENB_GEN2_set", A, value );

    /* (0x00000c48 bits 10) field ADAPT_L0_ENB_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_L0_ENB_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_L0_ENB_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_L0_ENB_GEN2_get", A, 7);
    /* (0x00000c48 bits 10) field ADAPT_L0_ENB_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_L0_ENB_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_L0_ENB_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_L0_ENB_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_L0_ENB_GEN1_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_L0_ENB_GEN1_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_L0_ENB_GEN1_set", A, value );

    /* (0x00000c48 bits 9) field ADAPT_L0_ENB_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_L0_ENB_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_L0_ENB_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_L0_ENB_GEN1_get", A, 7);
    /* (0x00000c48 bits 9) field ADAPT_L0_ENB_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_3_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_3_BIT_ADAPT_L0_ENB_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_L0_ENB_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_RR_PERIOD_DSS_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RR_PERIOD_DSS_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_DSS_GEN3_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RR_PERIOD_DSS_GEN3_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_DSS_GEN3_set", A, value );

    /* (0x00000c4c bits 23:20) field RR_PERIOD_DSS_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_RR_PERIOD_DSS_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RR_PERIOD_DSS_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_DSS_GEN3_get", A, 7);
    /* (0x00000c4c bits 23:20) field RR_PERIOD_DSS_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_DSS_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c4c bits 23:20) field RR_PERIOD_DSS_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c4c bits 23:20) field RR_PERIOD_DSS_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN3_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN3_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c4c bits 23:20) field RR_PERIOD_DSS_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_RR_PERIOD_DSS_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RR_PERIOD_DSS_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_DSS_GEN2_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RR_PERIOD_DSS_GEN2_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_DSS_GEN2_set", A, value );

    /* (0x00000c4c bits 19:16) field RR_PERIOD_DSS_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_RR_PERIOD_DSS_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RR_PERIOD_DSS_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_DSS_GEN2_get", A, 7);
    /* (0x00000c4c bits 19:16) field RR_PERIOD_DSS_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_DSS_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c4c bits 19:16) field RR_PERIOD_DSS_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c4c bits 19:16) field RR_PERIOD_DSS_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN2_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN2_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c4c bits 19:16) field RR_PERIOD_DSS_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_RR_PERIOD_DSS_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RR_PERIOD_DSS_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_DSS_GEN1_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RR_PERIOD_DSS_GEN1_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_DSS_GEN1_set", A, value );

    /* (0x00000c4c bits 15:12) field RR_PERIOD_DSS_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_RR_PERIOD_DSS_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RR_PERIOD_DSS_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_DSS_GEN1_get", A, 7);
    /* (0x00000c4c bits 15:12) field RR_PERIOD_DSS_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_DSS_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c4c bits 15:12) field RR_PERIOD_DSS_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c4c bits 15:12) field RR_PERIOD_DSS_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN1_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN1_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c4c bits 15:12) field RR_PERIOD_DSS_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_DSS_GEN1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_DSS_GEN1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN3_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN3_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN3_set", A, value );

    /* (0x00000c4c bits 11:8) field RR_PERIOD_ADC_MAP_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN3_get", A, 7);
    /* (0x00000c4c bits 11:8) field RR_PERIOD_ADC_MAP_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c4c bits 11:8) field RR_PERIOD_ADC_MAP_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c4c bits 11:8) field RR_PERIOD_ADC_MAP_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN3_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN3_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c4c bits 11:8) field RR_PERIOD_ADC_MAP_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN2_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN2_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN2_set", A, value );

    /* (0x00000c4c bits 7:4) field RR_PERIOD_ADC_MAP_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN2_get", A, 7);
    /* (0x00000c4c bits 7:4) field RR_PERIOD_ADC_MAP_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c4c bits 7:4) field RR_PERIOD_ADC_MAP_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c4c bits 7:4) field RR_PERIOD_ADC_MAP_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN2_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN2_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c4c bits 7:4) field RR_PERIOD_ADC_MAP_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN1_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN1_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN1_set", A, value );

    /* (0x00000c4c bits 3:0) field RR_PERIOD_ADC_MAP_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN1_get", A, 7);
    /* (0x00000c4c bits 3:0) field RR_PERIOD_ADC_MAP_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RR_PERIOD_ADC_MAP_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c4c bits 3:0) field RR_PERIOD_ADC_MAP_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c4c bits 3:0) field RR_PERIOD_ADC_MAP_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN1_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN1_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c4c bits 3:0) field RR_PERIOD_ADC_MAP_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_4_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_4_BIT_RR_PERIOD_ADC_MAP_GEN1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_RR_PERIOD_ADC_MAP_GEN1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN3_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN3_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN3_set", A, value );

    /* (0x00000c50 bits 14:10) field DP_FFE_A_PRELOAD_PCBI_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN3_get", A, 7);
    /* (0x00000c50 bits 14:10) field DP_FFE_A_PRELOAD_PCBI_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c50 bits 14:10) field DP_FFE_A_PRELOAD_PCBI_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c50 bits 14:10) field DP_FFE_A_PRELOAD_PCBI_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN3_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN3_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                         c8_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                         c8_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c50 bits 14:10) field DP_FFE_A_PRELOAD_PCBI_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN2_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN2_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN2_set", A, value );

    /* (0x00000c50 bits 9:5) field DP_FFE_A_PRELOAD_PCBI_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN2_get", A, 7);
    /* (0x00000c50 bits 9:5) field DP_FFE_A_PRELOAD_PCBI_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c50 bits 9:5) field DP_FFE_A_PRELOAD_PCBI_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c50 bits 9:5) field DP_FFE_A_PRELOAD_PCBI_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN2_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN2_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                         c8_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                         c8_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c50 bits 9:5) field DP_FFE_A_PRELOAD_PCBI_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN1_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN1_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN1_set", A, value );

    /* (0x00000c50 bits 4:0) field DP_FFE_A_PRELOAD_PCBI_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN1_get", A, 7);
    /* (0x00000c50 bits 4:0) field DP_FFE_A_PRELOAD_PCBI_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_PRELOAD_PCBI_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c50 bits 4:0) field DP_FFE_A_PRELOAD_PCBI_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c50 bits 4:0) field DP_FFE_A_PRELOAD_PCBI_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN1_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN1_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                         c8_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                         c8_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c50 bits 4:0) field DP_FFE_A_PRELOAD_PCBI_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_5_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_5_BIT_DP_FFE_A_PRELOAD_PCBI_GEN1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_PRELOAD_PCBI_GEN1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_5_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_5_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_5_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_5_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_5_set", A, value );

    /* (0x00000c54 bits 29:25) field DP_FFE_A_LUT_5 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_5_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_5_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_5_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_5_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_5_get", A, 7);
    /* (0x00000c54 bits 29:25) field DP_FFE_A_LUT_5 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_5_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_5_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_5_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_5_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_5_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_5_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_5_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_5_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_5_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c54 bits 29:25) field DP_FFE_A_LUT_5 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c54 bits 29:25) field DP_FFE_A_LUT_5 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_5_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_5_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_5_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_5_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_5_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_5_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_5_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c54 bits 29:25) field DP_FFE_A_LUT_5 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_5_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_5_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_5_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_4_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_4_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_4_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_4_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_4_set", A, value );

    /* (0x00000c54 bits 24:20) field DP_FFE_A_LUT_4 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_4_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_4_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_4_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_4_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_4_get", A, 7);
    /* (0x00000c54 bits 24:20) field DP_FFE_A_LUT_4 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_4_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_4_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_4_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_4_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_4_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_4_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_4_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_4_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_4_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c54 bits 24:20) field DP_FFE_A_LUT_4 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c54 bits 24:20) field DP_FFE_A_LUT_4 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_4_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_4_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_4_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_4_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_4_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_4_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_4_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c54 bits 24:20) field DP_FFE_A_LUT_4 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_4_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_4_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_4_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_3_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_3_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_3_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_3_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_3_set", A, value );

    /* (0x00000c54 bits 19:15) field DP_FFE_A_LUT_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_3_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_3_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_3_get", A, 7);
    /* (0x00000c54 bits 19:15) field DP_FFE_A_LUT_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_3_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_3_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_3_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_3_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c54 bits 19:15) field DP_FFE_A_LUT_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c54 bits 19:15) field DP_FFE_A_LUT_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_3_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_3_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_3_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_3_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_3_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_3_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c54 bits 19:15) field DP_FFE_A_LUT_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_2_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_2_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_2_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_2_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_2_set", A, value );

    /* (0x00000c54 bits 14:10) field DP_FFE_A_LUT_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_2_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_2_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_2_get", A, 7);
    /* (0x00000c54 bits 14:10) field DP_FFE_A_LUT_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_2_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_2_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_2_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c54 bits 14:10) field DP_FFE_A_LUT_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c54 bits 14:10) field DP_FFE_A_LUT_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_2_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_2_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_2_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_2_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c54 bits 14:10) field DP_FFE_A_LUT_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_1_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_1_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_1_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_1_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_1_set", A, value );

    /* (0x00000c54 bits 9:5) field DP_FFE_A_LUT_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_1_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_1_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_1_get", A, 7);
    /* (0x00000c54 bits 9:5) field DP_FFE_A_LUT_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_1_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_1_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_1_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c54 bits 9:5) field DP_FFE_A_LUT_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c54 bits 9:5) field DP_FFE_A_LUT_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_1_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_1_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_1_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_1_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c54 bits 9:5) field DP_FFE_A_LUT_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_0_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_0_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_0_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_0_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_0_set", A, value );

    /* (0x00000c54 bits 4:0) field DP_FFE_A_LUT_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_0_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_0_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_0_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_0_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_0_get", A, 7);
    /* (0x00000c54 bits 4:0) field DP_FFE_A_LUT_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_0_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_0_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_0_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_0_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c54 bits 4:0) field DP_FFE_A_LUT_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c54 bits 4:0) field DP_FFE_A_LUT_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_0_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_0_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_0_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_0_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_0_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_0_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c54 bits 4:0) field DP_FFE_A_LUT_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_6_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_6_BIT_DP_FFE_A_LUT_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_7_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_7_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_7_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_7_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_7_set", A, value );

    /* (0x00000c58 bits 9:5) field DP_FFE_A_LUT_7 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_7_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_7_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_7_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_7_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_7_get", A, 7);
    /* (0x00000c58 bits 9:5) field DP_FFE_A_LUT_7 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_7_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_7_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_7_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_7_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_7_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_7_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_7_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_7_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_7_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c58 bits 9:5) field DP_FFE_A_LUT_7 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c58 bits 9:5) field DP_FFE_A_LUT_7 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_7_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_7_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_7_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_7_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_7_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_7_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_7_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c58 bits 9:5) field DP_FFE_A_LUT_7 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_7_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_7_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_7_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_6_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_DP_FFE_A_LUT_6_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_6_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_6_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_6_set", A, value );

    /* (0x00000c58 bits 4:0) field DP_FFE_A_LUT_6 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_6_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_6_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_6_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_DP_FFE_A_LUT_6_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_DP_FFE_A_LUT_6_get", A, 7);
    /* (0x00000c58 bits 4:0) field DP_FFE_A_LUT_6 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_6_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_6_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_DP_FFE_A_LUT_6_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_6_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_DP_FFE_A_LUT_6_set( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_6_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_6_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_6_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_6_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c58 bits 4:0) field DP_FFE_A_LUT_6 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c58 bits 4:0) field DP_FFE_A_LUT_6 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_6_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_6_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_6_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_DP_FFE_A_LUT_6_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_DP_FFE_A_LUT_6_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_DP_FFE_A_LUT_6_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_DP_FFE_A_LUT_6_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c58 bits 4:0) field DP_FFE_A_LUT_6 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_7_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_6_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_6_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_7_BIT_DP_FFE_A_LUT_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_DP_FFE_A_LUT_6_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_TARGET_AMP_PRELOAD_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_TARGET_AMP_PRELOAD_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN3_set", A, 7);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN3_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN3_set", A, value );

    /* (0x00000c5c bits 29:24) field TARGET_AMP_PRELOAD_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_TARGET_AMP_PRELOAD_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_TARGET_AMP_PRELOAD_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN3_get", A, 7);
    /* (0x00000c5c bits 29:24) field TARGET_AMP_PRELOAD_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c5c bits 29:24) field TARGET_AMP_PRELOAD_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c5c bits 29:24) field TARGET_AMP_PRELOAD_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN3_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN3_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c5c bits 29:24) field TARGET_AMP_PRELOAD_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_TARGET_AMP_PRELOAD_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_TARGET_AMP_PRELOAD_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN2_set", A, 7);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN2_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN2_set", A, value );

    /* (0x00000c5c bits 23:18) field TARGET_AMP_PRELOAD_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_TARGET_AMP_PRELOAD_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_TARGET_AMP_PRELOAD_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN2_get", A, 7);
    /* (0x00000c5c bits 23:18) field TARGET_AMP_PRELOAD_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c5c bits 23:18) field TARGET_AMP_PRELOAD_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c5c bits 23:18) field TARGET_AMP_PRELOAD_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN2_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN2_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c5c bits 23:18) field TARGET_AMP_PRELOAD_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_TARGET_AMP_PRELOAD_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_TARGET_AMP_PRELOAD_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN1_set", A, 7);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN1_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN1_set", A, value );

    /* (0x00000c5c bits 17:12) field TARGET_AMP_PRELOAD_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_TARGET_AMP_PRELOAD_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_TARGET_AMP_PRELOAD_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN1_get", A, 7);
    /* (0x00000c5c bits 17:12) field TARGET_AMP_PRELOAD_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_TARGET_AMP_PRELOAD_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c5c bits 17:12) field TARGET_AMP_PRELOAD_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c5c bits 17:12) field TARGET_AMP_PRELOAD_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN1_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN1_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c5c bits 17:12) field TARGET_AMP_PRELOAD_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_TARGET_AMP_PRELOAD_GEN1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_TARGET_AMP_PRELOAD_GEN1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN3_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN3_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN3_set", A, value );

    /* (0x00000c5c bits 11:8) field ADC_MAP_PRELOAD_PCBI_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN3_get", A, 7);
    /* (0x00000c5c bits 11:8) field ADC_MAP_PRELOAD_PCBI_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c5c bits 11:8) field ADC_MAP_PRELOAD_PCBI_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c5c bits 11:8) field ADC_MAP_PRELOAD_PCBI_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN3_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN3_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c5c bits 11:8) field ADC_MAP_PRELOAD_PCBI_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN2_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN2_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN2_set", A, value );

    /* (0x00000c5c bits 7:4) field ADC_MAP_PRELOAD_PCBI_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN2_get", A, 7);
    /* (0x00000c5c bits 7:4) field ADC_MAP_PRELOAD_PCBI_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c5c bits 7:4) field ADC_MAP_PRELOAD_PCBI_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c5c bits 7:4) field ADC_MAP_PRELOAD_PCBI_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN2_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN2_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c5c bits 7:4) field ADC_MAP_PRELOAD_PCBI_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN1_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN1_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN1_set", A, value );

    /* (0x00000c5c bits 3:0) field ADC_MAP_PRELOAD_PCBI_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN1_get", A, 7);
    /* (0x00000c5c bits 3:0) field ADC_MAP_PRELOAD_PCBI_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_PRELOAD_PCBI_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c5c bits 3:0) field ADC_MAP_PRELOAD_PCBI_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c5c bits 3:0) field ADC_MAP_PRELOAD_PCBI_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN1_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN1_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c5c bits 3:0) field ADC_MAP_PRELOAD_PCBI_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_8_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_8_BIT_ADC_MAP_PRELOAD_PCBI_GEN1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_PRELOAD_PCBI_GEN1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_5_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_5_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_5_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_5_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_5_set", A, value );

    /* (0x00000c60 bits 23:20) field ADC_MAP_SCALE_LUT_5 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_5_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_5_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_5_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_5_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_5_get", A, 7);
    /* (0x00000c60 bits 23:20) field ADC_MAP_SCALE_LUT_5 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_5_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_5_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_5_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c60 bits 23:20) field ADC_MAP_SCALE_LUT_5 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c60 bits 23:20) field ADC_MAP_SCALE_LUT_5 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_5_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_5_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c60 bits 23:20) field ADC_MAP_SCALE_LUT_5 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_5_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_5_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_5_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_4_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_4_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_4_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_4_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_4_set", A, value );

    /* (0x00000c60 bits 19:16) field ADC_MAP_SCALE_LUT_4 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_4_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_4_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_4_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_4_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_4_get", A, 7);
    /* (0x00000c60 bits 19:16) field ADC_MAP_SCALE_LUT_4 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_4_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_4_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_4_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c60 bits 19:16) field ADC_MAP_SCALE_LUT_4 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c60 bits 19:16) field ADC_MAP_SCALE_LUT_4 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_4_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_4_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c60 bits 19:16) field ADC_MAP_SCALE_LUT_4 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_4_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_4_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_4_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_3_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_3_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_3_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_3_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_3_set", A, value );

    /* (0x00000c60 bits 15:12) field ADC_MAP_SCALE_LUT_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_3_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_3_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_3_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_3_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_3_get", A, 7);
    /* (0x00000c60 bits 15:12) field ADC_MAP_SCALE_LUT_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c60 bits 15:12) field ADC_MAP_SCALE_LUT_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c60 bits 15:12) field ADC_MAP_SCALE_LUT_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_3_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_3_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c60 bits 15:12) field ADC_MAP_SCALE_LUT_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_2_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_2_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_2_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_2_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_2_set", A, value );

    /* (0x00000c60 bits 11:8) field ADC_MAP_SCALE_LUT_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_2_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_2_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_2_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_2_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_2_get", A, 7);
    /* (0x00000c60 bits 11:8) field ADC_MAP_SCALE_LUT_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c60 bits 11:8) field ADC_MAP_SCALE_LUT_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c60 bits 11:8) field ADC_MAP_SCALE_LUT_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_2_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_2_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c60 bits 11:8) field ADC_MAP_SCALE_LUT_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_1_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_1_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_1_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_1_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_1_set", A, value );

    /* (0x00000c60 bits 7:4) field ADC_MAP_SCALE_LUT_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_1_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_1_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_1_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_1_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_1_get", A, 7);
    /* (0x00000c60 bits 7:4) field ADC_MAP_SCALE_LUT_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c60 bits 7:4) field ADC_MAP_SCALE_LUT_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c60 bits 7:4) field ADC_MAP_SCALE_LUT_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_1_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_1_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c60 bits 7:4) field ADC_MAP_SCALE_LUT_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_0_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADC_MAP_SCALE_LUT_0_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_0_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_0_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_0_set", A, value );

    /* (0x00000c60 bits 3:0) field ADC_MAP_SCALE_LUT_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_0_MSK,
                                                 MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_0_OFF,
                                                 value);
}

static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_0_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADC_MAP_SCALE_LUT_0_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADC_MAP_SCALE_LUT_0_get", A, 7);
    /* (0x00000c60 bits 3:0) field ADC_MAP_SCALE_LUT_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADC_MAP_SCALE_LUT_0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_set( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c60 bits 3:0) field ADC_MAP_SCALE_LUT_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c60 bits 3:0) field ADC_MAP_SCALE_LUT_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_0_OFF + subfield_offset),
                                                     MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_0_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_get( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c60 bits 3:0) field ADC_MAP_SCALE_LUT_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_9_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_9_BIT_ADC_MAP_SCALE_LUT_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADC_MAP_SCALE_LUT_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_CLIP_RATE_THRESH_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_CLIP_RATE_THRESH_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_THRESH_GEN3_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_CLIP_RATE_THRESH_GEN3_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_THRESH_GEN3_set", A, value );

    /* (0x00000c64 bits 26:24) field CLIP_RATE_THRESH_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_CLIP_RATE_THRESH_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_CLIP_RATE_THRESH_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_THRESH_GEN3_get", A, 7);
    /* (0x00000c64 bits 26:24) field CLIP_RATE_THRESH_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_THRESH_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c64 bits 26:24) field CLIP_RATE_THRESH_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c64 bits 26:24) field CLIP_RATE_THRESH_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN3_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c64 bits 26:24) field CLIP_RATE_THRESH_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_CLIP_RATE_THRESH_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_CLIP_RATE_THRESH_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_THRESH_GEN2_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_CLIP_RATE_THRESH_GEN2_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_THRESH_GEN2_set", A, value );

    /* (0x00000c64 bits 23:21) field CLIP_RATE_THRESH_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN2_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN2_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_CLIP_RATE_THRESH_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_CLIP_RATE_THRESH_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_THRESH_GEN2_get", A, 7);
    /* (0x00000c64 bits 23:21) field CLIP_RATE_THRESH_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_THRESH_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c64 bits 23:21) field CLIP_RATE_THRESH_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c64 bits 23:21) field CLIP_RATE_THRESH_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN2_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN2_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c64 bits 23:21) field CLIP_RATE_THRESH_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_CLIP_RATE_THRESH_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_CLIP_RATE_THRESH_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_THRESH_GEN1_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_CLIP_RATE_THRESH_GEN1_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_THRESH_GEN1_set", A, value );

    /* (0x00000c64 bits 20:18) field CLIP_RATE_THRESH_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN1_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN1_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_CLIP_RATE_THRESH_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_CLIP_RATE_THRESH_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_THRESH_GEN1_get", A, 7);
    /* (0x00000c64 bits 20:18) field CLIP_RATE_THRESH_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_THRESH_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c64 bits 20:18) field CLIP_RATE_THRESH_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c64 bits 20:18) field CLIP_RATE_THRESH_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN1_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c64 bits 20:18) field CLIP_RATE_THRESH_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_THRESH_GEN1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_THRESH_GEN1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_CLIP_RATE_AMP_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_CLIP_RATE_AMP_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_AMP_GEN3_set", A, 7);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_CLIP_RATE_AMP_GEN3_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_AMP_GEN3_set", A, value );

    /* (0x00000c64 bits 17:12) field CLIP_RATE_AMP_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_CLIP_RATE_AMP_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_CLIP_RATE_AMP_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_AMP_GEN3_get", A, 7);
    /* (0x00000c64 bits 17:12) field CLIP_RATE_AMP_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_AMP_GEN3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c64 bits 17:12) field CLIP_RATE_AMP_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c64 bits 17:12) field CLIP_RATE_AMP_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN3_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c64 bits 17:12) field CLIP_RATE_AMP_GEN3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_CLIP_RATE_AMP_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_CLIP_RATE_AMP_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_AMP_GEN2_set", A, 7);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_CLIP_RATE_AMP_GEN2_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_AMP_GEN2_set", A, value );

    /* (0x00000c64 bits 11:6) field CLIP_RATE_AMP_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN2_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN2_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_CLIP_RATE_AMP_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_CLIP_RATE_AMP_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_AMP_GEN2_get", A, 7);
    /* (0x00000c64 bits 11:6) field CLIP_RATE_AMP_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_AMP_GEN2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c64 bits 11:6) field CLIP_RATE_AMP_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c64 bits 11:6) field CLIP_RATE_AMP_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN2_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN2_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c64 bits 11:6) field CLIP_RATE_AMP_GEN2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_CLIP_RATE_AMP_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_CLIP_RATE_AMP_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_AMP_GEN1_set", A, 7);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_CLIP_RATE_AMP_GEN1_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_AMP_GEN1_set", A, value );

    /* (0x00000c64 bits 5:0) field CLIP_RATE_AMP_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN1_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN1_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_CLIP_RATE_AMP_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_CLIP_RATE_AMP_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CLIP_RATE_AMP_GEN1_get", A, 7);
    /* (0x00000c64 bits 5:0) field CLIP_RATE_AMP_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_CLIP_RATE_AMP_GEN1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c64 bits 5:0) field CLIP_RATE_AMP_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c64 bits 5:0) field CLIP_RATE_AMP_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN1_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c64 bits 5:0) field CLIP_RATE_AMP_GEN1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_10_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_10_BIT_CLIP_RATE_AMP_GEN1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_CLIP_RATE_AMP_GEN1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P3_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P3_set", A, value );

    /* (0x00000c68 bits 5) field PATH_PATTERN_ENB_GEN3_P3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN3_P3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN3_P3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P3_get", A, 7);
    /* (0x00000c68 bits 5) field PATH_PATTERN_ENB_GEN3_P3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN3_P3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN3_P3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P0T2_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P0T2_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P0T2_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P0T2_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P0T2_set", A, value );

    /* (0x00000c68 bits 4) field PATH_PATTERN_ENB_GEN3_P0T2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN3_P0T2_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN3_P0T2_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P0T2_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P0T2_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P0T2_get", A, 7);
    /* (0x00000c68 bits 4) field PATH_PATTERN_ENB_GEN3_P0T2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN3_P0T2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN3_P0T2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN3_P0T2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P3_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P3_set", A, value );

    /* (0x00000c68 bits 3) field PATH_PATTERN_ENB_GEN2_P3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN2_P3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN2_P3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P3_get", A, 7);
    /* (0x00000c68 bits 3) field PATH_PATTERN_ENB_GEN2_P3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN2_P3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN2_P3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P0T2_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P0T2_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P0T2_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P0T2_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P0T2_set", A, value );

    /* (0x00000c68 bits 2) field PATH_PATTERN_ENB_GEN2_P0T2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN2_P0T2_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN2_P0T2_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P0T2_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P0T2_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P0T2_get", A, 7);
    /* (0x00000c68 bits 2) field PATH_PATTERN_ENB_GEN2_P0T2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN2_P0T2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN2_P0T2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN2_P0T2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P3_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P3_set", A, value );

    /* (0x00000c68 bits 1) field PATH_PATTERN_ENB_GEN1_P3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN1_P3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN1_P3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P3_get", A, 7);
    /* (0x00000c68 bits 1) field PATH_PATTERN_ENB_GEN1_P3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN1_P3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN1_P3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P0T2_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P0T2_set( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P0T2_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P0T2_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P0T2_set", A, value );

    /* (0x00000c68 bits 0) field PATH_PATTERN_ENB_GEN1_P0T2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN1_P0T2_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN1_P0T2_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P0T2_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P0T2_get( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P0T2_get", A, 7);
    /* (0x00000c68 bits 0) field PATH_PATTERN_ENB_GEN1_P0T2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_11_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN1_P0T2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_11_BIT_PATH_PATTERN_ENB_GEN1_P0T2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PATH_PATTERN_ENB_GEN1_P0T2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN1_3_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_3_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_3_set", A, value );

    /* (0x00000c6c bits 15:12) field ADAPT_LOOPS_GEN1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN1_3_get", A, 7);
    /* (0x00000c6c bits 15:12) field ADAPT_LOOPS_GEN1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c6c bits 15:12) field ADAPT_LOOPS_GEN1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c6c bits 15:12) field ADAPT_LOOPS_GEN1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_3_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c6c bits 15:12) field ADAPT_LOOPS_GEN1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN1_2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN1_2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN1_2_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_2_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_2_set", A, value );

    /* (0x00000c6c bits 11:8) field ADAPT_LOOPS_GEN1_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_2_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_2_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN1_2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN1_2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN1_2_get", A, 7);
    /* (0x00000c6c bits 11:8) field ADAPT_LOOPS_GEN1_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c6c bits 11:8) field ADAPT_LOOPS_GEN1_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c6c bits 11:8) field ADAPT_LOOPS_GEN1_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_2_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_2_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c6c bits 11:8) field ADAPT_LOOPS_GEN1_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN1_1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN1_1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN1_1_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_1_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_1_set", A, value );

    /* (0x00000c6c bits 7:4) field ADAPT_LOOPS_GEN1_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_1_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_1_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN1_1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN1_1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN1_1_get", A, 7);
    /* (0x00000c6c bits 7:4) field ADAPT_LOOPS_GEN1_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c6c bits 7:4) field ADAPT_LOOPS_GEN1_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c6c bits 7:4) field ADAPT_LOOPS_GEN1_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_1_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c6c bits 7:4) field ADAPT_LOOPS_GEN1_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN1_0_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN1_0_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN1_0_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_0_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_0_set", A, value );

    /* (0x00000c6c bits 3:0) field ADAPT_LOOPS_GEN1_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_0_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_0_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN1_0_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN1_0_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN1_0_get", A, 7);
    /* (0x00000c6c bits 3:0) field ADAPT_LOOPS_GEN1_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN1_0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c6c bits 3:0) field ADAPT_LOOPS_GEN1_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c6c bits 3:0) field ADAPT_LOOPS_GEN1_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_0_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_0_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c6c bits 3:0) field ADAPT_LOOPS_GEN1_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_12_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_12_BIT_ADAPT_LOOPS_GEN1_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN1_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN2_3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN2_3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN2_3_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_3_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_3_set", A, value );

    /* (0x00000c70 bits 15:12) field ADAPT_LOOPS_GEN2_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN2_3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN2_3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN2_3_get", A, 7);
    /* (0x00000c70 bits 15:12) field ADAPT_LOOPS_GEN2_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c70 bits 15:12) field ADAPT_LOOPS_GEN2_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c70 bits 15:12) field ADAPT_LOOPS_GEN2_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_3_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c70 bits 15:12) field ADAPT_LOOPS_GEN2_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN2_2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN2_2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN2_2_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_2_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_2_set", A, value );

    /* (0x00000c70 bits 11:8) field ADAPT_LOOPS_GEN2_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_2_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_2_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN2_2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN2_2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN2_2_get", A, 7);
    /* (0x00000c70 bits 11:8) field ADAPT_LOOPS_GEN2_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c70 bits 11:8) field ADAPT_LOOPS_GEN2_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c70 bits 11:8) field ADAPT_LOOPS_GEN2_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_2_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_2_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c70 bits 11:8) field ADAPT_LOOPS_GEN2_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN2_1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN2_1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN2_1_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_1_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_1_set", A, value );

    /* (0x00000c70 bits 7:4) field ADAPT_LOOPS_GEN2_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_1_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_1_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN2_1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN2_1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN2_1_get", A, 7);
    /* (0x00000c70 bits 7:4) field ADAPT_LOOPS_GEN2_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c70 bits 7:4) field ADAPT_LOOPS_GEN2_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c70 bits 7:4) field ADAPT_LOOPS_GEN2_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_1_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c70 bits 7:4) field ADAPT_LOOPS_GEN2_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN2_0_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN2_0_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN2_0_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_0_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_0_set", A, value );

    /* (0x00000c70 bits 3:0) field ADAPT_LOOPS_GEN2_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_0_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_0_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN2_0_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN2_0_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN2_0_get", A, 7);
    /* (0x00000c70 bits 3:0) field ADAPT_LOOPS_GEN2_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN2_0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c70 bits 3:0) field ADAPT_LOOPS_GEN2_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c70 bits 3:0) field ADAPT_LOOPS_GEN2_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_0_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_0_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c70 bits 3:0) field ADAPT_LOOPS_GEN2_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_13_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_13_BIT_ADAPT_LOOPS_GEN2_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN2_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN3_3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN3_3_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN3_3_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_3_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_3_set", A, value );

    /* (0x00000c74 bits 15:12) field ADAPT_LOOPS_GEN3_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN3_3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN3_3_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN3_3_get", A, 7);
    /* (0x00000c74 bits 15:12) field ADAPT_LOOPS_GEN3_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c74 bits 15:12) field ADAPT_LOOPS_GEN3_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c74 bits 15:12) field ADAPT_LOOPS_GEN3_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_3_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c74 bits 15:12) field ADAPT_LOOPS_GEN3_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN3_2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN3_2_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN3_2_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_2_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_2_set", A, value );

    /* (0x00000c74 bits 11:8) field ADAPT_LOOPS_GEN3_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_2_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_2_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN3_2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN3_2_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN3_2_get", A, 7);
    /* (0x00000c74 bits 11:8) field ADAPT_LOOPS_GEN3_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c74 bits 11:8) field ADAPT_LOOPS_GEN3_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c74 bits 11:8) field ADAPT_LOOPS_GEN3_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_2_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_2_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c74 bits 11:8) field ADAPT_LOOPS_GEN3_2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN3_1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN3_1_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN3_1_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_1_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_1_set", A, value );

    /* (0x00000c74 bits 7:4) field ADAPT_LOOPS_GEN3_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_1_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_1_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN3_1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN3_1_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN3_1_get", A, 7);
    /* (0x00000c74 bits 7:4) field ADAPT_LOOPS_GEN3_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c74 bits 7:4) field ADAPT_LOOPS_GEN3_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c74 bits 7:4) field ADAPT_LOOPS_GEN3_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_1_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c74 bits 7:4) field ADAPT_LOOPS_GEN3_1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN3_0_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_LOOPS_GEN3_0_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN3_0_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_0_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_0_set", A, value );

    /* (0x00000c74 bits 3:0) field ADAPT_LOOPS_GEN3_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_0_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_0_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN3_0_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_LOOPS_GEN3_0_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_LOOPS_GEN3_0_get", A, 7);
    /* (0x00000c74 bits 3:0) field ADAPT_LOOPS_GEN3_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_LOOPS_GEN3_0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c74 bits 3:0) field ADAPT_LOOPS_GEN3_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c74 bits 3:0) field ADAPT_LOOPS_GEN3_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_0_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_0_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c74 bits 3:0) field ADAPT_LOOPS_GEN3_0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_14_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_14_BIT_ADAPT_LOOPS_GEN3_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_LOOPS_GEN3_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN2_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN2_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS3_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS3_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS3_set", A, value );

    /* (0x00000c78 bits 23:21) field OBJECTS_EN_GEN2_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN2_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN2_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS3_get", A, 7);
    /* (0x00000c78 bits 23:21) field OBJECTS_EN_GEN2_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c78 bits 23:21) field OBJECTS_EN_GEN2_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c78 bits 23:21) field OBJECTS_EN_GEN2_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS3_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c78 bits 23:21) field OBJECTS_EN_GEN2_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN2_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN2_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS2_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS2_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS2_set", A, value );

    /* (0x00000c78 bits 20:18) field OBJECTS_EN_GEN2_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS2_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS2_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN2_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN2_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS2_get", A, 7);
    /* (0x00000c78 bits 20:18) field OBJECTS_EN_GEN2_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c78 bits 20:18) field OBJECTS_EN_GEN2_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c78 bits 20:18) field OBJECTS_EN_GEN2_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS2_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS2_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c78 bits 20:18) field OBJECTS_EN_GEN2_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN2_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN2_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS1_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS1_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS1_set", A, value );

    /* (0x00000c78 bits 17:15) field OBJECTS_EN_GEN2_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS1_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS1_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN2_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN2_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS1_get", A, 7);
    /* (0x00000c78 bits 17:15) field OBJECTS_EN_GEN2_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c78 bits 17:15) field OBJECTS_EN_GEN2_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c78 bits 17:15) field OBJECTS_EN_GEN2_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS1_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c78 bits 17:15) field OBJECTS_EN_GEN2_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN2_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN2_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS0_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS0_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS0_set", A, value );

    /* (0x00000c78 bits 14:12) field OBJECTS_EN_GEN2_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS0_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS0_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN2_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN2_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS0_get", A, 7);
    /* (0x00000c78 bits 14:12) field OBJECTS_EN_GEN2_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN2_PASS0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c78 bits 14:12) field OBJECTS_EN_GEN2_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c78 bits 14:12) field OBJECTS_EN_GEN2_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS0_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS0_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c78 bits 14:12) field OBJECTS_EN_GEN2_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN2_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN2_PASS0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN1_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN1_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS3_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS3_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS3_set", A, value );

    /* (0x00000c78 bits 11:9) field OBJECTS_EN_GEN1_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN1_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN1_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS3_get", A, 7);
    /* (0x00000c78 bits 11:9) field OBJECTS_EN_GEN1_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c78 bits 11:9) field OBJECTS_EN_GEN1_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c78 bits 11:9) field OBJECTS_EN_GEN1_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS3_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c78 bits 11:9) field OBJECTS_EN_GEN1_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN1_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN1_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS2_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS2_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS2_set", A, value );

    /* (0x00000c78 bits 8:6) field OBJECTS_EN_GEN1_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS2_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS2_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN1_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN1_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS2_get", A, 7);
    /* (0x00000c78 bits 8:6) field OBJECTS_EN_GEN1_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c78 bits 8:6) field OBJECTS_EN_GEN1_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c78 bits 8:6) field OBJECTS_EN_GEN1_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS2_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS2_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c78 bits 8:6) field OBJECTS_EN_GEN1_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN1_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN1_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS1_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS1_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS1_set", A, value );

    /* (0x00000c78 bits 5:3) field OBJECTS_EN_GEN1_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS1_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS1_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN1_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN1_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS1_get", A, 7);
    /* (0x00000c78 bits 5:3) field OBJECTS_EN_GEN1_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c78 bits 5:3) field OBJECTS_EN_GEN1_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c78 bits 5:3) field OBJECTS_EN_GEN1_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS1_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c78 bits 5:3) field OBJECTS_EN_GEN1_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN1_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN1_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS0_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS0_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS0_set", A, value );

    /* (0x00000c78 bits 2:0) field OBJECTS_EN_GEN1_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS0_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS0_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN1_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN1_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS0_get", A, 7);
    /* (0x00000c78 bits 2:0) field OBJECTS_EN_GEN1_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN1_PASS0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c78 bits 2:0) field OBJECTS_EN_GEN1_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c78 bits 2:0) field OBJECTS_EN_GEN1_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS0_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS0_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c78 bits 2:0) field OBJECTS_EN_GEN1_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_15_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_15_BIT_OBJECTS_EN_GEN1_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN1_PASS0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN3_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN3_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS3_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS3_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS3_set", A, value );

    /* (0x00000c7c bits 11:9) field OBJECTS_EN_GEN3_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN3_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN3_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS3_get", A, 7);
    /* (0x00000c7c bits 11:9) field OBJECTS_EN_GEN3_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c7c bits 11:9) field OBJECTS_EN_GEN3_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c7c bits 11:9) field OBJECTS_EN_GEN3_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS3_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c7c bits 11:9) field OBJECTS_EN_GEN3_PASS3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN3_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN3_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS2_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS2_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS2_set", A, value );

    /* (0x00000c7c bits 8:6) field OBJECTS_EN_GEN3_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS2_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS2_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN3_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN3_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS2_get", A, 7);
    /* (0x00000c7c bits 8:6) field OBJECTS_EN_GEN3_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS2_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS2_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c7c bits 8:6) field OBJECTS_EN_GEN3_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c7c bits 8:6) field OBJECTS_EN_GEN3_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS2_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS2_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c7c bits 8:6) field OBJECTS_EN_GEN3_PASS2 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS2_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS2_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN3_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN3_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS1_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS1_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS1_set", A, value );

    /* (0x00000c7c bits 5:3) field OBJECTS_EN_GEN3_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS1_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS1_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN3_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN3_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS1_get", A, 7);
    /* (0x00000c7c bits 5:3) field OBJECTS_EN_GEN3_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS1_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS1_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c7c bits 5:3) field OBJECTS_EN_GEN3_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c7c bits 5:3) field OBJECTS_EN_GEN3_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS1_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c7c bits 5:3) field OBJECTS_EN_GEN3_PASS1 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS1_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS1_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN3_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OBJECTS_EN_GEN3_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS0_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS0_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS0_set", A, value );

    /* (0x00000c7c bits 2:0) field OBJECTS_EN_GEN3_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS0_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS0_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN3_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OBJECTS_EN_GEN3_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS0_get", A, 7);
    /* (0x00000c7c bits 2:0) field OBJECTS_EN_GEN3_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OBJECTS_EN_GEN3_PASS0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c7c bits 2:0) field OBJECTS_EN_GEN3_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c7c bits 2:0) field OBJECTS_EN_GEN3_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS0_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS0_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c7c bits 2:0) field OBJECTS_EN_GEN3_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_16_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_16_BIT_OBJECTS_EN_GEN3_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OBJECTS_EN_GEN3_PASS0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_OFL_DECAY_set( c8_ctrl_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_OFL_DECAY_set( c8_ctrl_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OFL_DECAY_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_OFL_DECAY_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_OFL_DECAY_set", A, value );

    /* (0x00000c80 bits 7:3) field OFL_DECAY of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_OFL_DECAY_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_OFL_DECAY_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_OFL_DECAY_get( c8_ctrl_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_OFL_DECAY_get( c8_ctrl_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_OFL_DECAY_get", A, 7);
    /* (0x00000c80 bits 7:3) field OFL_DECAY of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_OFL_DECAY_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_OFL_DECAY_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_OFL_DECAY_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_OFL_DECAY_set( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_OFL_DECAY_set( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OFL_DECAY_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OFL_DECAY_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OFL_DECAY_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OFL_DECAY_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c80 bits 7:3) field OFL_DECAY of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c80 bits 7:3) field OFL_DECAY of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_OFL_DECAY_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_OFL_DECAY_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_OFL_DECAY_get( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_OFL_DECAY_get( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_OFL_DECAY_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_OFL_DECAY_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_OFL_DECAY_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c80 bits 7:3) field OFL_DECAY of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_OFL_DECAY_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_OFL_DECAY_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_OFL_DECAY_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_OFL_DECAY_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_OFL_DECAY_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_SEL_LMS_CLIP_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_SEL_LMS_CLIP_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_SEL_LMS_CLIP_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_SEL_LMS_CLIP_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_SEL_LMS_CLIP_set", A, value );

    /* (0x00000c80 bits 2) field SEL_LMS_CLIP of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_SEL_LMS_CLIP_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_SEL_LMS_CLIP_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_SEL_LMS_CLIP_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_SEL_LMS_CLIP_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_SEL_LMS_CLIP_get", A, 7);
    /* (0x00000c80 bits 2) field SEL_LMS_CLIP of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_SEL_LMS_CLIP_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_SEL_LMS_CLIP_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_SEL_LMS_CLIP_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_PRELOAD_ENB_P1T3_set( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PRELOAD_ENB_P1T3_set( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_ENB_P1T3_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PRELOAD_ENB_P1T3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PRELOAD_ENB_P1T3_set", A, value );

    /* (0x00000c80 bits 1) field PRELOAD_ENB_P1T3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_PRELOAD_ENB_P1T3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_PRELOAD_ENB_P1T3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_PRELOAD_ENB_P1T3_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PRELOAD_ENB_P1T3_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_ENB_P1T3_get", A, 7);
    /* (0x00000c80 bits 1) field PRELOAD_ENB_P1T3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_PRELOAD_ENB_P1T3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_PRELOAD_ENB_P1T3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PRELOAD_ENB_P1T3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_PRELOAD_ENB_P0_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_PRELOAD_ENB_P0_set( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_ENB_P0_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_PRELOAD_ENB_P0_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_PRELOAD_ENB_P0_set", A, value );

    /* (0x00000c80 bits 0) field PRELOAD_ENB_P0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_PRELOAD_ENB_P0_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_PRELOAD_ENB_P0_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_PRELOAD_ENB_P0_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_PRELOAD_ENB_P0_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_PRELOAD_ENB_P0_get", A, 7);
    /* (0x00000c80 bits 0) field PRELOAD_ENB_P0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_17_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_PRELOAD_ENB_P0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_17_BIT_PRELOAD_ENB_P0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_PRELOAD_ENB_P0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_RX_ADAPT_DONE_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RX_ADAPT_DONE_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_DONE_OVR_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_OVR_set", A, value );

    /* (0x00000c84 bits 3) field RX_ADAPT_DONE_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_RX_ADAPT_DONE_OVR_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_RX_ADAPT_DONE_OVR_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_RX_ADAPT_DONE_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_DONE_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_DONE_OVR_get", A, 7);
    /* (0x00000c84 bits 3) field RX_ADAPT_DONE_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_RX_ADAPT_DONE_OVR_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_RX_ADAPT_DONE_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_OVR_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_GEN_RATE_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_GEN_RATE_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_OVR_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_GEN_RATE_OVR_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_OVR_set", A, value );

    /* (0x00000c84 bits 2:1) field GEN_RATE_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_GEN_RATE_OVR_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_GEN_RATE_OVR_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_GEN_RATE_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_GEN_RATE_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_OVR_get", A, 7);
    /* (0x00000c84 bits 2:1) field GEN_RATE_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_GEN_RATE_OVR_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_GEN_RATE_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_OVR_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_GEN_RATE_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_GEN_RATE_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_GEN_RATE_OVR_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_GEN_RATE_OVR_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_GEN_RATE_OVR_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_GEN_RATE_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c84 bits 2:1) field GEN_RATE_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c84 bits 2:1) field GEN_RATE_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_GEN_RATE_OVR_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_GEN_RATE_OVR_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_GEN_RATE_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_GEN_RATE_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_GEN_RATE_OVR_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_GEN_RATE_OVR_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_GEN_RATE_OVR_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c84 bits 2:1) field GEN_RATE_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_GEN_RATE_OVR_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_GEN_RATE_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_GEN_RATE_OVR_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_GEN_RATE_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_GEN_RATE_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_RX_ADAPT_START_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RX_ADAPT_START_OVR_set( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_START_OVR_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RX_ADAPT_START_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_START_OVR_set", A, value );

    /* (0x00000c84 bits 0) field RX_ADAPT_START_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_RX_ADAPT_START_OVR_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_RX_ADAPT_START_OVR_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_RX_ADAPT_START_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_START_OVR_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_START_OVR_get", A, 7);
    /* (0x00000c84 bits 0) field RX_ADAPT_START_OVR of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_18_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_RX_ADAPT_START_OVR_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_18_BIT_RX_ADAPT_START_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_START_OVR_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN3_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN3_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN3_PASS1_3_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN3_PASS1_3_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN3_PASS1_3_set", A, value );

    /* (0x00000c88 bits 17:15) field ADAPT_DELAY_GEN3_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS1_3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS1_3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN3_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN3_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN3_PASS1_3_get", A, 7);
    /* (0x00000c88 bits 17:15) field ADAPT_DELAY_GEN3_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS1_3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS1_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN3_PASS1_3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c88 bits 17:15) field ADAPT_DELAY_GEN3_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c88 bits 17:15) field ADAPT_DELAY_GEN3_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS1_3_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS1_3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c88 bits 17:15) field ADAPT_DELAY_GEN3_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS1_3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS1_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS1_3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS1_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS1_3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN3_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN3_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN3_PASS0_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN3_PASS0_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN3_PASS0_set", A, value );

    /* (0x00000c88 bits 14:12) field ADAPT_DELAY_GEN3_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS0_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS0_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN3_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN3_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN3_PASS0_get", A, 7);
    /* (0x00000c88 bits 14:12) field ADAPT_DELAY_GEN3_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN3_PASS0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c88 bits 14:12) field ADAPT_DELAY_GEN3_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c88 bits 14:12) field ADAPT_DELAY_GEN3_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS0_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS0_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c88 bits 14:12) field ADAPT_DELAY_GEN3_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN3_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN3_PASS0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN2_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN2_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN2_PASS1_3_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN2_PASS1_3_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN2_PASS1_3_set", A, value );

    /* (0x00000c88 bits 11:9) field ADAPT_DELAY_GEN2_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS1_3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS1_3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN2_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN2_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN2_PASS1_3_get", A, 7);
    /* (0x00000c88 bits 11:9) field ADAPT_DELAY_GEN2_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS1_3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS1_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN2_PASS1_3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c88 bits 11:9) field ADAPT_DELAY_GEN2_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c88 bits 11:9) field ADAPT_DELAY_GEN2_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS1_3_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS1_3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c88 bits 11:9) field ADAPT_DELAY_GEN2_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS1_3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS1_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS1_3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS1_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS1_3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN2_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN2_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN2_PASS0_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN2_PASS0_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN2_PASS0_set", A, value );

    /* (0x00000c88 bits 8:6) field ADAPT_DELAY_GEN2_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS0_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS0_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN2_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN2_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN2_PASS0_get", A, 7);
    /* (0x00000c88 bits 8:6) field ADAPT_DELAY_GEN2_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN2_PASS0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c88 bits 8:6) field ADAPT_DELAY_GEN2_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c88 bits 8:6) field ADAPT_DELAY_GEN2_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS0_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS0_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c88 bits 8:6) field ADAPT_DELAY_GEN2_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN2_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN2_PASS0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN1_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN1_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN1_PASS1_3_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN1_PASS1_3_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN1_PASS1_3_set", A, value );

    /* (0x00000c88 bits 5:3) field ADAPT_DELAY_GEN1_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS1_3_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS1_3_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN1_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN1_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN1_PASS1_3_get", A, 7);
    /* (0x00000c88 bits 5:3) field ADAPT_DELAY_GEN1_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS1_3_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS1_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN1_PASS1_3_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_set( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c88 bits 5:3) field ADAPT_DELAY_GEN1_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c88 bits 5:3) field ADAPT_DELAY_GEN1_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS1_3_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS1_3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_get( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c88 bits 5:3) field ADAPT_DELAY_GEN1_PASS1_3 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS1_3_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS1_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS1_3_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS1_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS1_3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN1_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_DELAY_GEN1_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN1_PASS0_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN1_PASS0_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN1_PASS0_set", A, value );

    /* (0x00000c88 bits 2:0) field ADAPT_DELAY_GEN1_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS0_MSK,
                                                  MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS0_OFF,
                                                  value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN1_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_DELAY_GEN1_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_DELAY_GEN1_PASS0_get", A, 7);
    /* (0x00000c88 bits 2:0) field ADAPT_DELAY_GEN1_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS0_MSK) >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_DELAY_GEN1_PASS0_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_set( c8_ctrl_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000c88 bits 2:0) field ADAPT_DELAY_GEN1_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000c88 bits 2:0) field ADAPT_DELAY_GEN1_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
        c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      subfield_mask << (MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS0_OFF + subfield_offset),
                                                      MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS0_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_get( c8_ctrl_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c88 bits 2:0) field ADAPT_DELAY_GEN1_PASS0 of register PMC_MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19 */
    reg_value = c8_ctrl_reg_MTSB_FSM_GLOBAL_CFG_19_read( b_ptr,
                                                         h_ptr,
                                                         A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS0_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS0_MSK, MTSB_FSM_REG_MTSB_FSM_GLOBAL_CFG_19_BIT_ADAPT_DELAY_GEN1_PASS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADAPT_DELAY_GEN1_PASS0_get", A, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_edge
 * ==================================================================================
 */
static INLINE void c8_ctrl_field_CAPTURE_REQ_ADPT_STATE_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_CAPTURE_REQ_ADPT_STATE_set( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CAPTURE_REQ_ADPT_STATE_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_CAPTURE_REQ_ADPT_STATE_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_CAPTURE_REQ_ADPT_STATE_set", A, value );

    /* (0x00000c38 bits 5) field CAPTURE_REQ_ADPT_STATE of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_ */
    c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__field_set( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_CAPTURE_REQ_ADPT_STATE_MSK,
                                                        MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_CAPTURE_REQ_ADPT_STATE_OFF,
                                                        value);
}

static INLINE UINT32 c8_ctrl_field_CAPTURE_REQ_ADPT_STATE_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_CAPTURE_REQ_ADPT_STATE_get( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CAPTURE_REQ_ADPT_STATE_get", A, 7);
    /* (0x00000c38 bits 5) field CAPTURE_REQ_ADPT_STATE of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_ */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__read( b_ptr,
                                                               h_ptr,
                                                               A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_CAPTURE_REQ_ADPT_STATE_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_CAPTURE_REQ_ADPT_STATE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_CAPTURE_REQ_ADPT_STATE_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_CAPTURE_REQ_PCS_PMA_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_CAPTURE_REQ_PCS_PMA_set( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CAPTURE_REQ_PCS_PMA_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_CAPTURE_REQ_PCS_PMA_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_CAPTURE_REQ_PCS_PMA_set", A, value );

    /* (0x00000c38 bits 0) field CAPTURE_REQ_PCS_PMA of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_ */
    c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__field_set( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_CAPTURE_REQ_PCS_PMA_MSK,
                                                        MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_CAPTURE_REQ_PCS_PMA_OFF,
                                                        value);
}

static INLINE UINT32 c8_ctrl_field_CAPTURE_REQ_PCS_PMA_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_CAPTURE_REQ_PCS_PMA_get( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_CAPTURE_REQ_PCS_PMA_get", A, 7);
    /* (0x00000c38 bits 0) field CAPTURE_REQ_PCS_PMA of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_ */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__read( b_ptr,
                                                               h_ptr,
                                                               A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_CAPTURE_REQ_PCS_PMA_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_CAPTURE_REQ_PCS_PMA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_CAPTURE_REQ_PCS_PMA_get", A, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_active_both
 * ==================================================================================
 */
static INLINE void c8_ctrl_field_GEN_RATE_1_I_set_to_clear( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_GEN_RATE_1_I_set_to_clear( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_1_I_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_GEN_RATE_1_I_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_1_I_set_to_clear", A, value );

    /* (0x00000c28 bits 2) field GEN_RATE_1_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    c8_ctrl_reg_STAT_INT_EVENT_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_1_I_MSK,
                                                          MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_1_I_OFF,
                                                          value);
}

static INLINE UINT32 c8_ctrl_field_GEN_RATE_1_I_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_GEN_RATE_1_I_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_1_I_get", A, 7);
    /* (0x00000c28 bits 2) field GEN_RATE_1_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    reg_value = c8_ctrl_reg_STAT_INT_EVENT_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_1_I_MSK) >> MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_1_I_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_1_I_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_GEN_RATE_1_I_poll( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_GEN_RATE_1_I_poll( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_1_I_poll", A, value );

    /* (0x00000c28 bits 2) field GEN_RATE_1_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    return c8_ctrl_reg_STAT_INT_EVENT_poll( b_ptr,
                                            h_ptr,
                                            A,
                                            MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_1_I_MSK,
                                            (value<<MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_1_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void c8_ctrl_field_GEN_RATE_0_I_set_to_clear( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_GEN_RATE_0_I_set_to_clear( c8_ctrl_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_0_I_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_GEN_RATE_0_I_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_0_I_set_to_clear", A, value );

    /* (0x00000c28 bits 1) field GEN_RATE_0_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    c8_ctrl_reg_STAT_INT_EVENT_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_0_I_MSK,
                                                          MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_0_I_OFF,
                                                          value);
}

static INLINE UINT32 c8_ctrl_field_GEN_RATE_0_I_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_GEN_RATE_0_I_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_0_I_get", A, 7);
    /* (0x00000c28 bits 1) field GEN_RATE_0_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    reg_value = c8_ctrl_reg_STAT_INT_EVENT_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_0_I_MSK) >> MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_0_I_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_0_I_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_GEN_RATE_0_I_poll( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_GEN_RATE_0_I_poll( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_0_I_poll", A, value );

    /* (0x00000c28 bits 1) field GEN_RATE_0_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    return c8_ctrl_reg_STAT_INT_EVENT_poll( b_ptr,
                                            h_ptr,
                                            A,
                                            MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_0_I_MSK,
                                            (value<<MTSB_FSM_REG_STAT_INT_EVENT_BIT_GEN_RATE_0_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_active_rising
 * ==================================================================================
 */
static INLINE void c8_ctrl_field_ADAPT_STATUS_0_I_set_to_clear( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_STATUS_0_I_set_to_clear( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_STATUS_0_I_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_I_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_I_set_to_clear", A, value );

    /* (0x00000c28 bits 4) field ADAPT_STATUS_0_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    c8_ctrl_reg_STAT_INT_EVENT_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_MSK,
                                                          MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_OFF,
                                                          value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_STATUS_0_I_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_STATUS_0_I_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_STATUS_0_I_get", A, 7);
    /* (0x00000c28 bits 4) field ADAPT_STATUS_0_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    reg_value = c8_ctrl_reg_STAT_INT_EVENT_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_MSK) >> MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_I_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_ADAPT_STATUS_0_I_poll( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_ADAPT_STATUS_0_I_poll( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_I_poll", A, value );

    /* (0x00000c28 bits 4) field ADAPT_STATUS_0_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    return c8_ctrl_reg_STAT_INT_EVENT_poll( b_ptr,
                                            h_ptr,
                                            A,
                                            MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_MSK,
                                            (value<<MTSB_FSM_REG_STAT_INT_EVENT_BIT_ADAPT_STATUS_0_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void c8_ctrl_field_RX_ADAPT_DONE_I_set_to_clear( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RX_ADAPT_DONE_I_set_to_clear( c8_ctrl_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_DONE_I_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_I_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_I_set_to_clear", A, value );

    /* (0x00000c28 bits 3) field RX_ADAPT_DONE_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    c8_ctrl_reg_STAT_INT_EVENT_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_MSK,
                                                          MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_OFF,
                                                          value);
}

static INLINE UINT32 c8_ctrl_field_RX_ADAPT_DONE_I_get( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_DONE_I_get( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_DONE_I_get", A, 7);
    /* (0x00000c28 bits 3) field RX_ADAPT_DONE_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    reg_value = c8_ctrl_reg_STAT_INT_EVENT_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_MSK) >> MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_I_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_RX_ADAPT_DONE_I_poll( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_RX_ADAPT_DONE_I_poll( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_I_poll", A, value );

    /* (0x00000c28 bits 3) field RX_ADAPT_DONE_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    return c8_ctrl_reg_STAT_INT_EVENT_poll( b_ptr,
                                            h_ptr,
                                            A,
                                            MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_MSK,
                                            (value<<MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_DONE_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}

static INLINE void c8_ctrl_field_RX_ADAPT_START_I_set_to_clear( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RX_ADAPT_START_I_set_to_clear( c8_ctrl_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_START_I_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RX_ADAPT_START_I_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_START_I_set_to_clear", A, value );

    /* (0x00000c28 bits 0) field RX_ADAPT_START_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    c8_ctrl_reg_STAT_INT_EVENT_action_on_write_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_MSK,
                                                          MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_OFF,
                                                          value);
}

static INLINE UINT32 c8_ctrl_field_RX_ADAPT_START_I_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_START_I_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_START_I_get", A, 7);
    /* (0x00000c28 bits 0) field RX_ADAPT_START_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    reg_value = c8_ctrl_reg_STAT_INT_EVENT_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_MSK) >> MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_START_I_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_RX_ADAPT_START_I_poll( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_RX_ADAPT_START_I_poll( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_START_I_poll", A, value );

    /* (0x00000c28 bits 0) field RX_ADAPT_START_I of register PMC_MTSB_FSM_REG_STAT_INT_EVENT */
    return c8_ctrl_reg_STAT_INT_EVENT_poll( b_ptr,
                                            h_ptr,
                                            A,
                                            MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_MSK,
                                            (value<<MTSB_FSM_REG_STAT_INT_EVENT_BIT_RX_ADAPT_START_I_OFF),
                                            cmp,
                                            max_count,
                                            num_failed_polls,
                                            delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */
static INLINE void c8_ctrl_field_ADAPT_STATUS_0_E_set( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_ADAPT_STATUS_0_E_set( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_STATUS_0_E_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_E_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_E_set", A, value );

    /* (0x00000c20 bits 4) field ADAPT_STATUS_0_E of register PMC_MTSB_FSM_REG_STAT_INT_EN */
    c8_ctrl_reg_STAT_INT_EN_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_STATUS_0_E_MSK,
                                       MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_STATUS_0_E_OFF,
                                       value);
}

static INLINE UINT32 c8_ctrl_field_ADAPT_STATUS_0_E_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_STATUS_0_E_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_STATUS_0_E_get", A, 7);
    /* (0x00000c20 bits 4) field ADAPT_STATUS_0_E of register PMC_MTSB_FSM_REG_STAT_INT_EN */
    reg_value = c8_ctrl_reg_STAT_INT_EN_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_STATUS_0_E_MSK) >> MTSB_FSM_REG_STAT_INT_EN_BIT_ADAPT_STATUS_0_E_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_E_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_RX_ADAPT_DONE_E_set( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RX_ADAPT_DONE_E_set( c8_ctrl_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_DONE_E_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_E_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_E_set", A, value );

    /* (0x00000c20 bits 3) field RX_ADAPT_DONE_E of register PMC_MTSB_FSM_REG_STAT_INT_EN */
    c8_ctrl_reg_STAT_INT_EN_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_DONE_E_MSK,
                                       MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_DONE_E_OFF,
                                       value);
}

static INLINE UINT32 c8_ctrl_field_RX_ADAPT_DONE_E_get( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_DONE_E_get( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_DONE_E_get", A, 7);
    /* (0x00000c20 bits 3) field RX_ADAPT_DONE_E of register PMC_MTSB_FSM_REG_STAT_INT_EN */
    reg_value = c8_ctrl_reg_STAT_INT_EN_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_DONE_E_MSK) >> MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_DONE_E_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_E_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_GEN_RATE_1_E_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_GEN_RATE_1_E_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_1_E_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_GEN_RATE_1_E_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_1_E_set", A, value );

    /* (0x00000c20 bits 2) field GEN_RATE_1_E of register PMC_MTSB_FSM_REG_STAT_INT_EN */
    c8_ctrl_reg_STAT_INT_EN_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       MTSB_FSM_REG_STAT_INT_EN_BIT_GEN_RATE_1_E_MSK,
                                       MTSB_FSM_REG_STAT_INT_EN_BIT_GEN_RATE_1_E_OFF,
                                       value);
}

static INLINE UINT32 c8_ctrl_field_GEN_RATE_1_E_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_GEN_RATE_1_E_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_1_E_get", A, 7);
    /* (0x00000c20 bits 2) field GEN_RATE_1_E of register PMC_MTSB_FSM_REG_STAT_INT_EN */
    reg_value = c8_ctrl_reg_STAT_INT_EN_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_EN_BIT_GEN_RATE_1_E_MSK) >> MTSB_FSM_REG_STAT_INT_EN_BIT_GEN_RATE_1_E_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_1_E_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_GEN_RATE_0_E_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_GEN_RATE_0_E_set( c8_ctrl_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_0_E_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_GEN_RATE_0_E_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_0_E_set", A, value );

    /* (0x00000c20 bits 1) field GEN_RATE_0_E of register PMC_MTSB_FSM_REG_STAT_INT_EN */
    c8_ctrl_reg_STAT_INT_EN_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       MTSB_FSM_REG_STAT_INT_EN_BIT_GEN_RATE_0_E_MSK,
                                       MTSB_FSM_REG_STAT_INT_EN_BIT_GEN_RATE_0_E_OFF,
                                       value);
}

static INLINE UINT32 c8_ctrl_field_GEN_RATE_0_E_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_GEN_RATE_0_E_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_0_E_get", A, 7);
    /* (0x00000c20 bits 1) field GEN_RATE_0_E of register PMC_MTSB_FSM_REG_STAT_INT_EN */
    reg_value = c8_ctrl_reg_STAT_INT_EN_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_EN_BIT_GEN_RATE_0_E_MSK) >> MTSB_FSM_REG_STAT_INT_EN_BIT_GEN_RATE_0_E_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_0_E_get", A, value );

    return value;
}
static INLINE void c8_ctrl_field_RX_ADAPT_START_E_set( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_ctrl_field_RX_ADAPT_START_E_set( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_START_E_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_ctrl_field_RX_ADAPT_START_E_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_START_E_set", A, value );

    /* (0x00000c20 bits 0) field RX_ADAPT_START_E of register PMC_MTSB_FSM_REG_STAT_INT_EN */
    c8_ctrl_reg_STAT_INT_EN_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_START_E_MSK,
                                       MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_START_E_OFF,
                                       value);
}

static INLINE UINT32 c8_ctrl_field_RX_ADAPT_START_E_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_START_E_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_START_E_get", A, 7);
    /* (0x00000c20 bits 0) field RX_ADAPT_START_E of register PMC_MTSB_FSM_REG_STAT_INT_EN */
    reg_value = c8_ctrl_reg_STAT_INT_EN_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_START_E_MSK) >> MTSB_FSM_REG_STAT_INT_EN_BIT_RX_ADAPT_START_E_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_START_E_get", A, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_value
 * ==================================================================================
 */
static INLINE UINT32 c8_ctrl_field_ADAPT_STATUS_0_V_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADAPT_STATUS_0_V_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADAPT_STATUS_0_V_get", A, 7);
    /* (0x00000c30 bits 4) field ADAPT_STATUS_0_V of register PMC_MTSB_FSM_REG_STAT_INT */
    reg_value = c8_ctrl_reg_STAT_INT_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_BIT_ADAPT_STATUS_0_V_MSK) >> MTSB_FSM_REG_STAT_INT_BIT_ADAPT_STATUS_0_V_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_V_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_ADAPT_STATUS_0_V_poll( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_ADAPT_STATUS_0_V_poll( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_ctrl_field_ADAPT_STATUS_0_V_poll", A, value );

    /* (0x00000c30 bits 4) field ADAPT_STATUS_0_V of register PMC_MTSB_FSM_REG_STAT_INT */
    return c8_ctrl_reg_STAT_INT_poll( b_ptr,
                                      h_ptr,
                                      A,
                                      MTSB_FSM_REG_STAT_INT_BIT_ADAPT_STATUS_0_V_MSK,
                                      (value<<MTSB_FSM_REG_STAT_INT_BIT_ADAPT_STATUS_0_V_OFF),
                                      cmp,
                                      max_count,
                                      num_failed_polls,
                                      delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_ctrl_field_RX_ADAPT_DONE_V_get( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_DONE_V_get( c8_ctrl_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_DONE_V_get", A, 7);
    /* (0x00000c30 bits 3) field RX_ADAPT_DONE_V of register PMC_MTSB_FSM_REG_STAT_INT */
    reg_value = c8_ctrl_reg_STAT_INT_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_DONE_V_MSK) >> MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_DONE_V_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_V_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_RX_ADAPT_DONE_V_poll( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_RX_ADAPT_DONE_V_poll( c8_ctrl_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_V_poll", A, value );

    /* (0x00000c30 bits 3) field RX_ADAPT_DONE_V of register PMC_MTSB_FSM_REG_STAT_INT */
    return c8_ctrl_reg_STAT_INT_poll( b_ptr,
                                      h_ptr,
                                      A,
                                      MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_DONE_V_MSK,
                                      (value<<MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_DONE_V_OFF),
                                      cmp,
                                      max_count,
                                      num_failed_polls,
                                      delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_ctrl_field_GEN_RATE_1_V_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_GEN_RATE_1_V_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_1_V_get", A, 7);
    /* (0x00000c30 bits 2) field GEN_RATE_1_V of register PMC_MTSB_FSM_REG_STAT_INT */
    reg_value = c8_ctrl_reg_STAT_INT_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_BIT_GEN_RATE_1_V_MSK) >> MTSB_FSM_REG_STAT_INT_BIT_GEN_RATE_1_V_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_1_V_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_GEN_RATE_1_V_poll( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_GEN_RATE_1_V_poll( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_1_V_poll", A, value );

    /* (0x00000c30 bits 2) field GEN_RATE_1_V of register PMC_MTSB_FSM_REG_STAT_INT */
    return c8_ctrl_reg_STAT_INT_poll( b_ptr,
                                      h_ptr,
                                      A,
                                      MTSB_FSM_REG_STAT_INT_BIT_GEN_RATE_1_V_MSK,
                                      (value<<MTSB_FSM_REG_STAT_INT_BIT_GEN_RATE_1_V_OFF),
                                      cmp,
                                      max_count,
                                      num_failed_polls,
                                      delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_ctrl_field_GEN_RATE_0_V_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_GEN_RATE_0_V_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_0_V_get", A, 7);
    /* (0x00000c30 bits 1) field GEN_RATE_0_V of register PMC_MTSB_FSM_REG_STAT_INT */
    reg_value = c8_ctrl_reg_STAT_INT_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_BIT_GEN_RATE_0_V_MSK) >> MTSB_FSM_REG_STAT_INT_BIT_GEN_RATE_0_V_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_0_V_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_GEN_RATE_0_V_poll( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_GEN_RATE_0_V_poll( c8_ctrl_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_0_V_poll", A, value );

    /* (0x00000c30 bits 1) field GEN_RATE_0_V of register PMC_MTSB_FSM_REG_STAT_INT */
    return c8_ctrl_reg_STAT_INT_poll( b_ptr,
                                      h_ptr,
                                      A,
                                      MTSB_FSM_REG_STAT_INT_BIT_GEN_RATE_0_V_MSK,
                                      (value<<MTSB_FSM_REG_STAT_INT_BIT_GEN_RATE_0_V_OFF),
                                      cmp,
                                      max_count,
                                      num_failed_polls,
                                      delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_ctrl_field_RX_ADAPT_START_V_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_START_V_get( c8_ctrl_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_START_V_get", A, 7);
    /* (0x00000c30 bits 0) field RX_ADAPT_START_V of register PMC_MTSB_FSM_REG_STAT_INT */
    reg_value = c8_ctrl_reg_STAT_INT_read(  b_ptr, h_ptr, A);
    value = (reg_value & MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_START_V_MSK) >> MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_START_V_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_START_V_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_RX_ADAPT_START_V_poll( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_ctrl_field_RX_ADAPT_START_V_poll( c8_ctrl_buffer_t *b_ptr,
                                                                        c8_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_START_V_poll", A, value );

    /* (0x00000c30 bits 0) field RX_ADAPT_START_V of register PMC_MTSB_FSM_REG_STAT_INT */
    return c8_ctrl_reg_STAT_INT_poll( b_ptr,
                                      h_ptr,
                                      A,
                                      MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_START_V_MSK,
                                      (value<<MTSB_FSM_REG_STAT_INT_BIT_RX_ADAPT_START_V_OFF),
                                      cmp,
                                      max_count,
                                      num_failed_polls,
                                      delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status
 * ==================================================================================
 */
static INLINE UINT32 c8_ctrl_field_ADPT_STATE_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_ADPT_STATE_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_ADPT_STATE_OBS_get", A, 7);
    /* (0x00000c38 bits 8:6) field ADPT_STATE_OBS of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_ */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__read( b_ptr,
                                                               h_ptr,
                                                               A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_ADPT_STATE_OBS_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_ADPT_STATE_OBS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_ADPT_STATE_OBS_get", A, value );

    return value;
}
static INLINE UINT32 c8_ctrl_field_range_ADPT_STATE_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_ADPT_STATE_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_ADPT_STATE_OBS_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_ADPT_STATE_OBS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_ADPT_STATE_OBS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c38 bits 8:6) field ADPT_STATE_OBS of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_ */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__read( b_ptr,
                                                               h_ptr,
                                                               A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_ADPT_STATE_OBS_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_ADPT_STATE_OBS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_ADPT_STATE_OBS_MSK, MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_ADPT_STATE_OBS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_ADPT_STATE_OBS_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_DONE_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_DONE_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_DONE_OBS_get", A, 7);
    /* (0x00000c38 bits 4) field RX_ADAPT_DONE_OBS of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_ */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__read( b_ptr,
                                                               h_ptr,
                                                               A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_RX_ADAPT_DONE_OBS_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_RX_ADAPT_DONE_OBS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_DONE_OBS_get", A, value );

    return value;
}
static INLINE UINT32 c8_ctrl_field_GEN_RATE_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_GEN_RATE_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_GEN_RATE_OBS_get", A, 7);
    /* (0x00000c38 bits 3:2) field GEN_RATE_OBS of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_ */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__read( b_ptr,
                                                               h_ptr,
                                                               A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_GEN_RATE_OBS_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_GEN_RATE_OBS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_GEN_RATE_OBS_get", A, value );

    return value;
}
static INLINE UINT32 c8_ctrl_field_range_GEN_RATE_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_range_GEN_RATE_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_range_GEN_RATE_OBS_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_ctrl_field_range_GEN_RATE_OBS_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_ctrl_field_range_GEN_RATE_OBS_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000c38 bits 3:2) field GEN_RATE_OBS of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_ */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__read( b_ptr,
                                                               h_ptr,
                                                               A);
    field_value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_GEN_RATE_OBS_MSK)
                  >> MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_GEN_RATE_OBS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_GEN_RATE_OBS_MSK, MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_GEN_RATE_OBS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_ctrl_field_range_GEN_RATE_OBS_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_START_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_ctrl_field_RX_ADAPT_START_OBS_get( c8_ctrl_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_ctrl_field_RX_ADAPT_START_OBS_get", A, 7);
    /* (0x00000c38 bits 1) field RX_ADAPT_START_OBS of register PMC_MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_ */
    reg_value = c8_ctrl_reg_MTSB_FSM_LANE_OBSERVABILITY__read( b_ptr,
                                                               h_ptr,
                                                               A);
    value = (reg_value & MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_RX_ADAPT_START_OBS_MSK) >> MTSB_FSM_REG_MTSB_FSM_LANE_OBSERVABILITY_BIT_RX_ADAPT_START_OBS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_ctrl_field_RX_ADAPT_START_OBS_get", A, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _C8_CTRL_IO_INLINE_H */
