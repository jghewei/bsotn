/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the scbs3 block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/lw20_60_373_generic_reg.xml
 *     block_uri "../docs/rda/lw20_60_373_reg.xml"
 *     block_part_number "LW20_60_373"
 *     block_mnemonic "SCBS3"
 * 
 *****************************************************************************/
#ifndef _SCBS3_IO_INLINE_H
#define _SCBS3_IO_INLINE_H

#include "scbs3_loc.h"
#include "scbs3_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *                tsb level structure and access functions for scbs3
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** ERROR: range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    scbs3_handle_t * h;
    pmc_sys_handle_t sys_handle;
    const UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} scbs3_buffer_t;

#ifndef scbs3_buffer_init
#define scbs3_buffer_init( b, h ) \
       _scbs3_buffer_init( LOG_CALLER b, h )
#endif
static INLINE void _scbs3_buffer_init( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    b->h                        = h;
    b->sys_handle               = ((pmc_handle_t *)h)->sys_handle;
    *(UINT32 *)&b->base_address = ((pmc_handle_t *)h)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b->coalesce_handle, (void**)b->sys_handle );
    IOLOG( "%s", "scbs3_buffer_init");
    
}

#ifndef scbs3_buffer_flush
#define scbs3_buffer_flush( b ) \
       _scbs3_buffer_flush( LOG_CALLER b )
#endif

/*
* flush any changed fields to the register file and invalidate the read cache.
*/
static INLINE void _scbs3_buffer_flush( LOG_CALLER_DEFN scbs3_buffer_t *b )
{
    IOLOG( "scbs3_buffer_flush" );
    l1sys_flush( b->coalesce_handle );
}
static INLINE UINT32 scbs3_reg_read( scbs3_buffer_t *b,
                                     scbs3_handle_t *h,
                                     UINT32 mem_type,
                                     UINT32 reg )
{
    UINT32 value;
    if (b != NULL)
        value = l1sys_reg_read( b->coalesce_handle,
                                mem_type,
                                b->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h)->base_address + reg);
    return value;
}
static INLINE void scbs3_reg_write( scbs3_buffer_t *b,
                                    scbs3_handle_t *h,
                                    UINT32 mem_type,
                                    UINT32 reg,
                                    UINT32 value )
{
    if (b != NULL)
        l1sys_reg_write( b->coalesce_handle,
                         mem_type,
                         b->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value);
}

static INLINE void scbs3_field_set( scbs3_buffer_t *b,
                                    scbs3_handle_t *h,
                                    UINT32 mem_type,
                                    UINT32 reg,
                                    UINT32 mask,
                                    UINT32 unused_mask,
                                    UINT32 ofs,
                                    UINT32 value )
{
    if (b != NULL)
        l1sys_field_set2( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void scbs3_action_on_write_field_set( scbs3_buffer_t *b,
                                                    scbs3_handle_t *h,
                                                    UINT32 mem_type,
                                                    UINT32 reg,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    if (b != NULL)
        l1sys_action_on_write_field_set( b->coalesce_handle,
                                         mem_type,
                                         b->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value<<ofs);
}

static INLINE void scbs3_burst_read( scbs3_buffer_t *b,
                                     scbs3_handle_t *h,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 len,
                                     UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_read( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h)->base_address + reg,
                          len,
                          value);
}

static INLINE void scbs3_burst_write( scbs3_buffer_t *b,
                                      scbs3_handle_t *h,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 len,
                                      UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_write( b->coalesce_handle,
                           mem_type,
                           b->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_ERROR scbs3_poll_bit( scbs3_buffer_t *b,
                                        scbs3_handle_t *h,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 mask,
                                        UINT32 value,
                                        UINT32 max_count,
                                        UINT32 *num_failed_polls,
                                        UINT32 delay_between_polls_in_microseconds )
{
    if (b != NULL)
        return l1sys_poll_bit( b->coalesce_handle,
                               mem_type,
                               b->base_address,
                               reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
    else
        return l2sys_poll_bit( ((pmc_handle_t *)h)->sys_handle,
                               mem_type,
                               ((pmc_handle_t *)h)->base_address + reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *                        register access functions for scbs3
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_SCBS3_REG_CFG
 *
 * Register: Configuration
 * Offset: 0x00000000 CFG
 *
 * bits 31  default 1         SCBS_RESET
 *
 * bits 25  default 0         USER_LS
 *
 * bits 24  default 0         CAL_LS
 *
 * bits 16  default 0         SCHD_MODE
 *
 * bits 15  default 0         TOC_SYNC_EN
 *
 * bits 8:0 default 000000000 TOC_SYNC
 */

#ifndef scbs3_reg_CFG_write
#define scbs3_reg_CFG_write( b, h, value ) \
       _scbs3_reg_CFG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_reg_CFG_write( LOG_CALLER_DEFN
                                         scbs3_buffer_t *b,
                                         scbs3_handle_t *h,
                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "scbs3_reg_CFG_write", value );
    scbs3_reg_write( b,
                     h,
                     MEM_TYPE_CONFIG,
                     PMC_SCBS3_REG_CFG,
                     value);
}


#ifndef scbs3_reg_CFG_field_set
#define scbs3_reg_CFG_field_set( b, h, mask, ofs, value ) \
       _scbs3_reg_CFG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _scbs3_reg_CFG_field_set( LOG_CALLER_DEFN
                                             scbs3_buffer_t *b,
                                             scbs3_handle_t *h,
                                             UINT32 mask,
                                             UINT32 ofs,
                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "scbs3_reg_CFG_field_set", mask, ofs, value );
    scbs3_field_set( b,
                     h,
                     MEM_TYPE_CONFIG,
                     PMC_SCBS3_REG_CFG,
                     mask,
                     PMC_SCBS3_REG_CFG_UNUSED_MASK,
                     ofs,
                     value);

}


#ifndef scbs3_reg_CFG_read
#define scbs3_reg_CFG_read( b, h ) \
       _scbs3_reg_CFG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_reg_CFG_read( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 reg_value;

    reg_value = scbs3_reg_read( b,
                                h,
                                MEM_TYPE_CONFIG,
                                PMC_SCBS3_REG_CFG);

    IOLOG( "%s -> 0x%08x;", "scbs3_reg_CFG_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_SCBS3_REG_RAM_PAGE_CTRL
 *
 * Register: RAM Page Control
 * Offset: 0x00000004 RAM_PAGE_CTRL
 *
 * bits 0 default 0 PAGE_SWAP_REQ
 */

#ifndef scbs3_reg_RAM_PAGE_CTRL_write
#define scbs3_reg_RAM_PAGE_CTRL_write( b, h, value ) \
       _scbs3_reg_RAM_PAGE_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_reg_RAM_PAGE_CTRL_write( LOG_CALLER_DEFN
                                                   scbs3_buffer_t *b,
                                                   scbs3_handle_t *h,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "scbs3_reg_RAM_PAGE_CTRL_write", value );
    scbs3_reg_write( b,
                     h,
                     MEM_TYPE_STATUS,
                     PMC_SCBS3_REG_RAM_PAGE_CTRL,
                     value);
}


#ifndef scbs3_reg_RAM_PAGE_CTRL_field_set
#define scbs3_reg_RAM_PAGE_CTRL_field_set( b, h, mask, ofs, value ) \
       _scbs3_reg_RAM_PAGE_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _scbs3_reg_RAM_PAGE_CTRL_field_set( LOG_CALLER_DEFN
                                                       scbs3_buffer_t *b,
                                                       scbs3_handle_t *h,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "scbs3_reg_RAM_PAGE_CTRL_field_set", mask, ofs, value );
    scbs3_field_set( b,
                     h,
                     MEM_TYPE_STATUS,
                     PMC_SCBS3_REG_RAM_PAGE_CTRL,
                     mask,
                     PMC_SCBS3_REG_RAM_PAGE_CTRL_UNUSED_MASK,
                     ofs,
                     value);

}


#ifndef scbs3_reg_RAM_PAGE_CTRL_read
#define scbs3_reg_RAM_PAGE_CTRL_read( b, h ) \
       _scbs3_reg_RAM_PAGE_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_reg_RAM_PAGE_CTRL_read( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 reg_value;

    reg_value = scbs3_reg_read( b,
                                h,
                                MEM_TYPE_STATUS,
                                PMC_SCBS3_REG_RAM_PAGE_CTRL);

    IOLOG( "%s -> 0x%08x;", "scbs3_reg_RAM_PAGE_CTRL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_SCBS3_REG_CAL_STBY_PAGE_RAM
 *
 * Register: Calendar Standby Page Memory Address N Access
 * Offset: (0x00000400 + (N) * 0x4) CAL_STBY_PAGE_RAM
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX STBY_CALENDAR_DAT
 */

#ifndef scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_write
#define scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_write( b, h, ofs, len, value ) \
       _scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_write( LOG_CALLER_DEFN
                                                                   scbs3_buffer_t *b,
                                                                   scbs3_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 128)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_write", ofs, len, 128 );
    IOLOG( "%s of %d words ofs=%d len=%d", "scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_write", 128, ofs, len);
    scbs3_burst_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_SCBS3_REG_CAL_STBY_PAGE_RAM(ofs),
                       len,
                       value);

}


#ifndef scbs3_reg_CAL_STBY_PAGE_RAM_array_field_set
#define scbs3_reg_CAL_STBY_PAGE_RAM_array_field_set( b, h, N, mask, ofs, value ) \
       _scbs3_reg_CAL_STBY_PAGE_RAM_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _scbs3_reg_CAL_STBY_PAGE_RAM_array_field_set( LOG_CALLER_DEFN
                                                                 scbs3_buffer_t *b,
                                                                 scbs3_handle_t *h,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "scbs3_reg_CAL_STBY_PAGE_RAM_array_field_set", mask, ofs, value );
    scbs3_field_set( b,
                     h,
                     MEM_TYPE_STATUS,
                     PMC_SCBS3_REG_CAL_STBY_PAGE_RAM(N),
                     mask,
                     PMC_SCBS3_REG_CAL_STBY_PAGE_RAM_UNUSED_MASK,
                     ofs,
                     value);

}


#ifndef scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_read
#define scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_read( b, h, ofs, len, value ) \
       _scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_read( LOG_CALLER_DEFN
                                                                  scbs3_buffer_t *b,
                                                                  scbs3_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 128)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_read", ofs, len, 128 );
    scbs3_burst_read( b,
                      h,
                      MEM_TYPE_STATUS,
                      PMC_SCBS3_REG_CAL_STBY_PAGE_RAM(ofs),
                      len,
                      value);

    IOLOG( "%s of %d words ofs=%d len=%d", "scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_read", 128, ofs, len);
}


#ifndef scbs3_reg_CAL_STBY_PAGE_RAM_array_read
#define scbs3_reg_CAL_STBY_PAGE_RAM_array_read( b, h, N ) \
       _scbs3_reg_CAL_STBY_PAGE_RAM_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _scbs3_reg_CAL_STBY_PAGE_RAM_array_read( LOG_CALLER_DEFN
                                                              scbs3_buffer_t *b,
                                                              scbs3_handle_t *h,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = scbs3_reg_read( b,
                                h,
                                MEM_TYPE_STATUS,
                                PMC_SCBS3_REG_CAL_STBY_PAGE_RAM(N));

    IOLOG( "%s -> 0x%08x;", "scbs3_reg_CAL_STBY_PAGE_RAM_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_SCBS3_REG_CAL_ACTV_PAGE_RAM
 *
 * Register: Calendar Active Page Memory Address N Access
 * Offset: (0x00000600 + (N) * 0x4) CAL_ACTV_PAGE_RAM
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ACTV_CALENDAR_DAT
 */

#ifndef scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_write
#define scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_write( b, h, ofs, len, value ) \
       _scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_write( LOG_CALLER_DEFN
                                                                   scbs3_buffer_t *b,
                                                                   scbs3_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 128)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_write", ofs, len, 128 );
    IOLOG( "%s of %d words ofs=%d len=%d", "scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_write", 128, ofs, len);
    scbs3_burst_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_SCBS3_REG_CAL_ACTV_PAGE_RAM(ofs),
                       len,
                       value);

}


#ifndef scbs3_reg_CAL_ACTV_PAGE_RAM_array_field_set
#define scbs3_reg_CAL_ACTV_PAGE_RAM_array_field_set( b, h, N, mask, ofs, value ) \
       _scbs3_reg_CAL_ACTV_PAGE_RAM_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _scbs3_reg_CAL_ACTV_PAGE_RAM_array_field_set( LOG_CALLER_DEFN
                                                                 scbs3_buffer_t *b,
                                                                 scbs3_handle_t *h,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "scbs3_reg_CAL_ACTV_PAGE_RAM_array_field_set", mask, ofs, value );
    scbs3_field_set( b,
                     h,
                     MEM_TYPE_STATUS,
                     PMC_SCBS3_REG_CAL_ACTV_PAGE_RAM(N),
                     mask,
                     PMC_SCBS3_REG_CAL_ACTV_PAGE_RAM_UNUSED_MASK,
                     ofs,
                     value);

}


#ifndef scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_read
#define scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_read( b, h, ofs, len, value ) \
       _scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_read( LOG_CALLER_DEFN
                                                                  scbs3_buffer_t *b,
                                                                  scbs3_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 128)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_read", ofs, len, 128 );
    scbs3_burst_read( b,
                      h,
                      MEM_TYPE_STATUS,
                      PMC_SCBS3_REG_CAL_ACTV_PAGE_RAM(ofs),
                      len,
                      value);

    IOLOG( "%s of %d words ofs=%d len=%d", "scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_read", 128, ofs, len);
}


#ifndef scbs3_reg_CAL_ACTV_PAGE_RAM_array_read
#define scbs3_reg_CAL_ACTV_PAGE_RAM_array_read( b, h, N ) \
       _scbs3_reg_CAL_ACTV_PAGE_RAM_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _scbs3_reg_CAL_ACTV_PAGE_RAM_array_read( LOG_CALLER_DEFN
                                                              scbs3_buffer_t *b,
                                                              scbs3_handle_t *h,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = scbs3_reg_read( b,
                                h,
                                MEM_TYPE_STATUS,
                                PMC_SCBS3_REG_CAL_ACTV_PAGE_RAM(N));

    IOLOG( "%s -> 0x%08x;", "scbs3_reg_CAL_ACTV_PAGE_RAM_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_SCBS3_REG_USER_BITS_STBY_PAGE_RAM
 *
 * Register: Userbits Standby Page Memory Address N Access
 * Offset: (0x00000800 + (N) * 0x4) USER_BITS_STBY_PAGE_RAM
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX STBY_USERBITS_DAT
 */

#ifndef scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_write
#define scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_write( b, h, ofs, len, value ) \
       _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_write( LOG_CALLER_DEFN
                                                                         scbs3_buffer_t *b,
                                                                         scbs3_handle_t *h,
                                                                         UINT32 ofs,
                                                                         UINT32 len,
                                                                         UINT32 *value )
{
    if (len + ofs > 128)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_write", ofs, len, 128 );
    IOLOG( "%s of %d words ofs=%d len=%d", "scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_write", 128, ofs, len);
    scbs3_burst_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_SCBS3_REG_USER_BITS_STBY_PAGE_RAM(ofs),
                       len,
                       value);

}


#ifndef scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_field_set
#define scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_field_set( b, h, N, mask, ofs, value ) \
       _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_field_set( LOG_CALLER_DEFN
                                                                       scbs3_buffer_t *b,
                                                                       scbs3_handle_t *h,
                                                                       UINT32 N,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_field_set", mask, ofs, value );
    scbs3_field_set( b,
                     h,
                     MEM_TYPE_STATUS,
                     PMC_SCBS3_REG_USER_BITS_STBY_PAGE_RAM(N),
                     mask,
                     PMC_SCBS3_REG_USER_BITS_STBY_PAGE_RAM_UNUSED_MASK,
                     ofs,
                     value);

}


#ifndef scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_read
#define scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_read( b, h, ofs, len, value ) \
       _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_read( LOG_CALLER_DEFN
                                                                        scbs3_buffer_t *b,
                                                                        scbs3_handle_t *h,
                                                                        UINT32 ofs,
                                                                        UINT32 len,
                                                                        UINT32 *value )
{
    if (len + ofs > 128)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_read", ofs, len, 128 );
    scbs3_burst_read( b,
                      h,
                      MEM_TYPE_STATUS,
                      PMC_SCBS3_REG_USER_BITS_STBY_PAGE_RAM(ofs),
                      len,
                      value);

    IOLOG( "%s of %d words ofs=%d len=%d", "scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_read", 128, ofs, len);
}


#ifndef scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_read
#define scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_read( b, h, N ) \
       _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_read( LOG_CALLER_DEFN
                                                                    scbs3_buffer_t *b,
                                                                    scbs3_handle_t *h,
                                                                    UINT32 N )
{
    UINT32 reg_value;

    reg_value = scbs3_reg_read( b,
                                h,
                                MEM_TYPE_STATUS,
                                PMC_SCBS3_REG_USER_BITS_STBY_PAGE_RAM(N));

    IOLOG( "%s -> 0x%08x;", "scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_SCBS3_REG_USER_BITS_ACTV_PAGE_RAM
 *
 * Register: Userbits Active Page Memory Address N Access
 * Offset: (0x00000a00 + (N) * 0x4) USER_BITS_ACTV_PAGE_RAM
 *
 * bits 31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ACTV_USERBITS_DAT
 */

#ifndef scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_write
#define scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_write( b, h, ofs, len, value ) \
       _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_write( LOG_CALLER_DEFN
                                                                         scbs3_buffer_t *b,
                                                                         scbs3_handle_t *h,
                                                                         UINT32 ofs,
                                                                         UINT32 len,
                                                                         UINT32 *value )
{
    if (len + ofs > 128)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_write", ofs, len, 128 );
    IOLOG( "%s of %d words ofs=%d len=%d", "scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_write", 128, ofs, len);
    scbs3_burst_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_SCBS3_REG_USER_BITS_ACTV_PAGE_RAM(ofs),
                       len,
                       value);

}


#ifndef scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_field_set
#define scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_field_set( b, h, N, mask, ofs, value ) \
       _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_field_set( LOG_CALLER_DEFN
                                                                       scbs3_buffer_t *b,
                                                                       scbs3_handle_t *h,
                                                                       UINT32 N,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_field_set", mask, ofs, value );
    scbs3_field_set( b,
                     h,
                     MEM_TYPE_STATUS,
                     PMC_SCBS3_REG_USER_BITS_ACTV_PAGE_RAM(N),
                     mask,
                     PMC_SCBS3_REG_USER_BITS_ACTV_PAGE_RAM_UNUSED_MASK,
                     ofs,
                     value);

}


#ifndef scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_read
#define scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_read( b, h, ofs, len, value ) \
       _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_read( LOG_CALLER_DEFN
                                                                        scbs3_buffer_t *b,
                                                                        scbs3_handle_t *h,
                                                                        UINT32 ofs,
                                                                        UINT32 len,
                                                                        UINT32 *value )
{
    if (len + ofs > 128)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_read", ofs, len, 128 );
    scbs3_burst_read( b,
                      h,
                      MEM_TYPE_STATUS,
                      PMC_SCBS3_REG_USER_BITS_ACTV_PAGE_RAM(ofs),
                      len,
                      value);

    IOLOG( "%s of %d words ofs=%d len=%d", "scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_read", 128, ofs, len);
}


#ifndef scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_read
#define scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_read( b, h, N ) \
       _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_read( LOG_CALLER_DEFN
                                                                    scbs3_buffer_t *b,
                                                                    scbs3_handle_t *h,
                                                                    UINT32 N )
{
    UINT32 reg_value;

    reg_value = scbs3_reg_read( b,
                                h,
                                MEM_TYPE_STATUS,
                                PMC_SCBS3_REG_USER_BITS_ACTV_PAGE_RAM(N));

    IOLOG( "%s -> 0x%08x;", "scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM
 *
 * Register: Group N Context Memory Standby Page Access
 * Offset: (0x00000100 + (N) * 0x4) GROUP_N_STBY_CTXT_MEM
 *
 * bits 24:16 default 000000000 STBY_END_ADDR
 *
 * bits 8:0   default 000000000 STBY_START_ADDR
 */

#ifndef scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_write
#define scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_write( b, h, N, value ) \
       _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_write( LOG_CALLER b, h, N, value )
#endif
static INLINE void _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_write( LOG_CALLER_DEFN
                                                                 scbs3_buffer_t *b,
                                                                 scbs3_handle_t *h,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_write", value );
    scbs3_reg_write( b,
                     h,
                     MEM_TYPE_STATUS,
                     PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM(N),
                     value);
}


#ifndef scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_field_set
#define scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_field_set( b, h, N, mask, ofs, value ) \
       _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_field_set( LOG_CALLER_DEFN
                                                                     scbs3_buffer_t *b,
                                                                     scbs3_handle_t *h,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_field_set", N, mask, ofs, value );
    scbs3_field_set( b,
                     h,
                     MEM_TYPE_STATUS,
                     PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM(N),
                     mask,
                     PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM_UNUSED_MASK,
                     ofs,
                     value);

}


#ifndef scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_read
#define scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_read( b, h, N ) \
       _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_read( LOG_CALLER_DEFN
                                                                  scbs3_buffer_t *b,
                                                                  scbs3_handle_t *h,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = scbs3_reg_read( b,
                                h,
                                MEM_TYPE_STATUS,
                                PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM(N));

    IOLOG( "%s -> 0x%08x; N=%d", "scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM
 *
 * Register: Group N Context Memory Active Page Access
 * Offset: (0x00000200 + (N) * 0x4) GROUP_N_ACTV_CTXT_MEM
 *
 * bits 24:16 default 000000000 ACTV_END_ADDR
 *
 * bits 8:0   default 000000000 ACTV_START_ADDR
 */

#ifndef scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_write
#define scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_write( b, h, N, value ) \
       _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_write( LOG_CALLER b, h, N, value )
#endif
static INLINE void _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_write( LOG_CALLER_DEFN
                                                                 scbs3_buffer_t *b,
                                                                 scbs3_handle_t *h,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_write", value );
    scbs3_reg_write( b,
                     h,
                     MEM_TYPE_STATUS,
                     PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM(N),
                     value);
}


#ifndef scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_field_set
#define scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_field_set( b, h, N, mask, ofs, value ) \
       _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_field_set( LOG_CALLER_DEFN
                                                                     scbs3_buffer_t *b,
                                                                     scbs3_handle_t *h,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_field_set", N, mask, ofs, value );
    scbs3_field_set( b,
                     h,
                     MEM_TYPE_STATUS,
                     PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM(N),
                     mask,
                     PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_UNUSED_MASK,
                     ofs,
                     value);

}


#ifndef scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_read
#define scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_read( b, h, N ) \
       _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_read( LOG_CALLER_DEFN
                                                                  scbs3_buffer_t *b,
                                                                  scbs3_handle_t *h,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = scbs3_reg_read( b,
                                h,
                                MEM_TYPE_STATUS,
                                PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM(N));

    IOLOG( "%s -> 0x%08x; N=%d", "scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_SCBS3_REG_RAM_PAGE_STATUS
 *
 * Register: RAM Page Status
 * Offset: 0x00000008 RAM_PAGE_STATUS
 *
 * bits 0  default X RAM_ACTIVE_PAGE
 *
 * bits 31 default X WORK_PAGE_SEL_V
 */

#ifndef scbs3_reg_RAM_PAGE_STATUS_read
#define scbs3_reg_RAM_PAGE_STATUS_read( b, h ) \
       _scbs3_reg_RAM_PAGE_STATUS_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_reg_RAM_PAGE_STATUS_read( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 reg_value;

    reg_value = scbs3_reg_read( b,
                                h,
                                MEM_TYPE_STATUS,
                                PMC_SCBS3_REG_RAM_PAGE_STATUS);

    IOLOG( "%s -> 0x%08x;", "scbs3_reg_RAM_PAGE_STATUS_read", reg_value);
    return reg_value;
}

/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset config
 * ==================================================================================
 */

#ifndef scbs3_field_USER_LS_set
#define scbs3_field_USER_LS_set( b, h, value ) \
       _scbs3_field_USER_LS_set( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_field_USER_LS_set( LOG_CALLER_DEFN
                                             scbs3_buffer_t *b,
                                             scbs3_handle_t *h,
                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "scbs3_field_USER_LS_set", value, 1);
    IOLOG( "%s <= 0x%08x", "scbs3_field_USER_LS_set", value );

    /* (0x00000000 bits 25) field USER_LS of register PMC_SCBS3_REG_CFG */
    _scbs3_reg_CFG_field_set( LOG_CALLER_ARGS
                              b,
                              h,
                              SCBS3_REG_CFG_BIT_USER_LS_MSK,
                              SCBS3_REG_CFG_BIT_USER_LS_OFF,
                              value);
}


#ifndef scbs3_field_USER_LS_get
#define scbs3_field_USER_LS_get( b, h ) \
       _scbs3_field_USER_LS_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_field_USER_LS_get( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 25) field USER_LS of register PMC_SCBS3_REG_CFG */
    reg_value = _scbs3_reg_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SCBS3_REG_CFG_BIT_USER_LS_MSK) >> SCBS3_REG_CFG_BIT_USER_LS_OFF;
    IOLOG( "%s -> 0x%08x", "scbs3_field_USER_LS_get", value );

    return value;
}

#ifndef scbs3_field_CAL_LS_set
#define scbs3_field_CAL_LS_set( b, h, value ) \
       _scbs3_field_CAL_LS_set( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_field_CAL_LS_set( LOG_CALLER_DEFN
                                            scbs3_buffer_t *b,
                                            scbs3_handle_t *h,
                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "scbs3_field_CAL_LS_set", value, 1);
    IOLOG( "%s <= 0x%08x", "scbs3_field_CAL_LS_set", value );

    /* (0x00000000 bits 24) field CAL_LS of register PMC_SCBS3_REG_CFG */
    _scbs3_reg_CFG_field_set( LOG_CALLER_ARGS
                              b,
                              h,
                              SCBS3_REG_CFG_BIT_CAL_LS_MSK,
                              SCBS3_REG_CFG_BIT_CAL_LS_OFF,
                              value);
}


#ifndef scbs3_field_CAL_LS_get
#define scbs3_field_CAL_LS_get( b, h ) \
       _scbs3_field_CAL_LS_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_field_CAL_LS_get( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 24) field CAL_LS of register PMC_SCBS3_REG_CFG */
    reg_value = _scbs3_reg_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SCBS3_REG_CFG_BIT_CAL_LS_MSK) >> SCBS3_REG_CFG_BIT_CAL_LS_OFF;
    IOLOG( "%s -> 0x%08x", "scbs3_field_CAL_LS_get", value );

    return value;
}

#ifndef scbs3_field_SCHD_MODE_set
#define scbs3_field_SCHD_MODE_set( b, h, value ) \
       _scbs3_field_SCHD_MODE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_field_SCHD_MODE_set( LOG_CALLER_DEFN
                                               scbs3_buffer_t *b,
                                               scbs3_handle_t *h,
                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "scbs3_field_SCHD_MODE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "scbs3_field_SCHD_MODE_set", value );

    /* (0x00000000 bits 16) field SCHD_MODE of register PMC_SCBS3_REG_CFG */
    _scbs3_reg_CFG_field_set( LOG_CALLER_ARGS
                              b,
                              h,
                              SCBS3_REG_CFG_BIT_SCHD_MODE_MSK,
                              SCBS3_REG_CFG_BIT_SCHD_MODE_OFF,
                              value);
}


#ifndef scbs3_field_SCHD_MODE_get
#define scbs3_field_SCHD_MODE_get( b, h ) \
       _scbs3_field_SCHD_MODE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_field_SCHD_MODE_get( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 16) field SCHD_MODE of register PMC_SCBS3_REG_CFG */
    reg_value = _scbs3_reg_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SCBS3_REG_CFG_BIT_SCHD_MODE_MSK) >> SCBS3_REG_CFG_BIT_SCHD_MODE_OFF;
    IOLOG( "%s -> 0x%08x", "scbs3_field_SCHD_MODE_get", value );

    return value;
}

#ifndef scbs3_field_TOC_SYNC_EN_set
#define scbs3_field_TOC_SYNC_EN_set( b, h, value ) \
       _scbs3_field_TOC_SYNC_EN_set( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_field_TOC_SYNC_EN_set( LOG_CALLER_DEFN
                                                 scbs3_buffer_t *b,
                                                 scbs3_handle_t *h,
                                                 UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "scbs3_field_TOC_SYNC_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "scbs3_field_TOC_SYNC_EN_set", value );

    /* (0x00000000 bits 15) field TOC_SYNC_EN of register PMC_SCBS3_REG_CFG */
    _scbs3_reg_CFG_field_set( LOG_CALLER_ARGS
                              b,
                              h,
                              SCBS3_REG_CFG_BIT_TOC_SYNC_EN_MSK,
                              SCBS3_REG_CFG_BIT_TOC_SYNC_EN_OFF,
                              value);
}


#ifndef scbs3_field_TOC_SYNC_EN_get
#define scbs3_field_TOC_SYNC_EN_get( b, h ) \
       _scbs3_field_TOC_SYNC_EN_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_field_TOC_SYNC_EN_get( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 15) field TOC_SYNC_EN of register PMC_SCBS3_REG_CFG */
    reg_value = _scbs3_reg_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SCBS3_REG_CFG_BIT_TOC_SYNC_EN_MSK) >> SCBS3_REG_CFG_BIT_TOC_SYNC_EN_OFF;
    IOLOG( "%s -> 0x%08x", "scbs3_field_TOC_SYNC_EN_get", value );

    return value;
}

#ifndef scbs3_field_TOC_SYNC_set
#define scbs3_field_TOC_SYNC_set( b, h, value ) \
       _scbs3_field_TOC_SYNC_set( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_field_TOC_SYNC_set( LOG_CALLER_DEFN
                                              scbs3_buffer_t *b,
                                              scbs3_handle_t *h,
                                              UINT32 value )
{
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "scbs3_field_TOC_SYNC_set", value, 511);
    IOLOG( "%s <= 0x%08x", "scbs3_field_TOC_SYNC_set", value );

    /* (0x00000000 bits 8:0) field TOC_SYNC of register PMC_SCBS3_REG_CFG */
    _scbs3_reg_CFG_field_set( LOG_CALLER_ARGS
                              b,
                              h,
                              SCBS3_REG_CFG_BIT_TOC_SYNC_MSK,
                              SCBS3_REG_CFG_BIT_TOC_SYNC_OFF,
                              value);
}


#ifndef scbs3_field_TOC_SYNC_get
#define scbs3_field_TOC_SYNC_get( b, h ) \
       _scbs3_field_TOC_SYNC_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_field_TOC_SYNC_get( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 8:0) field TOC_SYNC of register PMC_SCBS3_REG_CFG */
    reg_value = _scbs3_reg_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SCBS3_REG_CFG_BIT_TOC_SYNC_MSK) >> SCBS3_REG_CFG_BIT_TOC_SYNC_OFF;
    IOLOG( "%s -> 0x%08x", "scbs3_field_TOC_SYNC_get", value );

    return value;
}

#ifndef scbs3_field_range_TOC_SYNC_set
#define scbs3_field_range_TOC_SYNC_set( b, h, start_bit, stop_bit, value ) \
       _scbs3_field_range_TOC_SYNC_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _scbs3_field_range_TOC_SYNC_set( LOG_CALLER_DEFN
                                                    scbs3_buffer_t *b,
                                                    scbs3_handle_t *h,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "scbs3_field_range_TOC_SYNC_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "scbs3_field_range_TOC_SYNC_set", stop_bit, 8 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "scbs3_field_range_TOC_SYNC_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000000 bits 8:0) field TOC_SYNC of register PMC_SCBS3_REG_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000000 bits 8:0) field TOC_SYNC of register PMC_SCBS3_REG_CFG */
        _scbs3_reg_CFG_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  subfield_mask << (SCBS3_REG_CFG_BIT_TOC_SYNC_OFF + subfield_offset),
                                  SCBS3_REG_CFG_BIT_TOC_SYNC_OFF + subfield_offset,
                                  value >> subfield_shift);
    }
}


#ifndef scbs3_field_range_TOC_SYNC_get
#define scbs3_field_range_TOC_SYNC_get( b, h, start_bit, stop_bit ) \
       _scbs3_field_range_TOC_SYNC_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _scbs3_field_range_TOC_SYNC_get( LOG_CALLER_DEFN
                                                      scbs3_buffer_t *b,
                                                      scbs3_handle_t *h,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "scbs3_field_range_TOC_SYNC_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "scbs3_field_range_TOC_SYNC_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000000 bits 8:0) field TOC_SYNC of register PMC_SCBS3_REG_CFG */
    reg_value = _scbs3_reg_CFG_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & SCBS3_REG_CFG_BIT_TOC_SYNC_MSK)
                  >> SCBS3_REG_CFG_BIT_TOC_SYNC_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SCBS3_REG_CFG_BIT_TOC_SYNC_MSK, SCBS3_REG_CFG_BIT_TOC_SYNC_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "scbs3_field_range_TOC_SYNC_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *               Parameter Access Functions for Paramset config_edge
 * ==================================================================================
 */

#ifndef scbs3_field_PAGE_SWAP_REQ_set
#define scbs3_field_PAGE_SWAP_REQ_set( b, h, value ) \
       _scbs3_field_PAGE_SWAP_REQ_set( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_field_PAGE_SWAP_REQ_set( LOG_CALLER_DEFN
                                                   scbs3_buffer_t *b,
                                                   scbs3_handle_t *h,
                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "scbs3_field_PAGE_SWAP_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "scbs3_field_PAGE_SWAP_REQ_set", value );

    /* (0x00000004 bits 0) field PAGE_SWAP_REQ of register PMC_SCBS3_REG_RAM_PAGE_CTRL */
    _scbs3_reg_RAM_PAGE_CTRL_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        SCBS3_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_REQ_MSK,
                                        SCBS3_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_REQ_OFF,
                                        value);
}


#ifndef scbs3_field_PAGE_SWAP_REQ_get
#define scbs3_field_PAGE_SWAP_REQ_get( b, h ) \
       _scbs3_field_PAGE_SWAP_REQ_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_field_PAGE_SWAP_REQ_get( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 0) field PAGE_SWAP_REQ of register PMC_SCBS3_REG_RAM_PAGE_CTRL */
    reg_value = _scbs3_reg_RAM_PAGE_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SCBS3_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_REQ_MSK) >> SCBS3_REG_RAM_PAGE_CTRL_BIT_PAGE_SWAP_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "scbs3_field_PAGE_SWAP_REQ_get", value );

    return value;
}

/*
 * ==================================================================================
 *            Parameter Access Functions for Paramset ram_N_burstsize128
 * ==================================================================================
 */

#ifndef scbs3_lfield_STBY_CALENDAR_DAT_set
#define scbs3_lfield_STBY_CALENDAR_DAT_set( b, h, value ) \
       _scbs3_lfield_STBY_CALENDAR_DAT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_lfield_STBY_CALENDAR_DAT_set( LOG_CALLER_DEFN
                                                        scbs3_buffer_t *b,
                                                        scbs3_handle_t *h,
                                                        UINT32 value[128] )
{
    IOLOG( "%s ", "scbs3_lfield_STBY_CALENDAR_DAT_set");
    _scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_write( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    128,
                                                    value);
}


#ifndef scbs3_lfield_STBY_CALENDAR_DAT_get
#define scbs3_lfield_STBY_CALENDAR_DAT_get( b, h, value ) \
       _scbs3_lfield_STBY_CALENDAR_DAT_get( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_lfield_STBY_CALENDAR_DAT_get( LOG_CALLER_DEFN
                                                        scbs3_buffer_t *b,
                                                        scbs3_handle_t *h,
                                                        UINT32 value[128] )
{
    IOLOG( "%s ", "scbs3_lfield_STBY_CALENDAR_DAT_get");
    _scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_read( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   128,
                                                   (UINT32 *)value);
}


#ifndef scbs3_lfield_range_STBY_CALENDAR_DAT_set
#define scbs3_lfield_range_STBY_CALENDAR_DAT_set( b, h, start_bit, stop_bit, value ) \
       _scbs3_lfield_range_STBY_CALENDAR_DAT_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _scbs3_lfield_range_STBY_CALENDAR_DAT_set( LOG_CALLER_DEFN
                                                              scbs3_buffer_t *b,
                                                              scbs3_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "scbs3_lfield_range_STBY_CALENDAR_DAT_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "scbs3_lfield_range_STBY_CALENDAR_DAT_set", start_bit, stop_bit, value);
    _scbs3_reg_CAL_STBY_PAGE_RAM_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}


#ifndef scbs3_lfield_range_STBY_CALENDAR_DAT_get
#define scbs3_lfield_range_STBY_CALENDAR_DAT_get( b, h, start_bit, stop_bit ) \
       _scbs3_lfield_range_STBY_CALENDAR_DAT_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _scbs3_lfield_range_STBY_CALENDAR_DAT_get( LOG_CALLER_DEFN
                                                                scbs3_buffer_t *b,
                                                                scbs3_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "scbs3_lfield_range_STBY_CALENDAR_DAT_get", start_bit, stop_bit );
    }
    reg_value = _scbs3_reg_CAL_STBY_PAGE_RAM_array_read( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "scbs3_lfield_range_STBY_CALENDAR_DAT_get", start_bit, stop_bit, value );
    return value;
}


#ifndef scbs3_lfield_ACTV_CALENDAR_DAT_set
#define scbs3_lfield_ACTV_CALENDAR_DAT_set( b, h, value ) \
       _scbs3_lfield_ACTV_CALENDAR_DAT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_lfield_ACTV_CALENDAR_DAT_set( LOG_CALLER_DEFN
                                                        scbs3_buffer_t *b,
                                                        scbs3_handle_t *h,
                                                        UINT32 value[128] )
{
    IOLOG( "%s ", "scbs3_lfield_ACTV_CALENDAR_DAT_set");
    _scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_write( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    128,
                                                    value);
}


#ifndef scbs3_lfield_ACTV_CALENDAR_DAT_get
#define scbs3_lfield_ACTV_CALENDAR_DAT_get( b, h, value ) \
       _scbs3_lfield_ACTV_CALENDAR_DAT_get( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_lfield_ACTV_CALENDAR_DAT_get( LOG_CALLER_DEFN
                                                        scbs3_buffer_t *b,
                                                        scbs3_handle_t *h,
                                                        UINT32 value[128] )
{
    IOLOG( "%s ", "scbs3_lfield_ACTV_CALENDAR_DAT_get");
    _scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_read( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   128,
                                                   (UINT32 *)value);
}


#ifndef scbs3_lfield_range_ACTV_CALENDAR_DAT_set
#define scbs3_lfield_range_ACTV_CALENDAR_DAT_set( b, h, start_bit, stop_bit, value ) \
       _scbs3_lfield_range_ACTV_CALENDAR_DAT_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _scbs3_lfield_range_ACTV_CALENDAR_DAT_set( LOG_CALLER_DEFN
                                                              scbs3_buffer_t *b,
                                                              scbs3_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "scbs3_lfield_range_ACTV_CALENDAR_DAT_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "scbs3_lfield_range_ACTV_CALENDAR_DAT_set", start_bit, stop_bit, value);
    _scbs3_reg_CAL_ACTV_PAGE_RAM_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}


#ifndef scbs3_lfield_range_ACTV_CALENDAR_DAT_get
#define scbs3_lfield_range_ACTV_CALENDAR_DAT_get( b, h, start_bit, stop_bit ) \
       _scbs3_lfield_range_ACTV_CALENDAR_DAT_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _scbs3_lfield_range_ACTV_CALENDAR_DAT_get( LOG_CALLER_DEFN
                                                                scbs3_buffer_t *b,
                                                                scbs3_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "scbs3_lfield_range_ACTV_CALENDAR_DAT_get", start_bit, stop_bit );
    }
    reg_value = _scbs3_reg_CAL_ACTV_PAGE_RAM_array_read( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "scbs3_lfield_range_ACTV_CALENDAR_DAT_get", start_bit, stop_bit, value );
    return value;
}


#ifndef scbs3_lfield_STBY_USERBITS_DAT_set
#define scbs3_lfield_STBY_USERBITS_DAT_set( b, h, value ) \
       _scbs3_lfield_STBY_USERBITS_DAT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_lfield_STBY_USERBITS_DAT_set( LOG_CALLER_DEFN
                                                        scbs3_buffer_t *b,
                                                        scbs3_handle_t *h,
                                                        UINT32 value[128] )
{
    IOLOG( "%s ", "scbs3_lfield_STBY_USERBITS_DAT_set");
    _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_write( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          0,
                                                          128,
                                                          value);
}


#ifndef scbs3_lfield_STBY_USERBITS_DAT_get
#define scbs3_lfield_STBY_USERBITS_DAT_get( b, h, value ) \
       _scbs3_lfield_STBY_USERBITS_DAT_get( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_lfield_STBY_USERBITS_DAT_get( LOG_CALLER_DEFN
                                                        scbs3_buffer_t *b,
                                                        scbs3_handle_t *h,
                                                        UINT32 value[128] )
{
    IOLOG( "%s ", "scbs3_lfield_STBY_USERBITS_DAT_get");
    _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_read( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         0,
                                                         128,
                                                         (UINT32 *)value);
}


#ifndef scbs3_lfield_range_STBY_USERBITS_DAT_set
#define scbs3_lfield_range_STBY_USERBITS_DAT_set( b, h, start_bit, stop_bit, value ) \
       _scbs3_lfield_range_STBY_USERBITS_DAT_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _scbs3_lfield_range_STBY_USERBITS_DAT_set( LOG_CALLER_DEFN
                                                              scbs3_buffer_t *b,
                                                              scbs3_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "scbs3_lfield_range_STBY_USERBITS_DAT_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "scbs3_lfield_range_STBY_USERBITS_DAT_set", start_bit, stop_bit, value);
    _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_field_set( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        word_number,
                                                        mask,
                                                        field_ofs,
                                                        value);
}


#ifndef scbs3_lfield_range_STBY_USERBITS_DAT_get
#define scbs3_lfield_range_STBY_USERBITS_DAT_get( b, h, start_bit, stop_bit ) \
       _scbs3_lfield_range_STBY_USERBITS_DAT_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _scbs3_lfield_range_STBY_USERBITS_DAT_get( LOG_CALLER_DEFN
                                                                scbs3_buffer_t *b,
                                                                scbs3_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "scbs3_lfield_range_STBY_USERBITS_DAT_get", start_bit, stop_bit );
    }
    reg_value = _scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_read( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "scbs3_lfield_range_STBY_USERBITS_DAT_get", start_bit, stop_bit, value );
    return value;
}


#ifndef scbs3_lfield_ACTV_USERBITS_DAT_set
#define scbs3_lfield_ACTV_USERBITS_DAT_set( b, h, value ) \
       _scbs3_lfield_ACTV_USERBITS_DAT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_lfield_ACTV_USERBITS_DAT_set( LOG_CALLER_DEFN
                                                        scbs3_buffer_t *b,
                                                        scbs3_handle_t *h,
                                                        UINT32 value[128] )
{
    IOLOG( "%s ", "scbs3_lfield_ACTV_USERBITS_DAT_set");
    _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_write( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          0,
                                                          128,
                                                          value);
}


#ifndef scbs3_lfield_ACTV_USERBITS_DAT_get
#define scbs3_lfield_ACTV_USERBITS_DAT_get( b, h, value ) \
       _scbs3_lfield_ACTV_USERBITS_DAT_get( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_lfield_ACTV_USERBITS_DAT_get( LOG_CALLER_DEFN
                                                        scbs3_buffer_t *b,
                                                        scbs3_handle_t *h,
                                                        UINT32 value[128] )
{
    IOLOG( "%s ", "scbs3_lfield_ACTV_USERBITS_DAT_get");
    _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_read( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         0,
                                                         128,
                                                         (UINT32 *)value);
}


#ifndef scbs3_lfield_range_ACTV_USERBITS_DAT_set
#define scbs3_lfield_range_ACTV_USERBITS_DAT_set( b, h, start_bit, stop_bit, value ) \
       _scbs3_lfield_range_ACTV_USERBITS_DAT_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _scbs3_lfield_range_ACTV_USERBITS_DAT_set( LOG_CALLER_DEFN
                                                              scbs3_buffer_t *b,
                                                              scbs3_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "scbs3_lfield_range_ACTV_USERBITS_DAT_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "scbs3_lfield_range_ACTV_USERBITS_DAT_set", start_bit, stop_bit, value);
    _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_field_set( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        word_number,
                                                        mask,
                                                        field_ofs,
                                                        value);
}


#ifndef scbs3_lfield_range_ACTV_USERBITS_DAT_get
#define scbs3_lfield_range_ACTV_USERBITS_DAT_get( b, h, start_bit, stop_bit ) \
       _scbs3_lfield_range_ACTV_USERBITS_DAT_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _scbs3_lfield_range_ACTV_USERBITS_DAT_get( LOG_CALLER_DEFN
                                                                scbs3_buffer_t *b,
                                                                scbs3_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "scbs3_lfield_range_ACTV_USERBITS_DAT_get", start_bit, stop_bit );
    }
    reg_value = _scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_read( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "scbs3_lfield_range_ACTV_USERBITS_DAT_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *               Parameter Access Functions for Paramset ram_N_size64
 * ==================================================================================
 */

#ifndef scbs3_field_STBY_END_ADDR_set
#define scbs3_field_STBY_END_ADDR_set( b, h, N, value ) \
       _scbs3_field_STBY_END_ADDR_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _scbs3_field_STBY_END_ADDR_set( LOG_CALLER_DEFN
                                                   scbs3_buffer_t *b,
                                                   scbs3_handle_t *h,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_STBY_END_ADDR_set", N, 63);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "scbs3_field_STBY_END_ADDR_set", value, 511);
    IOLOG( "%s <= N=%d 0x%08x", "scbs3_field_STBY_END_ADDR_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 24:16) field STBY_END_ADDR of register PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM index N=0..63 */
    _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_field_set( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      N,
                                                      SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_END_ADDR_MSK,
                                                      SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_END_ADDR_OFF,
                                                      value);
}


#ifndef scbs3_field_STBY_END_ADDR_get
#define scbs3_field_STBY_END_ADDR_get( b, h, N ) \
       _scbs3_field_STBY_END_ADDR_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _scbs3_field_STBY_END_ADDR_get( LOG_CALLER_DEFN
                                                     scbs3_buffer_t *b,
                                                     scbs3_handle_t *h,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_STBY_END_ADDR_get", N, 63);
    /* ((0x00000100 + (N) * 0x4) bits 24:16) field STBY_END_ADDR of register PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM index N=0..63 */
    reg_value = _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_read( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             N);
    value = (reg_value & SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_END_ADDR_MSK) >> SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_END_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "scbs3_field_STBY_END_ADDR_get", N, value );

    return value;
}

#ifndef scbs3_field_range_STBY_END_ADDR_set
#define scbs3_field_range_STBY_END_ADDR_set( b, h, N, start_bit, stop_bit, value ) \
       _scbs3_field_range_STBY_END_ADDR_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _scbs3_field_range_STBY_END_ADDR_set( LOG_CALLER_DEFN
                                                         scbs3_buffer_t *b,
                                                         scbs3_handle_t *h,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_range_STBY_END_ADDR_set", N, 63);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "scbs3_field_range_STBY_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "scbs3_field_range_STBY_END_ADDR_set", stop_bit, 8 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "scbs3_field_range_STBY_END_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000100 + (N) * 0x4) bits 24:16) field STBY_END_ADDR of register PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM index N=0..63 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 16) {
            subfield_offset = start_bit - 16;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  16 - start_bit;
            subfield_start_bit = 16;
        }
        if (stop_bit < 24) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 24;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000100 + (N) * 0x4) bits 24:16) field STBY_END_ADDR of register PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM index N=0..63 */
        _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_field_set( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          N,
                                                          subfield_mask << (SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_END_ADDR_OFF + subfield_offset),
                                                          SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_END_ADDR_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}


#ifndef scbs3_field_range_STBY_END_ADDR_get
#define scbs3_field_range_STBY_END_ADDR_get( b, h, N, start_bit, stop_bit ) \
       _scbs3_field_range_STBY_END_ADDR_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _scbs3_field_range_STBY_END_ADDR_get( LOG_CALLER_DEFN
                                                           scbs3_buffer_t *b,
                                                           scbs3_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_range_STBY_END_ADDR_get", N, 63);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "scbs3_field_range_STBY_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "scbs3_field_range_STBY_END_ADDR_get", stop_bit, 8 );
    if (start_bit > 16) {
        subfield_offset = start_bit - 16;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 16 - start_bit;
        subfield_start_bit = 16;
    }
    if (stop_bit < 24) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 24;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 0x4) bits 24:16) field STBY_END_ADDR of register PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM index N=0..63 */
    reg_value = _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_read( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             N);
    field_value = (reg_value & SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_END_ADDR_MSK)
                  >> SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_END_ADDR_MSK, SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "scbs3_field_range_STBY_END_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef scbs3_field_STBY_START_ADDR_set
#define scbs3_field_STBY_START_ADDR_set( b, h, N, value ) \
       _scbs3_field_STBY_START_ADDR_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _scbs3_field_STBY_START_ADDR_set( LOG_CALLER_DEFN
                                                     scbs3_buffer_t *b,
                                                     scbs3_handle_t *h,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_STBY_START_ADDR_set", N, 63);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "scbs3_field_STBY_START_ADDR_set", value, 511);
    IOLOG( "%s <= N=%d 0x%08x", "scbs3_field_STBY_START_ADDR_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 8:0) field STBY_START_ADDR of register PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM index N=0..63 */
    _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_field_set( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      N,
                                                      SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_START_ADDR_MSK,
                                                      SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_START_ADDR_OFF,
                                                      value);
}


#ifndef scbs3_field_STBY_START_ADDR_get
#define scbs3_field_STBY_START_ADDR_get( b, h, N ) \
       _scbs3_field_STBY_START_ADDR_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _scbs3_field_STBY_START_ADDR_get( LOG_CALLER_DEFN
                                                       scbs3_buffer_t *b,
                                                       scbs3_handle_t *h,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_STBY_START_ADDR_get", N, 63);
    /* ((0x00000100 + (N) * 0x4) bits 8:0) field STBY_START_ADDR of register PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM index N=0..63 */
    reg_value = _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_read( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             N);
    value = (reg_value & SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_START_ADDR_MSK) >> SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_START_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "scbs3_field_STBY_START_ADDR_get", N, value );

    return value;
}

#ifndef scbs3_field_range_STBY_START_ADDR_set
#define scbs3_field_range_STBY_START_ADDR_set( b, h, N, start_bit, stop_bit, value ) \
       _scbs3_field_range_STBY_START_ADDR_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _scbs3_field_range_STBY_START_ADDR_set( LOG_CALLER_DEFN
                                                           scbs3_buffer_t *b,
                                                           scbs3_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_range_STBY_START_ADDR_set", N, 63);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "scbs3_field_range_STBY_START_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "scbs3_field_range_STBY_START_ADDR_set", stop_bit, 8 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "scbs3_field_range_STBY_START_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000100 + (N) * 0x4) bits 8:0) field STBY_START_ADDR of register PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM index N=0..63 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000100 + (N) * 0x4) bits 8:0) field STBY_START_ADDR of register PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM index N=0..63 */
        _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_field_set( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          N,
                                                          subfield_mask << (SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_START_ADDR_OFF + subfield_offset),
                                                          SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_START_ADDR_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}


#ifndef scbs3_field_range_STBY_START_ADDR_get
#define scbs3_field_range_STBY_START_ADDR_get( b, h, N, start_bit, stop_bit ) \
       _scbs3_field_range_STBY_START_ADDR_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _scbs3_field_range_STBY_START_ADDR_get( LOG_CALLER_DEFN
                                                             scbs3_buffer_t *b,
                                                             scbs3_handle_t *h,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_range_STBY_START_ADDR_get", N, 63);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "scbs3_field_range_STBY_START_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "scbs3_field_range_STBY_START_ADDR_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 0x4) bits 8:0) field STBY_START_ADDR of register PMC_SCBS3_REG_GROUP_N_STBY_CTXT_MEM index N=0..63 */
    reg_value = _scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_read( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             N);
    field_value = (reg_value & SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_START_ADDR_MSK)
                  >> SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_START_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_START_ADDR_MSK, SCBS3_REG_GROUP_N_STBY_CTXT_MEM_BIT_STBY_START_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "scbs3_field_range_STBY_START_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef scbs3_field_ACTV_END_ADDR_set
#define scbs3_field_ACTV_END_ADDR_set( b, h, N, value ) \
       _scbs3_field_ACTV_END_ADDR_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _scbs3_field_ACTV_END_ADDR_set( LOG_CALLER_DEFN
                                                   scbs3_buffer_t *b,
                                                   scbs3_handle_t *h,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_ACTV_END_ADDR_set", N, 63);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "scbs3_field_ACTV_END_ADDR_set", value, 511);
    IOLOG( "%s <= N=%d 0x%08x", "scbs3_field_ACTV_END_ADDR_set", N, value );

    /* ((0x00000200 + (N) * 0x4) bits 24:16) field ACTV_END_ADDR of register PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM index N=0..63 */
    _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_field_set( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      N,
                                                      SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_END_ADDR_MSK,
                                                      SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_END_ADDR_OFF,
                                                      value);
}


#ifndef scbs3_field_ACTV_END_ADDR_get
#define scbs3_field_ACTV_END_ADDR_get( b, h, N ) \
       _scbs3_field_ACTV_END_ADDR_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _scbs3_field_ACTV_END_ADDR_get( LOG_CALLER_DEFN
                                                     scbs3_buffer_t *b,
                                                     scbs3_handle_t *h,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_ACTV_END_ADDR_get", N, 63);
    /* ((0x00000200 + (N) * 0x4) bits 24:16) field ACTV_END_ADDR of register PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM index N=0..63 */
    reg_value = _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_read( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             N);
    value = (reg_value & SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_END_ADDR_MSK) >> SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_END_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "scbs3_field_ACTV_END_ADDR_get", N, value );

    return value;
}

#ifndef scbs3_field_range_ACTV_END_ADDR_set
#define scbs3_field_range_ACTV_END_ADDR_set( b, h, N, start_bit, stop_bit, value ) \
       _scbs3_field_range_ACTV_END_ADDR_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _scbs3_field_range_ACTV_END_ADDR_set( LOG_CALLER_DEFN
                                                         scbs3_buffer_t *b,
                                                         scbs3_handle_t *h,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_range_ACTV_END_ADDR_set", N, 63);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "scbs3_field_range_ACTV_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "scbs3_field_range_ACTV_END_ADDR_set", stop_bit, 8 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "scbs3_field_range_ACTV_END_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000200 + (N) * 0x4) bits 24:16) field ACTV_END_ADDR of register PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM index N=0..63 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 16) {
            subfield_offset = start_bit - 16;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  16 - start_bit;
            subfield_start_bit = 16;
        }
        if (stop_bit < 24) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 24;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000200 + (N) * 0x4) bits 24:16) field ACTV_END_ADDR of register PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM index N=0..63 */
        _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_field_set( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          N,
                                                          subfield_mask << (SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_END_ADDR_OFF + subfield_offset),
                                                          SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_END_ADDR_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}


#ifndef scbs3_field_range_ACTV_END_ADDR_get
#define scbs3_field_range_ACTV_END_ADDR_get( b, h, N, start_bit, stop_bit ) \
       _scbs3_field_range_ACTV_END_ADDR_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _scbs3_field_range_ACTV_END_ADDR_get( LOG_CALLER_DEFN
                                                           scbs3_buffer_t *b,
                                                           scbs3_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_range_ACTV_END_ADDR_get", N, 63);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "scbs3_field_range_ACTV_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "scbs3_field_range_ACTV_END_ADDR_get", stop_bit, 8 );
    if (start_bit > 16) {
        subfield_offset = start_bit - 16;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 16 - start_bit;
        subfield_start_bit = 16;
    }
    if (stop_bit < 24) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 24;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000200 + (N) * 0x4) bits 24:16) field ACTV_END_ADDR of register PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM index N=0..63 */
    reg_value = _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_read( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             N);
    field_value = (reg_value & SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_END_ADDR_MSK)
                  >> SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_END_ADDR_MSK, SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "scbs3_field_range_ACTV_END_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef scbs3_field_ACTV_START_ADDR_set
#define scbs3_field_ACTV_START_ADDR_set( b, h, N, value ) \
       _scbs3_field_ACTV_START_ADDR_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _scbs3_field_ACTV_START_ADDR_set( LOG_CALLER_DEFN
                                                     scbs3_buffer_t *b,
                                                     scbs3_handle_t *h,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_ACTV_START_ADDR_set", N, 63);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "scbs3_field_ACTV_START_ADDR_set", value, 511);
    IOLOG( "%s <= N=%d 0x%08x", "scbs3_field_ACTV_START_ADDR_set", N, value );

    /* ((0x00000200 + (N) * 0x4) bits 8:0) field ACTV_START_ADDR of register PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM index N=0..63 */
    _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_field_set( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      N,
                                                      SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_START_ADDR_MSK,
                                                      SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_START_ADDR_OFF,
                                                      value);
}


#ifndef scbs3_field_ACTV_START_ADDR_get
#define scbs3_field_ACTV_START_ADDR_get( b, h, N ) \
       _scbs3_field_ACTV_START_ADDR_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _scbs3_field_ACTV_START_ADDR_get( LOG_CALLER_DEFN
                                                       scbs3_buffer_t *b,
                                                       scbs3_handle_t *h,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_ACTV_START_ADDR_get", N, 63);
    /* ((0x00000200 + (N) * 0x4) bits 8:0) field ACTV_START_ADDR of register PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM index N=0..63 */
    reg_value = _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_read( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             N);
    value = (reg_value & SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_START_ADDR_MSK) >> SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_START_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "scbs3_field_ACTV_START_ADDR_get", N, value );

    return value;
}

#ifndef scbs3_field_range_ACTV_START_ADDR_set
#define scbs3_field_range_ACTV_START_ADDR_set( b, h, N, start_bit, stop_bit, value ) \
       _scbs3_field_range_ACTV_START_ADDR_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _scbs3_field_range_ACTV_START_ADDR_set( LOG_CALLER_DEFN
                                                           scbs3_buffer_t *b,
                                                           scbs3_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_range_ACTV_START_ADDR_set", N, 63);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "scbs3_field_range_ACTV_START_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "scbs3_field_range_ACTV_START_ADDR_set", stop_bit, 8 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "scbs3_field_range_ACTV_START_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000200 + (N) * 0x4) bits 8:0) field ACTV_START_ADDR of register PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM index N=0..63 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000200 + (N) * 0x4) bits 8:0) field ACTV_START_ADDR of register PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM index N=0..63 */
        _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_field_set( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          N,
                                                          subfield_mask << (SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_START_ADDR_OFF + subfield_offset),
                                                          SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_START_ADDR_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}


#ifndef scbs3_field_range_ACTV_START_ADDR_get
#define scbs3_field_range_ACTV_START_ADDR_get( b, h, N, start_bit, stop_bit ) \
       _scbs3_field_range_ACTV_START_ADDR_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _scbs3_field_range_ACTV_START_ADDR_get( LOG_CALLER_DEFN
                                                             scbs3_buffer_t *b,
                                                             scbs3_handle_t *h,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "scbs3_field_range_ACTV_START_ADDR_get", N, 63);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "scbs3_field_range_ACTV_START_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "scbs3_field_range_ACTV_START_ADDR_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000200 + (N) * 0x4) bits 8:0) field ACTV_START_ADDR of register PMC_SCBS3_REG_GROUP_N_ACTV_CTXT_MEM index N=0..63 */
    reg_value = _scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_read( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             N);
    field_value = (reg_value & SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_START_ADDR_MSK)
                  >> SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_START_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_START_ADDR_MSK, SCBS3_REG_GROUP_N_ACTV_CTXT_MEM_BIT_ACTV_START_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "scbs3_field_range_ACTV_START_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset status
 * ==================================================================================
 */

#ifndef scbs3_field_RAM_ACTIVE_PAGE_get
#define scbs3_field_RAM_ACTIVE_PAGE_get( b, h ) \
       _scbs3_field_RAM_ACTIVE_PAGE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_field_RAM_ACTIVE_PAGE_get( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 0) field RAM_ACTIVE_PAGE of register PMC_SCBS3_REG_RAM_PAGE_STATUS */
    reg_value = _scbs3_reg_RAM_PAGE_STATUS_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SCBS3_REG_RAM_PAGE_STATUS_BIT_RAM_ACTIVE_PAGE_MSK) >> SCBS3_REG_RAM_PAGE_STATUS_BIT_RAM_ACTIVE_PAGE_OFF;
    IOLOG( "%s -> 0x%08x", "scbs3_field_RAM_ACTIVE_PAGE_get", value );

    return value;
}

#ifndef scbs3_field_WORK_PAGE_SEL_V_get
#define scbs3_field_WORK_PAGE_SEL_V_get( b, h ) \
       _scbs3_field_WORK_PAGE_SEL_V_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_field_WORK_PAGE_SEL_V_get( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 31) field WORK_PAGE_SEL_V of register PMC_SCBS3_REG_RAM_PAGE_STATUS */
    reg_value = _scbs3_reg_RAM_PAGE_STATUS_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SCBS3_REG_RAM_PAGE_STATUS_BIT_WORK_PAGE_SEL_V_MSK) >> SCBS3_REG_RAM_PAGE_STATUS_BIT_WORK_PAGE_SEL_V_OFF;
    IOLOG( "%s -> 0x%08x", "scbs3_field_WORK_PAGE_SEL_V_get", value );

    return value;
}

/*
 * ==================================================================================
 *                 Parameter Access Functions for Paramset sw_reset
 * ==================================================================================
 */

#ifndef scbs3_field_SCBS_RESET_set
#define scbs3_field_SCBS_RESET_set( b, h, value ) \
       _scbs3_field_SCBS_RESET_set( LOG_CALLER b, h, value )
#endif
static INLINE void _scbs3_field_SCBS_RESET_set( LOG_CALLER_DEFN
                                                scbs3_buffer_t *b,
                                                scbs3_handle_t *h,
                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "scbs3_field_SCBS_RESET_set", value, 1);
    IOLOG( "%s <= 0x%08x", "scbs3_field_SCBS_RESET_set", value );

    /* (0x00000000 bits 31) field SCBS_RESET of register PMC_SCBS3_REG_CFG */
    _scbs3_reg_CFG_field_set( LOG_CALLER_ARGS
                              b,
                              h,
                              SCBS3_REG_CFG_BIT_SCBS_RESET_MSK,
                              SCBS3_REG_CFG_BIT_SCBS_RESET_OFF,
                              value);
}


#ifndef scbs3_field_SCBS_RESET_get
#define scbs3_field_SCBS_RESET_get( b, h ) \
       _scbs3_field_SCBS_RESET_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _scbs3_field_SCBS_RESET_get( LOG_CALLER_DEFN scbs3_buffer_t *b, scbs3_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 31) field SCBS_RESET of register PMC_SCBS3_REG_CFG */
    reg_value = _scbs3_reg_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SCBS3_REG_CFG_BIT_SCBS_RESET_MSK) >> SCBS3_REG_CFG_BIT_SCBS_RESET_OFF;
    IOLOG( "%s -> 0x%08x", "scbs3_field_SCBS_RESET_get", value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _SCBS3_IO_INLINE_H */
