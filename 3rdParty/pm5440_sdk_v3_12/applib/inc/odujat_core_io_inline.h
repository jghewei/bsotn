/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the odujat_core block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/pm55_82_09_ad_map.xml
 *     block_uri "file:../docs/rda/pm20_15_101_reg.xml"
 *     block_part_number "PM20_15_101"
 *     block_mnemonic "ODUJAT_CORE"
 * 
 *****************************************************************************/
#ifndef _ODUJAT_CORE_IO_INLINE_H
#define _ODUJAT_CORE_IO_INLINE_H

#include "coreotn_loc.h"
#include "odujat_core_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *             tsb level structure and access functions for odujat_core
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** ERROR: range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    coreotn_handle_t * h;
    UINT32 A;
    pmc_sys_handle_t sys_handle;
    const UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} odujat_core_buffer_t;

#ifndef odujat_core_buffer_init
#define odujat_core_buffer_init( b, h, A ) \
       _odujat_core_buffer_init( LOG_CALLER b, h, A )
#endif
static INLINE void _odujat_core_buffer_init( LOG_CALLER_DEFN
                                             odujat_core_buffer_t *b,
                                             coreotn_handle_t *h,
                                             UINT32 A )
{
    b->h                        = h;
    b->A                        = A;
    b->sys_handle               = ((pmc_handle_t *)h)->sys_handle;
    *(UINT32 *)&b->base_address = (((pmc_handle_t *)h)->base_address + ((0)*0x100000) );
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b->coalesce_handle, (void**)b->sys_handle );
    IOLOG( "%s A=%d", "odujat_core_buffer_init", A);
    
}

#ifndef odujat_core_buffer_flush
#define odujat_core_buffer_flush( b ) \
       _odujat_core_buffer_flush( LOG_CALLER b )
#endif

/*
* flush any changed fields to the register file and invalidate the read cache.
*/
static INLINE void _odujat_core_buffer_flush( LOG_CALLER_DEFN odujat_core_buffer_t *b )
{
    IOLOG( "odujat_core_buffer_flush" );
    l1sys_flush( b->coalesce_handle );
}
static INLINE UINT32 odujat_core_reg_read( odujat_core_buffer_t *b,
                                           coreotn_handle_t *h,
                                           UINT32 A,
                                           UINT32 mem_type,
                                           UINT32 reg )
{
    UINT32 value;
    if (b != NULL)
        value = l1sys_reg_read( b->coalesce_handle,
                                mem_type,
                                (b->base_address + (b->A)*0x100000),
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h)->sys_handle,
                                mem_type,
                                (((pmc_handle_t *)h)->base_address + (A)*0x100000) + reg);
    return value;
}
static INLINE void odujat_core_reg_write( odujat_core_buffer_t *b,
                                          coreotn_handle_t *h,
                                          UINT32 A,
                                          UINT32 mem_type,
                                          UINT32 reg,
                                          UINT32 value )
{
    if (b != NULL)
        l1sys_reg_write( b->coalesce_handle,
                         mem_type,
                         (b->base_address + (b->A)*0x100000),
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h)->base_address + (A)*0x100000) + reg,
                         value);
}

static INLINE void odujat_core_field_set( odujat_core_buffer_t *b,
                                          coreotn_handle_t *h,
                                          UINT32 A,
                                          UINT32 mem_type,
                                          UINT32 reg,
                                          UINT32 mask,
                                          UINT32 unused_mask,
                                          UINT32 ofs,
                                          UINT32 value )
{
    if (b != NULL)
        l1sys_field_set2( b->coalesce_handle,
                          mem_type,
                          (b->base_address + (b->A)*0x100000),
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                             mem_type,
                             (((pmc_handle_t *)h)->base_address + (A)*0x100000) + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                         mem_type,
                                         (((pmc_handle_t *)h)->base_address + (A)*0x100000) + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void odujat_core_action_on_write_field_set( odujat_core_buffer_t *b,
                                                          coreotn_handle_t *h,
                                                          UINT32 A,
                                                          UINT32 mem_type,
                                                          UINT32 reg,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    if (b != NULL)
        l1sys_action_on_write_field_set( b->coalesce_handle,
                                         mem_type,
                                         (b->base_address + (b->A)*0x100000),
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h)->base_address + (A)*0x100000) + reg,
                         value<<ofs);
}

static INLINE void odujat_core_burst_read( odujat_core_buffer_t *b,
                                           coreotn_handle_t *h,
                                           UINT32 A,
                                           UINT32 mem_type,
                                           UINT32 reg,
                                           UINT32 len,
                                           UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_read( b->coalesce_handle,
                          mem_type,
                          (b->base_address + (b->A)*0x100000),
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h)->sys_handle,
                          mem_type,
                          (((pmc_handle_t *)h)->base_address + (A)*0x100000) + reg,
                          len,
                          value);
}

static INLINE void odujat_core_burst_write( odujat_core_buffer_t *b,
                                            coreotn_handle_t *h,
                                            UINT32 A,
                                            UINT32 mem_type,
                                            UINT32 reg,
                                            UINT32 len,
                                            UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_write( b->coalesce_handle,
                           mem_type,
                           (b->base_address + (b->A)*0x100000),
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h)->base_address + (A)*0x100000) + reg,
                           len,
                           value);
}

static INLINE PMC_ERROR odujat_core_poll_bit( odujat_core_buffer_t *b,
                                              coreotn_handle_t *h,
                                              UINT32 A,
                                              UINT32 mem_type,
                                              UINT32 reg,
                                              UINT32 mask,
                                              UINT32 value,
                                              UINT32 max_count,
                                              UINT32 *num_failed_polls,
                                              UINT32 delay_between_polls_in_microseconds )
{
    if (b != NULL)
        return l1sys_poll_bit( b->coalesce_handle,
                               mem_type,
                               (b->base_address + (b->A)*0x100000),
                               reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
    else
        return l2sys_poll_bit( ((pmc_handle_t *)h)->sys_handle,
                               mem_type,
                               (((pmc_handle_t *)h)->base_address + (A)*0x100000) + reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *                     register access functions for odujat_core
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_ODUJAT_CORE_REG_CFG
 *
 * Register: Configuration
 * Offset: 0x001a0000 CFG
 *
 * bits 9 default 0 RAM_LS
 *
 * bits 8 default 1 PG_OVERRIDE
 */

#ifndef odujat_core_reg_CFG_write
#define odujat_core_reg_CFG_write( b, h, A, value ) \
       _odujat_core_reg_CFG_write( LOG_CALLER b, h, A, value )
#endif
static INLINE void _odujat_core_reg_CFG_write( LOG_CALLER_DEFN
                                               odujat_core_buffer_t *b,
                                               coreotn_handle_t *h,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "odujat_core_reg_CFG_write", value );
    odujat_core_reg_write( b,
                           h,
                           A,
                           MEM_TYPE_CONFIG,
                           PMC_ODUJAT_CORE_REG_CFG,
                           value);
}


#ifndef odujat_core_reg_CFG_field_set
#define odujat_core_reg_CFG_field_set( b, h, A, mask, ofs, value ) \
       _odujat_core_reg_CFG_field_set( LOG_CALLER b, h, A, mask, ofs, value )
#endif
static INLINE void _odujat_core_reg_CFG_field_set( LOG_CALLER_DEFN
                                                   odujat_core_buffer_t *b,
                                                   coreotn_handle_t *h,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "odujat_core_reg_CFG_field_set", A, mask, ofs, value );
    odujat_core_field_set( b,
                           h,
                           A,
                           MEM_TYPE_CONFIG,
                           PMC_ODUJAT_CORE_REG_CFG,
                           mask,
                           PMC_ODUJAT_CORE_REG_CFG_UNUSED_MASK,
                           ofs,
                           value);

}


#ifndef odujat_core_reg_CFG_read
#define odujat_core_reg_CFG_read( b, h, A ) \
       _odujat_core_reg_CFG_read( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _odujat_core_reg_CFG_read( LOG_CALLER_DEFN
                                                odujat_core_buffer_t *b,
                                                coreotn_handle_t *h,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = odujat_core_reg_read( b,
                                      h,
                                      A,
                                      MEM_TYPE_CONFIG,
                                      PMC_ODUJAT_CORE_REG_CFG);

    IOLOG( "%s -> 0x%08x; A=%d", "odujat_core_reg_CFG_read", reg_value, A);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUJAT_CORE_REG_CHAN_CFG_0
 *
 * Register: Channel Configuration 0
 * Offset: (0x001a0100 + (N) * 0x8) CHAN_CFG_0
 *
 * bits        17   default 0     JAT_ENABLE
 *
 * bits        16   default 0     ADD_CND
 *
 * bits        11:8 default 0000  LOOP_ALPHA_SELECT
 * field_bits  3:0
 *
 * bits        4:0  default 00000 CONV_GAIN_SELECT
 * field_bits  4:0
 */

#ifndef odujat_core_reg_CHAN_CFG_0_array_write
#define odujat_core_reg_CHAN_CFG_0_array_write( b, h, A, N, value ) \
       _odujat_core_reg_CHAN_CFG_0_array_write( LOG_CALLER b, h, A, N, value )
#endif
static INLINE void _odujat_core_reg_CHAN_CFG_0_array_write( LOG_CALLER_DEFN
                                                            odujat_core_buffer_t *b,
                                                            coreotn_handle_t *h,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "odujat_core_reg_CHAN_CFG_0_array_write", value );
    odujat_core_reg_write( b,
                           h,
                           A,
                           MEM_TYPE_CONFIG,
                           PMC_ODUJAT_CORE_REG_CHAN_CFG_0(N),
                           value);
}


#ifndef odujat_core_reg_CHAN_CFG_0_array_field_set
#define odujat_core_reg_CHAN_CFG_0_array_field_set( b, h, A, N, mask, ofs, value ) \
       _odujat_core_reg_CHAN_CFG_0_array_field_set( LOG_CALLER b, h, A, N, mask, ofs, value )
#endif
static INLINE void _odujat_core_reg_CHAN_CFG_0_array_field_set( LOG_CALLER_DEFN
                                                                odujat_core_buffer_t *b,
                                                                coreotn_handle_t *h,
                                                                UINT32 A,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "odujat_core_reg_CHAN_CFG_0_array_field_set", A, N, mask, ofs, value );
    odujat_core_field_set( b,
                           h,
                           A,
                           MEM_TYPE_CONFIG,
                           PMC_ODUJAT_CORE_REG_CHAN_CFG_0(N),
                           mask,
                           PMC_ODUJAT_CORE_REG_CHAN_CFG_0_UNUSED_MASK,
                           ofs,
                           value);

}


#ifndef odujat_core_reg_CHAN_CFG_0_array_read
#define odujat_core_reg_CHAN_CFG_0_array_read( b, h, A, N ) \
       _odujat_core_reg_CHAN_CFG_0_array_read( LOG_CALLER b, h, A, N )
#endif
static INLINE UINT32 _odujat_core_reg_CHAN_CFG_0_array_read( LOG_CALLER_DEFN
                                                             odujat_core_buffer_t *b,
                                                             coreotn_handle_t *h,
                                                             UINT32 A,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = odujat_core_reg_read( b,
                                      h,
                                      A,
                                      MEM_TYPE_CONFIG,
                                      PMC_ODUJAT_CORE_REG_CHAN_CFG_0(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "odujat_core_reg_CHAN_CFG_0_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUJAT_CORE_REG_CHAN_CFG_1
 *
 * Register: Channel Configuration 1
 * Offset: (0x001a0104 + (N) * 0x8) CHAN_CFG_1
 *
 * bits        25:0 default 00000000000000000000000000 MC_NUMERATOR
 * field_bits  25:0
 */

#ifndef odujat_core_reg_CHAN_CFG_1_array_write
#define odujat_core_reg_CHAN_CFG_1_array_write( b, h, A, N, value ) \
       _odujat_core_reg_CHAN_CFG_1_array_write( LOG_CALLER b, h, A, N, value )
#endif
static INLINE void _odujat_core_reg_CHAN_CFG_1_array_write( LOG_CALLER_DEFN
                                                            odujat_core_buffer_t *b,
                                                            coreotn_handle_t *h,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "odujat_core_reg_CHAN_CFG_1_array_write", value );
    odujat_core_reg_write( b,
                           h,
                           A,
                           MEM_TYPE_CONFIG,
                           PMC_ODUJAT_CORE_REG_CHAN_CFG_1(N),
                           value);
}


#ifndef odujat_core_reg_CHAN_CFG_1_array_field_set
#define odujat_core_reg_CHAN_CFG_1_array_field_set( b, h, A, N, mask, ofs, value ) \
       _odujat_core_reg_CHAN_CFG_1_array_field_set( LOG_CALLER b, h, A, N, mask, ofs, value )
#endif
static INLINE void _odujat_core_reg_CHAN_CFG_1_array_field_set( LOG_CALLER_DEFN
                                                                odujat_core_buffer_t *b,
                                                                coreotn_handle_t *h,
                                                                UINT32 A,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "odujat_core_reg_CHAN_CFG_1_array_field_set", A, N, mask, ofs, value );
    odujat_core_field_set( b,
                           h,
                           A,
                           MEM_TYPE_CONFIG,
                           PMC_ODUJAT_CORE_REG_CHAN_CFG_1(N),
                           mask,
                           PMC_ODUJAT_CORE_REG_CHAN_CFG_1_UNUSED_MASK,
                           ofs,
                           value);

}


#ifndef odujat_core_reg_CHAN_CFG_1_array_read
#define odujat_core_reg_CHAN_CFG_1_array_read( b, h, A, N ) \
       _odujat_core_reg_CHAN_CFG_1_array_read( LOG_CALLER b, h, A, N )
#endif
static INLINE UINT32 _odujat_core_reg_CHAN_CFG_1_array_read( LOG_CALLER_DEFN
                                                             odujat_core_buffer_t *b,
                                                             coreotn_handle_t *h,
                                                             UINT32 A,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = odujat_core_reg_read( b,
                                      h,
                                      A,
                                      MEM_TYPE_CONFIG,
                                      PMC_ODUJAT_CORE_REG_CHAN_CFG_1(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "odujat_core_reg_CHAN_CFG_1_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUJAT_CORE_REG_ERR_INT_EN
 *
 * Register: Error Interrupt Enable
 * Offset: 0x001a0004 ERR_INT_EN
 *
 * bits 0 default 0 GAIN_OVF_E
 *
 * bits 1 default 0 GAIN_UNDF_E
 */

#ifndef odujat_core_reg_ERR_INT_EN_write
#define odujat_core_reg_ERR_INT_EN_write( b, h, A, value ) \
       _odujat_core_reg_ERR_INT_EN_write( LOG_CALLER b, h, A, value )
#endif
static INLINE void _odujat_core_reg_ERR_INT_EN_write( LOG_CALLER_DEFN
                                                      odujat_core_buffer_t *b,
                                                      coreotn_handle_t *h,
                                                      UINT32 A,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "odujat_core_reg_ERR_INT_EN_write", value );
    odujat_core_reg_write( b,
                           h,
                           A,
                           MEM_TYPE_STATUS,
                           PMC_ODUJAT_CORE_REG_ERR_INT_EN,
                           value);
}


#ifndef odujat_core_reg_ERR_INT_EN_field_set
#define odujat_core_reg_ERR_INT_EN_field_set( b, h, A, mask, ofs, value ) \
       _odujat_core_reg_ERR_INT_EN_field_set( LOG_CALLER b, h, A, mask, ofs, value )
#endif
static INLINE void _odujat_core_reg_ERR_INT_EN_field_set( LOG_CALLER_DEFN
                                                          odujat_core_buffer_t *b,
                                                          coreotn_handle_t *h,
                                                          UINT32 A,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "odujat_core_reg_ERR_INT_EN_field_set", A, mask, ofs, value );
    odujat_core_field_set( b,
                           h,
                           A,
                           MEM_TYPE_STATUS,
                           PMC_ODUJAT_CORE_REG_ERR_INT_EN,
                           mask,
                           PMC_ODUJAT_CORE_REG_ERR_INT_EN_UNUSED_MASK,
                           ofs,
                           value);

}


#ifndef odujat_core_reg_ERR_INT_EN_read
#define odujat_core_reg_ERR_INT_EN_read( b, h, A ) \
       _odujat_core_reg_ERR_INT_EN_read( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _odujat_core_reg_ERR_INT_EN_read( LOG_CALLER_DEFN
                                                       odujat_core_buffer_t *b,
                                                       coreotn_handle_t *h,
                                                       UINT32 A )
{
    UINT32 reg_value;

    reg_value = odujat_core_reg_read( b,
                                      h,
                                      A,
                                      MEM_TYPE_STATUS,
                                      PMC_ODUJAT_CORE_REG_ERR_INT_EN);

    IOLOG( "%s -> 0x%08x; A=%d", "odujat_core_reg_ERR_INT_EN_read", reg_value, A);
    return reg_value;
}

/**
 * accessor functions for register PMC_ODUJAT_CORE_REG_ERR_INTS
 *
 * Register: Error Interrupts
 * Offset: 0x001a0008 ERR_INTS
 *
 * bits 0 default X GAIN_OVF_I
 * attribute: int_edge=rising
 * attribute: clk=sys_clk
 *
 * bits 1 default X GAIN_UNDF_I
 * attribute: int_edge=rising
 * attribute: clk=sys_clk
 */

#ifndef odujat_core_reg_ERR_INTS_write
#define odujat_core_reg_ERR_INTS_write( b, h, A, value ) \
       _odujat_core_reg_ERR_INTS_write( LOG_CALLER b, h, A, value )
#endif
static INLINE void _odujat_core_reg_ERR_INTS_write( LOG_CALLER_DEFN
                                                    odujat_core_buffer_t *b,
                                                    coreotn_handle_t *h,
                                                    UINT32 A,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "odujat_core_reg_ERR_INTS_write", value );
    odujat_core_reg_write( b,
                           h,
                           A,
                           MEM_TYPE_STATUS,
                           PMC_ODUJAT_CORE_REG_ERR_INTS,
                           value);
}


#ifndef odujat_core_reg_ERR_INTS_action_on_write_field_set
#define odujat_core_reg_ERR_INTS_action_on_write_field_set( b, h, A, mask, ofs, value ) \
       _odujat_core_reg_ERR_INTS_action_on_write_field_set( LOG_CALLER b, h, A, mask, ofs, value )
#endif
static INLINE void _odujat_core_reg_ERR_INTS_action_on_write_field_set( LOG_CALLER_DEFN
                                                                        odujat_core_buffer_t *b,
                                                                        coreotn_handle_t *h,
                                                                        UINT32 A,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "odujat_core_reg_ERR_INTS_action_on_write_field_set", A, mask, ofs, value );
    odujat_core_action_on_write_field_set( b,
                                           h,
                                           A,
                                           MEM_TYPE_STATUS,
                                           PMC_ODUJAT_CORE_REG_ERR_INTS,
                                           mask,
                                           ofs,
                                           value);

}


#ifndef odujat_core_reg_ERR_INTS_read
#define odujat_core_reg_ERR_INTS_read( b, h, A ) \
       _odujat_core_reg_ERR_INTS_read( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _odujat_core_reg_ERR_INTS_read( LOG_CALLER_DEFN
                                                     odujat_core_buffer_t *b,
                                                     coreotn_handle_t *h,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = odujat_core_reg_read( b,
                                      h,
                                      A,
                                      MEM_TYPE_STATUS,
                                      PMC_ODUJAT_CORE_REG_ERR_INTS);

    IOLOG( "%s -> 0x%08x; A=%d", "odujat_core_reg_ERR_INTS_read", reg_value, A);
    return reg_value;
}

#ifndef odujat_core_reg_ERR_INTS_poll_bit
#define odujat_core_reg_ERR_INTS_poll_bit( b, h, A, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _odujat_core_reg_ERR_INTS_poll_bit( LOG_CALLER b, h, A, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _odujat_core_reg_ERR_INTS_poll_bit( LOG_CALLER_DEFN
                                                            odujat_core_buffer_t *b,
                                                            coreotn_handle_t *h,
                                                            UINT32 A,
                                                            UINT32 mask,
                                                            UINT32 value,
                                                            UINT32 max_count,
                                                            UINT32 *num_failed_polls,
                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "odujat_core_reg_ERR_INTS_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return odujat_core_poll_bit( b,
                                 h,
                                 A,
                                 MEM_TYPE_STATUS,
                                 PMC_ODUJAT_CORE_REG_ERR_INTS,
                                 mask,
                                 value,
                                 max_count,
                                 num_failed_polls,
                                 delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_ODUJAT_CORE_REG_ERR_CHAN
 *
 * Register: Errored Channel
 * Offset: 0x001a000c ERR_CHAN
 *
 * bits 6:0 default XXXXXXX GAIN_ERR_CHAN
 */

#ifndef odujat_core_reg_ERR_CHAN_read
#define odujat_core_reg_ERR_CHAN_read( b, h, A ) \
       _odujat_core_reg_ERR_CHAN_read( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _odujat_core_reg_ERR_CHAN_read( LOG_CALLER_DEFN
                                                     odujat_core_buffer_t *b,
                                                     coreotn_handle_t *h,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = odujat_core_reg_read( b,
                                      h,
                                      A,
                                      MEM_TYPE_STATUS,
                                      PMC_ODUJAT_CORE_REG_ERR_CHAN);

    IOLOG( "%s -> 0x%08x; A=%d", "odujat_core_reg_ERR_CHAN_read", reg_value, A);
    return reg_value;
}

/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset config
 * ==================================================================================
 */

#ifndef odujat_core_field_RAM_LS_set
#define odujat_core_field_RAM_LS_set( b, h, A, value ) \
       _odujat_core_field_RAM_LS_set( LOG_CALLER b, h, A, value )
#endif
static INLINE void _odujat_core_field_RAM_LS_set( LOG_CALLER_DEFN
                                                  odujat_core_buffer_t *b,
                                                  coreotn_handle_t *h,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_RAM_LS_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "odujat_core_field_RAM_LS_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "odujat_core_field_RAM_LS_set", A, value );

    /* (0x001a0000 bits 9) field RAM_LS of register PMC_ODUJAT_CORE_REG_CFG */
    _odujat_core_reg_CFG_field_set( LOG_CALLER_ARGS
                                    b,
                                    h,
                                    A,
                                    ODUJAT_CORE_REG_CFG_BIT_RAM_LS_MSK,
                                    ODUJAT_CORE_REG_CFG_BIT_RAM_LS_OFF,
                                    value);
}


#ifndef odujat_core_field_RAM_LS_get
#define odujat_core_field_RAM_LS_get( b, h, A ) \
       _odujat_core_field_RAM_LS_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _odujat_core_field_RAM_LS_get( LOG_CALLER_DEFN
                                                    odujat_core_buffer_t *b,
                                                    coreotn_handle_t *h,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_RAM_LS_get", A, 1);
    /* (0x001a0000 bits 9) field RAM_LS of register PMC_ODUJAT_CORE_REG_CFG */
    reg_value = _odujat_core_reg_CFG_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & ODUJAT_CORE_REG_CFG_BIT_RAM_LS_MSK) >> ODUJAT_CORE_REG_CFG_BIT_RAM_LS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "odujat_core_field_RAM_LS_get", A, value );

    return value;
}

#ifndef odujat_core_field_PG_OVERRIDE_set
#define odujat_core_field_PG_OVERRIDE_set( b, h, A, value ) \
       _odujat_core_field_PG_OVERRIDE_set( LOG_CALLER b, h, A, value )
#endif
static INLINE void _odujat_core_field_PG_OVERRIDE_set( LOG_CALLER_DEFN
                                                       odujat_core_buffer_t *b,
                                                       coreotn_handle_t *h,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_PG_OVERRIDE_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "odujat_core_field_PG_OVERRIDE_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "odujat_core_field_PG_OVERRIDE_set", A, value );

    /* (0x001a0000 bits 8) field PG_OVERRIDE of register PMC_ODUJAT_CORE_REG_CFG */
    _odujat_core_reg_CFG_field_set( LOG_CALLER_ARGS
                                    b,
                                    h,
                                    A,
                                    ODUJAT_CORE_REG_CFG_BIT_PG_OVERRIDE_MSK,
                                    ODUJAT_CORE_REG_CFG_BIT_PG_OVERRIDE_OFF,
                                    value);
}


#ifndef odujat_core_field_PG_OVERRIDE_get
#define odujat_core_field_PG_OVERRIDE_get( b, h, A ) \
       _odujat_core_field_PG_OVERRIDE_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _odujat_core_field_PG_OVERRIDE_get( LOG_CALLER_DEFN
                                                         odujat_core_buffer_t *b,
                                                         coreotn_handle_t *h,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_PG_OVERRIDE_get", A, 1);
    /* (0x001a0000 bits 8) field PG_OVERRIDE of register PMC_ODUJAT_CORE_REG_CFG */
    reg_value = _odujat_core_reg_CFG_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & ODUJAT_CORE_REG_CFG_BIT_PG_OVERRIDE_MSK) >> ODUJAT_CORE_REG_CFG_BIT_PG_OVERRIDE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "odujat_core_field_PG_OVERRIDE_get", A, value );

    return value;
}

/*
 * ==================================================================================
 *             Parameter Access Functions for Paramset config_N_size96
 * ==================================================================================
 */

#ifndef odujat_core_field_JAT_ENABLE_set
#define odujat_core_field_JAT_ENABLE_set( b, h, A, N, value ) \
       _odujat_core_field_JAT_ENABLE_set( LOG_CALLER b, h, A, N, value )
#endif
static INLINE void _odujat_core_field_JAT_ENABLE_set( LOG_CALLER_DEFN
                                                      odujat_core_buffer_t *b,
                                                      coreotn_handle_t *h,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_JAT_ENABLE_set", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_JAT_ENABLE_set", N, 95);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "odujat_core_field_JAT_ENABLE_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "odujat_core_field_JAT_ENABLE_set", A, N, value );

    /* ((0x001a0100 + (N) * 0x8) bits 17) field JAT_ENABLE of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    _odujat_core_reg_CHAN_CFG_0_array_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 A,
                                                 N,
                                                 ODUJAT_CORE_REG_CHAN_CFG_0_BIT_JAT_ENABLE_MSK,
                                                 ODUJAT_CORE_REG_CHAN_CFG_0_BIT_JAT_ENABLE_OFF,
                                                 value);
}


#ifndef odujat_core_field_JAT_ENABLE_get
#define odujat_core_field_JAT_ENABLE_get( b, h, A, N ) \
       _odujat_core_field_JAT_ENABLE_get( LOG_CALLER b, h, A, N )
#endif
static INLINE UINT32 _odujat_core_field_JAT_ENABLE_get( LOG_CALLER_DEFN
                                                        odujat_core_buffer_t *b,
                                                        coreotn_handle_t *h,
                                                        UINT32 A,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_JAT_ENABLE_get", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_JAT_ENABLE_get", N, 95);
    /* ((0x001a0100 + (N) * 0x8) bits 17) field JAT_ENABLE of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    reg_value = _odujat_core_reg_CHAN_CFG_0_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        A,
                                                        N);
    value = (reg_value & ODUJAT_CORE_REG_CHAN_CFG_0_BIT_JAT_ENABLE_MSK) >> ODUJAT_CORE_REG_CHAN_CFG_0_BIT_JAT_ENABLE_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "odujat_core_field_JAT_ENABLE_get", A, N, value );

    return value;
}

#ifndef odujat_core_field_ADD_CND_set
#define odujat_core_field_ADD_CND_set( b, h, A, N, value ) \
       _odujat_core_field_ADD_CND_set( LOG_CALLER b, h, A, N, value )
#endif
static INLINE void _odujat_core_field_ADD_CND_set( LOG_CALLER_DEFN
                                                   odujat_core_buffer_t *b,
                                                   coreotn_handle_t *h,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_ADD_CND_set", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_ADD_CND_set", N, 95);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "odujat_core_field_ADD_CND_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "odujat_core_field_ADD_CND_set", A, N, value );

    /* ((0x001a0100 + (N) * 0x8) bits 16) field ADD_CND of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    _odujat_core_reg_CHAN_CFG_0_array_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 A,
                                                 N,
                                                 ODUJAT_CORE_REG_CHAN_CFG_0_BIT_ADD_CND_MSK,
                                                 ODUJAT_CORE_REG_CHAN_CFG_0_BIT_ADD_CND_OFF,
                                                 value);
}


#ifndef odujat_core_field_ADD_CND_get
#define odujat_core_field_ADD_CND_get( b, h, A, N ) \
       _odujat_core_field_ADD_CND_get( LOG_CALLER b, h, A, N )
#endif
static INLINE UINT32 _odujat_core_field_ADD_CND_get( LOG_CALLER_DEFN
                                                     odujat_core_buffer_t *b,
                                                     coreotn_handle_t *h,
                                                     UINT32 A,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_ADD_CND_get", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_ADD_CND_get", N, 95);
    /* ((0x001a0100 + (N) * 0x8) bits 16) field ADD_CND of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    reg_value = _odujat_core_reg_CHAN_CFG_0_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        A,
                                                        N);
    value = (reg_value & ODUJAT_CORE_REG_CHAN_CFG_0_BIT_ADD_CND_MSK) >> ODUJAT_CORE_REG_CHAN_CFG_0_BIT_ADD_CND_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "odujat_core_field_ADD_CND_get", A, N, value );

    return value;
}

#ifndef odujat_core_field_LOOP_ALPHA_SELECT_set
#define odujat_core_field_LOOP_ALPHA_SELECT_set( b, h, A, N, value ) \
       _odujat_core_field_LOOP_ALPHA_SELECT_set( LOG_CALLER b, h, A, N, value )
#endif
static INLINE void _odujat_core_field_LOOP_ALPHA_SELECT_set( LOG_CALLER_DEFN
                                                             odujat_core_buffer_t *b,
                                                             coreotn_handle_t *h,
                                                             UINT32 A,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_LOOP_ALPHA_SELECT_set", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_LOOP_ALPHA_SELECT_set", N, 95);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "odujat_core_field_LOOP_ALPHA_SELECT_set", value, 15);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "odujat_core_field_LOOP_ALPHA_SELECT_set", A, N, value );

    /* ((0x001a0100 + (N) * 0x8) bits 11:8) bits 0:3 use field LOOP_ALPHA_SELECT of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    _odujat_core_reg_CHAN_CFG_0_array_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 A,
                                                 N,
                                                 ODUJAT_CORE_REG_CHAN_CFG_0_BIT_LOOP_ALPHA_SELECT_MSK,
                                                 ODUJAT_CORE_REG_CHAN_CFG_0_BIT_LOOP_ALPHA_SELECT_OFF,
                                                 (value & 0xf));
}


#ifndef odujat_core_field_LOOP_ALPHA_SELECT_get
#define odujat_core_field_LOOP_ALPHA_SELECT_get( b, h, A, N ) \
       _odujat_core_field_LOOP_ALPHA_SELECT_get( LOG_CALLER b, h, A, N )
#endif
static INLINE UINT32 _odujat_core_field_LOOP_ALPHA_SELECT_get( LOG_CALLER_DEFN
                                                               odujat_core_buffer_t *b,
                                                               coreotn_handle_t *h,
                                                               UINT32 A,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_LOOP_ALPHA_SELECT_get", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_LOOP_ALPHA_SELECT_get", N, 95);
    /* ((0x001a0100 + (N) * 0x8) bits 11:8) bits 0:3 use field LOOP_ALPHA_SELECT of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    reg_value = _odujat_core_reg_CHAN_CFG_0_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        A,
                                                        N);
    value = (reg_value & ODUJAT_CORE_REG_CHAN_CFG_0_BIT_LOOP_ALPHA_SELECT_MSK) >> ODUJAT_CORE_REG_CHAN_CFG_0_BIT_LOOP_ALPHA_SELECT_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "odujat_core_field_LOOP_ALPHA_SELECT_get", A, N, value );

    return value;
}

#ifndef odujat_core_field_range_LOOP_ALPHA_SELECT_set
#define odujat_core_field_range_LOOP_ALPHA_SELECT_set( b, h, A, N, start_bit, stop_bit, value ) \
       _odujat_core_field_range_LOOP_ALPHA_SELECT_set( LOG_CALLER b, h, A, N, start_bit, stop_bit, value )
#endif
static INLINE void _odujat_core_field_range_LOOP_ALPHA_SELECT_set( LOG_CALLER_DEFN
                                                                   odujat_core_buffer_t *b,
                                                                   coreotn_handle_t *h,
                                                                   UINT32 A,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_range_LOOP_ALPHA_SELECT_set", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_range_LOOP_ALPHA_SELECT_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "odujat_core_field_range_LOOP_ALPHA_SELECT_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "odujat_core_field_range_LOOP_ALPHA_SELECT_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "odujat_core_field_range_LOOP_ALPHA_SELECT_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x001a0100 + (N) * 0x8) bits 11:8) bits 0:3 use field LOOP_ALPHA_SELECT of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x001a0100 + (N) * 0x8) bits 11:8) bits 0:3 use field LOOP_ALPHA_SELECT of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
        _odujat_core_reg_CHAN_CFG_0_array_field_set( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     A,
                                                     N,
                                                     subfield_mask << (ODUJAT_CORE_REG_CHAN_CFG_0_BIT_LOOP_ALPHA_SELECT_OFF + subfield_offset),
                                                     ODUJAT_CORE_REG_CHAN_CFG_0_BIT_LOOP_ALPHA_SELECT_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}


#ifndef odujat_core_field_range_LOOP_ALPHA_SELECT_get
#define odujat_core_field_range_LOOP_ALPHA_SELECT_get( b, h, A, N, start_bit, stop_bit ) \
       _odujat_core_field_range_LOOP_ALPHA_SELECT_get( LOG_CALLER b, h, A, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _odujat_core_field_range_LOOP_ALPHA_SELECT_get( LOG_CALLER_DEFN
                                                                     odujat_core_buffer_t *b,
                                                                     coreotn_handle_t *h,
                                                                     UINT32 A,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_range_LOOP_ALPHA_SELECT_get", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_range_LOOP_ALPHA_SELECT_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "odujat_core_field_range_LOOP_ALPHA_SELECT_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "odujat_core_field_range_LOOP_ALPHA_SELECT_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x001a0100 + (N) * 0x8) bits 11:8) bits 0:3 use field LOOP_ALPHA_SELECT of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    reg_value = _odujat_core_reg_CHAN_CFG_0_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        A,
                                                        N);
    field_value = (reg_value & ODUJAT_CORE_REG_CHAN_CFG_0_BIT_LOOP_ALPHA_SELECT_MSK)
                  >> ODUJAT_CORE_REG_CHAN_CFG_0_BIT_LOOP_ALPHA_SELECT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUJAT_CORE_REG_CHAN_CFG_0_BIT_LOOP_ALPHA_SELECT_MSK, ODUJAT_CORE_REG_CHAN_CFG_0_BIT_LOOP_ALPHA_SELECT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "odujat_core_field_range_LOOP_ALPHA_SELECT_get", A, N, start_bit, stop_bit, value );

    return value;
}

#ifndef odujat_core_field_CONV_GAIN_SELECT_set
#define odujat_core_field_CONV_GAIN_SELECT_set( b, h, A, N, value ) \
       _odujat_core_field_CONV_GAIN_SELECT_set( LOG_CALLER b, h, A, N, value )
#endif
static INLINE void _odujat_core_field_CONV_GAIN_SELECT_set( LOG_CALLER_DEFN
                                                            odujat_core_buffer_t *b,
                                                            coreotn_handle_t *h,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_CONV_GAIN_SELECT_set", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_CONV_GAIN_SELECT_set", N, 95);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "odujat_core_field_CONV_GAIN_SELECT_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "odujat_core_field_CONV_GAIN_SELECT_set", A, N, value );

    /* ((0x001a0100 + (N) * 0x8) bits 4:0) bits 0:4 use field CONV_GAIN_SELECT of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    _odujat_core_reg_CHAN_CFG_0_array_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 A,
                                                 N,
                                                 ODUJAT_CORE_REG_CHAN_CFG_0_BIT_CONV_GAIN_SELECT_MSK,
                                                 ODUJAT_CORE_REG_CHAN_CFG_0_BIT_CONV_GAIN_SELECT_OFF,
                                                 (value & 0x1f));
}


#ifndef odujat_core_field_CONV_GAIN_SELECT_get
#define odujat_core_field_CONV_GAIN_SELECT_get( b, h, A, N ) \
       _odujat_core_field_CONV_GAIN_SELECT_get( LOG_CALLER b, h, A, N )
#endif
static INLINE UINT32 _odujat_core_field_CONV_GAIN_SELECT_get( LOG_CALLER_DEFN
                                                              odujat_core_buffer_t *b,
                                                              coreotn_handle_t *h,
                                                              UINT32 A,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_CONV_GAIN_SELECT_get", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_CONV_GAIN_SELECT_get", N, 95);
    /* ((0x001a0100 + (N) * 0x8) bits 4:0) bits 0:4 use field CONV_GAIN_SELECT of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    reg_value = _odujat_core_reg_CHAN_CFG_0_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        A,
                                                        N);
    value = (reg_value & ODUJAT_CORE_REG_CHAN_CFG_0_BIT_CONV_GAIN_SELECT_MSK) >> ODUJAT_CORE_REG_CHAN_CFG_0_BIT_CONV_GAIN_SELECT_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "odujat_core_field_CONV_GAIN_SELECT_get", A, N, value );

    return value;
}

#ifndef odujat_core_field_range_CONV_GAIN_SELECT_set
#define odujat_core_field_range_CONV_GAIN_SELECT_set( b, h, A, N, start_bit, stop_bit, value ) \
       _odujat_core_field_range_CONV_GAIN_SELECT_set( LOG_CALLER b, h, A, N, start_bit, stop_bit, value )
#endif
static INLINE void _odujat_core_field_range_CONV_GAIN_SELECT_set( LOG_CALLER_DEFN
                                                                  odujat_core_buffer_t *b,
                                                                  coreotn_handle_t *h,
                                                                  UINT32 A,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_range_CONV_GAIN_SELECT_set", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_range_CONV_GAIN_SELECT_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "odujat_core_field_range_CONV_GAIN_SELECT_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "odujat_core_field_range_CONV_GAIN_SELECT_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "odujat_core_field_range_CONV_GAIN_SELECT_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x001a0100 + (N) * 0x8) bits 4:0) bits 0:4 use field CONV_GAIN_SELECT of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x001a0100 + (N) * 0x8) bits 4:0) bits 0:4 use field CONV_GAIN_SELECT of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
        _odujat_core_reg_CHAN_CFG_0_array_field_set( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     A,
                                                     N,
                                                     subfield_mask << (ODUJAT_CORE_REG_CHAN_CFG_0_BIT_CONV_GAIN_SELECT_OFF + subfield_offset),
                                                     ODUJAT_CORE_REG_CHAN_CFG_0_BIT_CONV_GAIN_SELECT_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}


#ifndef odujat_core_field_range_CONV_GAIN_SELECT_get
#define odujat_core_field_range_CONV_GAIN_SELECT_get( b, h, A, N, start_bit, stop_bit ) \
       _odujat_core_field_range_CONV_GAIN_SELECT_get( LOG_CALLER b, h, A, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _odujat_core_field_range_CONV_GAIN_SELECT_get( LOG_CALLER_DEFN
                                                                    odujat_core_buffer_t *b,
                                                                    coreotn_handle_t *h,
                                                                    UINT32 A,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_range_CONV_GAIN_SELECT_get", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_range_CONV_GAIN_SELECT_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "odujat_core_field_range_CONV_GAIN_SELECT_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "odujat_core_field_range_CONV_GAIN_SELECT_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x001a0100 + (N) * 0x8) bits 4:0) bits 0:4 use field CONV_GAIN_SELECT of register PMC_ODUJAT_CORE_REG_CHAN_CFG_0 index N=0..95 */
    reg_value = _odujat_core_reg_CHAN_CFG_0_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        A,
                                                        N);
    field_value = (reg_value & ODUJAT_CORE_REG_CHAN_CFG_0_BIT_CONV_GAIN_SELECT_MSK)
                  >> ODUJAT_CORE_REG_CHAN_CFG_0_BIT_CONV_GAIN_SELECT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUJAT_CORE_REG_CHAN_CFG_0_BIT_CONV_GAIN_SELECT_MSK, ODUJAT_CORE_REG_CHAN_CFG_0_BIT_CONV_GAIN_SELECT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "odujat_core_field_range_CONV_GAIN_SELECT_get", A, N, start_bit, stop_bit, value );

    return value;
}

#ifndef odujat_core_field_MC_NUMERATOR_set
#define odujat_core_field_MC_NUMERATOR_set( b, h, A, N, value ) \
       _odujat_core_field_MC_NUMERATOR_set( LOG_CALLER b, h, A, N, value )
#endif
static INLINE void _odujat_core_field_MC_NUMERATOR_set( LOG_CALLER_DEFN
                                                        odujat_core_buffer_t *b,
                                                        coreotn_handle_t *h,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_MC_NUMERATOR_set", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_MC_NUMERATOR_set", N, 95);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "odujat_core_field_MC_NUMERATOR_set", value, 67108863);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "odujat_core_field_MC_NUMERATOR_set", A, N, value );

    /* ((0x001a0104 + (N) * 0x8) bits 25:0) bits 0:25 use field MC_NUMERATOR of register PMC_ODUJAT_CORE_REG_CHAN_CFG_1 index N=0..95 */
    _odujat_core_reg_CHAN_CFG_1_array_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 A,
                                                 N,
                                                 ODUJAT_CORE_REG_CHAN_CFG_1_BIT_MC_NUMERATOR_MSK,
                                                 ODUJAT_CORE_REG_CHAN_CFG_1_BIT_MC_NUMERATOR_OFF,
                                                 (value & 0x3ffffff));
}


#ifndef odujat_core_field_MC_NUMERATOR_get
#define odujat_core_field_MC_NUMERATOR_get( b, h, A, N ) \
       _odujat_core_field_MC_NUMERATOR_get( LOG_CALLER b, h, A, N )
#endif
static INLINE UINT32 _odujat_core_field_MC_NUMERATOR_get( LOG_CALLER_DEFN
                                                          odujat_core_buffer_t *b,
                                                          coreotn_handle_t *h,
                                                          UINT32 A,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_MC_NUMERATOR_get", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_MC_NUMERATOR_get", N, 95);
    /* ((0x001a0104 + (N) * 0x8) bits 25:0) bits 0:25 use field MC_NUMERATOR of register PMC_ODUJAT_CORE_REG_CHAN_CFG_1 index N=0..95 */
    reg_value = _odujat_core_reg_CHAN_CFG_1_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        A,
                                                        N);
    value = (reg_value & ODUJAT_CORE_REG_CHAN_CFG_1_BIT_MC_NUMERATOR_MSK) >> ODUJAT_CORE_REG_CHAN_CFG_1_BIT_MC_NUMERATOR_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "odujat_core_field_MC_NUMERATOR_get", A, N, value );

    return value;
}

#ifndef odujat_core_field_range_MC_NUMERATOR_set
#define odujat_core_field_range_MC_NUMERATOR_set( b, h, A, N, start_bit, stop_bit, value ) \
       _odujat_core_field_range_MC_NUMERATOR_set( LOG_CALLER b, h, A, N, start_bit, stop_bit, value )
#endif
static INLINE void _odujat_core_field_range_MC_NUMERATOR_set( LOG_CALLER_DEFN
                                                              odujat_core_buffer_t *b,
                                                              coreotn_handle_t *h,
                                                              UINT32 A,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_range_MC_NUMERATOR_set", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_range_MC_NUMERATOR_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "odujat_core_field_range_MC_NUMERATOR_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "odujat_core_field_range_MC_NUMERATOR_set", stop_bit, 25 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "odujat_core_field_range_MC_NUMERATOR_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x001a0104 + (N) * 0x8) bits 25:0) bits 0:25 use field MC_NUMERATOR of register PMC_ODUJAT_CORE_REG_CHAN_CFG_1 index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x001a0104 + (N) * 0x8) bits 25:0) bits 0:25 use field MC_NUMERATOR of register PMC_ODUJAT_CORE_REG_CHAN_CFG_1 index N=0..95 */
        _odujat_core_reg_CHAN_CFG_1_array_field_set( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     A,
                                                     N,
                                                     subfield_mask << (ODUJAT_CORE_REG_CHAN_CFG_1_BIT_MC_NUMERATOR_OFF + subfield_offset),
                                                     ODUJAT_CORE_REG_CHAN_CFG_1_BIT_MC_NUMERATOR_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}


#ifndef odujat_core_field_range_MC_NUMERATOR_get
#define odujat_core_field_range_MC_NUMERATOR_get( b, h, A, N, start_bit, stop_bit ) \
       _odujat_core_field_range_MC_NUMERATOR_get( LOG_CALLER b, h, A, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _odujat_core_field_range_MC_NUMERATOR_get( LOG_CALLER_DEFN
                                                                odujat_core_buffer_t *b,
                                                                coreotn_handle_t *h,
                                                                UINT32 A,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_range_MC_NUMERATOR_get", A, 1);
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "odujat_core_field_range_MC_NUMERATOR_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "odujat_core_field_range_MC_NUMERATOR_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "odujat_core_field_range_MC_NUMERATOR_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x001a0104 + (N) * 0x8) bits 25:0) bits 0:25 use field MC_NUMERATOR of register PMC_ODUJAT_CORE_REG_CHAN_CFG_1 index N=0..95 */
    reg_value = _odujat_core_reg_CHAN_CFG_1_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        A,
                                                        N);
    field_value = (reg_value & ODUJAT_CORE_REG_CHAN_CFG_1_BIT_MC_NUMERATOR_MSK)
                  >> ODUJAT_CORE_REG_CHAN_CFG_1_BIT_MC_NUMERATOR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUJAT_CORE_REG_CHAN_CFG_1_BIT_MC_NUMERATOR_MSK, ODUJAT_CORE_REG_CHAN_CFG_1_BIT_MC_NUMERATOR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "odujat_core_field_range_MC_NUMERATOR_get", A, N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *                Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */

#ifndef odujat_core_field_GAIN_OVF_E_set
#define odujat_core_field_GAIN_OVF_E_set( b, h, A, value ) \
       _odujat_core_field_GAIN_OVF_E_set( LOG_CALLER b, h, A, value )
#endif
static INLINE void _odujat_core_field_GAIN_OVF_E_set( LOG_CALLER_DEFN
                                                      odujat_core_buffer_t *b,
                                                      coreotn_handle_t *h,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_GAIN_OVF_E_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "odujat_core_field_GAIN_OVF_E_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "odujat_core_field_GAIN_OVF_E_set", A, value );

    /* (0x001a0004 bits 0) field GAIN_OVF_E of register PMC_ODUJAT_CORE_REG_ERR_INT_EN */
    _odujat_core_reg_ERR_INT_EN_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           A,
                                           ODUJAT_CORE_REG_ERR_INT_EN_BIT_GAIN_OVF_E_MSK,
                                           ODUJAT_CORE_REG_ERR_INT_EN_BIT_GAIN_OVF_E_OFF,
                                           value);
}


#ifndef odujat_core_field_GAIN_OVF_E_get
#define odujat_core_field_GAIN_OVF_E_get( b, h, A ) \
       _odujat_core_field_GAIN_OVF_E_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _odujat_core_field_GAIN_OVF_E_get( LOG_CALLER_DEFN
                                                        odujat_core_buffer_t *b,
                                                        coreotn_handle_t *h,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_GAIN_OVF_E_get", A, 1);
    /* (0x001a0004 bits 0) field GAIN_OVF_E of register PMC_ODUJAT_CORE_REG_ERR_INT_EN */
    reg_value = _odujat_core_reg_ERR_INT_EN_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & ODUJAT_CORE_REG_ERR_INT_EN_BIT_GAIN_OVF_E_MSK) >> ODUJAT_CORE_REG_ERR_INT_EN_BIT_GAIN_OVF_E_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "odujat_core_field_GAIN_OVF_E_get", A, value );

    return value;
}

#ifndef odujat_core_field_GAIN_UNDF_E_set
#define odujat_core_field_GAIN_UNDF_E_set( b, h, A, value ) \
       _odujat_core_field_GAIN_UNDF_E_set( LOG_CALLER b, h, A, value )
#endif
static INLINE void _odujat_core_field_GAIN_UNDF_E_set( LOG_CALLER_DEFN
                                                       odujat_core_buffer_t *b,
                                                       coreotn_handle_t *h,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_GAIN_UNDF_E_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "odujat_core_field_GAIN_UNDF_E_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "odujat_core_field_GAIN_UNDF_E_set", A, value );

    /* (0x001a0004 bits 1) field GAIN_UNDF_E of register PMC_ODUJAT_CORE_REG_ERR_INT_EN */
    _odujat_core_reg_ERR_INT_EN_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           A,
                                           ODUJAT_CORE_REG_ERR_INT_EN_BIT_GAIN_UNDF_E_MSK,
                                           ODUJAT_CORE_REG_ERR_INT_EN_BIT_GAIN_UNDF_E_OFF,
                                           value);
}


#ifndef odujat_core_field_GAIN_UNDF_E_get
#define odujat_core_field_GAIN_UNDF_E_get( b, h, A ) \
       _odujat_core_field_GAIN_UNDF_E_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _odujat_core_field_GAIN_UNDF_E_get( LOG_CALLER_DEFN
                                                         odujat_core_buffer_t *b,
                                                         coreotn_handle_t *h,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_GAIN_UNDF_E_get", A, 1);
    /* (0x001a0004 bits 1) field GAIN_UNDF_E of register PMC_ODUJAT_CORE_REG_ERR_INT_EN */
    reg_value = _odujat_core_reg_ERR_INT_EN_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & ODUJAT_CORE_REG_ERR_INT_EN_BIT_GAIN_UNDF_E_MSK) >> ODUJAT_CORE_REG_ERR_INT_EN_BIT_GAIN_UNDF_E_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "odujat_core_field_GAIN_UNDF_E_get", A, value );

    return value;
}

/*
 * ==================================================================================
 *                 Parameter Access Functions for Paramset int_sync
 * ==================================================================================
 */

#ifndef odujat_core_field_GAIN_OVF_I_set_to_clear
#define odujat_core_field_GAIN_OVF_I_set_to_clear( b, h, A, value ) \
       _odujat_core_field_GAIN_OVF_I_set_to_clear( LOG_CALLER b, h, A, value )
#endif
static INLINE void _odujat_core_field_GAIN_OVF_I_set_to_clear( LOG_CALLER_DEFN
                                                               odujat_core_buffer_t *b,
                                                               coreotn_handle_t *h,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_GAIN_OVF_I_set_to_clear", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "odujat_core_field_GAIN_OVF_I_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "odujat_core_field_GAIN_OVF_I_set_to_clear", A, value );

    /* (0x001a0008 bits 0) field GAIN_OVF_I of register PMC_ODUJAT_CORE_REG_ERR_INTS */
    _odujat_core_reg_ERR_INTS_action_on_write_field_set( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         A,
                                                         ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_OVF_I_MSK,
                                                         ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_OVF_I_OFF,
                                                         value);
}


#ifndef odujat_core_field_GAIN_OVF_I_get
#define odujat_core_field_GAIN_OVF_I_get( b, h, A ) \
       _odujat_core_field_GAIN_OVF_I_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _odujat_core_field_GAIN_OVF_I_get( LOG_CALLER_DEFN
                                                        odujat_core_buffer_t *b,
                                                        coreotn_handle_t *h,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_GAIN_OVF_I_get", A, 1);
    /* (0x001a0008 bits 0) field GAIN_OVF_I of register PMC_ODUJAT_CORE_REG_ERR_INTS */
    reg_value = _odujat_core_reg_ERR_INTS_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_OVF_I_MSK) >> ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_OVF_I_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "odujat_core_field_GAIN_OVF_I_get", A, value );

    return value;
}

#ifndef odujat_core_field_GAIN_OVF_I_poll_bit
#define odujat_core_field_GAIN_OVF_I_poll_bit( b, h, A, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _odujat_core_field_GAIN_OVF_I_poll_bit( LOG_CALLER b, h, A, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _odujat_core_field_GAIN_OVF_I_poll_bit( LOG_CALLER_DEFN
                                                                odujat_core_buffer_t *b,
                                                                coreotn_handle_t *h,
                                                                UINT32 A,
                                                                UINT32 value,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "odujat_core_field_GAIN_OVF_I_poll_bit", A, value );

    /* (0x001a0008 bits 0) field GAIN_OVF_I of register PMC_ODUJAT_CORE_REG_ERR_INTS */
    return _odujat_core_reg_ERR_INTS_poll_bit( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               A,
                                               ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_OVF_I_MSK,
                                               (value<<ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_OVF_I_OFF),
                                               max_count,
                                               num_failed_polls,
                                               delay_between_polls_in_microseconds);
}


#ifndef odujat_core_field_GAIN_UNDF_I_set_to_clear
#define odujat_core_field_GAIN_UNDF_I_set_to_clear( b, h, A, value ) \
       _odujat_core_field_GAIN_UNDF_I_set_to_clear( LOG_CALLER b, h, A, value )
#endif
static INLINE void _odujat_core_field_GAIN_UNDF_I_set_to_clear( LOG_CALLER_DEFN
                                                                odujat_core_buffer_t *b,
                                                                coreotn_handle_t *h,
                                                                UINT32 A,
                                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_GAIN_UNDF_I_set_to_clear", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "odujat_core_field_GAIN_UNDF_I_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "odujat_core_field_GAIN_UNDF_I_set_to_clear", A, value );

    /* (0x001a0008 bits 1) field GAIN_UNDF_I of register PMC_ODUJAT_CORE_REG_ERR_INTS */
    _odujat_core_reg_ERR_INTS_action_on_write_field_set( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         A,
                                                         ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_UNDF_I_MSK,
                                                         ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_UNDF_I_OFF,
                                                         value);
}


#ifndef odujat_core_field_GAIN_UNDF_I_get
#define odujat_core_field_GAIN_UNDF_I_get( b, h, A ) \
       _odujat_core_field_GAIN_UNDF_I_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _odujat_core_field_GAIN_UNDF_I_get( LOG_CALLER_DEFN
                                                         odujat_core_buffer_t *b,
                                                         coreotn_handle_t *h,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_GAIN_UNDF_I_get", A, 1);
    /* (0x001a0008 bits 1) field GAIN_UNDF_I of register PMC_ODUJAT_CORE_REG_ERR_INTS */
    reg_value = _odujat_core_reg_ERR_INTS_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_UNDF_I_MSK) >> ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_UNDF_I_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "odujat_core_field_GAIN_UNDF_I_get", A, value );

    return value;
}

#ifndef odujat_core_field_GAIN_UNDF_I_poll_bit
#define odujat_core_field_GAIN_UNDF_I_poll_bit( b, h, A, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _odujat_core_field_GAIN_UNDF_I_poll_bit( LOG_CALLER b, h, A, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _odujat_core_field_GAIN_UNDF_I_poll_bit( LOG_CALLER_DEFN
                                                                 odujat_core_buffer_t *b,
                                                                 coreotn_handle_t *h,
                                                                 UINT32 A,
                                                                 UINT32 value,
                                                                 UINT32 max_count,
                                                                 UINT32 *num_failed_polls,
                                                                 UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "odujat_core_field_GAIN_UNDF_I_poll_bit", A, value );

    /* (0x001a0008 bits 1) field GAIN_UNDF_I of register PMC_ODUJAT_CORE_REG_ERR_INTS */
    return _odujat_core_reg_ERR_INTS_poll_bit( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               A,
                                               ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_UNDF_I_MSK,
                                               (value<<ODUJAT_CORE_REG_ERR_INTS_BIT_GAIN_UNDF_I_OFF),
                                               max_count,
                                               num_failed_polls,
                                               delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset status
 * ==================================================================================
 */

#ifndef odujat_core_field_GAIN_ERR_CHAN_get
#define odujat_core_field_GAIN_ERR_CHAN_get( b, h, A ) \
       _odujat_core_field_GAIN_ERR_CHAN_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _odujat_core_field_GAIN_ERR_CHAN_get( LOG_CALLER_DEFN
                                                           odujat_core_buffer_t *b,
                                                           coreotn_handle_t *h,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_GAIN_ERR_CHAN_get", A, 1);
    /* (0x001a000c bits 6:0) field GAIN_ERR_CHAN of register PMC_ODUJAT_CORE_REG_ERR_CHAN */
    reg_value = _odujat_core_reg_ERR_CHAN_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & ODUJAT_CORE_REG_ERR_CHAN_BIT_GAIN_ERR_CHAN_MSK) >> ODUJAT_CORE_REG_ERR_CHAN_BIT_GAIN_ERR_CHAN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "odujat_core_field_GAIN_ERR_CHAN_get", A, value );

    return value;
}

#ifndef odujat_core_field_range_GAIN_ERR_CHAN_get
#define odujat_core_field_range_GAIN_ERR_CHAN_get( b, h, A, start_bit, stop_bit ) \
       _odujat_core_field_range_GAIN_ERR_CHAN_get( LOG_CALLER b, h, A, start_bit, stop_bit )
#endif
static INLINE UINT32 _odujat_core_field_range_GAIN_ERR_CHAN_get( LOG_CALLER_DEFN
                                                                 odujat_core_buffer_t *b,
                                                                 coreotn_handle_t *h,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "odujat_core_field_range_GAIN_ERR_CHAN_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "odujat_core_field_range_GAIN_ERR_CHAN_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "odujat_core_field_range_GAIN_ERR_CHAN_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x001a000c bits 6:0) field GAIN_ERR_CHAN of register PMC_ODUJAT_CORE_REG_ERR_CHAN */
    reg_value = _odujat_core_reg_ERR_CHAN_read( LOG_CALLER_ARGS b, h, A);
    field_value = (reg_value & ODUJAT_CORE_REG_ERR_CHAN_BIT_GAIN_ERR_CHAN_MSK)
                  >> ODUJAT_CORE_REG_ERR_CHAN_BIT_GAIN_ERR_CHAN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ODUJAT_CORE_REG_ERR_CHAN_BIT_GAIN_ERR_CHAN_MSK, ODUJAT_CORE_REG_ERR_CHAN_BIT_GAIN_ERR_CHAN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "odujat_core_field_range_GAIN_ERR_CHAN_get", A, start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _ODUJAT_CORE_IO_INLINE_H */
